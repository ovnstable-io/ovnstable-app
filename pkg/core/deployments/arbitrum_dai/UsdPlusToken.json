{
  "address": "0xeb8E93A0c7504Bffd8A8fFa56CD754c63aAeBFe8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchanger",
          "type": "address"
        }
      ],
      "name": "ExchangerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutManager",
          "type": "address"
        }
      ],
      "name": "PayoutManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "RoleManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebasingCredits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebasingCreditsPerToken",
          "type": "uint256"
        }
      ],
      "name": "TotalSupplyUpdatedHighres",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "changeSupply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct NonRebaseInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "creditsBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "creditsBalanceOfHighres",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonRebasingCreditsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonRebasingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ownerAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ownerBalanceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "rebaseOptIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "rebaseOptOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rebaseState",
      "outputs": [
        {
          "internalType": "enum UsdPlusToken.RebaseOptions",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasingCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasingCreditsHighres",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasingCreditsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasingCreditsPerTokenHighres",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutManager",
          "type": "address"
        }
      ],
      "name": "setPayoutManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyOwners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "4119948cb9aef218bf8a55cd453edf66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"ExchangerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutManager\",\"type\":\"address\"}],\"name\":\"PayoutManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"RoleManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebasingCredits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebasingCreditsPerToken\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyUpdatedHighres\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"changeSupply\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct NonRebaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"creditsBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"creditsBalanceOfHighres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonRebasingCreditsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonRebasingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ownerAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ownerBalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rebaseOptIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rebaseOptOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebaseState\",\"outputs\":[{\"internalType\":\"enum UsdPlusToken.RebaseOptions\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCreditsHighres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCreditsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingCreditsPerTokenHighres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutManager\",\"type\":\"address\"}],\"name\":\"setPayoutManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Fork of OUSD version In previous version it was UsdPlusTokenOld.sol therefore save slot storage for deleted variables Different with OUSD: - changeSupply - PayoutManager: rebaseOptIn/rebaseOptOut - RoleManager\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that _owner has allowed to      `_spender`.\",\"params\":{\"_owner\":\"The address which owns the funds.\",\"_spender\":\"The address which will spend the funds.\"},\"returns\":{\"_0\":\"The number of tokens still available for the _spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens      on behalf of msg.sender. This method is included for ERC20      compatibility. `increaseAllowance` and `decreaseAllowance` should be      used instead.      Changing an allowance with this method brings the risk that someone      may transfer both the old and the new allowance - if they are both      greater than zero - if a transfer transaction is mined before the      later approve() call is mined.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_account\":\"Address to query the balance of.\"},\"returns\":{\"_0\":\"A uint256 representing the amount of base units owned by the         specified address.\"}},\"burn(address,uint256)\":{\"details\":\"Burns tokens, decreasing totalSupply.\"},\"changeSupply(uint256)\":{\"details\":\"Modify the supply without minting new tokens. This uses a change in      the exchange rate between \\\"credits\\\" and USD+ tokens to change balances.\",\"params\":{\"_newTotalSupply\":\"New total supply of USD+.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"creditsBalanceOf(address)\":{\"details\":\"Gets the credits balance of the specified address.Backwards compatible with old low res credits per token.\",\"params\":{\"_account\":\"The address to query the balance of.\"},\"returns\":{\"_0\":\"(uint256, uint256) Credit balance and credits per token of the         address\"}},\"creditsBalanceOfHighres(address)\":{\"details\":\"Gets the credits balance of the specified address.\",\"params\":{\"_account\":\"The address to query the balance of.\"},\"returns\":{\"_0\":\"(uint256, uint256) Credit balance, credits per token of the address\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner has allowed to `_spender`.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance        by.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner has allowed to      `_spender`.      This method should be used instead of approve() to avoid the double      approval vulnerability described above.\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"mint(address,uint256)\":{\"details\":\"Mints new tokens, increasing totalSupply.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rebaseOptIn(address)\":{\"details\":\"Add a contract address to the non-rebasing exception list. The address's balance will be part of rebases and the account will be exposed to upside and downside.\"},\"rebaseOptOut(address)\":{\"details\":\"Explicitly mark that an address is non-rebasing.\"},\"rebasingCredits()\":{\"returns\":{\"_0\":\"Low resolution total number of rebasing credits\"}},\"rebasingCreditsHighres()\":{\"returns\":{\"_0\":\"High resolution total number of rebasing credits\"}},\"rebasingCreditsPerToken()\":{\"returns\":{\"_0\":\"Low resolution rebasingCreditsPerToken\"}},\"rebasingCreditsPerTokenHighres()\":{\"returns\":{\"_0\":\"High resolution rebasingCreditsPerToken\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply of USD+.\"}},\"transfer(address,uint256)\":{\"details\":\"Transfer tokens to a specified address.\",\"params\":{\"_to\":\"the address to transfer to.\",\"_value\":\"the amount to be transferred.\"},\"returns\":{\"_0\":\"true on success.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another.\",\"params\":{\"_from\":\"The address you want to send tokens from.\",\"_to\":\"The address you want to transfer to.\",\"_value\":\"The amount of tokens to be transferred.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"notice\":\"Returns the name of the token.\"},\"symbol()\":{\"notice\":\"Returns the symbol of the token, usually a shorter version of the name.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UsdPlusToken.sol\":\"UsdPlusToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/UsdPlusToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { StableMath } from \\\"./libraries/StableMath.sol\\\";\\n\\nimport \\\"./interfaces/IPayoutManager.sol\\\";\\nimport \\\"./interfaces/IRoleManager.sol\\\";\\n\\n/**\\n * @dev Fork of OUSD version\\n * In previous version it was UsdPlusTokenOld.sol therefore save slot storage for deleted variables\\n *\\n * Different with OUSD:\\n * - changeSupply\\n * - PayoutManager: rebaseOptIn/rebaseOptOut\\n * - RoleManager\\n */\\n\\ncontract UsdPlusToken is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n\\n    uint256 private constant MAX_SUPPLY = type(uint256).max;\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    mapping(address => uint256) private _creditBalances;\\n\\n    bytes32 private DELETED_0;  // not used (_allowances)\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n\\n    uint256 public nonRebasingSupply;\\n    uint256 private DELETED_1; // not used (liquidityIndex)\\n    uint256 private DELETED_2; // not used (liquidityIndexDenominator)\\n\\n    EnumerableSet.AddressSet _owners;\\n\\n    address public exchange;\\n    uint8 private _decimals;\\n    address public payoutManager;\\n\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    EnumerableSet.AddressSet _nonRebaseOwners;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _status; // ReentrancyGuard\\n    bool public paused;\\n    IRoleManager public roleManager;\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        OptIn,\\n        OptOut\\n    }\\n\\n    event ExchangerUpdated(address exchanger);\\n    event PayoutManagerUpdated(address payoutManager);\\n    event RoleManagerUpdated(address roleManager);\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize(string calldata name, string calldata symbol, uint8 decimals) initializer public {\\n        __Context_init_unchained();\\n        _name = name;\\n        _symbol = symbol;\\n\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _decimals = decimals;\\n        _rebasingCreditsPerToken = 10 ** 27;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n    /**\\n     * @dev Verifies that the caller is the Exchanger contract\\n     */\\n    modifier onlyExchanger() {\\n        require(exchange == _msgSender(), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPayoutManager() {\\n        require(payoutManager == _msgSender(), \\\"Caller is not the PAYOUT_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(roleManager.hasRole(PORTFOLIO_AGENT_ROLE, _msgSender()), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        require(paused == false, \\\"pause\\\");\\n        _;\\n    }\\n\\n    function setExchanger(address _exchanger) external onlyAdmin {\\n        require(_exchanger != address(this), 'exchange is zero');\\n        exchange = _exchanger;\\n        emit ExchangerUpdated(_exchanger);\\n    }\\n\\n    function setPayoutManager(address _payoutManager) external onlyAdmin {\\n        require(_payoutManager != address(this), 'payoutManager is zero');\\n        payoutManager = _payoutManager;\\n        emit PayoutManagerUpdated(_payoutManager);\\n    }\\n\\n    function setRoleManager(address _roleManager) external onlyAdmin {\\n        require(_roleManager != address(this), 'roleManager is zero');\\n        roleManager = IRoleManager(_roleManager);\\n        emit RoleManagerUpdated(_roleManager);\\n    }\\n\\n\\n    function pause() public onlyPortfolioAgent {\\n        paused = true;\\n    }\\n\\n    function unpause() public onlyPortfolioAgent {\\n        paused = false;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function ownerLength() external view returns (uint256) {\\n        return _owners.length();\\n    }\\n\\n    function ownerAt(uint256 index) external view returns (address) {\\n        return _owners.at(index);\\n    }\\n\\n    function ownerBalanceAt(uint256 index) external view returns (uint256) {\\n        return balanceOf(_owners.at(index));\\n    }\\n\\n    function totalSupplyOwners() external view returns (uint256){\\n\\n        uint256 owners = this.ownerLength();\\n\\n        uint256 total = 0;\\n        for(uint256 index = 0; index < owners; index++){\\n            total += this.balanceOf(_owners.at(index));\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @return The total supply of USD+.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance, credits per token of the address\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account)\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        notPaused\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override notPaused returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of USD+ to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n\\n        _beforeTokenTransfer(_from, _to, _value);\\n\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n\\n        _afterTokenTransfer(_from, _to, _value);\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        notPaused\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        notPaused\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        notPaused\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external notPaused onlyExchanger {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), _account, _amount);\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        _afterTokenTransfer(address(0), _account, _amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external notPaused onlyExchanger {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        _beforeTokenTransfer(address(0), _account, _amount);\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        _afterTokenTransfer(address(0), _account, _amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        return rebaseState[_account] == RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn(address _address) public onlyPayoutManager notPaused nonReentrant {\\n        require(_isNonRebasingAccount(_address), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[_address]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(_address));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(_address));\\n\\n        _creditBalances[_address] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[_address]);\\n\\n        rebaseState[_address] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[_address];\\n\\n        _nonRebaseOwners.remove(_address);\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut(address _address) public onlyPayoutManager notPaused nonReentrant {\\n        require(!_isNonRebasingAccount(_address), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(_address));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[_address] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[_address]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[_address] = RebaseOptions.OptOut;\\n\\n        _nonRebaseOwners.add(_address);\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and USD+ tokens to change balances.\\n     * @param _newTotalSupply New total supply of USD+.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyExchanger\\n        nonReentrant\\n        notPaused\\n        returns (NonRebaseInfo [] memory, uint256)\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return (new NonRebaseInfo[](0), 0);\\n        }\\n\\n        uint256 delta = _newTotalSupply - _totalSupply;\\n        uint256 deltaNR = delta * nonRebasingSupply / _totalSupply;\\n        uint256 deltaR = delta - deltaNR;\\n\\n        _totalSupply = _totalSupply + deltaR > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _totalSupply + deltaR;\\n\\n        if (_totalSupply.sub(nonRebasingSupply) != 0) {\\n            _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n                _totalSupply.sub(nonRebasingSupply)\\n            );\\n        }\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        NonRebaseInfo [] memory nonRebaseInfo = new NonRebaseInfo[](_nonRebaseOwners.length());\\n        for (uint256 i = 0; i < nonRebaseInfo.length; i++) {\\n            address userAddress = _nonRebaseOwners.at(i);\\n            uint256 userBalance = balanceOf(userAddress);\\n            uint256 userPart = (nonRebasingSupply != 0) ? userBalance * deltaNR / nonRebasingSupply : 0;\\n            nonRebaseInfo[i].pool = userAddress;\\n            nonRebaseInfo[i].amount = userPart;\\n        }\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n\\n        return (nonRebaseInfo, deltaNR);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n\\n    }\\n\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n\\n        if (from == address(0)) {\\n            // mint\\n            _owners.add(to);\\n        } else if (to == address(0)) {\\n            // burn\\n            if (balanceOf(from) == 0) {\\n                _owners.remove(from);\\n            }\\n        } else {\\n            // transfer\\n            if (balanceOf(from) == 0) {\\n                _owners.remove(from);\\n            }\\n            _owners.add(to);\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x981d62f531b7f97042ba95393f563ea4f53164414a5701a4b9f42f5180385afe\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nstruct NonRebaseInfo {\\n    address pool;\\n    uint256 amount;\\n    uint256[10] __gap;\\n}\\n\\ninterface IPayoutManager {\\n\\n    function payoutDone(address _token, NonRebaseInfo [] memory nonRebaseInfo) external;\\n\\n}\\n\",\"keccak256\":\"0x9b103e5abe8222c9e9909b713246478d7ef3482497e69771dc694914956d3738\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x89bd46e29de30f4645534e8cc43528ae7e0b6c464edbbdace05c3e61e0a7341f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\",\"keccak256\":\"0xf501cd6c64de0de985c86808b5905c9bd7e7a4e63bdcfbd1a786be5ca7d66b9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff1615808015620000375750600054600160ff909116105b8062000067575062000054306200014160201b620022b21760201c565b15801562000067575060005460ff166001145b620000cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f3576000805461ff0019166101001790555b80156200013a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000150565b6001600160a01b03163b151590565b608051613b626200018860003960008181610e8f01528181610ecf01528181611586015281816115c601526116550152613b626000f3fe6080604052600436106102c75760003560e01c80635d90737911610175578063a217fddf116100dc578063da909b0911610095578063e62603071161006f578063e6260307146108e6578063e696393a14610906578063f1d588c51461091d578063f9854bfc1461093d57600080fd5b8063da909b091461084a578063dd62ed3e1461086a578063e5c4fffe146108b157600080fd5b8063a217fddf14610794578063a457c2d7146107a9578063a9059cbb146107c9578063ce6df7be146107e9578063d2f7265a14610809578063d547741f1461082a57600080fd5b80637a46a9c51161012e5780637a46a9c5146106fe5780637d0d66ff146107145780638456cb591461072a57806391d148541461073f57806395d89b411461075f5780639dc29fac1461077457600080fd5b80635d907379146106275780635dbd733a14610647578063609350cd1461067b5780636691cb3d146106a957806370a08231146106be5780637181896f146106de57600080fd5b80633083a8e3116102345780633f4ba83a116101ed5780634f1ef286116101c75780634f1ef286146105cf57806352d1902d146105e257806356b7cb31146105f75780635c975abb1461060c57600080fd5b80633f4ba83a1461055c57806340c10f1914610571578063456ee2861461059157600080fd5b80633083a8e314610480578063313ce567146104a157806336568abe146104ce5780633659cfe6146104ee578063395093511461050e57806339a7919f1461052e57600080fd5b80631624f6c6116102865780631624f6c6146103b957806318160ddd146103db57806323b872dd146103f05780632435987914610410578063248a9ca3146104305780632f2ff15d1461046057600080fd5b8062366088146102cc578062435da5146102f457806301ffc9a71461033257806306fdde0314610362578063077f22b714610384578063095ea7b314610399575b600080fd5b3480156102d857600080fd5b506102e161095d565b6040519081526020015b60405180910390f35b34801561030057600080fd5b5061010f5461031a9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102eb565b34801561033e57600080fd5b5061035261034d366004613298565b61096f565b60405190151581526020016102eb565b34801561036e57600080fd5b506103776109a6565b6040516102eb91906132e6565b34801561039057600080fd5b506102e1610a38565b3480156103a557600080fd5b506103526103b4366004613330565b610a4d565b3480156103c557600080fd5b506103d96103d43660046133a3565b610ae3565b005b3480156103e757600080fd5b5060fd546102e1565b3480156103fc57600080fd5b5061035261040b36600461342d565b610c5a565b34801561041c57600080fd5b5061031a61042b366004613469565b610dcf565b34801561043c57600080fd5b506102e161044b366004613469565b60009081526065602052604090206001015490565b34801561046c57600080fd5b506103d961047b366004613482565b610ddd565b34801561048c57600080fd5b506101085461031a906001600160a01b031681565b3480156104ad57600080fd5b5061010754600160a01b900460ff1660405160ff90911681526020016102eb565b3480156104da57600080fd5b506103d96104e9366004613482565b610e07565b3480156104fa57600080fd5b506103d96105093660046134ae565b610e85565b34801561051a57600080fd5b50610352610529366004613330565b610f64565b34801561053a57600080fd5b5061054e610549366004613469565b611012565b6040516102eb9291906134c9565b34801561056857600080fd5b506103d9611423565b34801561057d57600080fd5b506103d961058c366004613330565b611523565b34801561059d57600080fd5b506105c26105ac3660046134ae565b61010a6020526000908152604090205460ff1681565b6040516102eb919061356a565b6103d96105dd3660046135a8565b61157c565b3480156105ee57600080fd5b506102e1611648565b34801561060357600080fd5b506102e16116fb565b34801561061857600080fd5b5061010f546103529060ff1681565b34801561063357600080fd5b506103d96106423660046134ae565b61180c565b34801561065357600080fd5b506102e17fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561068757600080fd5b506102e16106963660046134ae565b6101096020526000908152604090205481565b3480156106b557600080fd5b506102e16119d0565b3480156106ca57600080fd5b506102e16106d93660046134ae565b6119e5565b3480156106ea57600080fd5b506103d96106f93660046134ae565b611a37565b34801561070a57600080fd5b50610101546102e1565b34801561072057600080fd5b50610100546102e1565b34801561073657600080fd5b506103d9611b04565b34801561074b57600080fd5b5061035261075a366004613482565b611c07565b34801561076b57600080fd5b50610377611c32565b34801561078057600080fd5b506103d961078f366004613330565b611c41565b3480156107a057600080fd5b506102e1600081565b3480156107b557600080fd5b506103526107c4366004613330565b611c9a565b3480156107d557600080fd5b506103526107e4366004613330565b611dac565b3480156107f557600080fd5b506102e1610804366004613469565b611eb2565b34801561081557600080fd5b506101075461031a906001600160a01b031681565b34801561083657600080fd5b506103d9610845366004613482565b611ec3565b34801561085657600080fd5b506103d96108653660046134ae565b611ee8565b34801561087657600080fd5b506102e161088536600461366a565b6001600160a01b03918216600090815261010d6020908152604080832093909416825291909152205490565b3480156108bd57600080fd5b506108d16108cc3660046134ae565b611fa9565b604080519283526020830191909152016102eb565b3480156108f257600080fd5b506103d96109013660046134ae565b611fd6565b34801561091257600080fd5b506102e16101025481565b34801561092957600080fd5b506103d96109383660046134ae565b612163565b34801561094957600080fd5b506108d16109583660046134ae565b61222f565b600061096a6101056122c1565b905090565b60006001600160e01b03198216637965db0b60e01b14806109a057506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fe80546109b590613694565b80601f01602080910402602001604051908101604052809291908181526020018280546109e190613694565b8015610a2e5780601f10610a0357610100808354040283529160200191610a2e565b820191906000526020600020905b815481529060010190602001808311610a1157829003601f168201915b5050505050905090565b6000633b9aca006101005461096a91906136e4565b61010f5460009060ff1615610a7d5760405162461bcd60e51b8152600401610a7490613706565b60405180910390fd5b33600081815261010d602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350600192915050565b600054610100900460ff1615808015610b035750600054600160ff909116105b80610b1d5750303b158015610b1d575060005460ff166001145b610b805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a74565b6000805460ff191660011790558015610ba3576000805461ff0019166101001790555b610bab6122cb565b60fe610bb886888361376b565b5060ff610bc684868361376b565b50610bcf6122cb565b610bd76122cb565b610be2600033612338565b610107805460ff60a01b1916600160a01b60ff8516021790556b033b2e3c9fd0803ce8000000610101558015610c52576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b61010f5460009060ff1615610c815760405162461bcd60e51b8152600401610a7490613706565b6001600160a01b038316610cd25760405162461bcd60e51b81526020600482015260186024820152775472616e7366657220746f207a65726f206164647265737360401b6044820152606401610a74565b610cdb846119e5565b821115610d2a5760405162461bcd60e51b815260206004820152601d60248201527f5472616e736665722067726561746572207468616e2062616c616e63650000006044820152606401610a74565b6001600160a01b038416600090815261010d60209081526040808320338452909152902054610d5990836123be565b6001600160a01b038516600090815261010d60209081526040808320338452909152902055610d898484846123ca565b826001600160a01b0316846001600160a01b0316600080516020613b0d83398151915284604051610dbc91815260200190565b60405180910390a35060015b9392505050565b60006109a06101058361254b565b600082815260656020526040902060010154610df881612557565b610e028383612338565b505050565b6001600160a01b0381163314610e775760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a74565b610e818282612561565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ecd5760405162461bcd60e51b8152600401610a749061382c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f16600080516020613ac6833981519152546001600160a01b031690565b6001600160a01b031614610f3c5760405162461bcd60e51b8152600401610a7490613878565b610f45816125c8565b60408051600080825260208201909252610f61918391906125d3565b50565b61010f5460009060ff1615610f8b5760405162461bcd60e51b8152600401610a7490613706565b33600090815261010d602090815260408083206001600160a01b0387168452909152902054610fba908361273e565b33600081815261010d602090815260408083206001600160a01b038916808552908352928190208590555193845290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610ad2565b610107546060906000906001600160a01b031633146110435760405162461bcd60e51b8152600401610a74906138c4565b600261010e54036110665760405162461bcd60e51b8152600401610a74906138fb565b600261010e5561010f5460ff16156110905760405162461bcd60e51b8152600401610a7490613706565b600060fd54116110e25760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420696e637265617365203020737570706c7900000000000000006044820152606401610a74565b8260fd54036111715760fd54610100546101015460408051938452602084019290925282820152517f41645eb819d3011b13f97696a8109d14bfcddfaca7d063ec0564d62a3e2572359181900360600190a16040805160008082526020820190925290611165565b611152613255565b81526020019060019003908161114a5790505b50600091509150611416565b600060fd54846111819190613932565b9050600060fd5461010254836111979190613945565b6111a191906136e4565b905060006111af8284613932565b90506000198160fd546111c2919061395c565b116111da578060fd546111d5919061395c565b6111de565b6000195b60fd819055610102546111f191906123be565b156112205761121b6112116101025460fd546123be90919063ffffffff16565b610100549061274a565b610101555b600061010154116112735760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616e676520696e20737570706c7900000000000000006044820152606401610a74565b61129961010254611293610101546101005461274a90919063ffffffff16565b9061273e565b60fd5560006112a961010b6122c1565b67ffffffffffffffff8111156112c1576112c1613592565b6040519080825280602002602001820160405280156112fa57816020015b6112e7613255565b8152602001906001900390816112df5790505b50905060005b81518110156113c457600061131761010b8361254b565b90506000611324826119e5565b905060006101025460000361133a576000611352565b610102546113488884613945565b61135291906136e4565b9050828585815181106113675761136761396f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508085858151811061139e5761139e61396f565b6020026020010151602001818152505050505080806113bc90613985565b915050611300565b5060fd54610100546101015460408051938452602084019290925282820152517f41645eb819d3011b13f97696a8109d14bfcddfaca7d063ec0564d62a3e2572359181900360600190a1945090925050505b600161010e559092909150565b61010f5461010090046001600160a01b03166391d148547fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca919061399e565b6115165760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e740000006044820152606401610a74565b61010f805460ff19169055565b61010f5460ff16156115475760405162461bcd60e51b8152600401610a7490613706565b610107546001600160a01b031633146115725760405162461bcd60e51b8152600401610a74906138c4565b610e818282612773565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115c45760405162461bcd60e51b8152600401610a749061382c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661160d600080516020613ac6833981519152546001600160a01b031690565b6001600160a01b0316146116335760405162461bcd60e51b8152600401610a7490613878565b61163c826125c8565b610e81828260016125d3565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116e85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a74565b50600080516020613ac683398151915290565b600080306001600160a01b0316623660886040518163ffffffff1660e01b8152600401602060405180830381865afa15801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f91906139c0565b90506000805b8281101561180557306370a0823161177f6101058461254b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906139c0565b6117f1908361395c565b9150806117fd81613985565b915050611765565b5092915050565b610108546001600160a01b031633146118675760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420746865205041594f55545f4d414e414745526044820152606401610a74565b61010f5460ff161561188b5760405162461bcd60e51b8152600401610a7490613706565b600261010e54036118ae5760405162461bcd60e51b8152600401610a74906138fb565b600261010e556118bd81612919565b6119095760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420686173206e6f74206f70746564206f7574000000000000006044820152606401610a74565b600061194361191783612952565b610101546001600160a01b038516600090815260fb602052604090205461193d9161299c565b906129a8565b905061195b611951836119e5565b61010254906123be565b610102556001600160a01b038216600090815260fb6020526040902081905561010054611988908261273e565b610100556001600160a01b038216600090815261010a60209081526040808320805460ff191690556101099091528120556119c561010b836129b4565b5050600161010e5550565b6000633b9aca006101015461096a91906136e4565b6001600160a01b038116600090815260fb60205260408120548103611a0c57506000919050565b6109a0611a1883612952565b6001600160a01b038416600090815260fb60205260409020549061274a565b611a42600033611c07565b611a5e5760405162461bcd60e51b8152600401610a74906139d9565b306001600160a01b03821603611aae5760405162461bcd60e51b81526020600482015260156024820152747061796f75744d616e61676572206973207a65726f60581b6044820152606401610a74565b61010880546001600160a01b0319166001600160a01b0383169081179091556040519081527f8e0ccc7f4e6827cf2d4ab435db02892d906e1e85ddc84fd35945393baad24cef906020015b60405180910390a150565b61010f5461010090046001600160a01b03166391d148547fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab919061399e565b611bf75760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e740000006044820152606401610a74565b61010f805460ff19166001179055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ff80546109b590613694565b61010f5460ff1615611c655760405162461bcd60e51b8152600401610a7490613706565b610107546001600160a01b03163314611c905760405162461bcd60e51b8152600401610a74906138c4565b610e8182826129c9565b61010f5460009060ff1615611cc15760405162461bcd60e51b8152600401610a7490613706565b33600090815261010d602090815260408083206001600160a01b0387168452909152902054808310611d175733600090815261010d602090815260408083206001600160a01b0388168452909152812055611d47565b611d2181846123be565b33600090815261010d602090815260408083206001600160a01b03891684529091529020555b33600081815261010d602090815260408083206001600160a01b038916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b61010f5460009060ff1615611dd35760405162461bcd60e51b8152600401610a7490613706565b6001600160a01b038316611e245760405162461bcd60e51b81526020600482015260186024820152775472616e7366657220746f207a65726f206164647265737360401b6044820152606401610a74565b611e2d336119e5565b821115611e7c5760405162461bcd60e51b815260206004820152601d60248201527f5472616e736665722067726561746572207468616e2062616c616e63650000006044820152606401610a74565b611e873384846123ca565b6040518281526001600160a01b038416903390600080516020613b0d83398151915290602001610ad2565b60006109a06106d96101058461254b565b600082815260656020526040902060010154611ede81612557565b610e028383612561565b611ef3600033611c07565b611f0f5760405162461bcd60e51b8152600401610a74906139d9565b306001600160a01b03821603611f5a5760405162461bcd60e51b815260206004820152601060248201526f65786368616e6765206973207a65726f60801b6044820152606401610a74565b61010780546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001611af9565b6001600160a01b038116600090815260fb60205260408120548190611fcd84612952565b91509150915091565b610108546001600160a01b031633146120315760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420746865205041594f55545f4d414e414745526044820152606401610a74565b61010f5460ff16156120555760405162461bcd60e51b8152600401610a7490613706565b600261010e54036120785760405162461bcd60e51b8152600401610a74906138fb565b600261010e5561208781612919565b156120d45760405162461bcd60e51b815260206004820152601860248201527f4163636f756e7420686173206e6f74206f7074656420696e00000000000000006044820152606401610a74565b6120ea6120e0826119e5565b610102549061273e565b61010255610101546001600160a01b0382166000908152610109602090815260408083209390935560fb9052205461010054612125916123be565b610100556001600160a01b038116600090815261010a60205260409020805460ff1916600117905561215961010b82612bd1565b5050600161010e55565b61216e600033611c07565b61218a5760405162461bcd60e51b8152600401610a74906139d9565b306001600160a01b038216036121d85760405162461bcd60e51b8152602060048201526013602482015272726f6c654d616e61676572206973207a65726f60681b6044820152606401610a74565b61010f8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c990602001611af9565b600080600061223d84612952565b9050806b033b2e3c9fd0803ce800000003612272576001600160a01b03909316600090815260fb602052604090205493915050565b6001600160a01b038416600090815260fb602052604090205461229a90633b9aca00906136e4565b6122a8633b9aca00836136e4565b9250925050915091565b6001600160a01b03163b151590565b60006109a0825490565b600054610100900460ff166123365760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a74565b565b6123428282611c07565b610e815760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561237a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610dc88284613932565b60006123d583612919565b905060006123e285612919565b905060006123f96123f286612952565b8590612be6565b9050600061241061240988612952565b8690612be6565b9050612481816040518060400160405280601f81526020017f5472616e7366657220616d6f756e7420657863656564732062616c616e63650081525060fb60008b6001600160a01b03166001600160a01b0316815260200190815260200160002054612bfb9092919063ffffffff16565b6001600160a01b03808916600090815260fb602052604080822093909355908816815220546124b0908361273e565b6001600160a01b038716600090815260fb60205260409020558380156124d4575082155b1561250257610102546124e7908661273e565b61010255610100546124f990826123be565b61010055612537565b8315801561250d5750825b15612537576101025461252090866123be565b6101025561010054612532908361273e565b610100555b612542878787612c27565b50505050505050565b6000610dc88383612c9b565b610f618133612cc5565b61256b8282611c07565b15610e815760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610e8181612557565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561260657610e0283612d1e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612660575060408051601f3d908101601f1916820190925261265d918101906139c0565b60015b6126c35760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a74565b600080516020613ac683398151915281146127325760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a74565b50610e02838383612dba565b6000610dc8828461395c565b60008061275f84670de0b6b3a764000061299c565b905061276b81846129a8565b949350505050565b600261010e54036127965760405162461bcd60e51b8152600401610a74906138fb565b600261010e556001600160a01b0382166127f25760405162461bcd60e51b815260206004820152601860248201527f4d696e7420746f20746865207a65726f206164647265737300000000000000006044820152606401610a74565b60006127fd83612919565b9050600061281461280d85612952565b8490612be6565b6001600160a01b038516600090815260fb602052604090205490915061283a908261273e565b6001600160a01b038516600090815260fb602052604090205581156128705761010254612867908461273e565b61010255612883565b6101005461287e908261273e565b610100555b60fd54612890908461273e565b60fd819055600019116128d25760405162461bcd60e51b815260206004820152600a6024820152694d617820737570706c7960b01b6044820152606401610a74565b6128de60008585612c27565b6040518381526001600160a01b03851690600090600080516020613b0d8339815191529060200160405180910390a35050600161010e555050565b600060016001600160a01b038316600090815261010a602052604090205460ff16600181111561294b5761294b613554565b1492915050565b6001600160a01b038116600090815261010960205260408120541561298e57506001600160a01b03166000908152610109602052604090205490565b50506101015490565b919050565b6000610dc88284613945565b6000610dc882846136e4565b6000610dc8836001600160a01b038416612ddf565b600261010e54036129ec5760405162461bcd60e51b8152600401610a74906138fb565b600261010e556001600160a01b038216612a485760405162461bcd60e51b815260206004820152601a60248201527f4275726e2066726f6d20746865207a65726f20616464726573730000000000006044820152606401610a74565b8015612159576000612a5983612919565b90506000612a6961280d85612952565b6001600160a01b038516600090815260fb602052604090205490915080821480612a9c575081612a9a600183613932565b145b15612abf576001600160a01b038516600090815260fb6020526040812055612b49565b81811115612b08576001600160a01b038516600090815260fb6020526040902054612aea90836123be565b6001600160a01b038616600090815260fb6020526040902055612b49565b60405162461bcd60e51b815260206004820152601660248201527552656d6f766520657863656564732062616c616e636560501b6044820152606401610a74565b8215612b665761010254612b5d90856123be565b61010255612b79565b61010054612b7490836123be565b610100555b60fd54612b8690856123be565b60fd55612b9560008686612c27565b6040518481526000906001600160a01b03871690600080516020613b0d8339815191529060200160405180910390a35050505050600161010e55565b6000610dc8836001600160a01b038416612ed2565b6000610dc88383670de0b6b3a7640000612f21565b60008184841115612c1f5760405162461bcd60e51b8152600401610a7491906132e6565b505050900390565b6001600160a01b038316612c4757612c4161010583612bd1565b50505050565b6001600160a01b038216612c7157612c5e836119e5565b600003610e0257612c41610105846129b4565b612c7a836119e5565b600003612c8f57612c8d610105846129b4565b505b612c4161010583612bd1565b6000826000018281548110612cb257612cb261396f565b9060005260206000200154905092915050565b612ccf8282611c07565b610e8157612cdc81612f43565b612ce7836020612f55565b604051602001612cf8929190613a07565b60408051601f198184030181529082905262461bcd60e51b8252610a74916004016132e6565b6001600160a01b0381163b612d8b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a74565b600080516020613ac683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612dc3836130f1565b600082511180612dd05750805b15610e0257612c418383613131565b60008181526001830160205260408120548015612ec8576000612e03600183613932565b8554909150600090612e1790600190613932565b9050818114612e7c576000866000018281548110612e3757612e3761396f565b9060005260206000200154905080876000018481548110612e5a57612e5a61396f565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e8d57612e8d613a7c565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109a0565b60009150506109a0565b6000818152600183016020526040812054612f19575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109a0565b5060006109a0565b600080612f2e858561299c565b9050612f3a81846129a8565b95945050505050565b60606109a06001600160a01b03831660145b60606000612f64836002613945565b612f6f90600261395c565b67ffffffffffffffff811115612f8757612f87613592565b6040519080825280601f01601f191660200182016040528015612fb1576020820181803683370190505b509050600360fc1b81600081518110612fcc57612fcc61396f565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ffb57612ffb61396f565b60200101906001600160f81b031916908160001a905350600061301f846002613945565b61302a90600161395c565b90505b60018111156130a2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061305e5761305e61396f565b1a60f81b8282815181106130745761307461396f565b60200101906001600160f81b031916908160001a90535060049490941c9361309b81613a92565b905061302d565b508315610dc85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a74565b6130fa81612d1e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6131995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a74565b600080846001600160a01b0316846040516131b49190613aa9565b600060405180830381855af49150503d80600081146131ef576040519150601f19603f3d011682016040523d82523d6000602084013e6131f4565b606091505b5091509150612f3a8282604051806060016040528060278152602001613ae66027913960608315613226575081610dc8565b610dc8838381511561323b5781518083602001fd5b8060405162461bcd60e51b8152600401610a7491906132e6565b6040805160608101825260008082526020820152908101613274613279565b905290565b604051806101400160405280600a906020820280368337509192915050565b6000602082840312156132aa57600080fd5b81356001600160e01b031981168114610dc857600080fd5b60005b838110156132dd5781810151838201526020016132c5565b50506000910152565b60208152600082518060208401526133058160408501602087016132c2565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461299757600080fd5b6000806040838503121561334357600080fd5b61334c83613319565b946020939093013593505050565b60008083601f84011261336c57600080fd5b50813567ffffffffffffffff81111561338457600080fd5b60208301915083602082850101111561339c57600080fd5b9250929050565b6000806000806000606086880312156133bb57600080fd5b853567ffffffffffffffff808211156133d357600080fd5b6133df89838a0161335a565b909750955060208801359150808211156133f857600080fd5b506134058882890161335a565b909450925050604086013560ff8116811461341f57600080fd5b809150509295509295909350565b60008060006060848603121561344257600080fd5b61344b84613319565b925061345960208501613319565b9150604084013590509250925092565b60006020828403121561347b57600080fd5b5035919050565b6000806040838503121561349557600080fd5b823591506134a560208401613319565b90509250929050565b6000602082840312156134c057600080fd5b610dc882613319565b6040808252835182820181905260009190602090606085019082880185805b8381101561354357825180516001600160a01b031686528681015187870152870151878601835b600a81101561352c5782518252918801919088019060010161350f565b5050506101809490940193918501916001016134e8565b505050509301939093525092915050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061358c57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156135bb57600080fd5b6135c483613319565b9150602083013567ffffffffffffffff808211156135e157600080fd5b818501915085601f8301126135f557600080fd5b81358181111561360757613607613592565b604051601f8201601f19908116603f0116810190838211818310171561362f5761362f613592565b8160405282815288602084870101111561364857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561367d57600080fd5b61368683613319565b91506134a560208401613319565b600181811c908216806136a857607f821691505b6020821081036136c857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008261370157634e487b7160e01b600052601260045260246000fd5b500490565b602080825260059082015264706175736560d81b604082015260600190565b601f821115610e0257600081815260208120601f850160051c8101602086101561374c5750805b601f850160051c820191505b81811015610c5257828155600101613758565b67ffffffffffffffff83111561378357613783613592565b613797836137918354613694565b83613725565b6000601f8411600181146137cb57600085156137b35750838201355b600019600387901b1c1916600186901b178355613825565b600083815260209020601f19861690835b828110156137fc57868501358255602094850194600190920191016137dc565b50868210156138195760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b818103818111156109a0576109a06136ce565b80820281158282048414176109a0576109a06136ce565b808201808211156109a0576109a06136ce565b634e487b7160e01b600052603260045260246000fd5b600060018201613997576139976136ce565b5060010190565b6000602082840312156139b057600080fd5b81518015158114610dc857600080fd5b6000602082840312156139d257600080fd5b5051919050565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a3f8160178501602088016132c2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613a708160288401602088016132c2565b01602801949350505050565b634e487b7160e01b600052603160045260246000fd5b600081613aa157613aa16136ce565b506000190190565b60008251613abb8184602087016132c2565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201a582d3bd9acbf89ca56a43f6648bff3d0cfd92063616af7a786a38c2cafa06d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102c75760003560e01c80635d90737911610175578063a217fddf116100dc578063da909b0911610095578063e62603071161006f578063e6260307146108e6578063e696393a14610906578063f1d588c51461091d578063f9854bfc1461093d57600080fd5b8063da909b091461084a578063dd62ed3e1461086a578063e5c4fffe146108b157600080fd5b8063a217fddf14610794578063a457c2d7146107a9578063a9059cbb146107c9578063ce6df7be146107e9578063d2f7265a14610809578063d547741f1461082a57600080fd5b80637a46a9c51161012e5780637a46a9c5146106fe5780637d0d66ff146107145780638456cb591461072a57806391d148541461073f57806395d89b411461075f5780639dc29fac1461077457600080fd5b80635d907379146106275780635dbd733a14610647578063609350cd1461067b5780636691cb3d146106a957806370a08231146106be5780637181896f146106de57600080fd5b80633083a8e3116102345780633f4ba83a116101ed5780634f1ef286116101c75780634f1ef286146105cf57806352d1902d146105e257806356b7cb31146105f75780635c975abb1461060c57600080fd5b80633f4ba83a1461055c57806340c10f1914610571578063456ee2861461059157600080fd5b80633083a8e314610480578063313ce567146104a157806336568abe146104ce5780633659cfe6146104ee578063395093511461050e57806339a7919f1461052e57600080fd5b80631624f6c6116102865780631624f6c6146103b957806318160ddd146103db57806323b872dd146103f05780632435987914610410578063248a9ca3146104305780632f2ff15d1461046057600080fd5b8062366088146102cc578062435da5146102f457806301ffc9a71461033257806306fdde0314610362578063077f22b714610384578063095ea7b314610399575b600080fd5b3480156102d857600080fd5b506102e161095d565b6040519081526020015b60405180910390f35b34801561030057600080fd5b5061010f5461031a9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102eb565b34801561033e57600080fd5b5061035261034d366004613298565b61096f565b60405190151581526020016102eb565b34801561036e57600080fd5b506103776109a6565b6040516102eb91906132e6565b34801561039057600080fd5b506102e1610a38565b3480156103a557600080fd5b506103526103b4366004613330565b610a4d565b3480156103c557600080fd5b506103d96103d43660046133a3565b610ae3565b005b3480156103e757600080fd5b5060fd546102e1565b3480156103fc57600080fd5b5061035261040b36600461342d565b610c5a565b34801561041c57600080fd5b5061031a61042b366004613469565b610dcf565b34801561043c57600080fd5b506102e161044b366004613469565b60009081526065602052604090206001015490565b34801561046c57600080fd5b506103d961047b366004613482565b610ddd565b34801561048c57600080fd5b506101085461031a906001600160a01b031681565b3480156104ad57600080fd5b5061010754600160a01b900460ff1660405160ff90911681526020016102eb565b3480156104da57600080fd5b506103d96104e9366004613482565b610e07565b3480156104fa57600080fd5b506103d96105093660046134ae565b610e85565b34801561051a57600080fd5b50610352610529366004613330565b610f64565b34801561053a57600080fd5b5061054e610549366004613469565b611012565b6040516102eb9291906134c9565b34801561056857600080fd5b506103d9611423565b34801561057d57600080fd5b506103d961058c366004613330565b611523565b34801561059d57600080fd5b506105c26105ac3660046134ae565b61010a6020526000908152604090205460ff1681565b6040516102eb919061356a565b6103d96105dd3660046135a8565b61157c565b3480156105ee57600080fd5b506102e1611648565b34801561060357600080fd5b506102e16116fb565b34801561061857600080fd5b5061010f546103529060ff1681565b34801561063357600080fd5b506103d96106423660046134ae565b61180c565b34801561065357600080fd5b506102e17fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561068757600080fd5b506102e16106963660046134ae565b6101096020526000908152604090205481565b3480156106b557600080fd5b506102e16119d0565b3480156106ca57600080fd5b506102e16106d93660046134ae565b6119e5565b3480156106ea57600080fd5b506103d96106f93660046134ae565b611a37565b34801561070a57600080fd5b50610101546102e1565b34801561072057600080fd5b50610100546102e1565b34801561073657600080fd5b506103d9611b04565b34801561074b57600080fd5b5061035261075a366004613482565b611c07565b34801561076b57600080fd5b50610377611c32565b34801561078057600080fd5b506103d961078f366004613330565b611c41565b3480156107a057600080fd5b506102e1600081565b3480156107b557600080fd5b506103526107c4366004613330565b611c9a565b3480156107d557600080fd5b506103526107e4366004613330565b611dac565b3480156107f557600080fd5b506102e1610804366004613469565b611eb2565b34801561081557600080fd5b506101075461031a906001600160a01b031681565b34801561083657600080fd5b506103d9610845366004613482565b611ec3565b34801561085657600080fd5b506103d96108653660046134ae565b611ee8565b34801561087657600080fd5b506102e161088536600461366a565b6001600160a01b03918216600090815261010d6020908152604080832093909416825291909152205490565b3480156108bd57600080fd5b506108d16108cc3660046134ae565b611fa9565b604080519283526020830191909152016102eb565b3480156108f257600080fd5b506103d96109013660046134ae565b611fd6565b34801561091257600080fd5b506102e16101025481565b34801561092957600080fd5b506103d96109383660046134ae565b612163565b34801561094957600080fd5b506108d16109583660046134ae565b61222f565b600061096a6101056122c1565b905090565b60006001600160e01b03198216637965db0b60e01b14806109a057506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fe80546109b590613694565b80601f01602080910402602001604051908101604052809291908181526020018280546109e190613694565b8015610a2e5780601f10610a0357610100808354040283529160200191610a2e565b820191906000526020600020905b815481529060010190602001808311610a1157829003601f168201915b5050505050905090565b6000633b9aca006101005461096a91906136e4565b61010f5460009060ff1615610a7d5760405162461bcd60e51b8152600401610a7490613706565b60405180910390fd5b33600081815261010d602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350600192915050565b600054610100900460ff1615808015610b035750600054600160ff909116105b80610b1d5750303b158015610b1d575060005460ff166001145b610b805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a74565b6000805460ff191660011790558015610ba3576000805461ff0019166101001790555b610bab6122cb565b60fe610bb886888361376b565b5060ff610bc684868361376b565b50610bcf6122cb565b610bd76122cb565b610be2600033612338565b610107805460ff60a01b1916600160a01b60ff8516021790556b033b2e3c9fd0803ce8000000610101558015610c52576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b61010f5460009060ff1615610c815760405162461bcd60e51b8152600401610a7490613706565b6001600160a01b038316610cd25760405162461bcd60e51b81526020600482015260186024820152775472616e7366657220746f207a65726f206164647265737360401b6044820152606401610a74565b610cdb846119e5565b821115610d2a5760405162461bcd60e51b815260206004820152601d60248201527f5472616e736665722067726561746572207468616e2062616c616e63650000006044820152606401610a74565b6001600160a01b038416600090815261010d60209081526040808320338452909152902054610d5990836123be565b6001600160a01b038516600090815261010d60209081526040808320338452909152902055610d898484846123ca565b826001600160a01b0316846001600160a01b0316600080516020613b0d83398151915284604051610dbc91815260200190565b60405180910390a35060015b9392505050565b60006109a06101058361254b565b600082815260656020526040902060010154610df881612557565b610e028383612338565b505050565b6001600160a01b0381163314610e775760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a74565b610e818282612561565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ecd5760405162461bcd60e51b8152600401610a749061382c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f16600080516020613ac6833981519152546001600160a01b031690565b6001600160a01b031614610f3c5760405162461bcd60e51b8152600401610a7490613878565b610f45816125c8565b60408051600080825260208201909252610f61918391906125d3565b50565b61010f5460009060ff1615610f8b5760405162461bcd60e51b8152600401610a7490613706565b33600090815261010d602090815260408083206001600160a01b0387168452909152902054610fba908361273e565b33600081815261010d602090815260408083206001600160a01b038916808552908352928190208590555193845290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610ad2565b610107546060906000906001600160a01b031633146110435760405162461bcd60e51b8152600401610a74906138c4565b600261010e54036110665760405162461bcd60e51b8152600401610a74906138fb565b600261010e5561010f5460ff16156110905760405162461bcd60e51b8152600401610a7490613706565b600060fd54116110e25760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420696e637265617365203020737570706c7900000000000000006044820152606401610a74565b8260fd54036111715760fd54610100546101015460408051938452602084019290925282820152517f41645eb819d3011b13f97696a8109d14bfcddfaca7d063ec0564d62a3e2572359181900360600190a16040805160008082526020820190925290611165565b611152613255565b81526020019060019003908161114a5790505b50600091509150611416565b600060fd54846111819190613932565b9050600060fd5461010254836111979190613945565b6111a191906136e4565b905060006111af8284613932565b90506000198160fd546111c2919061395c565b116111da578060fd546111d5919061395c565b6111de565b6000195b60fd819055610102546111f191906123be565b156112205761121b6112116101025460fd546123be90919063ffffffff16565b610100549061274a565b610101555b600061010154116112735760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616e676520696e20737570706c7900000000000000006044820152606401610a74565b61129961010254611293610101546101005461274a90919063ffffffff16565b9061273e565b60fd5560006112a961010b6122c1565b67ffffffffffffffff8111156112c1576112c1613592565b6040519080825280602002602001820160405280156112fa57816020015b6112e7613255565b8152602001906001900390816112df5790505b50905060005b81518110156113c457600061131761010b8361254b565b90506000611324826119e5565b905060006101025460000361133a576000611352565b610102546113488884613945565b61135291906136e4565b9050828585815181106113675761136761396f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508085858151811061139e5761139e61396f565b6020026020010151602001818152505050505080806113bc90613985565b915050611300565b5060fd54610100546101015460408051938452602084019290925282820152517f41645eb819d3011b13f97696a8109d14bfcddfaca7d063ec0564d62a3e2572359181900360600190a1945090925050505b600161010e559092909150565b61010f5461010090046001600160a01b03166391d148547fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca919061399e565b6115165760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e740000006044820152606401610a74565b61010f805460ff19169055565b61010f5460ff16156115475760405162461bcd60e51b8152600401610a7490613706565b610107546001600160a01b031633146115725760405162461bcd60e51b8152600401610a74906138c4565b610e818282612773565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115c45760405162461bcd60e51b8152600401610a749061382c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661160d600080516020613ac6833981519152546001600160a01b031690565b6001600160a01b0316146116335760405162461bcd60e51b8152600401610a7490613878565b61163c826125c8565b610e81828260016125d3565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116e85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a74565b50600080516020613ac683398151915290565b600080306001600160a01b0316623660886040518163ffffffff1660e01b8152600401602060405180830381865afa15801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f91906139c0565b90506000805b8281101561180557306370a0823161177f6101058461254b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906139c0565b6117f1908361395c565b9150806117fd81613985565b915050611765565b5092915050565b610108546001600160a01b031633146118675760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420746865205041594f55545f4d414e414745526044820152606401610a74565b61010f5460ff161561188b5760405162461bcd60e51b8152600401610a7490613706565b600261010e54036118ae5760405162461bcd60e51b8152600401610a74906138fb565b600261010e556118bd81612919565b6119095760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420686173206e6f74206f70746564206f7574000000000000006044820152606401610a74565b600061194361191783612952565b610101546001600160a01b038516600090815260fb602052604090205461193d9161299c565b906129a8565b905061195b611951836119e5565b61010254906123be565b610102556001600160a01b038216600090815260fb6020526040902081905561010054611988908261273e565b610100556001600160a01b038216600090815261010a60209081526040808320805460ff191690556101099091528120556119c561010b836129b4565b5050600161010e5550565b6000633b9aca006101015461096a91906136e4565b6001600160a01b038116600090815260fb60205260408120548103611a0c57506000919050565b6109a0611a1883612952565b6001600160a01b038416600090815260fb60205260409020549061274a565b611a42600033611c07565b611a5e5760405162461bcd60e51b8152600401610a74906139d9565b306001600160a01b03821603611aae5760405162461bcd60e51b81526020600482015260156024820152747061796f75744d616e61676572206973207a65726f60581b6044820152606401610a74565b61010880546001600160a01b0319166001600160a01b0383169081179091556040519081527f8e0ccc7f4e6827cf2d4ab435db02892d906e1e85ddc84fd35945393baad24cef906020015b60405180910390a150565b61010f5461010090046001600160a01b03166391d148547fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab919061399e565b611bf75760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e740000006044820152606401610a74565b61010f805460ff19166001179055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ff80546109b590613694565b61010f5460ff1615611c655760405162461bcd60e51b8152600401610a7490613706565b610107546001600160a01b03163314611c905760405162461bcd60e51b8152600401610a74906138c4565b610e8182826129c9565b61010f5460009060ff1615611cc15760405162461bcd60e51b8152600401610a7490613706565b33600090815261010d602090815260408083206001600160a01b0387168452909152902054808310611d175733600090815261010d602090815260408083206001600160a01b0388168452909152812055611d47565b611d2181846123be565b33600090815261010d602090815260408083206001600160a01b03891684529091529020555b33600081815261010d602090815260408083206001600160a01b038916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b61010f5460009060ff1615611dd35760405162461bcd60e51b8152600401610a7490613706565b6001600160a01b038316611e245760405162461bcd60e51b81526020600482015260186024820152775472616e7366657220746f207a65726f206164647265737360401b6044820152606401610a74565b611e2d336119e5565b821115611e7c5760405162461bcd60e51b815260206004820152601d60248201527f5472616e736665722067726561746572207468616e2062616c616e63650000006044820152606401610a74565b611e873384846123ca565b6040518281526001600160a01b038416903390600080516020613b0d83398151915290602001610ad2565b60006109a06106d96101058461254b565b600082815260656020526040902060010154611ede81612557565b610e028383612561565b611ef3600033611c07565b611f0f5760405162461bcd60e51b8152600401610a74906139d9565b306001600160a01b03821603611f5a5760405162461bcd60e51b815260206004820152601060248201526f65786368616e6765206973207a65726f60801b6044820152606401610a74565b61010780546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001611af9565b6001600160a01b038116600090815260fb60205260408120548190611fcd84612952565b91509150915091565b610108546001600160a01b031633146120315760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420746865205041594f55545f4d414e414745526044820152606401610a74565b61010f5460ff16156120555760405162461bcd60e51b8152600401610a7490613706565b600261010e54036120785760405162461bcd60e51b8152600401610a74906138fb565b600261010e5561208781612919565b156120d45760405162461bcd60e51b815260206004820152601860248201527f4163636f756e7420686173206e6f74206f7074656420696e00000000000000006044820152606401610a74565b6120ea6120e0826119e5565b610102549061273e565b61010255610101546001600160a01b0382166000908152610109602090815260408083209390935560fb9052205461010054612125916123be565b610100556001600160a01b038116600090815261010a60205260409020805460ff1916600117905561215961010b82612bd1565b5050600161010e55565b61216e600033611c07565b61218a5760405162461bcd60e51b8152600401610a74906139d9565b306001600160a01b038216036121d85760405162461bcd60e51b8152602060048201526013602482015272726f6c654d616e61676572206973207a65726f60681b6044820152606401610a74565b61010f8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c990602001611af9565b600080600061223d84612952565b9050806b033b2e3c9fd0803ce800000003612272576001600160a01b03909316600090815260fb602052604090205493915050565b6001600160a01b038416600090815260fb602052604090205461229a90633b9aca00906136e4565b6122a8633b9aca00836136e4565b9250925050915091565b6001600160a01b03163b151590565b60006109a0825490565b600054610100900460ff166123365760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a74565b565b6123428282611c07565b610e815760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561237a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610dc88284613932565b60006123d583612919565b905060006123e285612919565b905060006123f96123f286612952565b8590612be6565b9050600061241061240988612952565b8690612be6565b9050612481816040518060400160405280601f81526020017f5472616e7366657220616d6f756e7420657863656564732062616c616e63650081525060fb60008b6001600160a01b03166001600160a01b0316815260200190815260200160002054612bfb9092919063ffffffff16565b6001600160a01b03808916600090815260fb602052604080822093909355908816815220546124b0908361273e565b6001600160a01b038716600090815260fb60205260409020558380156124d4575082155b1561250257610102546124e7908661273e565b61010255610100546124f990826123be565b61010055612537565b8315801561250d5750825b15612537576101025461252090866123be565b6101025561010054612532908361273e565b610100555b612542878787612c27565b50505050505050565b6000610dc88383612c9b565b610f618133612cc5565b61256b8282611c07565b15610e815760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610e8181612557565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561260657610e0283612d1e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612660575060408051601f3d908101601f1916820190925261265d918101906139c0565b60015b6126c35760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a74565b600080516020613ac683398151915281146127325760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a74565b50610e02838383612dba565b6000610dc8828461395c565b60008061275f84670de0b6b3a764000061299c565b905061276b81846129a8565b949350505050565b600261010e54036127965760405162461bcd60e51b8152600401610a74906138fb565b600261010e556001600160a01b0382166127f25760405162461bcd60e51b815260206004820152601860248201527f4d696e7420746f20746865207a65726f206164647265737300000000000000006044820152606401610a74565b60006127fd83612919565b9050600061281461280d85612952565b8490612be6565b6001600160a01b038516600090815260fb602052604090205490915061283a908261273e565b6001600160a01b038516600090815260fb602052604090205581156128705761010254612867908461273e565b61010255612883565b6101005461287e908261273e565b610100555b60fd54612890908461273e565b60fd819055600019116128d25760405162461bcd60e51b815260206004820152600a6024820152694d617820737570706c7960b01b6044820152606401610a74565b6128de60008585612c27565b6040518381526001600160a01b03851690600090600080516020613b0d8339815191529060200160405180910390a35050600161010e555050565b600060016001600160a01b038316600090815261010a602052604090205460ff16600181111561294b5761294b613554565b1492915050565b6001600160a01b038116600090815261010960205260408120541561298e57506001600160a01b03166000908152610109602052604090205490565b50506101015490565b919050565b6000610dc88284613945565b6000610dc882846136e4565b6000610dc8836001600160a01b038416612ddf565b600261010e54036129ec5760405162461bcd60e51b8152600401610a74906138fb565b600261010e556001600160a01b038216612a485760405162461bcd60e51b815260206004820152601a60248201527f4275726e2066726f6d20746865207a65726f20616464726573730000000000006044820152606401610a74565b8015612159576000612a5983612919565b90506000612a6961280d85612952565b6001600160a01b038516600090815260fb602052604090205490915080821480612a9c575081612a9a600183613932565b145b15612abf576001600160a01b038516600090815260fb6020526040812055612b49565b81811115612b08576001600160a01b038516600090815260fb6020526040902054612aea90836123be565b6001600160a01b038616600090815260fb6020526040902055612b49565b60405162461bcd60e51b815260206004820152601660248201527552656d6f766520657863656564732062616c616e636560501b6044820152606401610a74565b8215612b665761010254612b5d90856123be565b61010255612b79565b61010054612b7490836123be565b610100555b60fd54612b8690856123be565b60fd55612b9560008686612c27565b6040518481526000906001600160a01b03871690600080516020613b0d8339815191529060200160405180910390a35050505050600161010e55565b6000610dc8836001600160a01b038416612ed2565b6000610dc88383670de0b6b3a7640000612f21565b60008184841115612c1f5760405162461bcd60e51b8152600401610a7491906132e6565b505050900390565b6001600160a01b038316612c4757612c4161010583612bd1565b50505050565b6001600160a01b038216612c7157612c5e836119e5565b600003610e0257612c41610105846129b4565b612c7a836119e5565b600003612c8f57612c8d610105846129b4565b505b612c4161010583612bd1565b6000826000018281548110612cb257612cb261396f565b9060005260206000200154905092915050565b612ccf8282611c07565b610e8157612cdc81612f43565b612ce7836020612f55565b604051602001612cf8929190613a07565b60408051601f198184030181529082905262461bcd60e51b8252610a74916004016132e6565b6001600160a01b0381163b612d8b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a74565b600080516020613ac683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612dc3836130f1565b600082511180612dd05750805b15610e0257612c418383613131565b60008181526001830160205260408120548015612ec8576000612e03600183613932565b8554909150600090612e1790600190613932565b9050818114612e7c576000866000018281548110612e3757612e3761396f565b9060005260206000200154905080876000018481548110612e5a57612e5a61396f565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e8d57612e8d613a7c565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109a0565b60009150506109a0565b6000818152600183016020526040812054612f19575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109a0565b5060006109a0565b600080612f2e858561299c565b9050612f3a81846129a8565b95945050505050565b60606109a06001600160a01b03831660145b60606000612f64836002613945565b612f6f90600261395c565b67ffffffffffffffff811115612f8757612f87613592565b6040519080825280601f01601f191660200182016040528015612fb1576020820181803683370190505b509050600360fc1b81600081518110612fcc57612fcc61396f565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ffb57612ffb61396f565b60200101906001600160f81b031916908160001a905350600061301f846002613945565b61302a90600161395c565b90505b60018111156130a2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061305e5761305e61396f565b1a60f81b8282815181106130745761307461396f565b60200101906001600160f81b031916908160001a90535060049490941c9361309b81613a92565b905061302d565b508315610dc85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a74565b6130fa81612d1e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6131995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a74565b600080846001600160a01b0316846040516131b49190613aa9565b600060405180830381855af49150503d80600081146131ef576040519150601f19603f3d011682016040523d82523d6000602084013e6131f4565b606091505b5091509150612f3a8282604051806060016040528060278152602001613ae66027913960608315613226575081610dc8565b610dc8838381511561323b5781518083602001fd5b8060405162461bcd60e51b8152600401610a7491906132e6565b6040805160608101825260008082526020820152908101613274613279565b905290565b604051806101400160405280600a906020820280368337509192915050565b6000602082840312156132aa57600080fd5b81356001600160e01b031981168114610dc857600080fd5b60005b838110156132dd5781810151838201526020016132c5565b50506000910152565b60208152600082518060208401526133058160408501602087016132c2565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461299757600080fd5b6000806040838503121561334357600080fd5b61334c83613319565b946020939093013593505050565b60008083601f84011261336c57600080fd5b50813567ffffffffffffffff81111561338457600080fd5b60208301915083602082850101111561339c57600080fd5b9250929050565b6000806000806000606086880312156133bb57600080fd5b853567ffffffffffffffff808211156133d357600080fd5b6133df89838a0161335a565b909750955060208801359150808211156133f857600080fd5b506134058882890161335a565b909450925050604086013560ff8116811461341f57600080fd5b809150509295509295909350565b60008060006060848603121561344257600080fd5b61344b84613319565b925061345960208501613319565b9150604084013590509250925092565b60006020828403121561347b57600080fd5b5035919050565b6000806040838503121561349557600080fd5b823591506134a560208401613319565b90509250929050565b6000602082840312156134c057600080fd5b610dc882613319565b6040808252835182820181905260009190602090606085019082880185805b8381101561354357825180516001600160a01b031686528681015187870152870151878601835b600a81101561352c5782518252918801919088019060010161350f565b5050506101809490940193918501916001016134e8565b505050509301939093525092915050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061358c57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156135bb57600080fd5b6135c483613319565b9150602083013567ffffffffffffffff808211156135e157600080fd5b818501915085601f8301126135f557600080fd5b81358181111561360757613607613592565b604051601f8201601f19908116603f0116810190838211818310171561362f5761362f613592565b8160405282815288602084870101111561364857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561367d57600080fd5b61368683613319565b91506134a560208401613319565b600181811c908216806136a857607f821691505b6020821081036136c857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008261370157634e487b7160e01b600052601260045260246000fd5b500490565b602080825260059082015264706175736560d81b604082015260600190565b601f821115610e0257600081815260208120601f850160051c8101602086101561374c5750805b601f850160051c820191505b81811015610c5257828155600101613758565b67ffffffffffffffff83111561378357613783613592565b613797836137918354613694565b83613725565b6000601f8411600181146137cb57600085156137b35750838201355b600019600387901b1c1916600186901b178355613825565b600083815260209020601f19861690835b828110156137fc57868501358255602094850194600190920191016137dc565b50868210156138195760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b818103818111156109a0576109a06136ce565b80820281158282048414176109a0576109a06136ce565b808201808211156109a0576109a06136ce565b634e487b7160e01b600052603260045260246000fd5b600060018201613997576139976136ce565b5060010190565b6000602082840312156139b057600080fd5b81518015158114610dc857600080fd5b6000602082840312156139d257600080fd5b5051919050565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613a3f8160178501602088016132c2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613a708160288401602088016132c2565b01602801949350505050565b634e487b7160e01b600052603160045260246000fd5b600081613aa157613aa16136ce565b506000190190565b60008251613abb8184602087016132c2565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201a582d3bd9acbf89ca56a43f6648bff3d0cfd92063616af7a786a38c2cafa06d64736f6c63430008110033",
  "implementation": "0x4F268ef41F76e5503144886A668fced37b674CE0",
  "devdoc": {
    "details": "Fork of OUSD version In previous version it was UsdPlusTokenOld.sol therefore save slot storage for deleted variables Different with OUSD: - changeSupply - PayoutManager: rebaseOptIn/rebaseOptOut - RoleManager",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that _owner has allowed to      `_spender`.",
        "params": {
          "_owner": "The address which owns the funds.",
          "_spender": "The address which will spend the funds."
        },
        "returns": {
          "_0": "The number of tokens still available for the _spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens      on behalf of msg.sender. This method is included for ERC20      compatibility. `increaseAllowance` and `decreaseAllowance` should be      used instead.      Changing an allowance with this method brings the risk that someone      may transfer both the old and the new allowance - if they are both      greater than zero - if a transfer transaction is mined before the      later approve() call is mined.",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "_account": "Address to query the balance of."
        },
        "returns": {
          "_0": "A uint256 representing the amount of base units owned by the         specified address."
        }
      },
      "burn(address,uint256)": {
        "details": "Burns tokens, decreasing totalSupply."
      },
      "changeSupply(uint256)": {
        "details": "Modify the supply without minting new tokens. This uses a change in      the exchange rate between \"credits\" and USD+ tokens to change balances.",
        "params": {
          "_newTotalSupply": "New total supply of USD+."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "creditsBalanceOf(address)": {
        "details": "Gets the credits balance of the specified address.Backwards compatible with old low res credits per token.",
        "params": {
          "_account": "The address to query the balance of."
        },
        "returns": {
          "_0": "(uint256, uint256) Credit balance and credits per token of the         address"
        }
      },
      "creditsBalanceOfHighres(address)": {
        "details": "Gets the credits balance of the specified address.",
        "params": {
          "_account": "The address to query the balance of."
        },
        "returns": {
          "_0": "(uint256, uint256) Credit balance, credits per token of the address"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner has allowed to `_spender`.",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_subtractedValue": "The amount of tokens to decrease the allowance        by."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner has allowed to      `_spender`.      This method should be used instead of approve() to avoid the double      approval vulnerability described above.",
        "params": {
          "_addedValue": "The amount of tokens to increase the allowance by.",
          "_spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Mints new tokens, increasing totalSupply."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rebaseOptIn(address)": {
        "details": "Add a contract address to the non-rebasing exception list. The address's balance will be part of rebases and the account will be exposed to upside and downside."
      },
      "rebaseOptOut(address)": {
        "details": "Explicitly mark that an address is non-rebasing."
      },
      "rebasingCredits()": {
        "returns": {
          "_0": "Low resolution total number of rebasing credits"
        }
      },
      "rebasingCreditsHighres()": {
        "returns": {
          "_0": "High resolution total number of rebasing credits"
        }
      },
      "rebasingCreditsPerToken()": {
        "returns": {
          "_0": "Low resolution rebasingCreditsPerToken"
        }
      },
      "rebasingCreditsPerTokenHighres()": {
        "returns": {
          "_0": "High resolution rebasingCreditsPerToken"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply()": {
        "returns": {
          "_0": "The total supply of USD+."
        }
      },
      "transfer(address,uint256)": {
        "details": "Transfer tokens to a specified address.",
        "params": {
          "_to": "the address to transfer to.",
          "_value": "the amount to be transferred."
        },
        "returns": {
          "_0": "true on success."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another.",
        "params": {
          "_from": "The address you want to send tokens from.",
          "_to": "The address you want to transfer to.",
          "_value": "The amount of tokens to be transferred."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "notice": "Returns the name of the token."
      },
      "symbol()": {
        "notice": "Returns the symbol of the token, usually a shorter version of the name."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 974,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 977,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1827,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2106,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 956,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1271,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25719,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_creditBalances",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25721,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "DELETED_0",
        "offset": 0,
        "slot": "252",
        "type": "t_bytes32"
      },
      {
        "astId": 25723,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 25725,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_name",
        "offset": 0,
        "slot": "254",
        "type": "t_string_storage"
      },
      {
        "astId": 25727,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "255",
        "type": "t_string_storage"
      },
      {
        "astId": 25729,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_rebasingCredits",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 25731,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_rebasingCreditsPerToken",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 25733,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "nonRebasingSupply",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 25735,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "DELETED_1",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 25737,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "DELETED_2",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 25740,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_owners",
        "offset": 0,
        "slot": "261",
        "type": "t_struct(AddressSet)6767_storage"
      },
      {
        "astId": 25742,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "exchange",
        "offset": 0,
        "slot": "263",
        "type": "t_address"
      },
      {
        "astId": 25744,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_decimals",
        "offset": 20,
        "slot": "263",
        "type": "t_uint8"
      },
      {
        "astId": 25746,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "payoutManager",
        "offset": 0,
        "slot": "264",
        "type": "t_address"
      },
      {
        "astId": 25750,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "nonRebasingCreditsPerToken",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25755,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "rebaseState",
        "offset": 0,
        "slot": "266",
        "type": "t_mapping(t_address,t_enum(RebaseOptions)25801)"
      },
      {
        "astId": 25758,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_nonRebaseOwners",
        "offset": 0,
        "slot": "267",
        "type": "t_struct(AddressSet)6767_storage"
      },
      {
        "astId": 25764,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "269",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 25766,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "_status",
        "offset": 0,
        "slot": "270",
        "type": "t_uint256"
      },
      {
        "astId": 25768,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "paused",
        "offset": 0,
        "slot": "271",
        "type": "t_bool"
      },
      {
        "astId": 25771,
        "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
        "label": "roleManager",
        "offset": 1,
        "slot": "271",
        "type": "t_contract(IRoleManager)32417"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRoleManager)32417": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_enum(RebaseOptions)25801": {
        "encoding": "inplace",
        "label": "enum UsdPlusToken.RebaseOptions",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(RebaseOptions)25801)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum UsdPlusToken.RebaseOptions)",
        "numberOfBytes": "32",
        "value": "t_enum(RebaseOptions)25801"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6767_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6766,
            "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6452_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6452_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6447,
            "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6451,
            "contract": "contracts/UsdPlusToken.sol:UsdPlusToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}