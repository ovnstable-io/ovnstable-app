{
  "address": "0xB8F254F316FFa6d53969F8D4b01CAC25Ac8A2d08",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MintBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPayoutTime",
          "type": "uint256"
        }
      ],
      "name": "NextPayoutTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidityIndex",
          "type": "uint256"
        }
      ],
      "name": "PayoutEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "RoleManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FREE_RIDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSURED_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNIT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkWithdraw",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IInsuranceExchange.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "compensate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTwapPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IInsuranceExchange.InputMint",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPayoutTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "odosRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutTimeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IInsuranceExchange.SwapData",
          "name": "swapData",
          "type": "tuple"
        }
      ],
      "name": "premium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "contract IRebaseToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IInsuranceExchange.InputRedeem",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestWaitPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextPayoutTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutTimeRange",
          "type": "uint256"
        }
      ],
      "name": "setPayoutTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippage",
          "type": "uint256"
        }
      ],
      "name": "setSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rebase",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "odosRouter",
              "type": "address"
            }
          ],
          "internalType": "struct InsuranceExchange.SetUpParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setUpParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestWaitPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "40bf9b15fa6a9634a68a371fdb9ed84b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPayoutTime\",\"type\":\"uint256\"}],\"name\":\"NextPayoutTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityIndex\",\"type\":\"uint256\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"RoleManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREE_RIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSURED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWithdraw\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IInsuranceExchange.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"compensate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTwapPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IInsuranceExchange.InputMint\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPayoutTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"odosRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutTimeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IInsuranceExchange.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"premium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"contract IRebaseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IInsuranceExchange.InputRedeem\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWaitPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextPayoutTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutTimeRange\",\"type\":\"uint256\"}],\"name\":\"setPayoutTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippage\",\"type\":\"uint256\"}],\"name\":\"setSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rebase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"odosRouter\",\"type\":\"address\"}],\"internalType\":\"struct InsuranceExchange.SetUpParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setUpParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestWaitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawPeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"compensate((address,address,uint256,bytes),uint256,address)\":{\"details\":\"This function is calling when USD+ (or other plus) make payout and there are some loss value. This method should convert some OVN to asset and transfer it to the Exchanger contract.\",\"params\":{\"assetAmount\":\"needed amount of asset to cover the loss\",\"swapData\":\"consist of odos data to make swap\",\"to\":\"recipient of assets\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"premium((address,address,uint256,bytes))\":{\"details\":\"This function is calling when USD+ (or other plus) make payout and there are extra value. This method should convert this asset to OVN.\",\"params\":{\"swapData\":\"consist of odos data to make swap\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceExchange.sol\":\"InsuranceExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n     **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n     **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n     **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n     **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max - halfWAD) / b, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 halfB = b / 2;\\n    require(a <= (type(uint256).max - halfB) / WAD, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max - halfRAY) / b, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 halfB = b / 2;\\n    require(a <= (type(uint256).max - halfB) / RAY, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, \\\"Errors.MATH_ADDITION_OVERFLOW\\\");\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half down to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n  function wadMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max / b), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * b) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half down to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n  function wadDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n    if (a == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max / WAD), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * WAD) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half down to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n  function rayMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max / b), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * b) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half down to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n  function rayDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n    if (a == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max / RAY), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n    return (a * RAY) / b;\\n  }\\n}\\n\",\"keccak256\":\"0x1145c7fbe12256dc179b4440493ef08a820e73e8ea54fdb9dc9fd6dad5ac07cf\",\"license\":\"agpl-3.0\"},\"contracts/InsuranceExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/WadRayMath.sol\\\";\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IInsuranceExchange.sol\\\";\\nimport \\\"./interfaces/IVelodromeTwap.sol\\\";\\n\\nimport \\\"./interfaces/IRebaseToken.sol\\\";\\nimport \\\"./interfaces/IRoleManager.sol\\\";\\n\\ncontract InsuranceExchange is IInsuranceExchange, Initializable, AccessControlUpgradeable, UUPSUpgradeable, PausableUpgradeable {\\n    using WadRayMath for uint256;\\n\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n    bytes32 public constant FREE_RIDER_ROLE = keccak256(\\\"FREE_RIDER_ROLE\\\");\\n    bytes32 public constant INSURED_ROLE = keccak256(\\\"INSURED_ROLE\\\");\\n    bytes32 public constant UNIT_ROLE = keccak256(\\\"UNIT_ROLE\\\");\\n\\n    IERC20 public asset; // OVN address\\n    IRebaseToken public rebase;\\n    address public odosRouter;\\n\\n    uint256 public mintFee;\\n    uint256 public mintFeeDenominator;\\n\\n    uint256 public redeemFee;\\n    uint256 public redeemFeeDenominator;\\n\\n    uint256 public lastBlockNumber;\\n    uint256 public swapSlippage;\\n\\n    uint256 public nextPayoutTime;\\n    uint256 public payoutPeriod;\\n    uint256 public payoutTimeRange;\\n\\n    mapping(address => uint256) public withdrawRequests;\\n    uint256 public requestWaitPeriod;\\n    uint256 public withdrawPeriod;\\n    IRoleManager public roleManager;\\n\\n    struct SetUpParams {\\n        address asset;\\n        address rebase;\\n        address odosRouter;\\n    }\\n\\n    event PayoutEvent(int256 profit, uint256 newLiquidityIndex);\\n    event RoleManagerUpdated(address roleManager);\\n    event MintBurn(string label, uint256 amount, uint256 fee, address sender);\\n    event NextPayoutTime(uint256 nextPayoutTime);\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public  {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        mintFee = 0;\\n        mintFeeDenominator = 100000;\\n\\n        redeemFee = 0;\\n        redeemFeeDenominator = 100000;\\n\\n        // 1637193600 = 2021-11-18T00:00:00Z\\n        nextPayoutTime = 1637193600;\\n        payoutPeriod = 24 * 60 * 60;\\n        payoutTimeRange = 8 * 60 * 60; // 8 hours\\n\\n        // 3 day in seconds\\n        requestWaitPeriod = 259200;\\n\\n        // 4 day in seconds\\n        withdrawPeriod = 345600;\\n\\n        swapSlippage = 500; // 5%\\n    }\\n\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyAdmin\\n    override\\n    {}\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyInsured() {\\n        require(hasRole(INSURED_ROLE, msg.sender), \\\"Restricted to Insured\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(roleManager.hasRole(PORTFOLIO_AGENT_ROLE, msg.sender), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n\\n    modifier onlyUnit(){\\n        require(roleManager.hasRole(UNIT_ROLE, msg.sender), \\\"Restricted to Unit\\\");\\n        _;\\n    }\\n\\n    modifier oncePerBlock() {\\n        if (!roleManager.hasRole(FREE_RIDER_ROLE, msg.sender)) {\\n            require(lastBlockNumber < block.number, \\\"Only once in block\\\");\\n        }\\n        lastBlockNumber = block.number;\\n        _;\\n    }\\n\\n    function setUpParams(SetUpParams calldata params) external onlyAdmin {\\n        asset = IERC20(params.asset);\\n        rebase = IRebaseToken(params.rebase);\\n        odosRouter = params.odosRouter;\\n    }\\n\\n    function setPayoutTimes(\\n        uint256 _nextPayoutTime,\\n        uint256 _payoutPeriod,\\n        uint256 _payoutTimeRange\\n    ) external onlyPortfolioAgent {\\n        require(_nextPayoutTime != 0, \\\"Zero _nextPayoutTime not allowed\\\");\\n        require(_payoutPeriod != 0, \\\"Zero _payoutPeriod not allowed\\\");\\n        require(_nextPayoutTime > _payoutTimeRange, \\\"_nextPayoutTime shoud be more than _payoutTimeRange\\\");\\n        nextPayoutTime = _nextPayoutTime;\\n        payoutPeriod = _payoutPeriod;\\n        payoutTimeRange = _payoutTimeRange;\\n    }\\n\\n    function setMintFee(uint256 _fee, uint256 _feeDenominator) external onlyPortfolioAgent {\\n        require(_feeDenominator != 0, \\\"Zero denominator not allowed\\\");\\n        mintFee = _fee;\\n        mintFeeDenominator = _feeDenominator;\\n    }\\n\\n    function setRedeemFee(uint256 _fee, uint256 _feeDenominator) external onlyPortfolioAgent {\\n        require(_feeDenominator != 0, \\\"Zero denominator not allowed\\\");\\n        redeemFee = _fee;\\n        redeemFeeDenominator = _feeDenominator;\\n    }\\n\\n    function setWithdrawPeriod(uint256 _requestWaitPeriod, uint256 _withdrawPeriod) external onlyPortfolioAgent {\\n        requestWaitPeriod = _requestWaitPeriod;\\n        withdrawPeriod = _withdrawPeriod;\\n    }\\n\\n    function setRoleManager(address _roleManager) external onlyAdmin {\\n        require(_roleManager != address(0), \\\"Zero address not allowed\\\");\\n        roleManager = IRoleManager(_roleManager);\\n        emit RoleManagerUpdated(_roleManager);\\n    }\\n\\n    function setSwapSlippage(uint256 _swapSlippage) external onlyPortfolioAgent {\\n        require(_swapSlippage != 0, \\\"Zero swapSlippage not allowed\\\");\\n        swapSlippage = _swapSlippage;\\n    }\\n\\n    function mint(InputMint calldata input) external whenNotPaused oncePerBlock {\\n        _mint(input.amount);\\n    }\\n\\n    function _mint(uint256 _amount) internal {\\n        require(_amount > 0, \\\"Amount of asset is zero\\\");\\n        require(asset.balanceOf(msg.sender) >= _amount, \\\"Not enough tokens to mint\\\");\\n\\n        asset.transferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 rebaseAmount = _assetToRebaseAmount(_amount);\\n        uint256 fee;\\n        (rebaseAmount, fee) = _takeFee(rebaseAmount, true);\\n\\n        require(rebaseAmount > 0, \\\"Rebase Amount is zero\\\");\\n        rebase.mint(msg.sender, rebaseAmount);\\n\\n        delete withdrawRequests[msg.sender];\\n        emit MintBurn('mint', rebaseAmount, fee, msg.sender);\\n    }\\n\\n    function _takeFee(uint256 _amount, bool isMint) internal view returns (uint256, uint256){\\n\\n        uint256 fee = isMint ? mintFee : redeemFee;\\n        uint256 feeDenominator = isMint ? mintFeeDenominator : redeemFeeDenominator;\\n\\n        uint256 feeAmount;\\n        uint256 resultAmount;\\n        if (!roleManager.hasRole(FREE_RIDER_ROLE, msg.sender)) {\\n            feeAmount = (_amount * fee) / feeDenominator;\\n            resultAmount = _amount - feeAmount;\\n        } else {\\n            resultAmount = _amount;\\n        }\\n\\n        return (resultAmount, feeAmount);\\n    }\\n\\n\\n    function redeem(InputRedeem calldata input) external whenNotPaused oncePerBlock {\\n        _redeem(input.amount);\\n    }\\n\\n    function _redeem(uint256 _amount) internal {\\n        require(_amount > 0, \\\"Amount of asset is zero\\\");\\n        require(rebase.balanceOf(msg.sender) >= _amount, \\\"Not enough tokens to redeem\\\");\\n\\n        checkWithdraw();\\n\\n        uint256 fee;\\n        uint256 amountFee;\\n        (amountFee, fee) = _takeFee(_amount, false);\\n\\n        uint256 assetAmount = _rebaseAmountToAsset(amountFee);\\n        require(assetAmount > 0, \\\"Amount of asset is zero\\\");\\n\\n        require(asset.balanceOf(address(this)) >= assetAmount, \\\"Not enough for transfer\\\");\\n\\n        asset.transfer(msg.sender, assetAmount);\\n        rebase.burn(msg.sender, _amount);\\n\\n        delete withdrawRequests[msg.sender];\\n        emit MintBurn('redeem', _amount, fee, msg.sender);\\n    }\\n\\n    function _assetToRebaseAmount(uint256 _assetAmount) internal returns (uint256) {\\n        uint256 rebaseDecimals = rebase.decimals();\\n        uint256 assetDecimals = IERC20Metadata(address(asset)).decimals();\\n\\n        uint256 _rebaseAmount;\\n        if (assetDecimals > rebaseDecimals) {\\n            _rebaseAmount = _assetAmount / (10 ** (assetDecimals - rebaseDecimals));\\n        } else {\\n            _rebaseAmount = _assetAmount * (10 ** (rebaseDecimals - assetDecimals));\\n        }\\n        return _rebaseAmount;\\n\\n    }\\n\\n    function _rebaseAmountToAsset(uint256 _rebaseAmount) internal returns (uint256) {\\n\\n        uint256 _assetAmount;\\n        uint256 assetDecimals = IERC20Metadata(address(asset)).decimals();\\n        uint256 rebaseDecimals = rebase.decimals();\\n        if (assetDecimals > rebaseDecimals) {\\n            _assetAmount = _rebaseAmount * (10 ** (assetDecimals - rebaseDecimals));\\n        } else {\\n            _assetAmount = _rebaseAmount / (10 ** (rebaseDecimals - assetDecimals));\\n        }\\n        return _assetAmount;\\n\\n    }\\n\\n    function requestWithdraw() external whenNotPaused {\\n        withdrawRequests[msg.sender] = block.timestamp + requestWaitPeriod;\\n    }\\n\\n    function checkWithdraw() public view {\\n\\n        uint256 date = withdrawRequests[msg.sender];\\n        uint256 currentDate = block.timestamp;\\n\\n        uint256 withdrawDate = date + withdrawPeriod;\\n\\n        require(date != 0, 'need withdraw request');\\n        require(date < currentDate, 'requestWaitPeriod');\\n        require(withdrawDate > currentDate, 'withdrawPeriod');\\n    }\\n\\n    /**\\n     * @dev This function is calling when USD+ (or other plus) make payout and there are extra value.\\n     * This method should convert this asset to OVN.\\n     * @param swapData consist of odos data to make swap\\n     */\\n    function premium(SwapData memory swapData) external onlyInsured {\\n        _swap(swapData);\\n    }\\n\\n    /**\\n     * @dev This function is calling when USD+ (or other plus) make payout and there are some loss value.\\n     * This method should convert some OVN to asset and transfer it to the Exchanger contract.\\n     * @param swapData consist of odos data to make swap\\n     * @param assetAmount needed amount of asset to cover the loss\\n     * @param to recipient of assets\\n     */\\n    function compensate(SwapData memory swapData, uint256 assetAmount, address to) external onlyInsured {\\n        _swap(swapData);\\n        IERC20(swapData.outputTokenAddress).transfer(to, assetAmount);\\n    }\\n\\n    function _swap(SwapData memory swapData) internal {\\n\\n        IERC20 inputAsset = IERC20(swapData.inputTokenAddress);\\n        IERC20 outputAsset = IERC20(swapData.outputTokenAddress);\\n\\n        IERC20 usdAsset = address(inputAsset) == address(asset) ? outputAsset : inputAsset;\\n\\n        inputAsset.approve(odosRouter, swapData.amountIn);\\n\\n        uint256 balanceInBefore = inputAsset.balanceOf(address(this));\\n        uint256 balanceOutBefore = outputAsset.balanceOf(address(this));\\n        inputAsset.approve(odosRouter, swapData.amountIn);\\n        (bool success,) = odosRouter.call{value : 0}(swapData.data);\\n        require(success, \\\"router swap invalid\\\");\\n        uint256 balanceInAfter = inputAsset.balanceOf(address(this));\\n        uint256 balanceOutAfter = outputAsset.balanceOf(address(this));\\n\\n        uint256 amountIn = balanceInBefore - balanceInAfter;\\n        uint256 amountOut = balanceOutAfter - balanceOutBefore;\\n\\n        uint256 ovnDecimals = 10**IERC20Metadata(address(asset)).decimals();\\n        uint256 usdDecimals = 10**IERC20Metadata(address(usdAsset)).decimals();\\n\\n        uint256 price = getTwapPrice(); // 1 ovn = price usd+\\n        // price = price * getPlusTwapPrice(address(usdAsset)) / 1e6;\\n\\n        if (address(inputAsset) == address(asset)) {\\n            // ovn --> usdc\\n            uint256 apprAmountOut = amountIn * price / ovnDecimals;\\n            apprAmountOut = apprAmountOut * (10000 - swapSlippage) / 10000;\\n            require(amountOut > apprAmountOut, 'Large swap slippage (ovn --> usdc)');\\n\\n        } else {\\n            // usdc --> ovn\\n            uint256 apprAmountOut = amountIn * ovnDecimals / price;\\n            apprAmountOut = apprAmountOut * (10000 - swapSlippage) / 10000;\\n            require(amountOut > apprAmountOut, 'Large swap slippage (usdc --> ovn)');\\n        }\\n    }\\n\\n    function payout() external whenNotPaused oncePerBlock onlyUnit {\\n\\n        if (block.timestamp + payoutTimeRange < nextPayoutTime) {\\n            return;\\n        }\\n\\n        uint256 totalAsset = asset.balanceOf(address(this));\\n        totalAsset = _assetToRebaseAmount(totalAsset);\\n\\n        int256 profit = int256(totalAsset) - int256(rebase.totalSupply());\\n\\n        uint256 newLiquidityIndex = totalAsset.wadToRay().rayDiv(rebase.scaledTotalSupply());\\n        rebase.setLiquidityIndex(newLiquidityIndex);\\n\\n        emit PayoutEvent(profit, newLiquidityIndex);\\n\\n        // update next payout time. Cycle for preventing gaps\\n        for (; block.timestamp >= nextPayoutTime - payoutTimeRange;) {\\n            nextPayoutTime = nextPayoutTime + payoutPeriod;\\n        }\\n        emit NextPayoutTime(nextPayoutTime);\\n    }\\n\\n    function getTwapPrice() public view returns (uint256) {\\n        address poolAddress = 0x844D7d2fCa6786Be7De6721AabdfF6957ACE73a0;\\n        IVelodromeTwap velodromeTwap = IVelodromeTwap(poolAddress);\\n\\n        uint256 lastIndex = velodromeTwap.observationLength() - 1;\\n        uint256 firstIndex = lastIndex - 1;\\n\\n        IVelodromeTwap.Observation memory lastObservation = velodromeTwap.observations(lastIndex);\\n        IVelodromeTwap.Observation memory firstObservation = velodromeTwap.observations(firstIndex);\\n\\n        uint256 timeElapsed = lastObservation.timestamp - firstObservation.timestamp;\\n        uint256 reserve0 = (lastObservation.reserve0Cumulative - firstObservation.reserve0Cumulative) / timeElapsed;\\n        uint256 reserve1 = (lastObservation.reserve1Cumulative - firstObservation.reserve1Cumulative) / timeElapsed;\\n        uint256 ovnPrice = reserve1 * 10**IERC20Metadata(address(asset)).decimals() / reserve0; // 1 ovn = ovnPrice usd+\\n        return ovnPrice;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xbfa84949191ade043cde364f10d86a2a8b5311adab5e1885c846b51d45a5cb9b\",\"license\":\"MIT\"},\"contracts/interfaces/IInsuranceExchange.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IInsuranceExchange {\\n\\n    struct SwapData {\\n        address inputTokenAddress;\\n        address outputTokenAddress;\\n        uint256 amountIn;\\n        bytes data;\\n    }\\n\\n    struct InputMint {\\n        uint256 amount;\\n    }\\n\\n    struct InputRedeem {\\n        uint256 amount;\\n    }\\n\\n    function mint(InputMint calldata input) external;\\n\\n    function redeem(InputRedeem calldata input) external;\\n\\n    function payout() external;\\n\\n    function premium(SwapData memory swapData) external;\\n\\n    function compensate(SwapData memory swapData, uint256 assetAmount, address to) external;\\n\\n    function requestWithdraw() external;\\n\\n    function checkWithdraw() external;\\n\\n\\n}\\n\",\"keccak256\":\"0x87ec6f8cc949bf388b60e844f2de359b64505b9501ec823aac821e0a0ef99323\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n\\n    struct StrategyAsset {\\n        address strategy;\\n        uint256 netAssetValue;\\n        uint256 liquidationValue;\\n    }\\n\\n    function strategyAssets() external view returns (StrategyAsset[] memory);\\n\\n    function totalNetAssets() external view returns (uint256);\\n\\n    function totalLiquidationAssets() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x97bf2a7d1d430d602aab42c73bbeb2014e2c7d1bce4290f1b62654fa837150ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n\\n\\n    // --- structs\\n\\n    struct Order {\\n        bool stake;\\n        address strategy;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyWeight {\\n        address strategy;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n        uint256 riskFactor;\\n        bool enabled;\\n        bool enabledReward;\\n    }\\n\\n    function deposit() external;\\n\\n    /**\\n     * @dev\\n     * Withdraw target amount assets from strategies\\n     * Send amount to Exchanger\\n     * @return withdrawAmount - how much PortfolioManager unstake from strategies\\n     * @return isBalanced - executed or not balance function on PortfolioManager\\n     */\\n\\n    function withdraw(uint256 _amount) external returns (uint256 withdrawAmount, bool isBalanced);\\n\\n    function getStrategyWeight(address strategy) external view returns (StrategyWeight memory);\\n\\n    function getAllStrategyWeights() external view returns (StrategyWeight[] memory);\\n\\n    function claimAndBalance() external;\\n\\n    function balance() external;\\n\\n    function getTotalRiskFactor() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eb97f38589433f430e990a8fc0ff45008fc703e93b2255689e1032b7c57ec94\",\"license\":\"MIT\"},\"contracts/interfaces/IRebaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IRebaseToken {\\n\\n    function liquidityIndex() external view returns (uint256);\\n\\n    function mint(address _sender, uint256 _amount) external;\\n\\n    function burn(address _sender, uint256 _amount) external;\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev calculates the total supply of the specific aToken\\n     * since the balance of every single user increases over time, the total supply\\n     * does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalMint() external view returns (uint256);\\n\\n    function totalBurn() external view returns (uint256);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token\\n     * @return the scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    function ownerLength() external view returns (uint256);\\n\\n    function ownerAt(uint256 index) external view returns (address);\\n\\n    function ownerBalanceAt(uint256 index) external view returns (uint256);\\n\\n    function setLiquidityIndex(uint256 liquidityIndex) external;\\n\\n    /**\\n   * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8);\\n\\n}\\n\",\"keccak256\":\"0x2676500af2e0abc12067f6d32fffca7ecf65ce7a471381330fe38c0e13f07aa3\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x89bd46e29de30f4645534e8cc43528ae7e0b6c464edbbdace05c3e61e0a7341f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVelodromeTwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IVelodromeTwap {\\n\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 reserve0Cumulative;\\n        uint256 reserve1Cumulative;\\n    }\\n\\n    function observationLength() external view returns (uint256);\\n\\n    function observations(uint index) external view returns (Observation memory observation);\\n\\n}\",\"keccak256\":\"0x0a654ab9bc70238a7bfe9ef670af5f18c6351d8b04a2468a5711f670a3aec07c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff1615808015620000375750600054600160ff909116105b8062000067575062000054306200014160201b62001ecf1760201c565b15801562000067575060005460ff166001145b620000cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f3576000805461ff0019166101001790555b80156200013a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000150565b6001600160a01b03163b151590565b60805161406f6200018860003960008181610b0e01528181610b4e01528181610c6401528181610ca40152610d33015261406f6000f3fe6080604052600436106102875760003560e01c80635f1af1ca1161015a578063b3423eec116100c1578063d547741f1161007a578063d547741f1461077d578063e5d675211461079d578063eee2bfa0146107bd578063f1d588c5146107d2578063f3869e8d146107f2578063fa88dd151461081257600080fd5b8063b3423eec146106e3578063bc56bebf146106f8578063c12e90e914610718578063ce1aa76b1461072f578063cecbbc0714610746578063d5171bff1461075d57600080fd5b80638321928d116101135780638321928d1461063e57806387bca2561461065f57806391d1485414610676578063965fa21e14610696578063a217fddf146106ad578063af14052c146106c257600080fd5b80635f1af1ca1461059b57806363bd1d4a146105bb578063645a5a97146105d05780636d8ebaa8146105f05780637559c329146106075780638129fc1c1461062957600080fd5b80633659cfe6116101fe57806352df49ec116101b757806352df49ec146104c857806355f920a6146104f65780635c975abb1461052a5780635d8b2406146105425780635db07aee146105625780635dbd733a1461057957600080fd5b80633659cfe61461040b57806338d52e0f1461042b578063497d91921461044c57806349fe395a146104805780634f1ef286146104a057806352d1902d146104b357600080fd5b806323b1a7ce1161025057806323b1a7ce1461034d578063248a9ca31461036f5780632552317c1461039f5780632f2ff15d146103b6578063359792b2146103d657806336568abe146103eb57600080fd5b8062435da51461028c57806301ffc9a7146102ca57806312eb4f9a146102fa57806313966db51461031f5780631aedeabe14610336575b600080fd5b34801561029857600080fd5b5061013c546102ad906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d657600080fd5b506102ea6102e5366004613712565b610832565b60405190151581526020016102c1565b34801561030657600080fd5b5061031161013b5481565b6040519081526020016102c1565b34801561032b57600080fd5b506103116101305481565b34801561034257600080fd5b506103116101355481565b34801561035957600080fd5b5061036d61036836600461373c565b610869565b005b34801561037b57600080fd5b5061031161038a36600461375e565b60009081526065602052604090206001015490565b3480156103ab57600080fd5b506103116101345481565b3480156103c257600080fd5b5061036d6103d1366004613793565b61096c565b3480156103e257600080fd5b5061036d610996565b3480156103f757600080fd5b5061036d610406366004613793565b610a86565b34801561041757600080fd5b5061036d6104263660046137bf565b610b04565b34801561043757600080fd5b5061012d546102ad906001600160a01b031681565b34801561045857600080fd5b506103117fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d781565b34801561048c57600080fd5b5061036d61049b36600461390e565b610be3565b61036d6104ae366004613943565b610c5a565b3480156104bf57600080fd5b50610311610d26565b3480156104d457600080fd5b506103116104e33660046137bf565b6101396020526000908152604090205481565b34801561050257600080fd5b506103117fe6e5e4a4299ddd74b059a6180355bc20e0b6245ea63c35440e9dd562db5bc0f281565b34801561053657600080fd5b5060fb5460ff166102ea565b34801561054e57600080fd5b5061036d61055d36600461373c565b610dd9565b34801561056e57600080fd5b506103116101315481565b34801561058557600080fd5b50610311600080516020613fd383398151915281565b3480156105a757600080fd5b5061036d6105b63660046139a9565b610e83565b3480156105c757600080fd5b5061036d610f41565b3480156105dc57600080fd5b5061036d6105eb3660046139c5565b61137d565b3480156105fc57600080fd5b506103116101365481565b34801561061357600080fd5b50610311600080516020613fb383398151915281565b34801561063557600080fd5b5061036d611473565b34801561064a57600080fd5b5061012f546102ad906001600160a01b031681565b34801561066b57600080fd5b5061031161013a5481565b34801561068257600080fd5b506102ea610691366004613793565b6115eb565b3480156106a257600080fd5b506103116101325481565b3480156106b957600080fd5b50610311600081565b3480156106ce57600080fd5b5061012e546102ad906001600160a01b031681565b3480156106ef57600080fd5b5061036d611616565b34801561070457600080fd5b5061036d61071336600461373c565b61163f565b34801561072457600080fd5b506103116101335481565b34801561073b57600080fd5b506103116101375481565b34801561075257600080fd5b506103116101385481565b34801561076957600080fd5b5061036d6107783660046139a9565b611739565b34801561078957600080fd5b5061036d610798366004613793565b6117f7565b3480156107a957600080fd5b5061036d6107b8366004613a1c565b61181c565b3480156107c957600080fd5b506103116118d6565b3480156107de57600080fd5b5061036d6107ed3660046137bf565b611b57565b3480156107fe57600080fd5b5061036d61080d366004613a2e565b611c23565b34801561081e57600080fd5b5061036d61082d36600461375e565b611ddc565b60006001600160e01b03198216637965db0b60e01b148061086357506301ffc9a760e01b6001600160e01b03198316145b92915050565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea9190613a5a565b61090f5760405162461bcd60e51b815260040161090690613a7c565b60405180910390fd5b8060000361095f5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f776564000000006044820152606401610906565b6101309190915561013155565b60008281526065602052604090206001015461098781611ede565b6109918383611ee8565b505050565b336000908152610139602052604081205461013b54909142916109b99084613ac9565b905082600003610a035760405162461bcd60e51b81526020600482015260156024820152741b995959081dda5d1a191c985dc81c995c5d595cdd605a1b6044820152606401610906565b818310610a465760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd15d85a5d14195c9a5bd9607a1b6044820152606401610906565b8181116109915760405162461bcd60e51b815260206004820152600e60248201526d1dda5d1a191c985dd4195c9a5bd960921b6044820152606401610906565b6001600160a01b0381163314610af65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610906565b610b008282611f6e565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b4c5760405162461bcd60e51b815260040161090690613adc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b95600080516020613ff3833981519152546001600160a01b031690565b6001600160a01b031614610bbb5760405162461bcd60e51b815260040161090690613b28565b610bc481611fd5565b60408051600080825260208201909252610be091839190611ffc565b50565b610c0d7fe6e5e4a4299ddd74b059a6180355bc20e0b6245ea63c35440e9dd562db5bc0f2336115eb565b610c515760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc8125b9cdd5c9959605a1b6044820152606401610906565b610be081612167565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ca25760405162461bcd60e51b815260040161090690613adc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ceb600080516020613ff3833981519152546001600160a01b031690565b6001600160a01b031614610d115760405162461bcd60e51b815260040161090690613b28565b610d1a82611fd5565b610b0082826001611ffc565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dc65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610906565b50600080516020613ff383398151915290565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190613a5a565b610e765760405162461bcd60e51b815260040161090690613a7c565b61013a9190915561013b55565b610e8b61277d565b61013c54604051632474521560e21b8152600080516020613fb383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c9190613a5a565b610f3257436101345410610f325760405162461bcd60e51b815260040161090690613b74565b4361013455610be081356127c3565b610f4961277d565b61013c54604051632474521560e21b8152600080516020613fb383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190613a5a565b610ff057436101345410610ff05760405162461bcd60e51b815260040161090690613b74565b436101345561013c54604051632474521560e21b81527fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d760048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190613a5a565b6110c95760405162461bcd60e51b815260206004820152601260248201527114995cdd1c9a58dd1959081d1bc8155b9a5d60721b6044820152606401610906565b61013654610138546110db9042613ac9565b1061137b5761012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190613ba0565b905061115981612af5565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d59190613ba0565b6111df9083613bb9565b9050600061126d61012e60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190613ba0565b61126785612c4e565b90612c8d565b61012e5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b505060408051858152602081018590527f0a7a57c20d9d19c62887fd6b056b5fdf25dbc2f405a8528cd293c467d5cc6505935001905060405180910390a15b610138546101365461131a9190613be0565b421061133b5761013754610136546113329190613ac9565b61013655611308565b7f6654b7187a0560c4c326844142156c2adf52738d0a615487e0e2a5cd9823c2c46101365460405161136f91815260200190565b60405180910390a15050505b565b6113a77fe6e5e4a4299ddd74b059a6180355bc20e0b6245ea63c35440e9dd562db5bc0f2336115eb565b6113eb5760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc8125b9cdd5c9959605a1b6044820152606401610906565b6113f483612167565b602083015160405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190613a5a565b50505050565b600054610100900460ff16158080156114935750600054600160ff909116105b806114ad5750303b1580156114ad575060005460ff166001145b6115105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610906565b6000805460ff191660011790558015611533576000805461ff0019166101001790555b61153b612d6c565b611543612d93565b61154b612d6c565b611556600033611ee8565b6000610130819055620186a061013181905561013291909155610133556361959780610136556201518061013755617080610138556203f48061013a556205460061013b556101f4610135558015610be0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61161e61277d565b61013a5461162c9042613ac9565b3360009081526101396020526040902055565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561169c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c09190613a5a565b6116dc5760405162461bcd60e51b815260040161090690613a7c565b8060000361172c5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f776564000000006044820152606401610906565b6101329190915561013355565b61174161277d565b61013c54604051632474521560e21b8152600080516020613fb383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c29190613a5a565b6117e8574361013454106117e85760405162461bcd60e51b815260040161090690613b74565b4361013455610be08135612dc2565b60008281526065602052604090206001015461181281611ede565b6109918383611f6e565b6118276000336115eb565b6118435760405162461bcd60e51b815260040161090690613bf3565b61185060208201826137bf565b61012d80546001600160a01b0319166001600160a01b039290921691909117905561188160408201602083016137bf565b61012e80546001600160a01b0319166001600160a01b03929092169190911790556118b260608201604083016137bf565b61012f80546001600160a01b0319166001600160a01b039290921691909117905550565b60008073844d7d2fca6786be7de6721aabdff6957ace73a09050600081905060006001826001600160a01b031663ebeb31db6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190613ba0565b6119659190613be0565b90506000611974600183613be0565b60405163252c09d760e01b8152600481018490529091506000906001600160a01b0385169063252c09d790602401606060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613c21565b60405163252c09d760e01b8152600481018490529091506000906001600160a01b0386169063252c09d790602401606060405180830381865afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a529190613c21565b80518351919250600091611a669190613be0565b905060008183602001518560200151611a7f9190613be0565b611a899190613c7d565b905060008284604001518660400151611aa29190613be0565b611aac9190613c7d565b905060008261012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b299190613c9f565b611b3490600a613da6565b611b3e9084613db5565b611b489190613c7d565b9b9a5050505050505050505050565b611b626000336115eb565b611b7e5760405162461bcd60e51b815260040161090690613bf3565b6001600160a01b038116611bd45760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610906565b61013c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c9906020016115e0565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190613a5a565b611cc05760405162461bcd60e51b815260040161090690613a7c565b82600003611d105760405162461bcd60e51b815260206004820181905260248201527f5a65726f205f6e6578745061796f757454696d65206e6f7420616c6c6f7765646044820152606401610906565b81600003611d605760405162461bcd60e51b815260206004820152601e60248201527f5a65726f205f7061796f7574506572696f64206e6f7420616c6c6f77656400006044820152606401610906565b808311611dcb5760405162461bcd60e51b815260206004820152603360248201527f5f6e6578745061796f757454696d652073686f7564206265206d6f7265207468604482015272616e205f7061796f757454696d6552616e676560681b6064820152608401610906565b610136929092556101375561013855565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190613a5a565b611e795760405162461bcd60e51b815260040161090690613a7c565b80600003611ec95760405162461bcd60e51b815260206004820152601d60248201527f5a65726f2073776170536c697070616765206e6f7420616c6c6f7765640000006044820152606401610906565b61013555565b6001600160a01b03163b151590565b610be08133613053565b611ef282826115eb565b610b005760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f2a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f7882826115eb565b15610b005760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611fe06000336115eb565b610be05760405162461bcd60e51b815260040161090690613bf3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561202f57610991836130ac565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612089575060408051601f3d908101601f1916820190925261208691810190613ba0565b60015b6120ec5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610906565b600080516020613ff3833981519152811461215b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610906565b50610991838383613148565b8051602082015161012d546000906001600160a01b0380851691161461218d578261218f565b815b61012f54604086810151905163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291925084169063095ea7b3906044016020604051808303816000875af11580156121eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220f9190613a5a565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b9190613ba0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156122c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e99190613ba0565b61012f54604088810151905163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291925086169063095ea7b3906044016020604051808303816000875af1158015612345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123699190613a5a565b5061012f5460608701516040516000926001600160a01b031691839161238f9190613df0565b60006040518083038185875af1925050503d80600081146123cc576040519150601f19603f3d011682016040523d82523d6000602084013e6123d1565b606091505b50509050806124185760405162461bcd60e51b81526020600482015260136024820152721c9bdd5d195c881cddd85c081a5b9d985b1a59606a1b6044820152606401610906565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa15801561245f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124839190613ba0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f19190613ba0565b905060006124ff8387613be0565b9050600061250d8684613be0565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125899190613c9f565b61259490600a613da6565b90506000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fa9190613c9f565b61260590600a613da6565b905060006126116118d6565b61012d549091506001600160a01b03908116908e16036126ce576000836126388388613db5565b6126429190613c7d565b9050612710610135546127106126589190613be0565b6126629083613db5565b61266c9190613c7d565b90508085116126c85760405162461bcd60e51b815260206004820152602260248201527f4c61726765207377617020736c69707061676520286f766e202d2d3e20757364604482015261632960f01b6064820152608401610906565b5061276d565b6000816126db8588613db5565b6126e59190613c7d565b9050612710610135546127106126fb9190613be0565b6127059083613db5565b61270f9190613c7d565b905080851161276b5760405162461bcd60e51b815260206004820152602260248201527f4c61726765207377617020736c697070616765202875736463202d2d3e206f766044820152616e2960f01b6064820152608401610906565b505b5050505050505050505050505050565b60fb5460ff161561137b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610906565b600081116127e35760405162461bcd60e51b815260040161090690613e0c565b61012e546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561282c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128509190613ba0565b101561289e5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320746f2072656465656d00000000006044820152606401610906565b6128a6610996565b6000806128b483600061316d565b9250905060006128c38261325e565b9050600081116128e55760405162461bcd60e51b815260040161090690613e0c565b61012d546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561292e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129529190613ba0565b10156129a05760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820666f72207472616e736665720000000000000000006044820152606401610906565b61012d5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156129f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a169190613a5a565b5061012e54604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015612a6457600080fd5b505af1158015612a78573d6000803e3d6000fd5b50503360008181526101396020908152604080832092909255815160808082526006908201526572656465656d60d01b60a08201529081018990528082018890526060810192909252517ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e76269877893509081900360c0019150a150505050565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b709190613c9f565b60ff169050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef9190613c9f565b60ff169050600082821115612c2457612c088383613be0565b612c1390600a613e43565b612c1d9086613c7d565b9050612c46565b612c2e8284613be0565b612c3990600a613e43565b612c439086613db5565b90505b949350505050565b600080612c5f633b9aca0084613db5565b905082612c70633b9aca0083613c7d565b146108635760405162461bcd60e51b815260040161090690613e4f565b600081600003612cdf5760405162461bcd60e51b815260206004820152601c60248201527f4572726f72732e4d4154485f4449564953494f4e5f42595f5a45524f000000006044820152606401610906565b82600003612cef57506000610863565b6000612cfc600284613c7d565b90506b033b2e3c9fd0803ce8000000612d1782600019613be0565b612d219190613c7d565b841115612d405760405162461bcd60e51b815260040161090690613e4f565b8281612d586b033b2e3c9fd0803ce800000087613db5565b612d629190613ac9565b612c469190613c7d565b600054610100900460ff1661137b5760405162461bcd60e51b815260040161090690613e92565b600054610100900460ff16612dba5760405162461bcd60e51b815260040161090690613e92565b61137b6133b8565b60008111612de25760405162461bcd60e51b815260040161090690613e0c565b61012d546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015612e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4f9190613ba0565b1015612e9d5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320746f206d696e74000000000000006044820152606401610906565b61012d546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015612ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f199190613a5a565b506000612f2582612af5565b90506000612f3482600161316d565b909250905081612f7e5760405162461bcd60e51b815260206004820152601560248201527452656261736520416d6f756e74206973207a65726f60581b6044820152606401610906565b61012e546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015612fcb57600080fd5b505af1158015612fdf573d6000803e3d6000fd5b5050336000818152610139602090815260408083209290925581516080808252600490820152631b5a5b9d60e21b60a082015290810187905290810185905260608101919091527ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e762698778925060c001905061136f565b61305d82826115eb565b610b005761306a816133eb565b6130758360206133fd565b604051602001613086929190613edd565b60408051601f198184030181529082905262461bcd60e51b825261090691600401613f52565b6001600160a01b0381163b6131195760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610906565b600080516020613ff383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613151836135a0565b60008251118061315e5750805b156109915761146d83836135e0565b6000806000836131805761013254613185565b610130545b9050600084613197576101335461319c565b610131545b61013c54604051632474521560e21b8152600080516020613fb3833981519152600482015233602482015291925060009182916001600160a01b0316906391d1485490604401602060405180830381865afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132239190613a5a565b61324f5782613232858a613db5565b61323c9190613c7d565b91506132488289613be0565b9050613252565b50865b97909650945050505050565b600080600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132db9190613c9f565b60ff169050600061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335a9190613c9f565b60ff1690508082111561338d576133718183613be0565b61337c90600a613e43565b6133869086613db5565b92506133af565b6133978282613be0565b6133a290600a613e43565b6133ac9086613c7d565b92505b50909392505050565b600054610100900460ff166133df5760405162461bcd60e51b815260040161090690613e92565b60fb805460ff19169055565b60606108636001600160a01b03831660145b6060600061340c836002613db5565b613417906002613ac9565b67ffffffffffffffff81111561342f5761342f6137da565b6040519080825280601f01601f191660200182016040528015613459576020820181803683370190505b509050600360fc1b8160008151811061347457613474613f85565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106134a3576134a3613f85565b60200101906001600160f81b031916908160001a90535060006134c7846002613db5565b6134d2906001613ac9565b90505b600181111561354a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061350657613506613f85565b1a60f81b82828151811061351c5761351c613f85565b60200101906001600160f81b031916908160001a90535060049490941c9361354381613f9b565b90506134d5565b5083156135995760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610906565b9392505050565b6135a9816130ac565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6136485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610906565b600080846001600160a01b0316846040516136639190613df0565b600060405180830381855af49150503d806000811461369e576040519150601f19603f3d011682016040523d82523d6000602084013e6136a3565b606091505b50915091506136cb8282604051806060016040528060278152602001614013602791396136d4565b95945050505050565b606083156136e3575081613599565b61359983838151156136f85781518083602001fd5b8060405162461bcd60e51b81526004016109069190613f52565b60006020828403121561372457600080fd5b81356001600160e01b03198116811461359957600080fd5b6000806040838503121561374f57600080fd5b50508035926020909101359150565b60006020828403121561377057600080fd5b5035919050565b80356001600160a01b038116811461378e57600080fd5b919050565b600080604083850312156137a657600080fd5b823591506137b660208401613777565b90509250929050565b6000602082840312156137d157600080fd5b61359982613777565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261380157600080fd5b813567ffffffffffffffff8082111561381c5761381c6137da565b604051601f8301601f19908116603f01168101908282118183101715613844576138446137da565b8160405283815286602085880101111561385d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006080828403121561388f57600080fd5b6040516080810167ffffffffffffffff82821081831117156138b3576138b36137da565b816040528293506138c385613777565b83526138d160208601613777565b60208401526040850135604084015260608501359150808211156138f457600080fd5b50613901858286016137f0565b6060830152505092915050565b60006020828403121561392057600080fd5b813567ffffffffffffffff81111561393757600080fd5b612c468482850161387d565b6000806040838503121561395657600080fd5b61395f83613777565b9150602083013567ffffffffffffffff81111561397b57600080fd5b613987858286016137f0565b9150509250929050565b6000602082840312156139a357600080fd5b50919050565b6000602082840312156139bb57600080fd5b6135998383613991565b6000806000606084860312156139da57600080fd5b833567ffffffffffffffff8111156139f157600080fd5b6139fd8682870161387d565b93505060208401359150613a1360408501613777565b90509250925092565b6000606082840312156139a357600080fd5b600080600060608486031215613a4357600080fd5b505081359360208301359350604090920135919050565b600060208284031215613a6c57600080fd5b8151801515811461359957600080fd5b6020808252601d908201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561086357610863613ab3565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601290820152714f6e6c79206f6e636520696e20626c6f636b60701b604082015260600190565b600060208284031215613bb257600080fd5b5051919050565b8181036000831280158383131683831282161715613bd957613bd9613ab3565b5092915050565b8181038181111561086357610863613ab3565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b600060608284031215613c3357600080fd5b6040516060810181811067ffffffffffffffff82111715613c5657613c566137da565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600082613c9a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613cb157600080fd5b815160ff8116811461359957600080fd5b600181815b80851115613cfd578160001904821115613ce357613ce3613ab3565b80851615613cf057918102915b93841c9390800290613cc7565b509250929050565b600082613d1457506001610863565b81613d2157506000610863565b8160018114613d375760028114613d4157613d5d565b6001915050610863565b60ff841115613d5257613d52613ab3565b50506001821b610863565b5060208310610133831016604e8410600b8410161715613d80575081810a610863565b613d8a8383613cc2565b8060001904821115613d9e57613d9e613ab3565b029392505050565b600061359960ff841683613d05565b808202811582820484141761086357610863613ab3565b60005b83811015613de7578181015183820152602001613dcf565b50506000910152565b60008251613e02818460208701613dcc565b9190910192915050565b60208082526017908201527f416d6f756e74206f66206173736574206973207a65726f000000000000000000604082015260600190565b60006135998383613d05565b60208082526023908201527f4572726f72732e4d4154485f4d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613f15816017850160208801613dcc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f46816028840160208801613dcc565b01602801949350505050565b6020815260008251806020840152613f71816040850160208701613dcc565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600081613faa57613faa613ab3565b50600019019056fe262f8dca0440d5010bae937fe18daeae459dacb80622baddc3b4f10759ac952ad67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ae9a7d851bd75bb7b5702a5c86a821c28ea360a161905c6df5c6bb6db43f744c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102875760003560e01c80635f1af1ca1161015a578063b3423eec116100c1578063d547741f1161007a578063d547741f1461077d578063e5d675211461079d578063eee2bfa0146107bd578063f1d588c5146107d2578063f3869e8d146107f2578063fa88dd151461081257600080fd5b8063b3423eec146106e3578063bc56bebf146106f8578063c12e90e914610718578063ce1aa76b1461072f578063cecbbc0714610746578063d5171bff1461075d57600080fd5b80638321928d116101135780638321928d1461063e57806387bca2561461065f57806391d1485414610676578063965fa21e14610696578063a217fddf146106ad578063af14052c146106c257600080fd5b80635f1af1ca1461059b57806363bd1d4a146105bb578063645a5a97146105d05780636d8ebaa8146105f05780637559c329146106075780638129fc1c1461062957600080fd5b80633659cfe6116101fe57806352df49ec116101b757806352df49ec146104c857806355f920a6146104f65780635c975abb1461052a5780635d8b2406146105425780635db07aee146105625780635dbd733a1461057957600080fd5b80633659cfe61461040b57806338d52e0f1461042b578063497d91921461044c57806349fe395a146104805780634f1ef286146104a057806352d1902d146104b357600080fd5b806323b1a7ce1161025057806323b1a7ce1461034d578063248a9ca31461036f5780632552317c1461039f5780632f2ff15d146103b6578063359792b2146103d657806336568abe146103eb57600080fd5b8062435da51461028c57806301ffc9a7146102ca57806312eb4f9a146102fa57806313966db51461031f5780631aedeabe14610336575b600080fd5b34801561029857600080fd5b5061013c546102ad906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d657600080fd5b506102ea6102e5366004613712565b610832565b60405190151581526020016102c1565b34801561030657600080fd5b5061031161013b5481565b6040519081526020016102c1565b34801561032b57600080fd5b506103116101305481565b34801561034257600080fd5b506103116101355481565b34801561035957600080fd5b5061036d61036836600461373c565b610869565b005b34801561037b57600080fd5b5061031161038a36600461375e565b60009081526065602052604090206001015490565b3480156103ab57600080fd5b506103116101345481565b3480156103c257600080fd5b5061036d6103d1366004613793565b61096c565b3480156103e257600080fd5b5061036d610996565b3480156103f757600080fd5b5061036d610406366004613793565b610a86565b34801561041757600080fd5b5061036d6104263660046137bf565b610b04565b34801561043757600080fd5b5061012d546102ad906001600160a01b031681565b34801561045857600080fd5b506103117fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d781565b34801561048c57600080fd5b5061036d61049b36600461390e565b610be3565b61036d6104ae366004613943565b610c5a565b3480156104bf57600080fd5b50610311610d26565b3480156104d457600080fd5b506103116104e33660046137bf565b6101396020526000908152604090205481565b34801561050257600080fd5b506103117fe6e5e4a4299ddd74b059a6180355bc20e0b6245ea63c35440e9dd562db5bc0f281565b34801561053657600080fd5b5060fb5460ff166102ea565b34801561054e57600080fd5b5061036d61055d36600461373c565b610dd9565b34801561056e57600080fd5b506103116101315481565b34801561058557600080fd5b50610311600080516020613fd383398151915281565b3480156105a757600080fd5b5061036d6105b63660046139a9565b610e83565b3480156105c757600080fd5b5061036d610f41565b3480156105dc57600080fd5b5061036d6105eb3660046139c5565b61137d565b3480156105fc57600080fd5b506103116101365481565b34801561061357600080fd5b50610311600080516020613fb383398151915281565b34801561063557600080fd5b5061036d611473565b34801561064a57600080fd5b5061012f546102ad906001600160a01b031681565b34801561066b57600080fd5b5061031161013a5481565b34801561068257600080fd5b506102ea610691366004613793565b6115eb565b3480156106a257600080fd5b506103116101325481565b3480156106b957600080fd5b50610311600081565b3480156106ce57600080fd5b5061012e546102ad906001600160a01b031681565b3480156106ef57600080fd5b5061036d611616565b34801561070457600080fd5b5061036d61071336600461373c565b61163f565b34801561072457600080fd5b506103116101335481565b34801561073b57600080fd5b506103116101375481565b34801561075257600080fd5b506103116101385481565b34801561076957600080fd5b5061036d6107783660046139a9565b611739565b34801561078957600080fd5b5061036d610798366004613793565b6117f7565b3480156107a957600080fd5b5061036d6107b8366004613a1c565b61181c565b3480156107c957600080fd5b506103116118d6565b3480156107de57600080fd5b5061036d6107ed3660046137bf565b611b57565b3480156107fe57600080fd5b5061036d61080d366004613a2e565b611c23565b34801561081e57600080fd5b5061036d61082d36600461375e565b611ddc565b60006001600160e01b03198216637965db0b60e01b148061086357506301ffc9a760e01b6001600160e01b03198316145b92915050565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea9190613a5a565b61090f5760405162461bcd60e51b815260040161090690613a7c565b60405180910390fd5b8060000361095f5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f776564000000006044820152606401610906565b6101309190915561013155565b60008281526065602052604090206001015461098781611ede565b6109918383611ee8565b505050565b336000908152610139602052604081205461013b54909142916109b99084613ac9565b905082600003610a035760405162461bcd60e51b81526020600482015260156024820152741b995959081dda5d1a191c985dc81c995c5d595cdd605a1b6044820152606401610906565b818310610a465760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd15d85a5d14195c9a5bd9607a1b6044820152606401610906565b8181116109915760405162461bcd60e51b815260206004820152600e60248201526d1dda5d1a191c985dd4195c9a5bd960921b6044820152606401610906565b6001600160a01b0381163314610af65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610906565b610b008282611f6e565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b4c5760405162461bcd60e51b815260040161090690613adc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b95600080516020613ff3833981519152546001600160a01b031690565b6001600160a01b031614610bbb5760405162461bcd60e51b815260040161090690613b28565b610bc481611fd5565b60408051600080825260208201909252610be091839190611ffc565b50565b610c0d7fe6e5e4a4299ddd74b059a6180355bc20e0b6245ea63c35440e9dd562db5bc0f2336115eb565b610c515760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc8125b9cdd5c9959605a1b6044820152606401610906565b610be081612167565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ca25760405162461bcd60e51b815260040161090690613adc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ceb600080516020613ff3833981519152546001600160a01b031690565b6001600160a01b031614610d115760405162461bcd60e51b815260040161090690613b28565b610d1a82611fd5565b610b0082826001611ffc565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dc65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610906565b50600080516020613ff383398151915290565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190613a5a565b610e765760405162461bcd60e51b815260040161090690613a7c565b61013a9190915561013b55565b610e8b61277d565b61013c54604051632474521560e21b8152600080516020613fb383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c9190613a5a565b610f3257436101345410610f325760405162461bcd60e51b815260040161090690613b74565b4361013455610be081356127c3565b610f4961277d565b61013c54604051632474521560e21b8152600080516020613fb383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190613a5a565b610ff057436101345410610ff05760405162461bcd60e51b815260040161090690613b74565b436101345561013c54604051632474521560e21b81527fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d760048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190613a5a565b6110c95760405162461bcd60e51b815260206004820152601260248201527114995cdd1c9a58dd1959081d1bc8155b9a5d60721b6044820152606401610906565b61013654610138546110db9042613ac9565b1061137b5761012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190613ba0565b905061115981612af5565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d59190613ba0565b6111df9083613bb9565b9050600061126d61012e60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190613ba0565b61126785612c4e565b90612c8d565b61012e5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b505060408051858152602081018590527f0a7a57c20d9d19c62887fd6b056b5fdf25dbc2f405a8528cd293c467d5cc6505935001905060405180910390a15b610138546101365461131a9190613be0565b421061133b5761013754610136546113329190613ac9565b61013655611308565b7f6654b7187a0560c4c326844142156c2adf52738d0a615487e0e2a5cd9823c2c46101365460405161136f91815260200190565b60405180910390a15050505b565b6113a77fe6e5e4a4299ddd74b059a6180355bc20e0b6245ea63c35440e9dd562db5bc0f2336115eb565b6113eb5760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc8125b9cdd5c9959605a1b6044820152606401610906565b6113f483612167565b602083015160405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190613a5a565b50505050565b600054610100900460ff16158080156114935750600054600160ff909116105b806114ad5750303b1580156114ad575060005460ff166001145b6115105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610906565b6000805460ff191660011790558015611533576000805461ff0019166101001790555b61153b612d6c565b611543612d93565b61154b612d6c565b611556600033611ee8565b6000610130819055620186a061013181905561013291909155610133556361959780610136556201518061013755617080610138556203f48061013a556205460061013b556101f4610135558015610be0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61161e61277d565b61013a5461162c9042613ac9565b3360009081526101396020526040902055565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561169c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c09190613a5a565b6116dc5760405162461bcd60e51b815260040161090690613a7c565b8060000361172c5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f776564000000006044820152606401610906565b6101329190915561013355565b61174161277d565b61013c54604051632474521560e21b8152600080516020613fb383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c29190613a5a565b6117e8574361013454106117e85760405162461bcd60e51b815260040161090690613b74565b4361013455610be08135612dc2565b60008281526065602052604090206001015461181281611ede565b6109918383611f6e565b6118276000336115eb565b6118435760405162461bcd60e51b815260040161090690613bf3565b61185060208201826137bf565b61012d80546001600160a01b0319166001600160a01b039290921691909117905561188160408201602083016137bf565b61012e80546001600160a01b0319166001600160a01b03929092169190911790556118b260608201604083016137bf565b61012f80546001600160a01b0319166001600160a01b039290921691909117905550565b60008073844d7d2fca6786be7de6721aabdff6957ace73a09050600081905060006001826001600160a01b031663ebeb31db6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190613ba0565b6119659190613be0565b90506000611974600183613be0565b60405163252c09d760e01b8152600481018490529091506000906001600160a01b0385169063252c09d790602401606060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613c21565b60405163252c09d760e01b8152600481018490529091506000906001600160a01b0386169063252c09d790602401606060405180830381865afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a529190613c21565b80518351919250600091611a669190613be0565b905060008183602001518560200151611a7f9190613be0565b611a899190613c7d565b905060008284604001518660400151611aa29190613be0565b611aac9190613c7d565b905060008261012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b299190613c9f565b611b3490600a613da6565b611b3e9084613db5565b611b489190613c7d565b9b9a5050505050505050505050565b611b626000336115eb565b611b7e5760405162461bcd60e51b815260040161090690613bf3565b6001600160a01b038116611bd45760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610906565b61013c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c9906020016115e0565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190613a5a565b611cc05760405162461bcd60e51b815260040161090690613a7c565b82600003611d105760405162461bcd60e51b815260206004820181905260248201527f5a65726f205f6e6578745061796f757454696d65206e6f7420616c6c6f7765646044820152606401610906565b81600003611d605760405162461bcd60e51b815260206004820152601e60248201527f5a65726f205f7061796f7574506572696f64206e6f7420616c6c6f77656400006044820152606401610906565b808311611dcb5760405162461bcd60e51b815260206004820152603360248201527f5f6e6578745061796f757454696d652073686f7564206265206d6f7265207468604482015272616e205f7061796f757454696d6552616e676560681b6064820152608401610906565b610136929092556101375561013855565b61013c54604051632474521560e21b8152600080516020613fd383398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190613a5a565b611e795760405162461bcd60e51b815260040161090690613a7c565b80600003611ec95760405162461bcd60e51b815260206004820152601d60248201527f5a65726f2073776170536c697070616765206e6f7420616c6c6f7765640000006044820152606401610906565b61013555565b6001600160a01b03163b151590565b610be08133613053565b611ef282826115eb565b610b005760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f2a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f7882826115eb565b15610b005760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611fe06000336115eb565b610be05760405162461bcd60e51b815260040161090690613bf3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561202f57610991836130ac565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612089575060408051601f3d908101601f1916820190925261208691810190613ba0565b60015b6120ec5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610906565b600080516020613ff3833981519152811461215b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610906565b50610991838383613148565b8051602082015161012d546000906001600160a01b0380851691161461218d578261218f565b815b61012f54604086810151905163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291925084169063095ea7b3906044016020604051808303816000875af11580156121eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220f9190613a5a565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b9190613ba0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156122c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e99190613ba0565b61012f54604088810151905163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291925086169063095ea7b3906044016020604051808303816000875af1158015612345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123699190613a5a565b5061012f5460608701516040516000926001600160a01b031691839161238f9190613df0565b60006040518083038185875af1925050503d80600081146123cc576040519150601f19603f3d011682016040523d82523d6000602084013e6123d1565b606091505b50509050806124185760405162461bcd60e51b81526020600482015260136024820152721c9bdd5d195c881cddd85c081a5b9d985b1a59606a1b6044820152606401610906565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa15801561245f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124839190613ba0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f19190613ba0565b905060006124ff8387613be0565b9050600061250d8684613be0565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125899190613c9f565b61259490600a613da6565b90506000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fa9190613c9f565b61260590600a613da6565b905060006126116118d6565b61012d549091506001600160a01b03908116908e16036126ce576000836126388388613db5565b6126429190613c7d565b9050612710610135546127106126589190613be0565b6126629083613db5565b61266c9190613c7d565b90508085116126c85760405162461bcd60e51b815260206004820152602260248201527f4c61726765207377617020736c69707061676520286f766e202d2d3e20757364604482015261632960f01b6064820152608401610906565b5061276d565b6000816126db8588613db5565b6126e59190613c7d565b9050612710610135546127106126fb9190613be0565b6127059083613db5565b61270f9190613c7d565b905080851161276b5760405162461bcd60e51b815260206004820152602260248201527f4c61726765207377617020736c697070616765202875736463202d2d3e206f766044820152616e2960f01b6064820152608401610906565b505b5050505050505050505050505050565b60fb5460ff161561137b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610906565b600081116127e35760405162461bcd60e51b815260040161090690613e0c565b61012e546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561282c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128509190613ba0565b101561289e5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320746f2072656465656d00000000006044820152606401610906565b6128a6610996565b6000806128b483600061316d565b9250905060006128c38261325e565b9050600081116128e55760405162461bcd60e51b815260040161090690613e0c565b61012d546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561292e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129529190613ba0565b10156129a05760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820666f72207472616e736665720000000000000000006044820152606401610906565b61012d5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156129f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a169190613a5a565b5061012e54604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015612a6457600080fd5b505af1158015612a78573d6000803e3d6000fd5b50503360008181526101396020908152604080832092909255815160808082526006908201526572656465656d60d01b60a08201529081018990528082018890526060810192909252517ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e76269877893509081900360c0019150a150505050565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b709190613c9f565b60ff169050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef9190613c9f565b60ff169050600082821115612c2457612c088383613be0565b612c1390600a613e43565b612c1d9086613c7d565b9050612c46565b612c2e8284613be0565b612c3990600a613e43565b612c439086613db5565b90505b949350505050565b600080612c5f633b9aca0084613db5565b905082612c70633b9aca0083613c7d565b146108635760405162461bcd60e51b815260040161090690613e4f565b600081600003612cdf5760405162461bcd60e51b815260206004820152601c60248201527f4572726f72732e4d4154485f4449564953494f4e5f42595f5a45524f000000006044820152606401610906565b82600003612cef57506000610863565b6000612cfc600284613c7d565b90506b033b2e3c9fd0803ce8000000612d1782600019613be0565b612d219190613c7d565b841115612d405760405162461bcd60e51b815260040161090690613e4f565b8281612d586b033b2e3c9fd0803ce800000087613db5565b612d629190613ac9565b612c469190613c7d565b600054610100900460ff1661137b5760405162461bcd60e51b815260040161090690613e92565b600054610100900460ff16612dba5760405162461bcd60e51b815260040161090690613e92565b61137b6133b8565b60008111612de25760405162461bcd60e51b815260040161090690613e0c565b61012d546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015612e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4f9190613ba0565b1015612e9d5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320746f206d696e74000000000000006044820152606401610906565b61012d546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015612ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f199190613a5a565b506000612f2582612af5565b90506000612f3482600161316d565b909250905081612f7e5760405162461bcd60e51b815260206004820152601560248201527452656261736520416d6f756e74206973207a65726f60581b6044820152606401610906565b61012e546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015612fcb57600080fd5b505af1158015612fdf573d6000803e3d6000fd5b5050336000818152610139602090815260408083209290925581516080808252600490820152631b5a5b9d60e21b60a082015290810187905290810185905260608101919091527ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e762698778925060c001905061136f565b61305d82826115eb565b610b005761306a816133eb565b6130758360206133fd565b604051602001613086929190613edd565b60408051601f198184030181529082905262461bcd60e51b825261090691600401613f52565b6001600160a01b0381163b6131195760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610906565b600080516020613ff383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613151836135a0565b60008251118061315e5750805b156109915761146d83836135e0565b6000806000836131805761013254613185565b610130545b9050600084613197576101335461319c565b610131545b61013c54604051632474521560e21b8152600080516020613fb3833981519152600482015233602482015291925060009182916001600160a01b0316906391d1485490604401602060405180830381865afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132239190613a5a565b61324f5782613232858a613db5565b61323c9190613c7d565b91506132488289613be0565b9050613252565b50865b97909650945050505050565b600080600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132db9190613c9f565b60ff169050600061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335a9190613c9f565b60ff1690508082111561338d576133718183613be0565b61337c90600a613e43565b6133869086613db5565b92506133af565b6133978282613be0565b6133a290600a613e43565b6133ac9086613c7d565b92505b50909392505050565b600054610100900460ff166133df5760405162461bcd60e51b815260040161090690613e92565b60fb805460ff19169055565b60606108636001600160a01b03831660145b6060600061340c836002613db5565b613417906002613ac9565b67ffffffffffffffff81111561342f5761342f6137da565b6040519080825280601f01601f191660200182016040528015613459576020820181803683370190505b509050600360fc1b8160008151811061347457613474613f85565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106134a3576134a3613f85565b60200101906001600160f81b031916908160001a90535060006134c7846002613db5565b6134d2906001613ac9565b90505b600181111561354a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061350657613506613f85565b1a60f81b82828151811061351c5761351c613f85565b60200101906001600160f81b031916908160001a90535060049490941c9361354381613f9b565b90506134d5565b5083156135995760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610906565b9392505050565b6135a9816130ac565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6136485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610906565b600080846001600160a01b0316846040516136639190613df0565b600060405180830381855af49150503d806000811461369e576040519150601f19603f3d011682016040523d82523d6000602084013e6136a3565b606091505b50915091506136cb8282604051806060016040528060278152602001614013602791396136d4565b95945050505050565b606083156136e3575081613599565b61359983838151156136f85781518083602001fd5b8060405162461bcd60e51b81526004016109069190613f52565b60006020828403121561372457600080fd5b81356001600160e01b03198116811461359957600080fd5b6000806040838503121561374f57600080fd5b50508035926020909101359150565b60006020828403121561377057600080fd5b5035919050565b80356001600160a01b038116811461378e57600080fd5b919050565b600080604083850312156137a657600080fd5b823591506137b660208401613777565b90509250929050565b6000602082840312156137d157600080fd5b61359982613777565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261380157600080fd5b813567ffffffffffffffff8082111561381c5761381c6137da565b604051601f8301601f19908116603f01168101908282118183101715613844576138446137da565b8160405283815286602085880101111561385d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006080828403121561388f57600080fd5b6040516080810167ffffffffffffffff82821081831117156138b3576138b36137da565b816040528293506138c385613777565b83526138d160208601613777565b60208401526040850135604084015260608501359150808211156138f457600080fd5b50613901858286016137f0565b6060830152505092915050565b60006020828403121561392057600080fd5b813567ffffffffffffffff81111561393757600080fd5b612c468482850161387d565b6000806040838503121561395657600080fd5b61395f83613777565b9150602083013567ffffffffffffffff81111561397b57600080fd5b613987858286016137f0565b9150509250929050565b6000602082840312156139a357600080fd5b50919050565b6000602082840312156139bb57600080fd5b6135998383613991565b6000806000606084860312156139da57600080fd5b833567ffffffffffffffff8111156139f157600080fd5b6139fd8682870161387d565b93505060208401359150613a1360408501613777565b90509250925092565b6000606082840312156139a357600080fd5b600080600060608486031215613a4357600080fd5b505081359360208301359350604090920135919050565b600060208284031215613a6c57600080fd5b8151801515811461359957600080fd5b6020808252601d908201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561086357610863613ab3565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601290820152714f6e6c79206f6e636520696e20626c6f636b60701b604082015260600190565b600060208284031215613bb257600080fd5b5051919050565b8181036000831280158383131683831282161715613bd957613bd9613ab3565b5092915050565b8181038181111561086357610863613ab3565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b600060608284031215613c3357600080fd5b6040516060810181811067ffffffffffffffff82111715613c5657613c566137da565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600082613c9a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613cb157600080fd5b815160ff8116811461359957600080fd5b600181815b80851115613cfd578160001904821115613ce357613ce3613ab3565b80851615613cf057918102915b93841c9390800290613cc7565b509250929050565b600082613d1457506001610863565b81613d2157506000610863565b8160018114613d375760028114613d4157613d5d565b6001915050610863565b60ff841115613d5257613d52613ab3565b50506001821b610863565b5060208310610133831016604e8410600b8410161715613d80575081810a610863565b613d8a8383613cc2565b8060001904821115613d9e57613d9e613ab3565b029392505050565b600061359960ff841683613d05565b808202811582820484141761086357610863613ab3565b60005b83811015613de7578181015183820152602001613dcf565b50506000910152565b60008251613e02818460208701613dcc565b9190910192915050565b60208082526017908201527f416d6f756e74206f66206173736574206973207a65726f000000000000000000604082015260600190565b60006135998383613d05565b60208082526023908201527f4572726f72732e4d4154485f4d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613f15816017850160208801613dcc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f46816028840160208801613dcc565b01602801949350505050565b6020815260008251806020840152613f71816040850160208701613dcc565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600081613faa57613faa613ab3565b50600019019056fe262f8dca0440d5010bae937fe18daeae459dacb80622baddc3b4f10759ac952ad67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ae9a7d851bd75bb7b5702a5c86a821c28ea360a161905c6df5c6bb6db43f744c64736f6c63430008110033",
  "implementation": "0xc1fBe4ceB41551467e3F22fFb22D52da21A9bfBE",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "compensate((address,address,uint256,bytes),uint256,address)": {
        "details": "This function is calling when USD+ (or other plus) make payout and there are some loss value. This method should convert some OVN to asset and transfer it to the Exchanger contract.",
        "params": {
          "assetAmount": "needed amount of asset to cover the loss",
          "swapData": "consist of odos data to make swap",
          "to": "recipient of assets"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "premium((address,address,uint256,bytes))": {
        "details": "This function is calling when USD+ (or other plus) make payout and there are extra value. This method should convert this asset to OVN.",
        "params": {
          "swapData": "consist of odos data to make swap"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 974,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 977,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1827,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2106,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 956,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1271,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1293,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1398,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18454,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "asset",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)4652"
      },
      {
        "astId": 18457,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "rebase",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IRebaseToken)27480"
      },
      {
        "astId": 18459,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "odosRouter",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 18461,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "mintFee",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 18463,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "mintFeeDenominator",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 18465,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "redeemFee",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 18467,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "redeemFeeDenominator",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 18469,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "lastBlockNumber",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 18471,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 18473,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "nextPayoutTime",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 18475,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "payoutPeriod",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 18477,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "payoutTimeRange",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 18481,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "withdrawRequests",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18483,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "requestWaitPeriod",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 18485,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "withdrawPeriod",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      },
      {
        "astId": 18488,
        "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
        "label": "roleManager",
        "offset": 0,
        "slot": "316",
        "type": "t_contract(IRoleManager)27492"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4652": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRebaseToken)27480": {
        "encoding": "inplace",
        "label": "contract IRebaseToken",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleManager)27492": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/InsuranceExchange.sol:InsuranceExchange",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}