{
  "address": "0x0FeEb6C5e5F9b4C506805b308eBC7c6BD2B0A85D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "BuyFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "EventExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "mark2market",
          "type": "address"
        }
      ],
      "name": "Mark2MarketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPayoutTime",
          "type": "uint256"
        }
      ],
      "name": "NextPayoutTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnNotEnoughLimitRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "PaidBuyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "PaidRedeemFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUsdPlus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUsdc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totallyAmountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidityIndex",
          "type": "uint256"
        }
      ],
      "name": "PayoutEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutListener",
          "type": "address"
        }
      ],
      "name": "PayoutListenerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPayoutTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutTimeRange",
          "type": "uint256"
        }
      ],
      "name": "PayoutTimesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "portfolioManager",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdPlus",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdc",
          "type": "address"
        }
      ],
      "name": "TokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSABLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addrTok",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mark2market",
      "outputs": [
        {
          "internalType": "contract IMark2Market",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPayoutTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutListener",
      "outputs": [
        {
          "internalType": "contract IPayoutListener",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutTimeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "contract IPortfolioManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addrTok",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setBuyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mark2market",
          "type": "address"
        }
      ],
      "name": "setMark2Market",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutListener",
          "type": "address"
        }
      ],
      "name": "setPayoutListener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextPayoutTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutTimeRange",
          "type": "uint256"
        }
      ],
      "name": "setPayoutTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolioManager",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdPlus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPlus",
      "outputs": [
        {
          "internalType": "contract UsdPlusToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "28a58dcd122ef338f3a9118034eabd0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EventExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mark2market\",\"type\":\"address\"}],\"name\":\"Mark2MarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPayoutTime\",\"type\":\"uint256\"}],\"name\":\"NextPayoutTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnNotEnoughLimitRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PaidBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PaidRedeemFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsdPlus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totallyAmountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityIndex\",\"type\":\"uint256\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutListener\",\"type\":\"address\"}],\"name\":\"PayoutListenerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPayoutTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutTimeRange\",\"type\":\"uint256\"}],\"name\":\"PayoutTimesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portfolioManager\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"}],\"name\":\"TokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSABLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrTok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mark2market\",\"outputs\":[{\"internalType\":\"contract IMark2Market\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPayoutTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutListener\",\"outputs\":[{\"internalType\":\"contract IPayoutListener\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutTimeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"contract IPortfolioManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrTok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mark2market\",\"type\":\"address\"}],\"name\":\"setMark2Market\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutListener\",\"type\":\"address\"}],\"name\":\"setPayoutListener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextPayoutTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutTimeRange\",\"type\":\"uint256\"}],\"name\":\"setPayoutTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolioManager\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdPlus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPlus\",\"outputs\":[{\"internalType\":\"contract UsdPlusToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(address,uint256)\":{\"params\":{\"_addrTok\":\"Token to withdraw\",\"_amount\":\"Amount of USD+ tokens to burn\"},\"returns\":{\"_0\":\"Amount of minted to caller tokens\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeem(address,uint256)\":{\"params\":{\"_addrTok\":\"Token to withdraw\",\"_amount\":\"Amount of USD+ tokens to burn\"},\"returns\":{\"_0\":\"Amount of unstacked and transferred to caller tokens\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./UsdPlusToken.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\nimport \\\"./PayoutListener.sol\\\";\\n\\ncontract Exchange is Initializable, AccessControlUpgradeable, UUPSUpgradeable, PausableUpgradeable {\\n    using WadRayMath for uint256;\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PAUSABLE_ROLE = keccak256(\\\"PAUSABLE_ROLE\\\");\\n\\n    // ---  fields\\n\\n    UsdPlusToken public usdPlus;\\n    IERC20 public usdc;\\n\\n    IPortfolioManager public portfolioManager; //portfolio manager contract\\n    IMark2Market public mark2market;\\n\\n    uint256 public buyFee;\\n    uint256 public buyFeeDenominator; // ~ 100 %\\n\\n    uint256 public redeemFee;\\n    uint256 public redeemFeeDenominator; // ~ 100 %\\n\\n    // next payout time in epoch seconds\\n    uint256 public nextPayoutTime;\\n\\n    // period between payouts in seconds, need to calc nextPayoutTime\\n    uint256 public payoutPeriod;\\n\\n    // range of time for starting near next payout time at seconds\\n    // if time in [nextPayoutTime-payoutTimeRange;nextPayoutTime+payoutTimeRange]\\n    //    then payouts can be started by payout() method anyone\\n    // else if time more than nextPayoutTime+payoutTimeRange\\n    //    then payouts started by any next buy/redeem\\n    uint256 public payoutTimeRange;\\n\\n    IPayoutListener public payoutListener;\\n\\n    // ---  events\\n\\n    event TokensUpdated(address usdPlus, address usdc);\\n    event Mark2MarketUpdated(address mark2market);\\n    event PortfolioManagerUpdated(address portfolioManager);\\n    event BuyFeeUpdated(uint256 fee, uint256 feeDenominator);\\n    event RedeemFeeUpdated(uint256 fee, uint256 feeDenominator);\\n    event PayoutTimesUpdated(uint256 nextPayoutTime, uint256 payoutPeriod, uint256 payoutTimeRange);\\n    event PayoutListenerUpdated(address payoutListener);\\n\\n    event EventExchange(string label, uint256 amount, uint256 fee, address sender);\\n    event PayoutEvent(\\n        uint256 totalUsdPlus,\\n        uint256 totalUsdc,\\n        uint256 totallyAmountPaid,\\n        uint256 newLiquidityIndex\\n    );\\n    event PaidBuyFee(uint256 amount, uint256 feeAmount);\\n    event PaidRedeemFee(uint256 amount, uint256 feeAmount);\\n    event NextPayoutTime(uint256 nextPayoutTime);\\n    event OnNotEnoughLimitRedeemed(address token, uint256 amount);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPausable() {\\n        require(hasRole(PAUSABLE_ROLE, msg.sender), \\\"Restricted to Pausable\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n        _grantRole(PAUSABLE_ROLE, msg.sender);\\n\\n        buyFee = 40;\\n        buyFeeDenominator = 100000; // ~ 100 %\\n\\n        redeemFee = 40;\\n        redeemFeeDenominator = 100000; // ~ 100 %\\n\\n        nextPayoutTime = 1637193600; // 1637193600 = 2021-11-18T00:00:00Z\\n\\n        payoutPeriod = 24 * 60 * 60;\\n\\n        payoutTimeRange = 15 * 60;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  setters\\n\\n    function setTokens(address _usdPlus, address _usdc) external onlyAdmin {\\n        require(_usdPlus != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdc != address(0), \\\"Zero address not allowed\\\");\\n        usdPlus = UsdPlusToken(_usdPlus);\\n        usdc = IERC20(_usdc);\\n        emit TokensUpdated(_usdPlus, _usdc);\\n    }\\n\\n    function setPortfolioManager(address _portfolioManager) external onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        portfolioManager = IPortfolioManager(_portfolioManager);\\n        emit PortfolioManagerUpdated(_portfolioManager);\\n    }\\n\\n    function setMark2Market(address _mark2market) external onlyAdmin {\\n        require(_mark2market != address(0), \\\"Zero address not allowed\\\");\\n        mark2market = IMark2Market(_mark2market);\\n        emit Mark2MarketUpdated(_mark2market);\\n    }\\n\\n    function setPayoutListener(address _payoutListener) external onlyAdmin {\\n        require(_payoutListener != address(0), \\\"Zero address not allowed\\\");\\n        payoutListener = IPayoutListener(_payoutListener);\\n        emit PayoutListenerUpdated(_payoutListener);\\n    }\\n\\n    function setBuyFee(uint256 _fee, uint256 _feeDenominator) external onlyAdmin {\\n        require(_feeDenominator != 0, \\\"Zero denominator not allowed\\\");\\n        buyFee = _fee;\\n        buyFeeDenominator = _feeDenominator;\\n        emit BuyFeeUpdated(buyFee, buyFeeDenominator);\\n    }\\n\\n    function setRedeemFee(uint256 _fee, uint256 _feeDenominator) external onlyAdmin {\\n        require(_feeDenominator != 0, \\\"Zero denominator not allowed\\\");\\n        redeemFee = _fee;\\n        redeemFeeDenominator = _feeDenominator;\\n        emit RedeemFeeUpdated(redeemFee, redeemFeeDenominator);\\n    }\\n\\n    function setPayoutTimes(\\n        uint256 _nextPayoutTime,\\n        uint256 _payoutPeriod,\\n        uint256 _payoutTimeRange\\n    ) external onlyAdmin {\\n        require(_nextPayoutTime != 0, \\\"Zero _nextPayoutTime not allowed\\\");\\n        require(_payoutPeriod != 0, \\\"Zero _payoutPeriod not allowed\\\");\\n        require(_nextPayoutTime > _payoutTimeRange, \\\"_nextPayoutTime shoud be more than _payoutTimeRange\\\");\\n        nextPayoutTime = _nextPayoutTime;\\n        payoutPeriod = _payoutPeriod;\\n        payoutTimeRange = _payoutTimeRange;\\n        emit PayoutTimesUpdated(nextPayoutTime, payoutPeriod, payoutTimeRange);\\n    }\\n\\n    // ---  logic\\n\\n    function pause() public onlyPausable {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPausable {\\n        _unpause();\\n    }\\n\\n\\n    function balance() public view returns (uint256) {\\n        return usdPlus.balanceOf(msg.sender);\\n    }\\n\\n    /**\\n     * @param _addrTok Token to withdraw\\n     * @param _amount Amount of USD+ tokens to burn\\n     * @return Amount of minted to caller tokens\\n     */\\n    function buy(address _addrTok, uint256 _amount) external whenNotPaused returns (uint256) {\\n        require(_addrTok == address(usdc), \\\"Only USDC tokens currently available for buy\\\");\\n\\n        uint256 currentBalance = IERC20(_addrTok).balanceOf(msg.sender);\\n        require(currentBalance >= _amount, \\\"Not enough tokens to buy\\\");\\n\\n        IERC20(_addrTok).transferFrom(msg.sender, address(portfolioManager), _amount);\\n        portfolioManager.deposit(IERC20(_addrTok), _amount);\\n\\n        uint256 buyFeeAmount = (_amount * buyFee) / buyFeeDenominator;\\n        uint256 buyAmount = _amount - buyFeeAmount;\\n        emit PaidBuyFee(buyAmount, buyFeeAmount);\\n\\n        usdPlus.mint(msg.sender, buyAmount);\\n\\n        emit EventExchange(\\\"buy\\\", buyAmount, buyFeeAmount, msg.sender);\\n\\n        return buyAmount;\\n    }\\n\\n    /**\\n     * @param _addrTok Token to withdraw\\n     * @param _amount Amount of USD+ tokens to burn\\n     * @return Amount of unstacked and transferred to caller tokens\\n     */\\n    function redeem(address _addrTok, uint256 _amount) external whenNotPaused returns (uint256) {\\n        require(_addrTok == address(usdc), \\\"Only USDC tokens currently available for redeem\\\");\\n\\n        uint256 redeemFeeAmount = (_amount * redeemFee) / redeemFeeDenominator;\\n        uint256 redeemAmount = _amount - redeemFeeAmount;\\n        emit PaidRedeemFee(redeemAmount, redeemFeeAmount);\\n\\n        //TODO: Real unstacked amount may be different to redeemAmount\\n        uint256 unstakedAmount = portfolioManager.withdraw(IERC20(_addrTok), redeemAmount);\\n\\n        // Or just burn from sender\\n        usdPlus.burn(msg.sender, _amount);\\n\\n        // TODO: check threshhold limits to withdraw deposite\\n        require(\\n            IERC20(_addrTok).balanceOf(address(this)) >= unstakedAmount,\\n            \\\"Not enough for transfer unstakedAmount\\\"\\n        );\\n        IERC20(_addrTok).transfer(msg.sender, unstakedAmount);\\n\\n        emit EventExchange(\\\"redeem\\\", redeemAmount, redeemFeeAmount, msg.sender);\\n\\n        return unstakedAmount;\\n    }\\n\\n    function payout() public whenNotPaused {\\n        _payout();\\n    }\\n\\n    function _payout() internal {\\n        if (block.timestamp + payoutTimeRange < nextPayoutTime) {\\n            return;\\n        }\\n\\n        // 0. call claiming reward and balancing on PM\\n        // 1. get current amount of USD+\\n        // 2. get total sum of USDC we can get from any source\\n        // 3. calc difference between total count of USD+ and USDC\\n        // 4. update USD+ liquidity index\\n\\n        portfolioManager.claimAndBalance();\\n\\n        uint256 totalUsdPlusSupplyRay = usdPlus.scaledTotalSupply();\\n        uint256 totalUsdPlusSupply = totalUsdPlusSupplyRay.rayToWad();\\n        uint256 totalUsdc = mark2market.totalNetAssets();\\n\\n        uint difference;\\n        if (totalUsdc <= totalUsdPlusSupply) {\\n            difference = totalUsdPlusSupply - totalUsdc;\\n        } else {\\n            difference = totalUsdc - totalUsdPlusSupply;\\n        }\\n\\n        uint256 totalUsdcSupplyRay = totalUsdc.wadToRay();\\n        // in ray\\n        uint256 newLiquidityIndex = totalUsdcSupplyRay.rayDiv(totalUsdPlusSupplyRay);\\n        usdPlus.setLiquidityIndex(newLiquidityIndex);\\n\\n        // notify listener about payout done\\n        if (address(payoutListener) != address(0)) {\\n            payoutListener.payoutDone();\\n        }\\n\\n        emit PayoutEvent(\\n            totalUsdPlusSupply,\\n            totalUsdc,\\n            difference,\\n            newLiquidityIndex\\n        );\\n\\n        // update next payout time. Cycle for preventing gaps\\n        for (; block.timestamp >= nextPayoutTime - payoutTimeRange;) {\\n            nextPayoutTime = nextPayoutTime + payoutPeriod;\\n        }\\n        emit NextPayoutTime(nextPayoutTime);\\n    }\\n}\\n\",\"keccak256\":\"0xecc9f72937c3152dbf15e1a299524d1a449de2fe082101c53ce1a70baa133b9f\",\"license\":\"MIT\"},\"contracts/PayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IPayoutListener.sol\\\";\\n\\n\\nabstract contract PayoutListener is IPayoutListener, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n\\n    address public exchange;\\n\\n\\n    function __PayoutListener_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  events\\n\\n    event ExchangerUpdated(address exchanger);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setExchanger(address _exchanger) external onlyAdmin {\\n        if (exchange != address(0)) {\\n            revokeRole(EXCHANGER, exchange);\\n        }\\n        grantRole(EXCHANGER, _exchanger);\\n        exchange = _exchanger;\\n        emit ExchangerUpdated(_exchanger);\\n    }\\n\\n    uint256[50] private __gap;\\n\\n}\\n\",\"keccak256\":\"0xbbc67656b70f3657f48ff299e31a636266dec8fb7bc4f46f6c7d3c2b664db096\",\"license\":\"MIT\"},\"contracts/UsdPlusToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\n\\ncontract UsdPlusToken is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {\\n    using WadRayMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- ERC20 fields\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // ---  fields\\n\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    uint256 private _totalMint;\\n    uint256 private _totalBurn;\\n\\n    uint256 public liquidityIndexChangeTime;\\n    uint256 public liquidityIndex;\\n    uint256 public liquidityIndexDenominator;\\n\\n    EnumerableSet.AddressSet _owners;\\n\\n    uint256[50] private __gap;\\n\\n    address public exchange;\\n\\n    // ---  events\\n\\n    event ExchangerUpdated(address exchanger);\\n    event LiquidityIndexUpdated(uint256 changeTime, uint256 liquidityIndex);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    // ---  setters\\n\\n    function setExchanger(address _exchanger) external onlyAdmin {\\n        if (exchange != address(0)) {\\n            revokeRole(EXCHANGER, exchange);\\n        }\\n        grantRole(EXCHANGER, _exchanger);\\n        exchange = _exchanger;\\n        emit ExchangerUpdated(_exchanger);\\n    }\\n\\n    function setLiquidityIndex(uint256 _liquidityIndex) external onlyExchanger {\\n        require(_liquidityIndex > 0, \\\"Zero liquidity index not allowed\\\");\\n        liquidityIndex = _liquidityIndex;\\n        liquidityIndexChangeTime = block.timestamp;\\n        emit LiquidityIndexUpdated(liquidityIndexChangeTime, liquidityIndex);\\n    }\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Context_init_unchained();\\n\\n        _name = \\\"USD+\\\";\\n        _symbol = \\\"USD+\\\";\\n\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n\\n        // as Ray\\n        liquidityIndex = 10 ** 27;\\n        // 1 Ray\\n        liquidityIndexDenominator = 10 ** 27;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  logic\\n\\n\\n    function mint(address _sender, uint256 _amount) external onlyExchanger {\\n        // up to ray\\n        uint256 mintAmount = _amount.wadToRay();\\n        mintAmount = mintAmount.rayDiv(liquidityIndex);\\n        _mint(_sender, mintAmount);\\n        _totalMint += mintAmount;\\n        emit Transfer(address(0), _sender, _amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function burn(address _sender, uint256 _amount) external onlyExchanger {\\n        // up to ray\\n        uint256 burnAmount = _amount.wadToRay();\\n        burnAmount = burnAmount.rayDiv(liquidityIndex);\\n        _burn(_sender, burnAmount);\\n        _totalBurn += burnAmount;\\n        emit Transfer(_sender, address(0), _amount);\\n    }\\n\\n    /**\\n    * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        _balances[account] = accountBalance - amount;\\n    }\\n        _totalSupply -= amount;\\n\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n\\n\\n    /**\\n       * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n        _balances[sender] = senderBalance - amount;\\n    }\\n        _balances[recipient] += amount;\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // up to ray\\n        uint256 transferAmount = amount.wadToRay();\\n        transferAmount = transferAmount.rayDiv(liquidityIndex);\\n        _transfer(_msgSender(), recipient, transferAmount);\\n        emit Transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        uint256 allowanceRay = _allowance(owner, spender);\\n        if (allowanceRay > (type(uint256).max / liquidityIndex )) {\\n            return type(uint256).max;\\n        }\\n        allowanceRay = allowanceRay.rayMul(liquidityIndex);\\n\\n        // ray -> wad\\n        return allowanceRay.rayToWad();\\n    }\\n\\n    /**\\n    * @dev See {IERC20-allowance}.\\n     */\\n    function _allowance(address owner, address spender) internal view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool){\\n        uint256 scaledAmount;\\n        if (amount > (type(uint256).max / liquidityIndex / 10 ** 9)) {\\n            scaledAmount = type(uint256).max;\\n        } else {\\n            // up to ray\\n            scaledAmount = amount.wadToRay();\\n            scaledAmount = scaledAmount.rayDiv(liquidityIndex);\\n        }\\n        _approve(_msgSender(), spender, scaledAmount);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // up to ray\\n        uint256 scaledAmount = amount.wadToRay();\\n        scaledAmount = scaledAmount.rayDiv(liquidityIndex);\\n        _transfer(sender, recipient, scaledAmount);\\n\\n        uint256 currentAllowance = _allowance(sender, _msgSender());\\n        require(currentAllowance >= scaledAmount, \\\"UsdPlusToken: transfer amount exceeds allowance\\\");\\n    unchecked {\\n        _approve(sender, _msgSender(), currentAllowance - scaledAmount);\\n    }\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address user)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n    {\\n        // stored balance is ray (27)\\n        uint256 balanceInMapping = _balanceOf(user);\\n        // ray -> ray\\n        uint256 balanceRay = balanceInMapping.rayMul(liquidityIndex);\\n        // ray -> wad\\n        return balanceRay.rayToWad();\\n    }\\n\\n    /**\\n    * @dev See {IERC20-balanceOf}.\\n     */\\n    function _balanceOf(address account) internal view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256) {\\n        return _balanceOf(user);\\n    }\\n\\n\\n    /**\\n     * @dev calculates the total supply of the specific aToken\\n     * since the balance of every single user increases over time, the total supply\\n     * does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override returns (uint256) {\\n        // stored totalSupply is ray (27)\\n        uint256 currentSupply = _totalSupply;\\n        // ray -> ray\\n        uint256 currentSupplyRay = currentSupply.rayMul(liquidityIndex);\\n        // ray -> wad\\n        return currentSupplyRay.rayToWad();\\n    }\\n\\n    function totalMint() external view returns (uint256) {\\n        uint256 totalMintRay = _totalMint.rayMul(liquidityIndex);\\n        return totalMintRay.rayToWad();\\n    }\\n\\n    function totalBurn() external view returns (uint256) {\\n        uint256 totalBurnRay = _totalBurn.rayMul(liquidityIndex);\\n        return totalBurnRay.rayToWad();\\n    }\\n\\n\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        // up to ray\\n        uint256 scaledAmount = addedValue.wadToRay();\\n        scaledAmount = scaledAmount.rayDiv(liquidityIndex);\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + scaledAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        // up to ray\\n        uint256 scaledAmount = subtractedValue.wadToRay();\\n        scaledAmount = scaledAmount.rayDiv(liquidityIndex);\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= scaledAmount, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(_msgSender(), spender, currentAllowance - scaledAmount);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token\\n     * @return the scaled total supply\\n     **/\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n\\n    function ownerLength() external view returns (uint256) {\\n        return _owners.length();\\n    }\\n\\n    function ownerAt(uint256 index) external view returns (address) {\\n        return _owners.at(index);\\n    }\\n\\n    function ownerBalanceAt(uint256 index) external view returns (uint256) {\\n        return balanceOf(_owners.at(index));\\n    }\\n\\n    /**\\n   * @dev Returns the name of the token.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n\\n    /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n\\n    /**\\n    * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n\\n    }\\n\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n\\n        if (from == address(0)) {\\n            // mint\\n            _owners.add(to);\\n        } else if (to == address(0)) {\\n            // burn\\n            if (balanceOf(from) == 0) {\\n                _owners.remove(from);\\n            }\\n        } else {\\n            // transfer\\n            if (balanceOf(from) == 0) {\\n                _owners.remove(from);\\n            }\\n            _owners.add(to);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa5b51581f162f27dca4d7cbfaaf617e854f68f2681f3b008cc1bfcccb76bde00\",\"license\":\"MIT\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n\\n    struct StrategyAsset {\\n        address strategy;\\n        uint256 netAssetValue; // 6 USDC\\n        uint256 liquidationValue; // 6 USDC\\n    }\\n\\n    function strategyAssets() external view returns (StrategyAsset[] memory);\\n\\n    // Return value 10*6\\n    function totalNetAssets() external view returns (uint256);\\n\\n    // Return value 10*6\\n    function totalLiquidationAssets() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x47cb01171dca79b7b858d443bc70712377aef461c6afd89a48b3ee6445cbda79\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IPayoutListener {\\n\\n    function payoutDone() external;\\n\\n}\\n\",\"keccak256\":\"0xf8858b5c4eb6ad9227d60bc1f1e44a3a7670244218d3f84399ee32197aa0f36b\",\"license\":\"MIT\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n\\n\\n    // --- structs\\n\\n    struct Order {\\n        bool stake;\\n        address strategy;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyWeight {\\n        address strategy;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n        bool enabled;\\n        bool enabledReward;\\n    }\\n\\n    function deposit(IERC20 _token, uint256 _amount) external;\\n\\n    function withdraw(IERC20 _token, uint256 _amount) external returns (uint256);\\n\\n    function getStrategyWeight(address strategy) external view returns (StrategyWeight memory);\\n\\n    function getAllStrategyWeights() external view returns (StrategyWeight[] memory);\\n\\n    function claimAndBalance() external;\\n\\n    function balance() external;\\n\\n}\\n\",\"keccak256\":\"0x8cd672ce8e53709ed107ec90c20c7bb6c98eb85f4a08d04f9921f1c69a26e51d\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\n//import {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, 'Errors.MATH_ADDITION_OVERFLOW');\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xfac99582d2db89d9670f7c9c68c0884bc145a558935a90428fd2c4790ff35e67\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16620000365760005460ff161562000040565b62000040620000e5565b620000a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000cb576000805461ffff19166101011790555b8015620000de576000805461ff00191690555b5062000112565b6000620000fd306200010360201b62001a2d1760201c565b15905090565b6001600160a01b03163b151590565b60805160601c612de46200014d60003960008181610b8701528181610bc701528181610d7101528181610db10152610e400152612de46000f3fe6080604052600436106102305760003560e01c80636d8ebaa81161012e578063c12e90e9116100ab578063d547741f1161006f578063d547741f14610627578063f3869e8d14610647578063f695169314610667578063f72c0d8b14610688578063fb0ecfa4146106bc57600080fd5b8063c12e90e9146105a2578063cbc7854e146105b9578063cce7ec13146105d9578063ce1aa76b146105f9578063cecbbc071461061057600080fd5b8063a217fddf116100f2578063a217fddf14610518578063a440b21a1461052d578063a4bb42a11461054d578063b69ef8a81461056d578063bc56bebf1461058257600080fd5b80636d8ebaa8146104a05780638129fc1c146104b75780638456cb59146104cc57806391d14854146104e1578063965fa21e1461050157600080fd5b80633e413bee116101bc57806352d1902d1161018057806352d1902d146104265780635c975abb1461043b578063620b75df1461045357806362f098951461047457806363bd1d4a1461048b57600080fd5b80633e413bee146103a55780633f4ba83a146103c657806347062402146103db5780634f1ef286146103f2578063514e460a1461040557600080fd5b8063248a9ca311610203578063248a9ca3146102f35780632f2ff15d1461032357806336568abe146103455780633659cfe614610365578063370447711461038557600080fd5b806301ffc9a7146102355780630ffd778e1461026a578063182531f81461029a5780631e9a6950146102d3575b600080fd5b34801561024157600080fd5b50610255610250366004612961565b6106dc565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028c600080516020612d8f83398151915281565b604051908152602001610261565b3480156102a657600080fd5b50610138546102bb906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b3480156102df57600080fd5b5061028c6102ee3660046128c0565b610713565b3480156102ff57600080fd5b5061028c61030e36600461290c565b60009081526065602052604090206001015490565b34801561032f57600080fd5b5061034361033e36600461293e565b610ad3565b005b34801561035157600080fd5b5061034361036036600461293e565b610afe565b34801561037157600080fd5b506103436103803660046127b0565b610b7c565b34801561039157600080fd5b506103436103a03660046127b0565b610c5c565b3480156103b157600080fd5b5061012e546102bb906001600160a01b031681565b3480156103d257600080fd5b50610343610cff565b3480156103e757600080fd5b5061028c6101315481565b6103436104003660046127fe565b610d66565b34801561041157600080fd5b5061012d546102bb906001600160a01b031681565b34801561043257600080fd5b5061028c610e33565b34801561044757600080fd5b5060fb5460ff16610255565b34801561045f57600080fd5b5061012f546102bb906001600160a01b031681565b34801561048057600080fd5b5061028c6101325481565b34801561049757600080fd5b50610343610ee6565b3480156104ac57600080fd5b5061028c6101355481565b3480156104c357600080fd5b50610343610f11565b3480156104d857600080fd5b50610343611063565b3480156104ed57600080fd5b506102556104fc36600461293e565b6110c8565b34801561050d57600080fd5b5061028c6101335481565b34801561052457600080fd5b5061028c600081565b34801561053957600080fd5b506103436105483660046127b0565b6110f3565b34801561055957600080fd5b506103436105683660046127b0565b61118f565b34801561057957600080fd5b5061028c61122b565b34801561058e57600080fd5b5061034361059d36600461298b565b6112ad565b3480156105ae57600080fd5b5061028c6101345481565b3480156105c557600080fd5b506103436105d43660046127cb565b61136b565b3480156105e557600080fd5b5061028c6105f43660046128c0565b611447565b34801561060557600080fd5b5061028c6101365481565b34801561061c57600080fd5b5061028c6101375481565b34801561063357600080fd5b5061034361064236600461293e565b6117cd565b34801561065357600080fd5b506103436106623660046129ad565b6117f3565b34801561067357600080fd5b50610130546102bb906001600160a01b031681565b34801561069457600080fd5b5061028c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b3480156106c857600080fd5b506103436106d736600461298b565b611977565b60006001600160e01b03198216637965db0b60e01b148061070d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061072160fb5460ff1690565b156107475760405162461bcd60e51b815260040161073e90612b35565b60405180910390fd5b61012e546001600160a01b038481169116146107bd5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79205553444320746f6b656e732063757272656e746c7920617661696c60448201526e61626c6520666f722072656465656d60881b606482015260840161073e565b60006101345461013354846107d29190612c8c565b6107dc9190612c6a565b905060006107ea8285612cab565b60408051828152602081018590529192507fa95a790e5c54b3292db47a5f1a6ff76b459c701961dfc6c7c88448e7a2b7024d910160405180910390a161012f5460405163f3fef3a360e01b81526001600160a01b03878116600483015260248201849052600092169063f3fef3a390604401602060405180830381600087803b15801561087657600080fd5b505af115801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190612925565b61012d54604051632770a7eb60e21b8152336004820152602481018890529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b1580156108fc57600080fd5b505af1158015610910573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b03891691506370a082319060240160206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190612925565b10156109ea5760405162461bcd60e51b815260206004820152602660248201527f4e6f7420656e6f75676820666f72207472616e7366657220756e7374616b6564604482015265105b5bdd5b9d60d21b606482015260840161073e565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0387169063a9059cbb90604401602060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906128ea565b506040805160808082526006908201526572656465656d60d01b60a0820152602081018490529081018490523360608201527f50823024c91e825c5bec1552c988716271357a1b55f2759e0c1659c9e3f6340f9060c0015b60405180910390a195945050505050565b600082815260656020526040902060010154610aef8133611a3c565b610af98383611aa0565b505050565b6001600160a01b0381163314610b6e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161073e565b610b788282611b26565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bc55760405162461bcd60e51b815260040161073e90612a9d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c0e600080516020612d48833981519152546001600160a01b031690565b6001600160a01b031614610c345760405162461bcd60e51b815260040161073e90612ae9565b610c3d81611b8d565b60408051600080825260208201909252610c5991839190611bb8565b50565b610c676000336110c8565b610c835760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b038116610ca95760405162461bcd60e51b815260040161073e90612bd0565b61013080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd906020015b60405180910390a150565b610d17600080516020612d8f833981519152336110c8565b610d5c5760405162461bcd60e51b81526020600482015260166024820152755265737472696374656420746f205061757361626c6560501b604482015260640161073e565b610d64611d32565b565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610daf5760405162461bcd60e51b815260040161073e90612a9d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610df8600080516020612d48833981519152546001600160a01b031690565b6001600160a01b031614610e1e5760405162461bcd60e51b815260040161073e90612ae9565b610e2782611b8d565b610b7882826001611bb8565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ed35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161073e565b50600080516020612d4883398151915290565b60fb5460ff1615610f095760405162461bcd60e51b815260040161073e90612b35565b610d64611dc5565b600054610100900460ff16610f2c5760005460ff1615610f30565b303b155b610f935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161073e565b600054610100900460ff16158015610fb5576000805461ffff19166101011790555b610fbd612149565b610fc5612170565b610fcd612149565b610fd8600033611aa0565b6110027f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611aa0565b61101a600080516020612d8f83398151915233611aa0565b6028610131819055620186a061013281905561013391909155610134556361959780610135556201518061013655610384610137558015610c59576000805461ff001916905550565b61107b600080516020612d8f833981519152336110c8565b6110c05760405162461bcd60e51b81526020600482015260166024820152755265737472696374656420746f205061757361626c6560501b604482015260640161073e565b610d6461219f565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6110fe6000336110c8565b61111a5760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b0381166111405760405162461bcd60e51b815260040161073e90612bd0565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610cf4565b61119a6000336110c8565b6111b65760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b0381166111dc5760405162461bcd60e51b815260040161073e90612bd0565b61013880546001600160a01b0319166001600160a01b0383169081179091556040519081527fc388495b5a8a549e1885691ef3b8b1cb2b97a91365bbc9f26f488d28caaab84d90602001610cf4565b61012d546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190612925565b905090565b6112b86000336110c8565b6112d45760405162461bcd60e51b815260040161073e90612ba2565b806113215760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f77656400000000604482015260640161073e565b61013382905561013481905560408051838152602081018390527f9fb7dbd1f2c1bd33dd68f78a38f699ff1ca487d7a7211ecc7df31d919f52043d91015b60405180910390a15050565b6113766000336110c8565b6113925760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b0382166113b85760405162461bcd60e51b815260040161073e90612bd0565b6001600160a01b0381166113de5760405162461bcd60e51b815260040161073e90612bd0565b61012d80546001600160a01b038481166001600160a01b0319928316811790935561012e80549185169190921681179091556040805192835260208301919091527fdcc6331013de89f8c595d5328f0a724194f113cb6f8f2a707b3dff6de13f0d17910161135f565b600061145560fb5460ff1690565b156114725760405162461bcd60e51b815260040161073e90612b35565b61012e546001600160a01b038481169116146114e55760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79205553444320746f6b656e732063757272656e746c7920617661696c60448201526b61626c6520666f722062757960a01b606482015260840161073e565b6040516370a0823160e01b81523360048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561152757600080fd5b505afa15801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190612925565b9050828110156115b15760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320746f206275790000000000000000604482015260640161073e565b61012f546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101859052908516906323b872dd90606401602060405180830381600087803b15801561160657600080fd5b505af115801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e91906128ea565b5061012f546040516311f9fbc960e21b81526001600160a01b03868116600483015260248201869052909116906347e7ef2490604401600060405180830381600087803b15801561168e57600080fd5b505af11580156116a2573d6000803e3d6000fd5b5050505060006101325461013154856116bb9190612c8c565b6116c59190612c6a565b905060006116d38286612cab565b60408051828152602081018590529192507fadcdce2403b31a56ae72c878c17b5cd8aaa8f5b92b7fe536355619df57a52387910160405180910390a161012d546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561175c57600080fd5b505af1158015611770573d6000803e3d6000fd5b50506040805160808082526003908201526262757960e81b60a0820152602081018590529081018590523360608201527f50823024c91e825c5bec1552c988716271357a1b55f2759e0c1659c9e3f6340f925060c0019050610ac2565b6000828152606560205260409020600101546117e98133611a3c565b610af98383611b26565b6117fe6000336110c8565b61181a5760405162461bcd60e51b815260040161073e90612ba2565b826118675760405162461bcd60e51b815260206004820181905260248201527f5a65726f205f6e6578745061796f757454696d65206e6f7420616c6c6f776564604482015260640161073e565b816118b45760405162461bcd60e51b815260206004820152601e60248201527f5a65726f205f7061796f7574506572696f64206e6f7420616c6c6f7765640000604482015260640161073e565b80831161191f5760405162461bcd60e51b815260206004820152603360248201527f5f6e6578745061796f757454696d652073686f7564206265206d6f7265207468604482015272616e205f7061796f757454696d6552616e676560681b606482015260840161073e565b61013583905561013682905561013781905560408051848152602081018490529081018290527f182705f356ea3bbbd12c7b4761586a554d391a7703345f81166bbe3f946444999060600160405180910390a1505050565b6119826000336110c8565b61199e5760405162461bcd60e51b815260040161073e90612ba2565b806119eb5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f77656400000000604482015260640161073e565b61013182905561013281905560408051838152602081018390527f28e297c7c282931a994191b735b01eaf17558295f761512a7047f4e1b8dc3b0b910161135f565b6001600160a01b03163b151590565b611a4682826110c8565b610b7857611a5e816001600160a01b031660146121f7565b611a698360206121f7565b604051602001611a7a9291906129f5565b60408051601f198184030181529082905262461bcd60e51b825261073e91600401612a6a565b611aaa82826110c8565b610b785760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611ae23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b3082826110c8565b15610b785760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610b788133611a3c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611beb57610af98361239a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2457600080fd5b505afa925050508015611c54575060408051601f3d908101601f19168201909252611c5191810190612925565b60015b611cb75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161073e565b600080516020612d488339815191528114611d265760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161073e565b50610af9838383612436565b60fb5460ff16611d7b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161073e565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6101355461013754611dd79042612c52565b1015611ddf57565b61012f60009054906101000a90046001600160a01b03166001600160a01b031663c6bbf4cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e3057600080fd5b505af1158015611e44573d6000803e3d6000fd5b50505050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9957600080fd5b505afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190612925565b90506000611ede82612461565b9050600061013060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3157600080fd5b505afa158015611f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f699190612925565b90506000828211611f8557611f7e8284612cab565b9050611f92565b611f8f8383612cab565b90505b6000611f9d836124e9565b90506000611fab8287612528565b61012d5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b158015611ff357600080fd5b505af1158015612007573d6000803e3d6000fd5b5050610138546001600160a01b031615915061208990505761013860009054906101000a90046001600160a01b03166001600160a01b031663f14a74386040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561207057600080fd5b505af1158015612084573d6000803e3d6000fd5b505050505b6040805186815260208101869052908101849052606081018290527f106a59d3805ed5b61e26818a11c688e650c883df2ca2d625f9d9ac6fae9d91799060800160405180910390a15b61013754610135546120e49190612cab565b42106121055761013654610135546120fc9190612c52565b610135556120d2565b7f6654b7187a0560c4c326844142156c2adf52738d0a615487e0e2a5cd9823c2c46101355460405161213991815260200190565b60405180910390a1505050505050565b600054610100900460ff16610d645760405162461bcd60e51b815260040161073e90612c07565b600054610100900460ff166121975760405162461bcd60e51b815260040161073e90612c07565b610d646125f4565b60fb5460ff16156121c25760405162461bcd60e51b815260040161073e90612b35565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611da83390565b60606000612206836002612c8c565b612211906002612c52565b67ffffffffffffffff81111561222957612229612d31565b6040519080825280601f01601f191660200182016040528015612253576020820181803683370190505b509050600360fc1b8160008151811061226e5761226e612d1b565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061229d5761229d612d1b565b60200101906001600160f81b031916908160001a90535060006122c1846002612c8c565b6122cc906001612c52565b90505b6001811115612344576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061230057612300612d1b565b1a60f81b82828151811061231657612316612d1b565b60200101906001600160f81b031916908160001a90535060049490941c9361233d81612cee565b90506122cf565b5083156123935760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161073e565b9392505050565b6001600160a01b0381163b6124075760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161073e565b600080516020612d4883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61243f83612627565b60008251118061244c5750805b15610af95761245b8383612667565b50505050565b6000806124736002633b9aca00612c6a565b905060006124818483612c52565b9050818110156124d35760405162461bcd60e51b815260206004820152601d60248201527f4572726f72732e4d4154485f4144444954494f4e5f4f564552464c4f57000000604482015260640161073e565b6124e1633b9aca0082612c6a565b949350505050565b6000806124fa633b9aca0084612c8c565b90508261250b633b9aca0083612c6a565b1461070d5760405162461bcd60e51b815260040161073e90612b5f565b6000816125775760405162461bcd60e51b815260206004820152601c60248201527f4572726f72732e4d4154485f4449564953494f4e5f42595f5a45524f00000000604482015260640161073e565b6000612584600284612c6a565b90506b033b2e3c9fd0803ce800000061259f82600019612cab565b6125a99190612c6a565b8411156125c85760405162461bcd60e51b815260040161073e90612b5f565b82816125e06b033b2e3c9fd0803ce800000087612c8c565b6125ea9190612c52565b6124e19190612c6a565b600054610100900460ff1661261b5760405162461bcd60e51b815260040161073e90612c07565b60fb805460ff19169055565b6126308161239a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161073e565b600080846001600160a01b0316846040516126ea91906129d9565b600060405180830381855af49150503d8060008114612725576040519150601f19603f3d011682016040523d82523d6000602084013e61272a565b606091505b50915091506127528282604051806060016040528060278152602001612d686027913961275b565b95945050505050565b6060831561276a575081612393565b82511561277a5782518084602001fd5b8160405162461bcd60e51b815260040161073e9190612a6a565b80356001600160a01b03811681146127ab57600080fd5b919050565b6000602082840312156127c257600080fd5b61239382612794565b600080604083850312156127de57600080fd5b6127e783612794565b91506127f560208401612794565b90509250929050565b6000806040838503121561281157600080fd5b61281a83612794565b9150602083013567ffffffffffffffff8082111561283757600080fd5b818501915085601f83011261284b57600080fd5b81358181111561285d5761285d612d31565b604051601f8201601f19908116603f0116810190838211818310171561288557612885612d31565b8160405282815288602084870101111561289e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156128d357600080fd5b6128dc83612794565b946020939093013593505050565b6000602082840312156128fc57600080fd5b8151801515811461239357600080fd5b60006020828403121561291e57600080fd5b5035919050565b60006020828403121561293757600080fd5b5051919050565b6000806040838503121561295157600080fd5b823591506127f560208401612794565b60006020828403121561297357600080fd5b81356001600160e01b03198116811461239357600080fd5b6000806040838503121561299e57600080fd5b50508035926020909101359150565b6000806000606084860312156129c257600080fd5b505081359360208301359350604090920135919050565b600082516129eb818460208701612cc2565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612a2d816017850160208801612cc2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612a5e816028840160208801612cc2565b01602801949350505050565b6020815260008251806020840152612a89816040850160208701612cc2565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526023908201527f4572726f72732e4d4154485f4d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115612c6557612c65612d05565b500190565b600082612c8757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612ca657612ca6612d05565b500290565b600082821015612cbd57612cbd612d05565b500390565b60005b83811015612cdd578181015183820152602001612cc5565b8381111561245b5750506000910152565b600081612cfd57612cfd612d05565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656409b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560a26469706673582212205fc8f9380206fa0d9330c9cb6b8d8949f94c7c1e1bf1ea1fd0eba8036aefd94264736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80636d8ebaa81161012e578063c12e90e9116100ab578063d547741f1161006f578063d547741f14610627578063f3869e8d14610647578063f695169314610667578063f72c0d8b14610688578063fb0ecfa4146106bc57600080fd5b8063c12e90e9146105a2578063cbc7854e146105b9578063cce7ec13146105d9578063ce1aa76b146105f9578063cecbbc071461061057600080fd5b8063a217fddf116100f2578063a217fddf14610518578063a440b21a1461052d578063a4bb42a11461054d578063b69ef8a81461056d578063bc56bebf1461058257600080fd5b80636d8ebaa8146104a05780638129fc1c146104b75780638456cb59146104cc57806391d14854146104e1578063965fa21e1461050157600080fd5b80633e413bee116101bc57806352d1902d1161018057806352d1902d146104265780635c975abb1461043b578063620b75df1461045357806362f098951461047457806363bd1d4a1461048b57600080fd5b80633e413bee146103a55780633f4ba83a146103c657806347062402146103db5780634f1ef286146103f2578063514e460a1461040557600080fd5b8063248a9ca311610203578063248a9ca3146102f35780632f2ff15d1461032357806336568abe146103455780633659cfe614610365578063370447711461038557600080fd5b806301ffc9a7146102355780630ffd778e1461026a578063182531f81461029a5780631e9a6950146102d3575b600080fd5b34801561024157600080fd5b50610255610250366004612961565b6106dc565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028c600080516020612d8f83398151915281565b604051908152602001610261565b3480156102a657600080fd5b50610138546102bb906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b3480156102df57600080fd5b5061028c6102ee3660046128c0565b610713565b3480156102ff57600080fd5b5061028c61030e36600461290c565b60009081526065602052604090206001015490565b34801561032f57600080fd5b5061034361033e36600461293e565b610ad3565b005b34801561035157600080fd5b5061034361036036600461293e565b610afe565b34801561037157600080fd5b506103436103803660046127b0565b610b7c565b34801561039157600080fd5b506103436103a03660046127b0565b610c5c565b3480156103b157600080fd5b5061012e546102bb906001600160a01b031681565b3480156103d257600080fd5b50610343610cff565b3480156103e757600080fd5b5061028c6101315481565b6103436104003660046127fe565b610d66565b34801561041157600080fd5b5061012d546102bb906001600160a01b031681565b34801561043257600080fd5b5061028c610e33565b34801561044757600080fd5b5060fb5460ff16610255565b34801561045f57600080fd5b5061012f546102bb906001600160a01b031681565b34801561048057600080fd5b5061028c6101325481565b34801561049757600080fd5b50610343610ee6565b3480156104ac57600080fd5b5061028c6101355481565b3480156104c357600080fd5b50610343610f11565b3480156104d857600080fd5b50610343611063565b3480156104ed57600080fd5b506102556104fc36600461293e565b6110c8565b34801561050d57600080fd5b5061028c6101335481565b34801561052457600080fd5b5061028c600081565b34801561053957600080fd5b506103436105483660046127b0565b6110f3565b34801561055957600080fd5b506103436105683660046127b0565b61118f565b34801561057957600080fd5b5061028c61122b565b34801561058e57600080fd5b5061034361059d36600461298b565b6112ad565b3480156105ae57600080fd5b5061028c6101345481565b3480156105c557600080fd5b506103436105d43660046127cb565b61136b565b3480156105e557600080fd5b5061028c6105f43660046128c0565b611447565b34801561060557600080fd5b5061028c6101365481565b34801561061c57600080fd5b5061028c6101375481565b34801561063357600080fd5b5061034361064236600461293e565b6117cd565b34801561065357600080fd5b506103436106623660046129ad565b6117f3565b34801561067357600080fd5b50610130546102bb906001600160a01b031681565b34801561069457600080fd5b5061028c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b3480156106c857600080fd5b506103436106d736600461298b565b611977565b60006001600160e01b03198216637965db0b60e01b148061070d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061072160fb5460ff1690565b156107475760405162461bcd60e51b815260040161073e90612b35565b60405180910390fd5b61012e546001600160a01b038481169116146107bd5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79205553444320746f6b656e732063757272656e746c7920617661696c60448201526e61626c6520666f722072656465656d60881b606482015260840161073e565b60006101345461013354846107d29190612c8c565b6107dc9190612c6a565b905060006107ea8285612cab565b60408051828152602081018590529192507fa95a790e5c54b3292db47a5f1a6ff76b459c701961dfc6c7c88448e7a2b7024d910160405180910390a161012f5460405163f3fef3a360e01b81526001600160a01b03878116600483015260248201849052600092169063f3fef3a390604401602060405180830381600087803b15801561087657600080fd5b505af115801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190612925565b61012d54604051632770a7eb60e21b8152336004820152602481018890529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b1580156108fc57600080fd5b505af1158015610910573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b03891691506370a082319060240160206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190612925565b10156109ea5760405162461bcd60e51b815260206004820152602660248201527f4e6f7420656e6f75676820666f72207472616e7366657220756e7374616b6564604482015265105b5bdd5b9d60d21b606482015260840161073e565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0387169063a9059cbb90604401602060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906128ea565b506040805160808082526006908201526572656465656d60d01b60a0820152602081018490529081018490523360608201527f50823024c91e825c5bec1552c988716271357a1b55f2759e0c1659c9e3f6340f9060c0015b60405180910390a195945050505050565b600082815260656020526040902060010154610aef8133611a3c565b610af98383611aa0565b505050565b6001600160a01b0381163314610b6e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161073e565b610b788282611b26565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bc55760405162461bcd60e51b815260040161073e90612a9d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c0e600080516020612d48833981519152546001600160a01b031690565b6001600160a01b031614610c345760405162461bcd60e51b815260040161073e90612ae9565b610c3d81611b8d565b60408051600080825260208201909252610c5991839190611bb8565b50565b610c676000336110c8565b610c835760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b038116610ca95760405162461bcd60e51b815260040161073e90612bd0565b61013080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd906020015b60405180910390a150565b610d17600080516020612d8f833981519152336110c8565b610d5c5760405162461bcd60e51b81526020600482015260166024820152755265737472696374656420746f205061757361626c6560501b604482015260640161073e565b610d64611d32565b565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610daf5760405162461bcd60e51b815260040161073e90612a9d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610df8600080516020612d48833981519152546001600160a01b031690565b6001600160a01b031614610e1e5760405162461bcd60e51b815260040161073e90612ae9565b610e2782611b8d565b610b7882826001611bb8565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ed35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161073e565b50600080516020612d4883398151915290565b60fb5460ff1615610f095760405162461bcd60e51b815260040161073e90612b35565b610d64611dc5565b600054610100900460ff16610f2c5760005460ff1615610f30565b303b155b610f935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161073e565b600054610100900460ff16158015610fb5576000805461ffff19166101011790555b610fbd612149565b610fc5612170565b610fcd612149565b610fd8600033611aa0565b6110027f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611aa0565b61101a600080516020612d8f83398151915233611aa0565b6028610131819055620186a061013281905561013391909155610134556361959780610135556201518061013655610384610137558015610c59576000805461ff001916905550565b61107b600080516020612d8f833981519152336110c8565b6110c05760405162461bcd60e51b81526020600482015260166024820152755265737472696374656420746f205061757361626c6560501b604482015260640161073e565b610d6461219f565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6110fe6000336110c8565b61111a5760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b0381166111405760405162461bcd60e51b815260040161073e90612bd0565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610cf4565b61119a6000336110c8565b6111b65760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b0381166111dc5760405162461bcd60e51b815260040161073e90612bd0565b61013880546001600160a01b0319166001600160a01b0383169081179091556040519081527fc388495b5a8a549e1885691ef3b8b1cb2b97a91365bbc9f26f488d28caaab84d90602001610cf4565b61012d546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190612925565b905090565b6112b86000336110c8565b6112d45760405162461bcd60e51b815260040161073e90612ba2565b806113215760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f77656400000000604482015260640161073e565b61013382905561013481905560408051838152602081018390527f9fb7dbd1f2c1bd33dd68f78a38f699ff1ca487d7a7211ecc7df31d919f52043d91015b60405180910390a15050565b6113766000336110c8565b6113925760405162461bcd60e51b815260040161073e90612ba2565b6001600160a01b0382166113b85760405162461bcd60e51b815260040161073e90612bd0565b6001600160a01b0381166113de5760405162461bcd60e51b815260040161073e90612bd0565b61012d80546001600160a01b038481166001600160a01b0319928316811790935561012e80549185169190921681179091556040805192835260208301919091527fdcc6331013de89f8c595d5328f0a724194f113cb6f8f2a707b3dff6de13f0d17910161135f565b600061145560fb5460ff1690565b156114725760405162461bcd60e51b815260040161073e90612b35565b61012e546001600160a01b038481169116146114e55760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79205553444320746f6b656e732063757272656e746c7920617661696c60448201526b61626c6520666f722062757960a01b606482015260840161073e565b6040516370a0823160e01b81523360048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561152757600080fd5b505afa15801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190612925565b9050828110156115b15760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320746f206275790000000000000000604482015260640161073e565b61012f546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101859052908516906323b872dd90606401602060405180830381600087803b15801561160657600080fd5b505af115801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e91906128ea565b5061012f546040516311f9fbc960e21b81526001600160a01b03868116600483015260248201869052909116906347e7ef2490604401600060405180830381600087803b15801561168e57600080fd5b505af11580156116a2573d6000803e3d6000fd5b5050505060006101325461013154856116bb9190612c8c565b6116c59190612c6a565b905060006116d38286612cab565b60408051828152602081018590529192507fadcdce2403b31a56ae72c878c17b5cd8aaa8f5b92b7fe536355619df57a52387910160405180910390a161012d546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561175c57600080fd5b505af1158015611770573d6000803e3d6000fd5b50506040805160808082526003908201526262757960e81b60a0820152602081018590529081018590523360608201527f50823024c91e825c5bec1552c988716271357a1b55f2759e0c1659c9e3f6340f925060c0019050610ac2565b6000828152606560205260409020600101546117e98133611a3c565b610af98383611b26565b6117fe6000336110c8565b61181a5760405162461bcd60e51b815260040161073e90612ba2565b826118675760405162461bcd60e51b815260206004820181905260248201527f5a65726f205f6e6578745061796f757454696d65206e6f7420616c6c6f776564604482015260640161073e565b816118b45760405162461bcd60e51b815260206004820152601e60248201527f5a65726f205f7061796f7574506572696f64206e6f7420616c6c6f7765640000604482015260640161073e565b80831161191f5760405162461bcd60e51b815260206004820152603360248201527f5f6e6578745061796f757454696d652073686f7564206265206d6f7265207468604482015272616e205f7061796f757454696d6552616e676560681b606482015260840161073e565b61013583905561013682905561013781905560408051848152602081018490529081018290527f182705f356ea3bbbd12c7b4761586a554d391a7703345f81166bbe3f946444999060600160405180910390a1505050565b6119826000336110c8565b61199e5760405162461bcd60e51b815260040161073e90612ba2565b806119eb5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f77656400000000604482015260640161073e565b61013182905561013281905560408051838152602081018390527f28e297c7c282931a994191b735b01eaf17558295f761512a7047f4e1b8dc3b0b910161135f565b6001600160a01b03163b151590565b611a4682826110c8565b610b7857611a5e816001600160a01b031660146121f7565b611a698360206121f7565b604051602001611a7a9291906129f5565b60408051601f198184030181529082905262461bcd60e51b825261073e91600401612a6a565b611aaa82826110c8565b610b785760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611ae23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b3082826110c8565b15610b785760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610b788133611a3c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611beb57610af98361239a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2457600080fd5b505afa925050508015611c54575060408051601f3d908101601f19168201909252611c5191810190612925565b60015b611cb75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161073e565b600080516020612d488339815191528114611d265760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161073e565b50610af9838383612436565b60fb5460ff16611d7b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161073e565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6101355461013754611dd79042612c52565b1015611ddf57565b61012f60009054906101000a90046001600160a01b03166001600160a01b031663c6bbf4cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e3057600080fd5b505af1158015611e44573d6000803e3d6000fd5b50505050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9957600080fd5b505afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190612925565b90506000611ede82612461565b9050600061013060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3157600080fd5b505afa158015611f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f699190612925565b90506000828211611f8557611f7e8284612cab565b9050611f92565b611f8f8383612cab565b90505b6000611f9d836124e9565b90506000611fab8287612528565b61012d5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b158015611ff357600080fd5b505af1158015612007573d6000803e3d6000fd5b5050610138546001600160a01b031615915061208990505761013860009054906101000a90046001600160a01b03166001600160a01b031663f14a74386040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561207057600080fd5b505af1158015612084573d6000803e3d6000fd5b505050505b6040805186815260208101869052908101849052606081018290527f106a59d3805ed5b61e26818a11c688e650c883df2ca2d625f9d9ac6fae9d91799060800160405180910390a15b61013754610135546120e49190612cab565b42106121055761013654610135546120fc9190612c52565b610135556120d2565b7f6654b7187a0560c4c326844142156c2adf52738d0a615487e0e2a5cd9823c2c46101355460405161213991815260200190565b60405180910390a1505050505050565b600054610100900460ff16610d645760405162461bcd60e51b815260040161073e90612c07565b600054610100900460ff166121975760405162461bcd60e51b815260040161073e90612c07565b610d646125f4565b60fb5460ff16156121c25760405162461bcd60e51b815260040161073e90612b35565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611da83390565b60606000612206836002612c8c565b612211906002612c52565b67ffffffffffffffff81111561222957612229612d31565b6040519080825280601f01601f191660200182016040528015612253576020820181803683370190505b509050600360fc1b8160008151811061226e5761226e612d1b565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061229d5761229d612d1b565b60200101906001600160f81b031916908160001a90535060006122c1846002612c8c565b6122cc906001612c52565b90505b6001811115612344576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061230057612300612d1b565b1a60f81b82828151811061231657612316612d1b565b60200101906001600160f81b031916908160001a90535060049490941c9361233d81612cee565b90506122cf565b5083156123935760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161073e565b9392505050565b6001600160a01b0381163b6124075760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161073e565b600080516020612d4883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61243f83612627565b60008251118061244c5750805b15610af95761245b8383612667565b50505050565b6000806124736002633b9aca00612c6a565b905060006124818483612c52565b9050818110156124d35760405162461bcd60e51b815260206004820152601d60248201527f4572726f72732e4d4154485f4144444954494f4e5f4f564552464c4f57000000604482015260640161073e565b6124e1633b9aca0082612c6a565b949350505050565b6000806124fa633b9aca0084612c8c565b90508261250b633b9aca0083612c6a565b1461070d5760405162461bcd60e51b815260040161073e90612b5f565b6000816125775760405162461bcd60e51b815260206004820152601c60248201527f4572726f72732e4d4154485f4449564953494f4e5f42595f5a45524f00000000604482015260640161073e565b6000612584600284612c6a565b90506b033b2e3c9fd0803ce800000061259f82600019612cab565b6125a99190612c6a565b8411156125c85760405162461bcd60e51b815260040161073e90612b5f565b82816125e06b033b2e3c9fd0803ce800000087612c8c565b6125ea9190612c52565b6124e19190612c6a565b600054610100900460ff1661261b5760405162461bcd60e51b815260040161073e90612c07565b60fb805460ff19169055565b6126308161239a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161073e565b600080846001600160a01b0316846040516126ea91906129d9565b600060405180830381855af49150503d8060008114612725576040519150601f19603f3d011682016040523d82523d6000602084013e61272a565b606091505b50915091506127528282604051806060016040528060278152602001612d686027913961275b565b95945050505050565b6060831561276a575081612393565b82511561277a5782518084602001fd5b8160405162461bcd60e51b815260040161073e9190612a6a565b80356001600160a01b03811681146127ab57600080fd5b919050565b6000602082840312156127c257600080fd5b61239382612794565b600080604083850312156127de57600080fd5b6127e783612794565b91506127f560208401612794565b90509250929050565b6000806040838503121561281157600080fd5b61281a83612794565b9150602083013567ffffffffffffffff8082111561283757600080fd5b818501915085601f83011261284b57600080fd5b81358181111561285d5761285d612d31565b604051601f8201601f19908116603f0116810190838211818310171561288557612885612d31565b8160405282815288602084870101111561289e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156128d357600080fd5b6128dc83612794565b946020939093013593505050565b6000602082840312156128fc57600080fd5b8151801515811461239357600080fd5b60006020828403121561291e57600080fd5b5035919050565b60006020828403121561293757600080fd5b5051919050565b6000806040838503121561295157600080fd5b823591506127f560208401612794565b60006020828403121561297357600080fd5b81356001600160e01b03198116811461239357600080fd5b6000806040838503121561299e57600080fd5b50508035926020909101359150565b6000806000606084860312156129c257600080fd5b505081359360208301359350604090920135919050565b600082516129eb818460208701612cc2565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612a2d816017850160208801612cc2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612a5e816028840160208801612cc2565b01602801949350505050565b6020815260008251806020840152612a89816040850160208701612cc2565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526023908201527f4572726f72732e4d4154485f4d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115612c6557612c65612d05565b500190565b600082612c8757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612ca657612ca6612d05565b500290565b600082821015612cbd57612cbd612d05565b500390565b60005b83811015612cdd578181015183820152602001612cc5565b8381111561245b5750506000910152565b600081612cfd57612cfd612d05565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656409b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560a26469706673582212205fc8f9380206fa0d9330c9cb6b8d8949f94c7c1e1bf1ea1fd0eba8036aefd94264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(address,uint256)": {
        "params": {
          "_addrTok": "Token to withdraw",
          "_amount": "Amount of USD+ tokens to burn"
        },
        "returns": {
          "_0": "Amount of minted to caller tokens"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeem(address,uint256)": {
        "params": {
          "_addrTok": "Token to withdraw",
          "_amount": "Amount of USD+ tokens to burn"
        },
        "returns": {
          "_0": "Amount of unstacked and transferred to caller tokens"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 797,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 800,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2394,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2701,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 999,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1021,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1110,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4577,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "usdPlus",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(UsdPlusToken)8806"
      },
      {
        "astId": 4580,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "usdc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)3380"
      },
      {
        "astId": 4583,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IPortfolioManager)8971"
      },
      {
        "astId": 4586,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "mark2market",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IMark2Market)8902"
      },
      {
        "astId": 4588,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "buyFee",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 4590,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "buyFeeDenominator",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 4592,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "redeemFee",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 4594,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "redeemFeeDenominator",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 4596,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "nextPayoutTime",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 4598,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "payoutPeriod",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 4600,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "payoutTimeRange",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 4603,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "payoutListener",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IPayoutListener)8908"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3380": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMark2Market)8902": {
        "encoding": "inplace",
        "label": "contract IMark2Market",
        "numberOfBytes": "20"
      },
      "t_contract(IPayoutListener)8908": {
        "encoding": "inplace",
        "label": "contract IPayoutListener",
        "numberOfBytes": "20"
      },
      "t_contract(IPortfolioManager)8971": {
        "encoding": "inplace",
        "label": "contract IPortfolioManager",
        "numberOfBytes": "20"
      },
      "t_contract(UsdPlusToken)8806": {
        "encoding": "inplace",
        "label": "contract UsdPlusToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}