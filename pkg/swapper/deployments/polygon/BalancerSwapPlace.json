{
  "address": "0x1519814CD74F2Ea6C5580137cCabc70Ea4493426",
  "abi": [
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "swapPlace",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct Structures.SwapRoute",
          "name": "route",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPlaceType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5153f635ec4973d5fc18808fe872d01d47b053c355034bd534cc67f3f5130dd1",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x1519814CD74F2Ea6C5580137cCabc70Ea4493426",
    "transactionIndex": 8,
    "gasUsed": "1036314",
    "logsBloom": "0x
    "blockHash": "0xfeb460d9067da9c060555a870d052160aa0e5677811907318b8cf39deaf65b9d",
    "transactionHash": "0x5153f635ec4973d5fc18808fe872d01d47b053c355034bd534cc67f3f5130dd1",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 30875293,
        "transactionHash": "0x5153f635ec4973d5fc18808fe872d01d47b053c355034bd534cc67f3f5130dd1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x000000000000000000000000e63727cb2b3a8d6e3a2d1df4990f441938b67a34"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000138f260b641dc62000000000000000000000000000000000000000000000001729d6ae99c6c8d370000000000000000000000000000000000000000000004d587e74b0a5a210d0300000000000000000000000000000000000000000000000171647888e62ab0d50000000000000000000000000000000000000000000004d589203d6b1062e965",
        "logIndex": 33,
        "blockHash": "0xfeb460d9067da9c060555a870d052160aa0e5677811907318b8cf39deaf65b9d"
      }
    ],
    "blockNumber": 30875293,
    "cumulativeGasUsed": "1946125",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "80f6ed4829d9b63bc1f1970b0ca13625",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapPlace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct Structures.SwapRoute\",\"name\":\"route\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPlaceType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapplaces/BalancerSwapPlace.sol\":\"BalancerSwapPlace\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ISwapPlace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Structures.sol\\\";\\n\\n\\ninterface ISwapPlace is Structures {\\n\\n    function swapPlaceType() external view returns (string memory);\\n\\n    function swap(\\n        SwapRoute calldata route\\n    ) external returns (uint256);\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xf37794b2f35aa73e880e09365bf4c19c19b26a46558b1e60b16754c7aa080db6\",\"license\":\"GPL-3.0\"},\"contracts/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\ninterface Structures {\\n\\n    struct SwapRoute {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address swapPlace;\\n        address pool;\\n        //        string swapPlaceType;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a58d71fe1caa1018c5add5d1c6d0b372bdcd15b06a165054cfe76200e5596d\",\"license\":\"GPL-3.0\"},\"contracts/connector/BalancerStuff.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVault {\\n\\n    enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\n\\n\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n\\n    function getPoolTokenInfo(bytes32 poolId, address token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        address[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n\\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\\n\\ninterface IBalancerPool {\\n\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\\n\\n\",\"keccak256\":\"0x34306d7ca0aa9a71c19ba4cd2af59d2db0c49a09fca54ac68fa6eb0cee6cf12e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swapplaces/BalancerSwapPlace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../ISwapPlace.sol\\\";\\nimport \\\"../connector/BalancerStuff.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\ncontract BalancerSwapPlace is ISwapPlace {\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IVault public balancerVault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n    function swapPlaceType() external override pure returns (string memory) {\\n        return \\\"BalancerSwapPlace\\\";\\n    }\\n\\n    function swap(SwapRoute calldata route) external override returns (uint256) {\\n\\n        bytes32 poolId = IBalancerPool(route.pool).getPoolId();\\n\\n        IERC20Upgradeable(route.tokenIn).safeIncreaseAllowance(address(balancerVault), IERC20(route.tokenIn).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(\\n            poolId,\\n            IVault.SwapKind.GIVEN_IN,\\n            route.tokenIn,\\n            route.tokenOut,\\n            route.amountIn,\\n            new bytes(0)\\n        );\\n\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(\\n            address(this),\\n            false,\\n            payable(msg.sender),\\n            false\\n        );\\n\\n        return balancerVault.swap(singleSwap, fundManagement, 0, block.timestamp + 600);\\n    }\\n\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) external override view returns (uint256) {\\n\\n        bytes32 poolId = IBalancerPool(pool).getPoolId();\\n\\n        (, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\n        (address[] memory tokens, uint256[] memory balances,) = balancerVault.getPoolTokens(poolId);\\n        (uint256 indexIn, uint256 indexOut) = getIndexes(tokenIn, tokenOut, tokens);\\n\\n\\n        IBalancerPool.SwapRequest memory swapRequest;\\n        swapRequest.kind = IVault.SwapKind.GIVEN_IN;\\n        swapRequest.tokenIn = tokenIn;\\n        swapRequest.tokenOut = tokenOut;\\n        swapRequest.amount = amountIn;\\n\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\n            return IBalancerPool(pool).onSwap(\\n                swapRequest,\\n                balances,\\n                indexIn,\\n                indexOut\\n            );\\n        }\\n\\n        if (\\n            poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO ||\\n            poolSpecialization == IVault.PoolSpecialization.TWO_TOKEN\\n        ) {\\n            return IBalancerPool(pool).onSwap(\\n                swapRequest,\\n                balances[indexIn],\\n                balances[indexOut]\\n            );\\n        }\\n\\n        revert(\\\"Unknown balancer poolSpecialization\\\");\\n    }\\n\\n\\n    function getIndexes(\\n        address tokenIn,\\n        address tokenOut,\\n        address[] memory tokens\\n    ) internal pure returns (uint256, uint256){\\n        uint256 indexIn = type(uint256).max;\\n        uint256 indexOut = type(uint256).max;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokens[i] == tokenIn) {\\n                indexIn = i;\\n            } else if (tokens[i] == tokenOut) {\\n                indexOut = i;\\n            }\\n        }\\n        require(\\n            indexIn != type(uint256).max && indexOut != type(uint256).max,\\n            \\\"Can't find index for tokens in pool\\\"\\n        );\\n        return (indexIn, indexOut);\\n    }\\n}\\n\",\"keccak256\":\"0x9be936d911027d626e31e8de78a5a052971521030d08d75a2f6517abc60d067e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b03191673ba12222222228d8ba445958a75a0704d566bf2c817905534801561003657600080fd5b50611160806100466000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063158274a5146100515780635acbbdf51461008157806388030a98146100a2578063d476af69146100b5575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610d7b565b6100e8565b604051908152602001610078565b6100946100b0366004610bda565b61034e565b604080518082018252601181527042616c616e63657253776170506c61636560781b602082015290516100789190610eb2565b6000806100fb60c0840160a08501610bbd565b6001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190610d62565b600054909150610221906001600160a01b031661018b6020860186610bbd565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102049190610d62565b6102116020870187610bbd565b6001600160a01b031691906106f9565b6040805160c08101825282815260006020808301829052909282019061024990870187610bbd565b6001600160a01b0316815260200185602001602081019061026a9190610bbd565b6001600160a01b03908116825260408781013560208085019190915281516000808252818301845294830152815160808101835230815290810184905233918101919091526060810183905282549394509216906352bbbe2990849084906102d44261025861105b565b6040518563ffffffff1660e01b81526004016102f39493929190610ec5565b602060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103459190610d62565b95945050505050565b600080826001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561038a57600080fd5b505afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c29190610d62565b6000805460405163f6c0092760e01b81526004810184905292935090916001600160a01b039091169063f6c0092790602401604080518083038186803b15801561040b57600080fd5b505afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104439190610c2d565b60008054604051631f29a8cd60e31b81526004810187905292945090925082916001600160a01b039091169063f94d46689060240160006040518083038186803b15801561049057600080fd5b505afa1580156104a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104cc9190810190610c6b565b50915091506000806104df8b8b866107e2565b9150915061053660408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b60008082526001600160a01b038d811660208401528c166040830152606082018b905286600281111561056b5761056b6110d0565b14156106005760405162f64aa560e11b81526001600160a01b038a16906301ec954a906105a2908490889088908890600401610f80565b60206040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f29190610d62565b9750505050505050506106f1565b6001866002811115610614576106146110d0565b14806106315750600286600281111561062f5761062f6110d0565b145b1561069857886001600160a01b0316639d2c110c82868681518110610658576106586110e6565b6020026020010151878681518110610672576106726110e6565b60200260200101516040518463ffffffff1660e01b81526004016105a293929190610fe1565b60405162461bcd60e51b815260206004820152602360248201527f556e6b6e6f776e2062616c616e63657220706f6f6c5370656369616c697a617460448201526234b7b760e91b60648201526084015b60405180910390fd5b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561074557600080fd5b505afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190610d62565b610787919061105b565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506107dc9085906108f1565b50505050565b60008060001980825b855181101561087857876001600160a01b0316868281518110610810576108106110e6565b60200260200101516001600160a01b0316141561082f57809250610866565b866001600160a01b031686828151811061084b5761084b6110e6565b60200260200101516001600160a01b03161415610866578091505b806108708161109f565b9150506107eb565b50600019821415801561088d57506000198114155b6108e55760405162461bcd60e51b815260206004820152602360248201527f43616e27742066696e6420696e64657820666f7220746f6b656e7320696e20706044820152621bdbdb60ea1b60648201526084016106e8565b90969095509350505050565b6000610946826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109c89092919063ffffffff16565b8051909150156109c357808060200190518101906109649190610d40565b6109c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e8565b505050565b60606109d784846000856109e1565b90505b9392505050565b606082471015610a425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e8565b6001600160a01b0385163b610a995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e8565b600080866001600160a01b03168587604051610ab59190610e96565b60006040518083038185875af1925050503d8060008114610af2576040519150601f19603f3d011682016040523d82523d6000602084013e610af7565b606091505b5091509150610b07828286610b12565b979650505050505050565b60608315610b215750816109da565b825115610b315782518084602001fd5b8160405162461bcd60e51b81526004016106e89190610eb2565b600082601f830112610b5c57600080fd5b81516020610b71610b6c83611037565b611006565b80838252828201915082860187848660051b8901011115610b9157600080fd5b60005b85811015610bb057815184529284019290840190600101610b94565b5090979650505050505050565b600060208284031215610bcf57600080fd5b81356109da81611112565b60008060008060808587031215610bf057600080fd5b8435610bfb81611112565b93506020850135610c0b81611112565b9250604085013591506060850135610c2281611112565b939692955090935050565b60008060408385031215610c4057600080fd5b8251610c4b81611112565b602084015190925060038110610c6057600080fd5b809150509250929050565b600080600060608486031215610c8057600080fd5b835167ffffffffffffffff80821115610c9857600080fd5b818601915086601f830112610cac57600080fd5b81516020610cbc610b6c83611037565b8083825282820191508286018b848660051b8901011115610cdc57600080fd5b600096505b84871015610d08578051610cf481611112565b835260019690960195918301918301610ce1565b5091890151919750909350505080821115610d2257600080fd5b50610d2f86828701610b4b565b925050604084015190509250925092565b600060208284031215610d5257600080fd5b815180151581146109da57600080fd5b600060208284031215610d7457600080fd5b5051919050565b600060c08284031215610d8d57600080fd5b50919050565b60008151808452610dab816020860160208601611073565b601f01601f19169290920160200192915050565b60028110610ddd57634e487b7160e01b600052602160045260246000fd5b9052565b6000610120610df1848451610dbf565b6020838101516001600160a01b03169085015260408084015190610e1f908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151610e5860c08601826001600160a01b03169052565b5060e0830151610e7360e08601826001600160a01b03169052565b50610100808401518282870152610e8c83870182610d93565b9695505050505050565b60008251610ea8818460208701611073565b9190910192915050565b6020815260006109da6020830184610d93565b60e08152845160e082015260006020860151610ee5610100840182610dbf565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152610f2e6101a0840182610d93565b915050610f6e602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000610f936080830187610de1565b82810360208481019190915286518083528782019282019060005b81811015610fca57845183529383019391830191600101610fae565b505060408501969096525050506060015292915050565b606081526000610ff46060830186610de1565b60208301949094525060400152919050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561102f5761102f6110fc565b604052919050565b600067ffffffffffffffff821115611051576110516110fc565b5060051b60200190565b6000821982111561106e5761106e6110ba565b500190565b60005b8381101561108e578181015183820152602001611076565b838111156107dc5750506000910152565b60006000198214156110b3576110b36110ba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461112757600080fd5b5056fea26469706673582212203da256f67c780400d2f529579358137ca5cca46be090fdb14e8c7d86b267f7b864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063158274a5146100515780635acbbdf51461008157806388030a98146100a2578063d476af69146100b5575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610d7b565b6100e8565b604051908152602001610078565b6100946100b0366004610bda565b61034e565b604080518082018252601181527042616c616e63657253776170506c61636560781b602082015290516100789190610eb2565b6000806100fb60c0840160a08501610bbd565b6001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190610d62565b600054909150610221906001600160a01b031661018b6020860186610bbd565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102049190610d62565b6102116020870187610bbd565b6001600160a01b031691906106f9565b6040805160c08101825282815260006020808301829052909282019061024990870187610bbd565b6001600160a01b0316815260200185602001602081019061026a9190610bbd565b6001600160a01b03908116825260408781013560208085019190915281516000808252818301845294830152815160808101835230815290810184905233918101919091526060810183905282549394509216906352bbbe2990849084906102d44261025861105b565b6040518563ffffffff1660e01b81526004016102f39493929190610ec5565b602060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103459190610d62565b95945050505050565b600080826001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561038a57600080fd5b505afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c29190610d62565b6000805460405163f6c0092760e01b81526004810184905292935090916001600160a01b039091169063f6c0092790602401604080518083038186803b15801561040b57600080fd5b505afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104439190610c2d565b60008054604051631f29a8cd60e31b81526004810187905292945090925082916001600160a01b039091169063f94d46689060240160006040518083038186803b15801561049057600080fd5b505afa1580156104a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104cc9190810190610c6b565b50915091506000806104df8b8b866107e2565b9150915061053660408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b60008082526001600160a01b038d811660208401528c166040830152606082018b905286600281111561056b5761056b6110d0565b14156106005760405162f64aa560e11b81526001600160a01b038a16906301ec954a906105a2908490889088908890600401610f80565b60206040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f29190610d62565b9750505050505050506106f1565b6001866002811115610614576106146110d0565b14806106315750600286600281111561062f5761062f6110d0565b145b1561069857886001600160a01b0316639d2c110c82868681518110610658576106586110e6565b6020026020010151878681518110610672576106726110e6565b60200260200101516040518463ffffffff1660e01b81526004016105a293929190610fe1565b60405162461bcd60e51b815260206004820152602360248201527f556e6b6e6f776e2062616c616e63657220706f6f6c5370656369616c697a617460448201526234b7b760e91b60648201526084015b60405180910390fd5b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561074557600080fd5b505afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190610d62565b610787919061105b565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506107dc9085906108f1565b50505050565b60008060001980825b855181101561087857876001600160a01b0316868281518110610810576108106110e6565b60200260200101516001600160a01b0316141561082f57809250610866565b866001600160a01b031686828151811061084b5761084b6110e6565b60200260200101516001600160a01b03161415610866578091505b806108708161109f565b9150506107eb565b50600019821415801561088d57506000198114155b6108e55760405162461bcd60e51b815260206004820152602360248201527f43616e27742066696e6420696e64657820666f7220746f6b656e7320696e20706044820152621bdbdb60ea1b60648201526084016106e8565b90969095509350505050565b6000610946826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109c89092919063ffffffff16565b8051909150156109c357808060200190518101906109649190610d40565b6109c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e8565b505050565b60606109d784846000856109e1565b90505b9392505050565b606082471015610a425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e8565b6001600160a01b0385163b610a995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e8565b600080866001600160a01b03168587604051610ab59190610e96565b60006040518083038185875af1925050503d8060008114610af2576040519150601f19603f3d011682016040523d82523d6000602084013e610af7565b606091505b5091509150610b07828286610b12565b979650505050505050565b60608315610b215750816109da565b825115610b315782518084602001fd5b8160405162461bcd60e51b81526004016106e89190610eb2565b600082601f830112610b5c57600080fd5b81516020610b71610b6c83611037565b611006565b80838252828201915082860187848660051b8901011115610b9157600080fd5b60005b85811015610bb057815184529284019290840190600101610b94565b5090979650505050505050565b600060208284031215610bcf57600080fd5b81356109da81611112565b60008060008060808587031215610bf057600080fd5b8435610bfb81611112565b93506020850135610c0b81611112565b9250604085013591506060850135610c2281611112565b939692955090935050565b60008060408385031215610c4057600080fd5b8251610c4b81611112565b602084015190925060038110610c6057600080fd5b809150509250929050565b600080600060608486031215610c8057600080fd5b835167ffffffffffffffff80821115610c9857600080fd5b818601915086601f830112610cac57600080fd5b81516020610cbc610b6c83611037565b8083825282820191508286018b848660051b8901011115610cdc57600080fd5b600096505b84871015610d08578051610cf481611112565b835260019690960195918301918301610ce1565b5091890151919750909350505080821115610d2257600080fd5b50610d2f86828701610b4b565b925050604084015190509250925092565b600060208284031215610d5257600080fd5b815180151581146109da57600080fd5b600060208284031215610d7457600080fd5b5051919050565b600060c08284031215610d8d57600080fd5b50919050565b60008151808452610dab816020860160208601611073565b601f01601f19169290920160200192915050565b60028110610ddd57634e487b7160e01b600052602160045260246000fd5b9052565b6000610120610df1848451610dbf565b6020838101516001600160a01b03169085015260408084015190610e1f908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151610e5860c08601826001600160a01b03169052565b5060e0830151610e7360e08601826001600160a01b03169052565b50610100808401518282870152610e8c83870182610d93565b9695505050505050565b60008251610ea8818460208701611073565b9190910192915050565b6020815260006109da6020830184610d93565b60e08152845160e082015260006020860151610ee5610100840182610dbf565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152610f2e6101a0840182610d93565b915050610f6e602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000610f936080830187610de1565b82810360208481019190915286518083528782019282019060005b81811015610fca57845183529383019391830191600101610fae565b505060408501969096525050506060015292915050565b606081526000610ff46060830186610de1565b60208301949094525060400152919050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561102f5761102f6110fc565b604052919050565b600067ffffffffffffffff821115611051576110516110fc565b5060051b60200190565b6000821982111561106e5761106e6110ba565b500190565b60005b8381101561108e578181015183820152602001611076565b838111156107dc5750506000910152565b60006000198214156110b3576110b36110ba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461112757600080fd5b5056fea26469706673582212203da256f67c780400d2f529579358137ca5cca46be090fdb14e8c7d86b267f7b864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4743,
        "contract": "contracts/swapplaces/BalancerSwapPlace.sol:BalancerSwapPlace",
        "label": "balancerVault",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVault)4432"
      }
    ],
    "types": {
      "t_contract(IVault)4432": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}