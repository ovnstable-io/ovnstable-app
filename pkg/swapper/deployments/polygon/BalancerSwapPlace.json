{
  "address": "0x6D5D22ff0938700B7DDB7C09938D2D7f27F9942b",
  "abi": [
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "swapPlace",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct Structures.SwapRoute",
          "name": "route",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPlaceType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc163aabaca564d85e7cdf453a2cfc197a745ba3ab3e9f134edea11b38fc6414d",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x6D5D22ff0938700B7DDB7C09938D2D7f27F9942b",
    "transactionIndex": 2,
    "gasUsed": "874069",
    "logsBloom": "0x
    "blockHash": "0xdcd9bb65551354b9a4b2a564331c104cdec5c79fc2adcb9ba828d8cef4706149",
    "transactionHash": "0xc163aabaca564d85e7cdf453a2cfc197a745ba3ab3e9f134edea11b38fc6414d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 30113208,
        "transactionHash": "0xc163aabaca564d85e7cdf453a2cfc197a745ba3ab3e9f134edea11b38fc6414d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f86ce3d34ae15c00000000000000000000000000000000000000000000000071443678e4e6add0000000000000000000000000000000000000000000012e539c6b7787e075e9c1000000000000000000000000000000000000000000000000704bc995119bcc74000000000000000000000000000000000000000000012e539d63e46bb3c0cb1d",
        "logIndex": 24,
        "blockHash": "0xdcd9bb65551354b9a4b2a564331c104cdec5c79fc2adcb9ba828d8cef4706149"
      }
    ],
    "blockNumber": 30113208,
    "cumulativeGasUsed": "1588674",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "354fa3ae790c28df58202619b5e6b918",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapPlace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct Structures.SwapRoute\",\"name\":\"route\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPlaceType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapplaces/BalancerSwapPlace.sol\":\"BalancerSwapPlace\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ISwapPlace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Structures.sol\\\";\\r\\n\\r\\n\\r\\ninterface ISwapPlace is Structures {\\r\\n\\r\\n    function swapPlaceType() external view returns (string memory);\\r\\n\\r\\n    function swap(\\r\\n        SwapRoute calldata route\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getAmountOut(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        address pool\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe0343cc17080d65792ed29369da6bafffa47a0839353913f8affe837e808d3a6\",\"license\":\"GPL-3.0\"},\"contracts/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\ninterface Structures {\\r\\n\\r\\n    struct SwapRoute {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOut;\\r\\n        address swapPlace;\\r\\n        address pool;\\r\\n        //        string swapPlaceType;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3e56aea2b31ff1aad0a086c18473b8b8340c97c3d8eeefb0a96870eecb5e4aa6\",\"license\":\"GPL-3.0\"},\"contracts/connector/balancer/BalancerStuff.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\r\\n\\r\\n\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 cash,\\r\\n        uint256 managed,\\r\\n        uint256 lastChangeBlock,\\r\\n        address assetManager\\r\\n    );\\r\\n\\r\\n\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock\\r\\n    );\\r\\n\\r\\n\\r\\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\\r\\n\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IPoolSwapStructs {\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IBalancerPool is IPoolSwapStructs {\\r\\n\\r\\n    function getPoolId() external view returns (bytes32);\\r\\n\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view returns (uint256 amount);\\r\\n\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256 currentBalanceTokenIn,\\r\\n        uint256 currentBalanceTokenOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x06e0d253e79a6cdc975294bc6498df098fb0c0dc9d7369b565b3de351f57ef12\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swapplaces/BalancerSwapPlace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"../ISwapPlace.sol\\\";\\r\\nimport \\\"../connector/balancer/BalancerStuff.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract BalancerSwapPlace is ISwapPlace {\\r\\n\\r\\n    IVault public balancerVault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\r\\n\\r\\n    function swapPlaceType() external override pure returns (string memory) {\\r\\n        return \\\"BalancerSwapPlace\\\";\\r\\n    }\\r\\n\\r\\n    function swap(SwapRoute calldata route) external override returns (uint256){\\r\\n\\r\\n        bytes32 poolId = IBalancerPool(route.pool).getPoolId();\\r\\n\\r\\n        IERC20(route.tokenIn).approve(address(balancerVault), IERC20(route.tokenIn).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(\\r\\n            poolId,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            IAsset(route.tokenIn),\\r\\n            IAsset(route.tokenOut),\\r\\n            route.amountIn,\\r\\n            new bytes(0)\\r\\n        );\\r\\n\\r\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(\\r\\n            address(this),\\r\\n            false,\\r\\n            payable(msg.sender),\\r\\n            false\\r\\n        );\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, 0, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAmountOut(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        address pool\\r\\n    ) external override view returns (uint256){\\r\\n\\r\\n        bytes32 poolId = IBalancerPool(pool).getPoolId();\\r\\n\\r\\n        (, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n        (IERC20[] memory tokens, uint256[] memory balances,) = balancerVault.getPoolTokens(poolId);\\r\\n        (uint256 indexIn, uint256 indexOut) = getIndexes(IERC20(tokenIn), IERC20(tokenOut), tokens);\\r\\n\\r\\n\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = IVault.SwapKind.GIVEN_IN;\\r\\n        swapRequest.tokenIn = IERC20(tokenIn);\\r\\n        swapRequest.tokenOut = IERC20(tokenOut);\\r\\n        swapRequest.amount = amountIn;\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n            return IBalancerPool(pool).onSwap(\\r\\n                swapRequest,\\r\\n                balances,\\r\\n                indexIn,\\r\\n                indexOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO ||\\r\\n            poolSpecialization == IVault.PoolSpecialization.TWO_TOKEN\\r\\n        ) {\\r\\n            return IBalancerPool(pool).onSwap(\\r\\n                swapRequest,\\r\\n                balances[indexIn],\\r\\n                balances[indexOut]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        revert(\\\"Unknown balancer poolSpecialization\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function getIndexes(\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        IERC20[] memory tokens\\r\\n    ) internal pure returns (uint256, uint256){\\r\\n        uint256 indexIn = type(uint256).max;\\r\\n        uint256 indexOut = type(uint256).max;\\r\\n        for (uint256 i; i < tokens.length; i++) {\\r\\n            if (tokens[i] == tokenIn) {\\r\\n                indexIn = i;\\r\\n            } else if (tokens[i] == tokenOut) {\\r\\n                indexOut = i;\\r\\n            }\\r\\n        }\\r\\n        require(\\r\\n            indexIn != type(uint256).max && indexOut != type(uint256).max,\\r\\n            \\\"Can't find index for tokens in pool\\\"\\r\\n        );\\r\\n        return (indexIn, indexOut);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa4fee99e07aa598dd6f44ea081ef45745cd2252be18395a4125f7b6b7437f524\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b03191673ba12222222228d8ba445958a75a0704d566bf2c817905534801561003657600080fd5b50610e71806100466000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063158274a5146100515780635acbbdf51461008157806388030a98146100a2578063d476af69146100b5575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610ab3565b6100e8565b604051908152602001610078565b6100946100b0366004610912565b6103c2565b604080518082018252601181527042616c616e63657253776170506c61636560781b602082015290516100789190610bef565b6000806100fb60c0840160a085016108ee565b6001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190610a9a565b905061017a60208401846108ee565b6000546001600160a01b039182169163095ea7b3911661019d60208701876108ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156101de57600080fd5b505afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610a9a565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561025c57600080fd5b505af1158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190610a78565b506040805160c0810182528281526000602080830182905290928201906102bd908701876108ee565b6001600160a01b031681526020018560200160208101906102de91906108ee565b6001600160a01b03908116825260408781013560208085019190915281516000808252818301845294830152815160808101835230815290810184905233918101919091526060810183905282549394509216906352bbbe29908490849061034842610258610d98565b6040518563ffffffff1660e01b81526004016103679493929190610c02565b602060405180830381600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190610a9a565b95945050505050565b600080826001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610a9a565b6000805460405163f6c0092760e01b81526004810184905292935090916001600160a01b039091169063f6c0092790602401604080518083038186803b15801561047f57600080fd5b505afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190610965565b60008054604051631f29a8cd60e31b81526004810187905292945090925082916001600160a01b039091169063f94d46689060240160006040518083038186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054091908101906109a3565b50915091506000806105538b8b8661076d565b915091506105aa60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b60008082526001600160a01b038d811660208401528c166040830152606082018b90528660028111156105df576105df610de1565b14156106745760405162f64aa560e11b81526001600160a01b038a16906301ec954a90610616908490889088908890600401610cbd565b60206040518083038186803b15801561062e57600080fd5b505afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190610a9a565b975050505050505050610765565b600186600281111561068857610688610de1565b14806106a5575060028660028111156106a3576106a3610de1565b145b1561070c57886001600160a01b0316639d2c110c828686815181106106cc576106cc610df7565b60200260200101518786815181106106e6576106e6610df7565b60200260200101516040518463ffffffff1660e01b815260040161061693929190610d1e565b60405162461bcd60e51b815260206004820152602360248201527f556e6b6e6f776e2062616c616e63657220706f6f6c5370656369616c697a617460448201526234b7b760e91b60648201526084015b60405180910390fd5b949350505050565b60008060001980825b855181101561080357876001600160a01b031686828151811061079b5761079b610df7565b60200260200101516001600160a01b031614156107ba578092506107f1565b866001600160a01b03168682815181106107d6576107d6610df7565b60200260200101516001600160a01b031614156107f1578091505b806107fb81610db0565b915050610776565b50600019821415801561081857506000198114155b6108705760405162461bcd60e51b815260206004820152602360248201527f43616e27742066696e6420696e64657820666f7220746f6b656e7320696e20706044820152621bdbdb60ea1b606482015260840161075c565b90969095509350505050565b600082601f83011261088d57600080fd5b815160206108a261089d83610d74565b610d43565b80838252828201915082860187848660051b89010111156108c257600080fd5b60005b858110156108e1578151845292840192908401906001016108c5565b5090979650505050505050565b60006020828403121561090057600080fd5b813561090b81610e23565b9392505050565b6000806000806080858703121561092857600080fd5b843561093381610e23565b9350602085013561094381610e23565b925060408501359150606085013561095a81610e23565b939692955090935050565b6000806040838503121561097857600080fd5b825161098381610e23565b60208401519092506003811061099857600080fd5b809150509250929050565b6000806000606084860312156109b857600080fd5b835167ffffffffffffffff808211156109d057600080fd5b818601915086601f8301126109e457600080fd5b815160206109f461089d83610d74565b8083825282820191508286018b848660051b8901011115610a1457600080fd5b600096505b84871015610a40578051610a2c81610e23565b835260019690960195918301918301610a19565b5091890151919750909350505080821115610a5a57600080fd5b50610a678682870161087c565b925050604084015190509250925092565b600060208284031215610a8a57600080fd5b8151801515811461090b57600080fd5b600060208284031215610aac57600080fd5b5051919050565b600060c08284031215610ac557600080fd5b50919050565b6000815180845260005b81811015610af157602081850181015186830182015201610ad5565b81811115610b03576000602083870101525b50601f01601f19169290920160200192915050565b60028110610b3657634e487b7160e01b600052602160045260246000fd5b9052565b6000610120610b4a848451610b18565b6020838101516001600160a01b03169085015260408084015190610b78908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151610bb160c08601826001600160a01b03169052565b5060e0830151610bcc60e08601826001600160a01b03169052565b50610100808401518282870152610be583870182610acb565b9695505050505050565b60208152600061090b6020830184610acb565b60e08152845160e082015260006020860151610c22610100840182610b18565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152610c6b6101a0840182610acb565b915050610cab602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000610cd06080830187610b3a565b82810360208481019190915286518083528782019282019060005b81811015610d0757845183529383019391830191600101610ceb565b505060408501969096525050506060015292915050565b606081526000610d316060830186610b3a565b60208301949094525060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6c57610d6c610e0d565b604052919050565b600067ffffffffffffffff821115610d8e57610d8e610e0d565b5060051b60200190565b60008219821115610dab57610dab610dcb565b500190565b6000600019821415610dc457610dc4610dcb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e3857600080fd5b5056fea264697066735822122077ea8f041a65500b3aa36da511cdeb4ec733e0535ceacaf7001feaaea86b89c064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063158274a5146100515780635acbbdf51461008157806388030a98146100a2578063d476af69146100b5575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f366004610ab3565b6100e8565b604051908152602001610078565b6100946100b0366004610912565b6103c2565b604080518082018252601181527042616c616e63657253776170506c61636560781b602082015290516100789190610bef565b6000806100fb60c0840160a085016108ee565b6001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190610a9a565b905061017a60208401846108ee565b6000546001600160a01b039182169163095ea7b3911661019d60208701876108ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156101de57600080fd5b505afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610a9a565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561025c57600080fd5b505af1158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190610a78565b506040805160c0810182528281526000602080830182905290928201906102bd908701876108ee565b6001600160a01b031681526020018560200160208101906102de91906108ee565b6001600160a01b03908116825260408781013560208085019190915281516000808252818301845294830152815160808101835230815290810184905233918101919091526060810183905282549394509216906352bbbe29908490849061034842610258610d98565b6040518563ffffffff1660e01b81526004016103679493929190610c02565b602060405180830381600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190610a9a565b95945050505050565b600080826001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610a9a565b6000805460405163f6c0092760e01b81526004810184905292935090916001600160a01b039091169063f6c0092790602401604080518083038186803b15801561047f57600080fd5b505afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190610965565b60008054604051631f29a8cd60e31b81526004810187905292945090925082916001600160a01b039091169063f94d46689060240160006040518083038186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054091908101906109a3565b50915091506000806105538b8b8661076d565b915091506105aa60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b60008082526001600160a01b038d811660208401528c166040830152606082018b90528660028111156105df576105df610de1565b14156106745760405162f64aa560e11b81526001600160a01b038a16906301ec954a90610616908490889088908890600401610cbd565b60206040518083038186803b15801561062e57600080fd5b505afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190610a9a565b975050505050505050610765565b600186600281111561068857610688610de1565b14806106a5575060028660028111156106a3576106a3610de1565b145b1561070c57886001600160a01b0316639d2c110c828686815181106106cc576106cc610df7565b60200260200101518786815181106106e6576106e6610df7565b60200260200101516040518463ffffffff1660e01b815260040161061693929190610d1e565b60405162461bcd60e51b815260206004820152602360248201527f556e6b6e6f776e2062616c616e63657220706f6f6c5370656369616c697a617460448201526234b7b760e91b60648201526084015b60405180910390fd5b949350505050565b60008060001980825b855181101561080357876001600160a01b031686828151811061079b5761079b610df7565b60200260200101516001600160a01b031614156107ba578092506107f1565b866001600160a01b03168682815181106107d6576107d6610df7565b60200260200101516001600160a01b031614156107f1578091505b806107fb81610db0565b915050610776565b50600019821415801561081857506000198114155b6108705760405162461bcd60e51b815260206004820152602360248201527f43616e27742066696e6420696e64657820666f7220746f6b656e7320696e20706044820152621bdbdb60ea1b606482015260840161075c565b90969095509350505050565b600082601f83011261088d57600080fd5b815160206108a261089d83610d74565b610d43565b80838252828201915082860187848660051b89010111156108c257600080fd5b60005b858110156108e1578151845292840192908401906001016108c5565b5090979650505050505050565b60006020828403121561090057600080fd5b813561090b81610e23565b9392505050565b6000806000806080858703121561092857600080fd5b843561093381610e23565b9350602085013561094381610e23565b925060408501359150606085013561095a81610e23565b939692955090935050565b6000806040838503121561097857600080fd5b825161098381610e23565b60208401519092506003811061099857600080fd5b809150509250929050565b6000806000606084860312156109b857600080fd5b835167ffffffffffffffff808211156109d057600080fd5b818601915086601f8301126109e457600080fd5b815160206109f461089d83610d74565b8083825282820191508286018b848660051b8901011115610a1457600080fd5b600096505b84871015610a40578051610a2c81610e23565b835260019690960195918301918301610a19565b5091890151919750909350505080821115610a5a57600080fd5b50610a678682870161087c565b925050604084015190509250925092565b600060208284031215610a8a57600080fd5b8151801515811461090b57600080fd5b600060208284031215610aac57600080fd5b5051919050565b600060c08284031215610ac557600080fd5b50919050565b6000815180845260005b81811015610af157602081850181015186830182015201610ad5565b81811115610b03576000602083870101525b50601f01601f19169290920160200192915050565b60028110610b3657634e487b7160e01b600052602160045260246000fd5b9052565b6000610120610b4a848451610b18565b6020838101516001600160a01b03169085015260408084015190610b78908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151610bb160c08601826001600160a01b03169052565b5060e0830151610bcc60e08601826001600160a01b03169052565b50610100808401518282870152610be583870182610acb565b9695505050505050565b60208152600061090b6020830184610acb565b60e08152845160e082015260006020860151610c22610100840182610b18565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152610c6b6101a0840182610acb565b915050610cab602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000610cd06080830187610b3a565b82810360208481019190915286518083528782019282019060005b81811015610d0757845183529383019391830191600101610ceb565b505060408501969096525050506060015292915050565b606081526000610d316060830186610b3a565b60208301949094525060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6c57610d6c610e0d565b604052919050565b600067ffffffffffffffff821115610d8e57610d8e610e0d565b5060051b60200190565b60008219821115610dab57610dab610dcb565b500190565b6000600019821415610dc457610dc4610dcb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e3857600080fd5b5056fea264697066735822122077ea8f041a65500b3aa36da511cdeb4ec733e0535ceacaf7001feaaea86b89c064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3239,
        "contract": "contracts/swapplaces/BalancerSwapPlace.sol:BalancerSwapPlace",
        "label": "balancerVault",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVault)3168"
      }
    ],
    "types": {
      "t_contract(IVault)3168": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}