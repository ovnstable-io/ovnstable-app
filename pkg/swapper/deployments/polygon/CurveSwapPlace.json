{
  "address": "0xaEF35A944a570A976bFe64E3678361fc7072980F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "swapPlace",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct Structures.SwapRoute",
          "name": "route",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPlaceType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a3563feac1ec5c39b2a610c969f810f9ea7a97cc9747ab72b47997b0f8fa546",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xaEF35A944a570A976bFe64E3678361fc7072980F",
    "transactionIndex": 41,
    "gasUsed": "799121",
    "logsBloom": "0x
    "blockHash": "0x79f3e4f7d7169118929fcda0ea44636793330f9ca1ac431d86264a443f0a2d8c",
    "transactionHash": "0x2a3563feac1ec5c39b2a610c969f810f9ea7a97cc9747ab72b47997b0f8fa546",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 30955130,
        "transactionHash": "0x2a3563feac1ec5c39b2a610c969f810f9ea7a97cc9747ab72b47997b0f8fa546",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000008e9700392f9246a6c5b32ee3ecef586f156ed683"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f151afcca48a2c000000000000000000000000000000000000000000000001101ac082daded3370000000000000000000000000000000000000000000000d7329db823ff8598860000000000000000000000000000000000000000000000010f296ed30e3a490b0000000000000000000000000000000000000000000000d7338f09d3cc2a22b2",
        "logIndex": 201,
        "blockHash": "0x79f3e4f7d7169118929fcda0ea44636793330f9ca1ac431d86264a443f0a2d8c"
      }
    ],
    "blockNumber": 30955130,
    "cumulativeGasUsed": "10874757",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a73398fb73ab117edb48452b4ba9bf14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapPlace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct Structures.SwapRoute\",\"name\":\"route\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPlaceType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapplaces/CurveSwapPlace.sol\":\"CurveSwapPlace\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ISwapPlace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Structures.sol\\\";\\n\\n\\ninterface ISwapPlace is Structures {\\n\\n    function swapPlaceType() external view returns (string memory);\\n\\n    function swap(\\n        SwapRoute calldata route\\n    ) external returns (uint256);\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xf37794b2f35aa73e880e09365bf4c19c19b26a46558b1e60b16754c7aa080db6\",\"license\":\"GPL-3.0\"},\"contracts/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\ninterface Structures {\\n\\n    struct SwapRoute {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address swapPlace;\\n        address pool;\\n        //        string swapPlaceType;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a58d71fe1caa1018c5add5d1c6d0b372bdcd15b06a165054cfe76200e5596d\",\"license\":\"GPL-3.0\"},\"contracts/connector/CurveStuff.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IStableSwapPool {\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\n    function get_dy(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    function get_dy_underlying(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    //Perform an exchange between two coins.\\n    // i: Index value for the coin to send\\n    // j: Index value of the coin to receive\\n    // _dx: Amount of i being exchanged\\n    // _min_dy: Minimum amount of j to receive\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    function exchange(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function exchange_underlying(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x9b17ca9e6ef6839dbc5aceda0da854be7fe9239c5e6dbd5a97732f49671c56a3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swapplaces/CurveSwapPlace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../ISwapPlace.sol\\\";\\nimport \\\"../connector/CurveStuff.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\ncontract CurveSwapPlace is ISwapPlace {\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\n    function swapPlaceType() external override pure returns (string memory) {\\n        return \\\"CurveSwapPlace\\\";\\n    }\\n\\n    function swap(SwapRoute calldata route) external override returns (uint256) {\\n        IERC20Upgradeable(route.tokenIn).safeIncreaseAllowance(\\n            route.pool,\\n            IERC20(route.tokenIn).balanceOf(address(this))\\n        );\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(route.tokenIn, route.tokenOut, route.pool);\\n\\n        uint256 transferBackAmount;\\n        if (isUnderlying) {\\n            transferBackAmount = IStableSwapPool(route.pool).exchange_underlying(\\n                indexIn,\\n                indexOut,\\n                route.amountIn,\\n                0\\n            );\\n        } else {\\n            transferBackAmount = IStableSwapPool(route.pool).exchange(\\n                indexIn,\\n                indexOut,\\n                route.amountIn,\\n                0\\n            );\\n        }\\n\\n        IERC20(route.tokenOut).transfer(msg.sender, IERC20(route.tokenOut).balanceOf(address(this)));\\n        return transferBackAmount;\\n    }\\n\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) external override view returns (uint256) {\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(tokenIn, tokenOut, pool);\\n        if (isUnderlying) {\\n            return IStableSwapPool(pool).get_dy_underlying(indexIn, indexOut, amountIn);\\n        } else {\\n            return IStableSwapPool(pool).get_dy(indexIn, indexOut, amountIn);\\n        }\\n    }\\n\\n\\n    function getIndexes(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool\\n    ) internal view returns (int128, int128, bool){\\n        int128 indexIn = type(int128).max;\\n        int128 indexOut = type(int128).max;\\n\\n        // search in coins list\\n        uint256 i;\\n        while (true) {\\n            address token = getCoin(pool, i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n\\n            if (token == tokenIn) {\\n                indexIn = int128(uint128(i));\\n            } else if (token == tokenOut) {\\n                indexOut = int128(uint128(i));\\n            }\\n            i++;\\n        }\\n\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\n            return (indexIn, indexOut, false);\\n        }\\n\\n        if (indexIn != type(int128).max || indexOut != type(int128).max) {\\n            // one of tokens found in coins but not found another - it is incorrect\\n            // setup case for token pairs\\n            revert(\\\"CurveSP: incorrect token pair setup\\\");\\n        }\\n\\n        // search in underlying coins list\\n        i = 0;\\n        while (true) {\\n            address token = getUnderlyingCoin(pool, i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n\\n            if (token == tokenIn) {\\n                indexIn = int128(uint128(i));\\n            } else if (token == tokenOut) {\\n                indexOut = int128(uint128(i));\\n            }\\n            i++;\\n        }\\n\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\n            return (indexIn, indexOut, true);\\n        }\\n\\n        revert(\\\"CurveSP: Can't find index for tokens in pool\\\");\\n    }\\n\\n\\n    function getCoin(address pool, uint256 index) internal view returns (address) {\\n        try IStableSwapPool(pool).coins(index) returns (address tokenAddress) {\\n            return tokenAddress;\\n        } catch {}\\n        return address(0);\\n    }\\n\\n    function getUnderlyingCoin(address pool, uint256 index) internal view returns (address) {\\n        try IStableSwapPool(pool).underlying_coins(index) returns (address tokenAddress) {\\n            return tokenAddress;\\n        } catch {}\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xf7be3c0c755a7c9009e0bc5aa01e62eb246051613782a645aec8142f7eedf4c7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d7e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635acbbdf51461004657806388030a981461006c578063d476af691461007f575b600080fd5b610059610054366004610c3b565b6100af565b6040519081526020015b60405180910390f35b61005961007a366004610bc6565b610438565b604080518082018252600e81526d437572766553776170506c61636560901b602082015290516100639190610c88565b60006101676100c460c0840160a08501610b8c565b6100d16020850185610b8c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561011257600080fd5b505afa158015610126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014a9190610c53565b6101576020860186610b8c565b6001600160a01b03169190610531565b600080806101a061017b6020870187610b8c565b61018b6040880160208901610b8c565b61019b60c0890160a08a01610b8c565b61061a565b9250925092506000811561025d576101be60c0870160a08801610b8c565b60408051635320bf6b60e11b8152600f87810b600483015286900b6024820152908801356044820152600060648201526001600160a01b03919091169063a6417ed690608401602060405180830381600087803b15801561021e57600080fd5b505af1158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610c53565b9050610308565b61026d60c0870160a08801610b8c565b60408051630f7c084960e21b8152600f87810b600483015286900b6024820152908801356044820152600060648201526001600160a01b039190911690633df0212490608401602060405180830381600087803b1580156102cd57600080fd5b505af11580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610c53565b90505b6103186040870160208801610b8c565b6001600160a01b031663a9059cbb3361033760408a0160208b01610b8c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561037857600080fd5b505afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190610c53565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190610c19565b5095945050505050565b60008060008061044988888761061a565b92509250925080156104ea576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b038616906307211ef7906064015b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190610c53565b9350505050610529565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b03861690635e0d443f90606401610490565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610c53565b6105bf9190610cbb565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610614908590610874565b50505050565b6000808060016001607f1b0380825b6000610635888361094b565b90506001600160a01b03811661064b575061069e565b896001600160a01b0316816001600160a01b0316141561066d5781935061068b565b886001600160a01b0316816001600160a01b0316141561068b578192505b8161069581610cff565b92505050610629565b600f83900b60016001607f1b03148015906106c45750600f82900b60016001607f1b0314155b156106d8575090935091506000905061086b565b600f83900b60016001607f1b031415806106fd5750600f82900b60016001607f1b0314155b1561075b5760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b60648201526084015b60405180910390fd5b5060005b600061076b88836109d9565b90506001600160a01b03811661078157506107d4565b896001600160a01b0316816001600160a01b031614156107a3578193506107c1565b886001600160a01b0316816001600160a01b031614156107c1578192505b816107cb81610cff565b9250505061075f565b600f83900b60016001607f1b03148015906107fa5750600f82900b60016001607f1b0314155b1561080e575090935091506001905061086b565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b6064820152608401610752565b93509350939050565b60006108c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a099092919063ffffffff16565b80519091501561094657808060200190518101906108e79190610c19565b6109465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610752565b505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b15801561098f57600080fd5b505afa9250505080156109bf575060408051601f3d908101601f191682019092526109bc91810190610ba9565b60015b6109c8576109cf565b90506109d3565b5060005b92915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb090602401610977565b6060610a188484600085610a22565b90505b9392505050565b606082471015610a835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610752565b6001600160a01b0385163b610ada5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610752565b600080866001600160a01b03168587604051610af69190610c6c565b60006040518083038185875af1925050503d8060008114610b33576040519150601f19603f3d011682016040523d82523d6000602084013e610b38565b606091505b5091509150610b48828286610b53565b979650505050505050565b60608315610b62575081610a1b565b825115610b725782518084602001fd5b8160405162461bcd60e51b81526004016107529190610c88565b600060208284031215610b9e57600080fd5b8135610a1b81610d30565b600060208284031215610bbb57600080fd5b8151610a1b81610d30565b60008060008060808587031215610bdc57600080fd5b8435610be781610d30565b93506020850135610bf781610d30565b9250604085013591506060850135610c0e81610d30565b939692955090935050565b600060208284031215610c2b57600080fd5b81518015158114610a1b57600080fd5b600060c08284031215610c4d57600080fd5b50919050565b600060208284031215610c6557600080fd5b5051919050565b60008251610c7e818460208701610cd3565b9190910192915050565b6020815260008251806020840152610ca7816040850160208701610cd3565b601f01601f19169190910160400192915050565b60008219821115610cce57610cce610d1a565b500190565b60005b83811015610cee578181015183820152602001610cd6565b838111156106145750506000910152565b6000600019821415610d1357610d13610d1a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d4557600080fd5b5056fea26469706673582212209af1162f6b8402c051cb35423621dcb453755fd34dd7887800f3852a5b39a9bf64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80635acbbdf51461004657806388030a981461006c578063d476af691461007f575b600080fd5b610059610054366004610c3b565b6100af565b6040519081526020015b60405180910390f35b61005961007a366004610bc6565b610438565b604080518082018252600e81526d437572766553776170506c61636560901b602082015290516100639190610c88565b60006101676100c460c0840160a08501610b8c565b6100d16020850185610b8c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561011257600080fd5b505afa158015610126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014a9190610c53565b6101576020860186610b8c565b6001600160a01b03169190610531565b600080806101a061017b6020870187610b8c565b61018b6040880160208901610b8c565b61019b60c0890160a08a01610b8c565b61061a565b9250925092506000811561025d576101be60c0870160a08801610b8c565b60408051635320bf6b60e11b8152600f87810b600483015286900b6024820152908801356044820152600060648201526001600160a01b03919091169063a6417ed690608401602060405180830381600087803b15801561021e57600080fd5b505af1158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610c53565b9050610308565b61026d60c0870160a08801610b8c565b60408051630f7c084960e21b8152600f87810b600483015286900b6024820152908801356044820152600060648201526001600160a01b039190911690633df0212490608401602060405180830381600087803b1580156102cd57600080fd5b505af11580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610c53565b90505b6103186040870160208801610b8c565b6001600160a01b031663a9059cbb3361033760408a0160208b01610b8c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561037857600080fd5b505afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190610c53565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190610c19565b5095945050505050565b60008060008061044988888761061a565b92509250925080156104ea576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b038616906307211ef7906064015b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190610c53565b9350505050610529565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b03861690635e0d443f90606401610490565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610c53565b6105bf9190610cbb565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610614908590610874565b50505050565b6000808060016001607f1b0380825b6000610635888361094b565b90506001600160a01b03811661064b575061069e565b896001600160a01b0316816001600160a01b0316141561066d5781935061068b565b886001600160a01b0316816001600160a01b0316141561068b578192505b8161069581610cff565b92505050610629565b600f83900b60016001607f1b03148015906106c45750600f82900b60016001607f1b0314155b156106d8575090935091506000905061086b565b600f83900b60016001607f1b031415806106fd5750600f82900b60016001607f1b0314155b1561075b5760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b60648201526084015b60405180910390fd5b5060005b600061076b88836109d9565b90506001600160a01b03811661078157506107d4565b896001600160a01b0316816001600160a01b031614156107a3578193506107c1565b886001600160a01b0316816001600160a01b031614156107c1578192505b816107cb81610cff565b9250505061075f565b600f83900b60016001607f1b03148015906107fa5750600f82900b60016001607f1b0314155b1561080e575090935091506001905061086b565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b6064820152608401610752565b93509350939050565b60006108c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a099092919063ffffffff16565b80519091501561094657808060200190518101906108e79190610c19565b6109465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610752565b505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b15801561098f57600080fd5b505afa9250505080156109bf575060408051601f3d908101601f191682019092526109bc91810190610ba9565b60015b6109c8576109cf565b90506109d3565b5060005b92915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb090602401610977565b6060610a188484600085610a22565b90505b9392505050565b606082471015610a835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610752565b6001600160a01b0385163b610ada5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610752565b600080866001600160a01b03168587604051610af69190610c6c565b60006040518083038185875af1925050503d8060008114610b33576040519150601f19603f3d011682016040523d82523d6000602084013e610b38565b606091505b5091509150610b48828286610b53565b979650505050505050565b60608315610b62575081610a1b565b825115610b725782518084602001fd5b8160405162461bcd60e51b81526004016107529190610c88565b600060208284031215610b9e57600080fd5b8135610a1b81610d30565b600060208284031215610bbb57600080fd5b8151610a1b81610d30565b60008060008060808587031215610bdc57600080fd5b8435610be781610d30565b93506020850135610bf781610d30565b9250604085013591506060850135610c0e81610d30565b939692955090935050565b600060208284031215610c2b57600080fd5b81518015158114610a1b57600080fd5b600060c08284031215610c4d57600080fd5b50919050565b600060208284031215610c6557600080fd5b5051919050565b60008251610c7e818460208701610cd3565b9190910192915050565b6020815260008251806020840152610ca7816040850160208701610cd3565b601f01601f19169190910160400192915050565b60008219821115610cce57610cce610d1a565b500190565b60005b83811015610cee578181015183820152602001610cd6565b838111156106145750506000910152565b6000600019821415610d1357610d13610d1a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d4557600080fd5b5056fea26469706673582212209af1162f6b8402c051cb35423621dcb453755fd34dd7887800f3852a5b39a9bf64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}