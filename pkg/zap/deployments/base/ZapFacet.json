{
  "address": "0xc94E106b570e930EeC2931Cb6f65fA5f0752827F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        }
      ],
      "name": "InputTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensOut",
          "type": "address[]"
        }
      ],
      "name": "OutputTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsPut",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensPut",
          "type": "address[]"
        }
      ],
      "name": "PutIntoPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsReturned",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensReturned",
          "type": "address[]"
        }
      ],
      "name": "ReturnedToUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenId",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZapFacet.InputToken[]",
              "name": "inputs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "internalType": "struct IZapFacet.OutputToken[]",
              "name": "outputs",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZapFacet.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "int24[]",
              "name": "tickRange",
              "type": "int24[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsOut",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IZapFacet.ZapInParams",
          "name": "paramsData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZapFacet.InputToken[]",
              "name": "inputs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                }
              ],
              "internalType": "struct IZapFacet.OutputToken[]",
              "name": "outputs",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZapFacet.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "int24[]",
              "name": "tickRange",
              "type": "int24[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsOut",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IZapFacet.ZapInParams",
          "name": "paramsData",
          "type": "tuple"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf323097ea3210b4489a595ab81537614f4d4d07be8ce0e84f0b8bb7872665526",
  "receipt": {
    "to": null,
    "from": "0x66BC0120b3287f08408BCC76ee791f0bad17Eeef",
    "contractAddress": "0xc94E106b570e930EeC2931Cb6f65fA5f0752827F",
    "transactionIndex": 63,
    "gasUsed": "1662155",
    "logsBloom": "0x
    "blockHash": "0x666fabcb4111627925254f46d09226eb66c338672bb69a03ddc1ac2c9b9544d3",
    "transactionHash": "0xf323097ea3210b4489a595ab81537614f4d4d07be8ce0e84f0b8bb7872665526",
    "logs": [],
    "blockNumber": 16821504,
    "cumulativeGasUsed": "16480002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "71ab99d3e7d607066cf868e39d45b0dc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"}],\"name\":\"InputTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"}],\"name\":\"OutputTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsPut\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensPut\",\"type\":\"address[]\"}],\"name\":\"PutIntoPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsReturned\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensReturned\",\"type\":\"address[]\"}],\"name\":\"ReturnedToUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenId\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct IZapFacet.InputToken[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IZapFacet.OutputToken[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZapFacet.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"int24[]\",\"name\":\"tickRange\",\"type\":\"int24[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IZapFacet.ZapInParams\",\"name\":\"paramsData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct IZapFacet.InputToken[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IZapFacet.OutputToken[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZapFacet.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"int24[]\",\"name\":\"tickRange\",\"type\":\"int24[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IZapFacet.ZapInParams\",\"name\":\"paramsData\",\"type\":\"tuple\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/core/ZapFacet.sol\":\"ZapFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/facets/core/ZapFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../libraries/core/LibCoreStorage.sol\\\";\\n\\ncontract ZapFacet is IZapFacet {\\n\\n    // \\u041a\\u043e\\u043d\\u0442\\u0440\\u0430\\u043a\\u0442 \\u0443\\u0441\\u043f\\u0435\\u0448\\u043d\\u043e\\u0439 \\u0442\\u0440\\u0430\\u043d\\u0437\\u0430\\u043a\\u0446\\u0438\\u0438 \\u0441\\u043e\\u0437\\u0434\\u0430\\u0435\\u0442 \\u0441\\u043e\\u0431\\u044b\\u0442\\u0438\\u044f:\\n    // - \\u0421\\u043a\\u043e\\u043b\\u044c\\u043a\\u043e \\u043f\\u043e\\u0434\\u0430\\u043b\\u0438 \\u0442\\u043e\\u043a\\u0435\\u043d\\u043e\\u0432 \\u043d\\u0430 \\u0432\\u0445\\u043e\\u0434\\n    // - \\u0421\\u043a\\u043e\\u043b\\u044c\\u043a\\u043e \\u043f\\u043e\\u043b\\u0443\\u0447\\u0438\\u043b\\u0438 \\u0432 \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\\u0435 \\u043e\\u0431\\u043c\\u0435\\u043d\\u0430\\n    // - \\u0421\\u043a\\u043e\\u043b\\u044c\\u043a\\u043e \\u043f\\u043e\\u043b\\u043e\\u0436\\u0438\\u043b\\u0438 \\u0432 \\u043f\\u0443\\u043b\\n    // - \\u0421\\u043a\\u043e\\u043b\\u044c\\u043a\\u043e \\u0432\\u0435\\u0440\\u043d\\u0443\\u043b\\u0438 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044e\\n\\n    event InputTokens(uint256[] amountsIn, address[] tokensIn);\\n\\n    event OutputTokens(uint256[] amountsOut, address[] tokensOut);\\n\\n    event PutIntoPool(uint256[] amountsPut, address[] tokensPut);\\n\\n    event ReturnedToUser(uint256[] amountsReturned, address[] tokensReturned);\\n\\n    event TokenId(uint256 tokenId); // name..?\\n\\n    receive() external payable {}\\n\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external {\\n        _zapIn(swapData, paramsData);\\n    }\\n\\n    function zapOut(uint256 tokenId) external {\\n        IMasterFacet master = IMasterFacet(address(this));\\n        master.checkForOwner(tokenId, msg.sender);\\n        master.closePosition(tokenId, msg.sender);\\n    }\\n\\n    function rebalance(SwapData memory swapData, ZapInParams memory paramsData, uint256 tokenId) external {\\n        IMasterFacet master = IMasterFacet(address(this));\\n        master.checkForOwner(tokenId, msg.sender);\\n        master.closePosition(tokenId, address(this));\\n        _zapIn(swapData, paramsData);\\n    }\\n\\n    function _zapIn(SwapData memory swapData, ZapInParams memory paramsData) internal {\\n        prepareSwap(swapData);\\n        swap(swapData);\\n        IMasterFacet master = IMasterFacet(address(this));\\n        address[] memory tokensOut = new address[](2);\\n        (tokensOut[0], tokensOut[1]) = master.getPoolTokens(paramsData.pair);\\n\\n        for (uint256 i = 0; i < tokensOut.length; i++) {\\n            IERC20 asset = IERC20(tokensOut[i]);\\n            if (paramsData.amountsOut[i] > 0) {\\n                asset.transferFrom(msg.sender, address(this), paramsData.amountsOut[i]);\\n            }\\n            paramsData.amountsOut[i] = asset.balanceOf(address(this));\\n        }\\n        addLiquidity(paramsData);\\n    }\\n\\n    function addLiquidity(ZapInParams memory paramsData) internal {\\n        address[] memory tokensOut = new address[](2);\\n        IMasterFacet master = IMasterFacet(address(this));\\n        (tokensOut[0], tokensOut[1]) = master.getPoolTokens(paramsData.pair);\\n        ResultOfLiquidity memory result;\\n\\n        IERC20 asset0 = IERC20(tokensOut[0]);\\n        IERC20 asset1 = IERC20(tokensOut[1]);\\n        asset0.approve(LibCoreStorage.coreStorage().npm, paramsData.amountsOut[0]);\\n        asset1.approve(LibCoreStorage.coreStorage().npm, paramsData.amountsOut[1]);\\n\\n        result.amountAsset0Before = asset0.balanceOf(address(this));\\n        result.amountAsset1Before = asset1.balanceOf(address(this));\\n\\n        uint256 tokenId = master.mintPosition(\\n            paramsData.pair,\\n            paramsData.tickRange[0],\\n            paramsData.tickRange[1],\\n            paramsData.amountsOut[0],\\n            paramsData.amountsOut[1]\\n        );\\n        emit TokenId(tokenId);\\n\\n        result.amountAsset0After = asset0.balanceOf(address(this));\\n        result.amountAsset1After = asset1.balanceOf(address(this));\\n        if (result.amountAsset0After > 0) {\\n            asset0.transfer(msg.sender, result.amountAsset0After);\\n        }\\n        if (result.amountAsset1After > 0) {\\n            asset1.transfer(msg.sender, result.amountAsset1After);\\n        }\\n\\n        result.amountsPut = new uint256[](2);\\n        result.amountsPut[0] = result.amountAsset0Before - result.amountAsset0After;\\n        result.amountsPut[1] = result.amountAsset1Before - result.amountAsset1After;\\n\\n        result.amountsReturned = new uint256[](2);\\n        result.amountsReturned[0] = result.amountAsset0After;\\n        result.amountsReturned[1] = result.amountAsset1After;\\n\\n        emit PutIntoPool(result.amountsPut, tokensOut);\\n        emit ReturnedToUser(result.amountsReturned, tokensOut);\\n    }\\n\\n    function prepareSwap(SwapData memory swapData) internal {\\n        for (uint256 i = 0; i < swapData.outputs.length; i++) {\\n            for (uint256 j = 0; j < i; j++) {\\n                require(\\n                    swapData.outputs[i].tokenAddress != swapData.outputs[j].tokenAddress,\\n                    \\\"Duplicate output tokens\\\"\\n                );\\n                require(\\n                    swapData.outputs[i].receiver == address(this), // TODO: remove from internal for\\n                    \\\"Receiver of swap is not this contract\\\"\\n                );\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            // different inputs\\n            for (uint256 j = 0; j < i; j++) {\\n                require(\\n                    swapData.inputs[i].tokenAddress != swapData.inputs[j].tokenAddress,\\n                    \\\"Duplicate input tokens\\\"\\n                );\\n            }\\n            // no identical inputs and outputs\\n            for (uint256 j = 0; j < swapData.outputs.length; j++) {\\n                require(\\n                    swapData.inputs[i].tokenAddress != swapData.outputs[j].tokenAddress,\\n                    \\\"Duplicate input and output\\\"\\n                );\\n            }\\n\\n            IERC20 asset = IERC20(swapData.inputs[i].tokenAddress);\\n            asset.transferFrom(msg.sender, address(this), swapData.inputs[i].amountIn);\\n            asset.approve(LibCoreStorage.coreStorage().odosRouter, swapData.inputs[i].amountIn);\\n        }\\n    }\\n\\n    function swap(SwapData memory swapData) internal returns (address[] memory, uint256[] memory) {\\n        (bool success,) = LibCoreStorage.coreStorage().odosRouter.call{value : 0}(swapData.data);\\n        require(success, \\\"router swap invalid\\\");\\n\\n        // Emit events\\n        address[] memory tokensIn = new address[](swapData.inputs.length);\\n        uint256[] memory amountsIn = new uint256[](swapData.inputs.length);\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            tokensIn[i] = swapData.inputs[i].tokenAddress;\\n            amountsIn[i] = swapData.inputs[i].amountIn;\\n        }\\n        emit InputTokens(amountsIn, tokensIn);\\n\\n        address[] memory tokensOut = new address[](swapData.outputs.length);\\n        uint256[] memory amountsOut = new uint256[](swapData.outputs.length);\\n        for (uint256 i = 0; i < swapData.outputs.length; i++) {\\n            tokensOut[i] = swapData.outputs[i].tokenAddress;\\n            amountsOut[i] = IERC20(tokensOut[i]).balanceOf(swapData.outputs[i].receiver);\\n        }\\n        emit OutputTokens(amountsOut, tokensOut);\\n        return (tokensOut, amountsOut);\\n    }\\n}\\n\",\"keccak256\":\"0xfd64ddd2fe697f77526aae0b736d9a907793330097407b0af0932827bb4c9c8b\",\"license\":\"MIT\"},\"contracts/interfaces/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nbytes32 constant UNIT_ROLE = keccak256(\\\"UNIT_ROLE\\\");\\nbytes32 constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\nuint256 constant MAX_UINT_VALUE = type(uint256).max;\\nuint256 constant BASE_DIV = 1000000;\\n\\naddress constant AERODROME_FACTORY = 0x5e7BB104d84c7CB9B682AaC2F3d509f5F406809A;\\n\",\"keccak256\":\"0xad76ff056cdca14d169fd2cc2fd6b44fe42916fea3f75ca8961522231ac0a928\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./core/IPoolMathFacet.sol\\\";\\nimport \\\"./core/IPositionManagerFacet.sol\\\";\\nimport \\\"./core/IZapFacet.sol\\\";\\nimport \\\"./core/IMathFacet.sol\\\";\\nimport \\\"./core/IProportionFacet.sol\\\";\\nimport \\\"./Modifiers.sol\\\";\\nimport \\\"../libraries/core/LibCoreStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\ninterface IMasterFacet is IPoolMathFacet, IPositionManagerFacet, IZapFacet, IMathFacet, IProportionFacet {}\\n\",\"keccak256\":\"0x7e636ec1eb63b1658b5767fbd1c50651ef938ebf6e8e28af9508005fa5898866\",\"license\":\"MIT\"},\"contracts/interfaces/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessControl} from \\\"../libraries/core/LibAccessControl.sol\\\";\\nimport {LibCoreStorage} from \\\"../libraries/core/LibCoreStorage.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Modifiers {\\n    modifier onlyRole(bytes32 role) {\\n        LibAccessControl.checkRole(role);\\n        _;\\n    }\\n\\n    modifier onlyDiamond() {\\n        require(LibCoreStorage.coreStorage().diamond == msg.sender, \\\"Restricted to Diamond\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(LibAccessControl.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x42e6fcfce02e6b642f34275da1dfc6e0538c43484e0054eee9ad23dc941c261d\",\"license\":\"MIT\"},\"contracts/interfaces/core/IMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMathFacet {\\n    function getCurrentPrice(address pair) external view returns (uint256);\\n\\n    function getTickSpacing(address pair) external view returns (int24);\\n\\n    function tickToPrice(address pair, int24 tick) external view returns (uint256);\\n\\n    function priceToClosestTick(address pair, uint256[] memory prices) external view returns (int24[] memory);\\n\\n    function getCurrentPoolTick(address pair) external view returns (int24 tick);\\n\\n    function closestTicksForCurrentTick(address pair) external view returns (int24 left, int24 right);\\n}\\n\",\"keccak256\":\"0x5a75edd0a8cbf7c3b2c7e05084f5469eb9e10906d6e63327a5e4d92dad2f72bb\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPoolMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPoolMathFacet {\\n    function toUint160(uint256 y) external view returns (uint160);\\n\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) external view returns (uint256);\\n\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) external view returns (int24);\\n\\n    function getSqrtRatioAtTick(int24 tick) external view returns (uint160);\\n\\n    function getPoolDecimals(address pair) external view returns (uint256, uint256);\\n\\n    function getPoolSqrtRatioX96(address pair) external view returns (uint160);\\n\\n    function getPoolTickSpacing(address pair) external view returns (int24);\\n\\n    function getPoolTick(address pair) external view returns (int24);\\n\\n    function getPoolTokens(address pair) external view returns (address, address);\\n\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external view returns (uint128);\\n\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe11314e0c1d656150fad39805414e3a96281859f1ae172aee68827da778e221c\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPositionManagerFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPositionManagerFacet {\\n    struct PositionInfo {\\n        string platform;\\n        uint256 tokenId;\\n        address poolId;\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 rewardAmount0;\\n        uint256 rewardAmount1;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 apr;\\n    }\\n\\n    function mintPosition(\\n        address pair,\\n        int24 tickRange0,\\n        int24 tickRange1,\\n        uint256 amountOut0,\\n        uint256 amountOut1\\n    ) external returns (uint256);\\n\\n    function closePosition(uint256 tokenId, address recipient) external;\\n\\n    function getPositions(address wallet) external view returns (PositionInfo[] memory);\\n\\n    function sumPositionAmounts(uint256 tokenId, uint256 input0, uint256 input1) external view returns (uint256, uint256);\\n\\n    function checkForOwner(uint256 tokenId, address sender) external view;\\n}\\n\",\"keccak256\":\"0x41ee6ff46c99abd1baf1ec3469104c2fc44c9c13fa137c27e9c02021293e8747\",\"license\":\"MIT\"},\"contracts/interfaces/core/IProportionFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IProportionFacet {\\n    struct InputSwapToken {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    struct ResultOfProportion {\\n        address[] inputTokenAddresses;\\n        uint256[] inputTokenAmounts;\\n        address[] outputTokenAddresses;\\n        uint256[] outputTokenProportions;\\n        uint256[] outputTokenAmounts;\\n        uint256[] poolProportionsUsd;\\n    }\\n\\n    struct OutTokenInfo {\\n        uint256 idx;\\n        uint256 amountUsd;\\n        uint256 prop;\\n        uint256 propAmount;\\n        uint256 amountToSwap;\\n        uint256 outAmount;\\n        address token;\\n    }\\n\\n    function getProportionForZap(\\n        address pair,\\n        int24[] memory tickRange,\\n        InputSwapToken[] memory inputTokens\\n    ) external view returns (ResultOfProportion memory);\\n\\n    function getProportionForRebalance(\\n        uint256 tokenId,\\n        address poolId,\\n        int24[] memory tickRange,\\n        InputSwapToken[] memory inputTokens\\n    ) external view returns (ResultOfProportion memory);\\n}\\n\",\"keccak256\":\"0xe895abefc2690e9a3b5d07e72f4665efcfbe54bc682b293183a753e594deb2ee\",\"license\":\"MIT\"},\"contracts/interfaces/core/IZapFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IZapFacet {\\n    struct ZapInParams {\\n        address pair;\\n        int24[] tickRange;\\n        uint256[] amountsOut;\\n    }\\n\\n    struct OutputToken {\\n        address tokenAddress;\\n        address receiver;\\n    }\\n\\n    struct InputToken {\\n        address tokenAddress;\\n        uint256 amountIn;\\n    }\\n\\n    struct SwapData {\\n        InputToken[] inputs;\\n        OutputToken[] outputs;\\n        bytes data;\\n    }\\n\\n    struct ResultOfLiquidity {\\n        uint amountAsset0Before;\\n        uint amountAsset1Before;\\n\\n        uint amountAsset0After;\\n        uint amountAsset1After;\\n\\n        uint[] amountsPut;\\n        uint[] amountsReturned;\\n    }\\n\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external;\\n\\n    function zapOut(uint256 tokenId) external;\\n\\n    function rebalance(SwapData memory swapData, ZapInParams memory paramsData, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xf61e0f99a558070602fd29fa698a09eb960542bd9196857a5b7191ad7e6ac797\",\"license\":\"MIT\"},\"contracts/libraries/core/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_SLOT = keccak256(\\\"access.control.storage\\\");\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n\\n    function accessControlStorage() internal pure returns (Layout storage l) {\\n        bytes32 slot = ACCESS_CONTROL_STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        checkRole(role);\\n        _;\\n    }\\n\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return accessControlStorage().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function renounceRole(bytes32 role) internal {\\n        revokeRole(role, msg.sender);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x751a6e0e4acfc3878f6cff6716b786881a5fde23e1262b7591081070a627e16c\",\"license\":\"MIT\"},\"contracts/libraries/core/LibCoreStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibCoreStorage {\\n    bytes32 internal constant CORE_STORAGE_POSITION = keccak256(\\\"core.storage\\\");\\n\\n    struct CoreStorage {\\n        address odosRouter;\\n        address npm;\\n        uint256 stakeSlippageBP;\\n        address diamond;\\n    }\\n\\n    function coreStorage() internal pure returns (CoreStorage storage ds) {\\n        bytes32 position = CORE_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25a26795568f7a50aed18b949ef764828e674758e1037bf3d2175750a23457f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d1a806100206000396000f3fe6080604052600436106100385760003560e01c806379048bd414610044578063793fbaa914610066578063fe27824a1461008657600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004611a07565b6100a6565b005b34801561007257600080fd5b50610064610081366004611a6a565b6100b4565b34801561009257600080fd5b506100646100a1366004611ad6565b61017b565b6100b08282610236565b5050565b604051639ac2386160e01b815230908190639ac23861906100db9085903390600401611aef565b60006040518083038186803b1580156100f357600080fd5b505afa158015610107573d6000803e3d6000fd5b5050604051632d783b2b60e21b81526001600160a01b038416925063b5e0ecac91506101399085903090600401611aef565b600060405180830381600087803b15801561015357600080fd5b505af1158015610167573d6000803e3d6000fd5b505050506101758484610236565b50505050565b604051639ac2386160e01b815230908190639ac23861906101a29085903390600401611aef565b60006040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b5050604051632d783b2b60e21b81526001600160a01b038416925063b5e0ecac91506102009085903390600401611aef565b600060405180830381600087803b15801561021a57600080fd5b505af115801561022e573d6000803e3d6000fd5b505050505050565b61023f826104b0565b61024882610922565b50506040805160028082526060820183523092600092919060208301908036833701905050835160405163ca4f280360e01b81529192506001600160a01b0384169163ca4f28039161029c91600401611b06565b6040805180830381865afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190611b1a565b826000815181106102ef576102ef611b54565b602002602001018360018151811061030957610309611b54565b6001600160a01b0393841660209182029290920101529116905260005b81518110156104a657600082828151811061034357610343611b54565b6020026020010151905060008560400151838151811061036557610365611b54565b6020026020010151111561040557806001600160a01b03166323b872dd33308860400151868151811061039a5761039a611b54565b60200260200101516040518463ffffffff1660e01b81526004016103c093929190611b6a565b6020604051808303816000875af11580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190611b8e565b505b6040516370a0823160e01b81526001600160a01b038216906370a0823190610431903090600401611b06565b602060405180830381865afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104729190611bb7565b8560400151838151811061048857610488611b54565b6020908102919091010152508061049e81611be6565b915050610326565b5061017583610d64565b60005b8160200151518110156106225760005b8181101561060f57826020015181815181106104e1576104e1611b54565b6020026020010151600001516001600160a01b03168360200151838151811061050c5761050c611b54565b6020026020010151600001516001600160a01b03160361056d5760405162461bcd60e51b81526020600482015260176024820152764475706c6963617465206f757470757420746f6b656e7360481b60448201526064015b60405180910390fd5b306001600160a01b03168360200151838151811061058d5761058d611b54565b6020026020010151602001516001600160a01b0316146105fd5760405162461bcd60e51b815260206004820152602560248201527f5265636569766572206f662073776170206973206e6f74207468697320636f6e6044820152641d1c9858dd60da1b6064820152608401610564565b8061060781611be6565b9150506104c3565b508061061a81611be6565b9150506104b3565b5060005b8151518110156100b05760005b818110156106e757825180518290811061064f5761064f611b54565b6020026020010151600001516001600160a01b03168360000151838151811061067a5761067a611b54565b6020026020010151600001516001600160a01b0316036106d55760405162461bcd60e51b81526020600482015260166024820152754475706c696361746520696e70757420746f6b656e7360501b6044820152606401610564565b806106df81611be6565b915050610633565b5060005b8260200151518110156107ad578260200151818151811061070e5761070e611b54565b6020026020010151600001516001600160a01b03168360000151838151811061073957610739611b54565b6020026020010151600001516001600160a01b03160361079b5760405162461bcd60e51b815260206004820152601a60248201527f4475706c696361746520696e70757420616e64206f75747075740000000000006044820152606401610564565b806107a581611be6565b9150506106eb565b506000826000015182815181106107c6576107c6611b54565b6020026020010151600001519050806001600160a01b03166323b872dd3330866000015186815181106107fb576107fb611b54565b6020026020010151602001516040518463ffffffff1660e01b815260040161082593929190611b6a565b6020604051808303816000875af1158015610844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108689190611b8e565b50806001600160a01b031663095ea7b36108806115ba565b54855180516001600160a01b0390921691869081106108a1576108a1611b54565b6020026020010151602001516040518363ffffffff1660e01b81526004016108ca929190611bff565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190611b8e565b5050808061091a90611be6565b915050610626565b606080600061092f6115ba565b5460408086015190516001600160a01b039092169160009161095091611c18565b60006040518083038185875af1925050503d806000811461098d576040519150601f19603f3d011682016040523d82523d6000602084013e610992565b606091505b50509050806109d95760405162461bcd60e51b81526020600482015260136024820152721c9bdd5d195c881cddd85c081a5b9d985b1a59606a1b6044820152606401610564565b8351516000906001600160401b038111156109f6576109f66115de565b604051908082528060200260200182016040528015610a1f578160200160208202803683370190505b50905060008560000151516001600160401b03811115610a4157610a416115de565b604051908082528060200260200182016040528015610a6a578160200160208202803683370190505b50905060005b865151811015610b13578651805182908110610a8e57610a8e611b54565b602002602001015160000151838281518110610aac57610aac611b54565b6001600160a01b03909216602092830291909101909101528651805182908110610ad857610ad8611b54565b602002602001015160200151828281518110610af657610af6611b54565b602090810291909101015280610b0b81611be6565b915050610a70565b507fb5ad02132d64b1e89c5196397a95b3e268e3f5c555b5845f2ddcdf24684d2aad8183604051610b45929190611c47565b60405180910390a160008660200151516001600160401b03811115610b6c57610b6c6115de565b604051908082528060200260200182016040528015610b95578160200160208202803683370190505b50905060008760200151516001600160401b03811115610bb757610bb76115de565b604051908082528060200260200182016040528015610be0578160200160208202803683370190505b50905060005b886020015151811015610d1d5788602001518181518110610c0957610c09611b54565b602002602001015160000151838281518110610c2757610c27611b54565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610c5957610c59611b54565b60200260200101516001600160a01b03166370a082318a602001518381518110610c8557610c85611b54565b6020026020010151602001516040518263ffffffff1660e01b8152600401610cad9190611b06565b602060405180830381865afa158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee9190611bb7565b828281518110610d0057610d00611b54565b602090810291909101015280610d1581611be6565b915050610be6565b507f0c9e5a590aa4a07e734c28846ee575ea53d4ddf0fc046c45c367faaa2e0342388183604051610d4f929190611c47565b60405180910390a19097909650945050505050565b6040805160028082526060820183526000926020830190803683375050835160405163ca4f280360e01b8152929350309283925063ca4f280391610daa91600401611b06565b6040805180830381865afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea9190611b1a565b83600081518110610dfd57610dfd611b54565b6020026020010184600181518110610e1757610e17611b54565b60200260200101826001600160a01b03166001600160a01b0316815250826001600160a01b03166001600160a01b03168152505050610e856040518060c001604052806000815260200160008152602001600081526020016000815260200160608152602001606081525090565b600083600081518110610e9a57610e9a611b54565b60200260200101519050600084600181518110610eb957610eb9611b54565b60200260200101519050816001600160a01b031663095ea7b3610eda6115ba565b60010154604089015180516001600160a01b0390921691600090610f0057610f00611b54565b60200260200101516040518363ffffffff1660e01b8152600401610f25929190611bff565b6020604051808303816000875af1158015610f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f689190611b8e565b50806001600160a01b031663095ea7b3610f806115ba565b60019081015460408a015180516001600160a01b039092169290918110610fa957610fa9611b54565b60200260200101516040518363ffffffff1660e01b8152600401610fce929190611bff565b6020604051808303816000875af1158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190611b8e565b506040516370a0823160e01b81526001600160a01b038316906370a082319061103e903090600401611b06565b602060405180830381865afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f9190611bb7565b83526040516370a0823160e01b81526001600160a01b038216906370a08231906110ad903090600401611b06565b602060405180830381865afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190611bb7565b8360200181815250506000846001600160a01b031663d620e6fb8860000151896020015160008151811061112457611124611b54565b60200260200101518a6020015160018151811061114357611143611b54565b60200260200101518b6040015160008151811061116257611162611b54565b60200260200101518c6040015160018151811061118157611181611b54565b60209081029190910101516040516001600160e01b031960e088901b1681526001600160a01b039095166004860152600293840b60248601529190920b60448401526064830191909152608482015260a4016020604051808303816000875af11580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190611bb7565b90507fa4e8e12e12124dbefe84fada6e584fcfaf4862f3b8284a8174f89be901ec4d7d8160405161124991815260200190565b60405180910390a16040516370a0823160e01b81526001600160a01b038416906370a082319061127d903090600401611b06565b602060405180830381865afa15801561129a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112be9190611bb7565b604080860191909152516370a0823160e01b81526001600160a01b038316906370a08231906112f1903090600401611b06565b602060405180830381865afa15801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190611bb7565b60608501526040840151156113b757604080850151905163a9059cbb60e01b81526001600160a01b0385169163a9059cbb91611372913391600401611bff565b6020604051808303816000875af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190611b8e565b505b60608401511561143757606084015160405163a9059cbb60e01b81526001600160a01b0384169163a9059cbb916113f2913391600401611bff565b6020604051808303816000875af1158015611411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114359190611b8e565b505b604080516002808252606082018352909160208301908036833750505060808501526040840151845161146a9190611ccb565b846080015160008151811061148157611481611b54565b602002602001018181525050836060015184602001516114a19190611ccb565b84608001516001815181106114b8576114b8611b54565b6020908102919091010152604080516002808252606082019092529081602001602082028036833750505060a085018190526040850151815190919060009061150357611503611b54565b60200260200101818152505083606001518460a0015160018151811061152b5761152b611b54565b6020026020010181815250507ff471c761d3d5d25c66f3d23a33cf7f9aaea894aa0fbcbb3bb158b1bea3c2ed4584608001518760405161156c929190611c47565b60405180910390a17fb4df4b62c251866b0421eb65c2beafa02a7d9e8a267e952174b984257924e1758460a00151876040516115a9929190611c47565b60405180910390a150505050505050565b7f515bff1426cf6c4fb5ebb9b3e24eeca6b61f1bf3996e6c15108dda282fa29a4390565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611616576116166115de565b60405290565b604051606081016001600160401b0381118282101715611616576116166115de565b604051601f8201601f191681016001600160401b0381118282101715611666576116666115de565b604052919050565b60006001600160401b03821115611687576116876115de565b5060051b60200190565b6001600160a01b03811681146116a657600080fd5b50565b600082601f8301126116ba57600080fd5b813560206116cf6116ca8361166e565b61163e565b82815260069290921b840181019181810190868411156116ee57600080fd5b8286015b8481101561173f576040818903121561170b5760008081fd5b6117136115f4565b813561171e81611691565b81528185013561172d81611691565b818601528352918301916040016116f2565b509695505050505050565b600082601f83011261175b57600080fd5b81356001600160401b03811115611774576117746115de565b611787601f8201601f191660200161163e565b81815284602083860101111561179c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000606082840312156117cb57600080fd5b6117d361161c565b905081356001600160401b03808211156117ec57600080fd5b818401915084601f83011261180057600080fd5b813560206118106116ca8361166e565b82815260069290921b8401810191818101908884111561182f57600080fd5b948201945b8386101561187b576040868a03121561184d5760008081fd5b6118556115f4565b863561186081611691565b81528684013584820152825260409095019490820190611834565b8652508581013593508284111561189157600080fd5b61189d878588016116a9565b908501525060408401359150808211156118b657600080fd5b506118c38482850161174a565b60408301525092915050565b600082601f8301126118e057600080fd5b813560206118f06116ca8361166e565b82815260059290921b8401810191818101908684111561190f57600080fd5b8286015b8481101561173f5780358352918301918301611913565b60006060828403121561193c57600080fd5b61194461161c565b9050813561195181611691565b81526020828101356001600160401b038082111561196e57600080fd5b818501915085601f83011261198257600080fd5b81356119906116ca8261166e565b81815260059190911b830184019084810190888311156119af57600080fd5b938501935b828510156119dd5784358060020b81146119ce5760008081fd5b825293850193908501906119b4565b808688015250505060408501359250808311156119f957600080fd5b50506118c3848285016118cf565b60008060408385031215611a1a57600080fd5b82356001600160401b0380821115611a3157600080fd5b611a3d868387016117b9565b93506020850135915080821115611a5357600080fd5b50611a608582860161192a565b9150509250929050565b600080600060608486031215611a7f57600080fd5b83356001600160401b0380821115611a9657600080fd5b611aa2878388016117b9565b94506020860135915080821115611ab857600080fd5b50611ac58682870161192a565b925050604084013590509250925092565b600060208284031215611ae857600080fd5b5035919050565b9182526001600160a01b0316602082015260400190565b6001600160a01b0391909116815260200190565b60008060408385031215611b2d57600080fd5b8251611b3881611691565b6020840151909250611b4981611691565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611ba057600080fd5b81518015158114611bb057600080fd5b9392505050565b600060208284031215611bc957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611bf857611bf8611bd0565b5060010190565b6001600160a01b03929092168252602082015260400190565b6000825160005b81811015611c395760208186018101518583015201611c1f565b506000920191825250919050565b604080825283519082018190526000906020906060840190828701845b82811015611c8057815184529284019290840190600101611c64565b5050508381038285015284518082528583019183019060005b81811015611cbe5783516001600160a01b031683529284019291840191600101611c99565b5090979650505050505050565b81810381811115611cde57611cde611bd0565b9291505056fea2646970667358221220f1ebcd1ee47418fd307be64fdc57847433673d06544b37255d0dee3094ae7bab64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c806379048bd414610044578063793fbaa914610066578063fe27824a1461008657600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004611a07565b6100a6565b005b34801561007257600080fd5b50610064610081366004611a6a565b6100b4565b34801561009257600080fd5b506100646100a1366004611ad6565b61017b565b6100b08282610236565b5050565b604051639ac2386160e01b815230908190639ac23861906100db9085903390600401611aef565b60006040518083038186803b1580156100f357600080fd5b505afa158015610107573d6000803e3d6000fd5b5050604051632d783b2b60e21b81526001600160a01b038416925063b5e0ecac91506101399085903090600401611aef565b600060405180830381600087803b15801561015357600080fd5b505af1158015610167573d6000803e3d6000fd5b505050506101758484610236565b50505050565b604051639ac2386160e01b815230908190639ac23861906101a29085903390600401611aef565b60006040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b5050604051632d783b2b60e21b81526001600160a01b038416925063b5e0ecac91506102009085903390600401611aef565b600060405180830381600087803b15801561021a57600080fd5b505af115801561022e573d6000803e3d6000fd5b505050505050565b61023f826104b0565b61024882610922565b50506040805160028082526060820183523092600092919060208301908036833701905050835160405163ca4f280360e01b81529192506001600160a01b0384169163ca4f28039161029c91600401611b06565b6040805180830381865afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190611b1a565b826000815181106102ef576102ef611b54565b602002602001018360018151811061030957610309611b54565b6001600160a01b0393841660209182029290920101529116905260005b81518110156104a657600082828151811061034357610343611b54565b6020026020010151905060008560400151838151811061036557610365611b54565b6020026020010151111561040557806001600160a01b03166323b872dd33308860400151868151811061039a5761039a611b54565b60200260200101516040518463ffffffff1660e01b81526004016103c093929190611b6a565b6020604051808303816000875af11580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190611b8e565b505b6040516370a0823160e01b81526001600160a01b038216906370a0823190610431903090600401611b06565b602060405180830381865afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104729190611bb7565b8560400151838151811061048857610488611b54565b6020908102919091010152508061049e81611be6565b915050610326565b5061017583610d64565b60005b8160200151518110156106225760005b8181101561060f57826020015181815181106104e1576104e1611b54565b6020026020010151600001516001600160a01b03168360200151838151811061050c5761050c611b54565b6020026020010151600001516001600160a01b03160361056d5760405162461bcd60e51b81526020600482015260176024820152764475706c6963617465206f757470757420746f6b656e7360481b60448201526064015b60405180910390fd5b306001600160a01b03168360200151838151811061058d5761058d611b54565b6020026020010151602001516001600160a01b0316146105fd5760405162461bcd60e51b815260206004820152602560248201527f5265636569766572206f662073776170206973206e6f74207468697320636f6e6044820152641d1c9858dd60da1b6064820152608401610564565b8061060781611be6565b9150506104c3565b508061061a81611be6565b9150506104b3565b5060005b8151518110156100b05760005b818110156106e757825180518290811061064f5761064f611b54565b6020026020010151600001516001600160a01b03168360000151838151811061067a5761067a611b54565b6020026020010151600001516001600160a01b0316036106d55760405162461bcd60e51b81526020600482015260166024820152754475706c696361746520696e70757420746f6b656e7360501b6044820152606401610564565b806106df81611be6565b915050610633565b5060005b8260200151518110156107ad578260200151818151811061070e5761070e611b54565b6020026020010151600001516001600160a01b03168360000151838151811061073957610739611b54565b6020026020010151600001516001600160a01b03160361079b5760405162461bcd60e51b815260206004820152601a60248201527f4475706c696361746520696e70757420616e64206f75747075740000000000006044820152606401610564565b806107a581611be6565b9150506106eb565b506000826000015182815181106107c6576107c6611b54565b6020026020010151600001519050806001600160a01b03166323b872dd3330866000015186815181106107fb576107fb611b54565b6020026020010151602001516040518463ffffffff1660e01b815260040161082593929190611b6a565b6020604051808303816000875af1158015610844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108689190611b8e565b50806001600160a01b031663095ea7b36108806115ba565b54855180516001600160a01b0390921691869081106108a1576108a1611b54565b6020026020010151602001516040518363ffffffff1660e01b81526004016108ca929190611bff565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190611b8e565b5050808061091a90611be6565b915050610626565b606080600061092f6115ba565b5460408086015190516001600160a01b039092169160009161095091611c18565b60006040518083038185875af1925050503d806000811461098d576040519150601f19603f3d011682016040523d82523d6000602084013e610992565b606091505b50509050806109d95760405162461bcd60e51b81526020600482015260136024820152721c9bdd5d195c881cddd85c081a5b9d985b1a59606a1b6044820152606401610564565b8351516000906001600160401b038111156109f6576109f66115de565b604051908082528060200260200182016040528015610a1f578160200160208202803683370190505b50905060008560000151516001600160401b03811115610a4157610a416115de565b604051908082528060200260200182016040528015610a6a578160200160208202803683370190505b50905060005b865151811015610b13578651805182908110610a8e57610a8e611b54565b602002602001015160000151838281518110610aac57610aac611b54565b6001600160a01b03909216602092830291909101909101528651805182908110610ad857610ad8611b54565b602002602001015160200151828281518110610af657610af6611b54565b602090810291909101015280610b0b81611be6565b915050610a70565b507fb5ad02132d64b1e89c5196397a95b3e268e3f5c555b5845f2ddcdf24684d2aad8183604051610b45929190611c47565b60405180910390a160008660200151516001600160401b03811115610b6c57610b6c6115de565b604051908082528060200260200182016040528015610b95578160200160208202803683370190505b50905060008760200151516001600160401b03811115610bb757610bb76115de565b604051908082528060200260200182016040528015610be0578160200160208202803683370190505b50905060005b886020015151811015610d1d5788602001518181518110610c0957610c09611b54565b602002602001015160000151838281518110610c2757610c27611b54565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610c5957610c59611b54565b60200260200101516001600160a01b03166370a082318a602001518381518110610c8557610c85611b54565b6020026020010151602001516040518263ffffffff1660e01b8152600401610cad9190611b06565b602060405180830381865afa158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee9190611bb7565b828281518110610d0057610d00611b54565b602090810291909101015280610d1581611be6565b915050610be6565b507f0c9e5a590aa4a07e734c28846ee575ea53d4ddf0fc046c45c367faaa2e0342388183604051610d4f929190611c47565b60405180910390a19097909650945050505050565b6040805160028082526060820183526000926020830190803683375050835160405163ca4f280360e01b8152929350309283925063ca4f280391610daa91600401611b06565b6040805180830381865afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea9190611b1a565b83600081518110610dfd57610dfd611b54565b6020026020010184600181518110610e1757610e17611b54565b60200260200101826001600160a01b03166001600160a01b0316815250826001600160a01b03166001600160a01b03168152505050610e856040518060c001604052806000815260200160008152602001600081526020016000815260200160608152602001606081525090565b600083600081518110610e9a57610e9a611b54565b60200260200101519050600084600181518110610eb957610eb9611b54565b60200260200101519050816001600160a01b031663095ea7b3610eda6115ba565b60010154604089015180516001600160a01b0390921691600090610f0057610f00611b54565b60200260200101516040518363ffffffff1660e01b8152600401610f25929190611bff565b6020604051808303816000875af1158015610f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f689190611b8e565b50806001600160a01b031663095ea7b3610f806115ba565b60019081015460408a015180516001600160a01b039092169290918110610fa957610fa9611b54565b60200260200101516040518363ffffffff1660e01b8152600401610fce929190611bff565b6020604051808303816000875af1158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190611b8e565b506040516370a0823160e01b81526001600160a01b038316906370a082319061103e903090600401611b06565b602060405180830381865afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f9190611bb7565b83526040516370a0823160e01b81526001600160a01b038216906370a08231906110ad903090600401611b06565b602060405180830381865afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190611bb7565b8360200181815250506000846001600160a01b031663d620e6fb8860000151896020015160008151811061112457611124611b54565b60200260200101518a6020015160018151811061114357611143611b54565b60200260200101518b6040015160008151811061116257611162611b54565b60200260200101518c6040015160018151811061118157611181611b54565b60209081029190910101516040516001600160e01b031960e088901b1681526001600160a01b039095166004860152600293840b60248601529190920b60448401526064830191909152608482015260a4016020604051808303816000875af11580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190611bb7565b90507fa4e8e12e12124dbefe84fada6e584fcfaf4862f3b8284a8174f89be901ec4d7d8160405161124991815260200190565b60405180910390a16040516370a0823160e01b81526001600160a01b038416906370a082319061127d903090600401611b06565b602060405180830381865afa15801561129a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112be9190611bb7565b604080860191909152516370a0823160e01b81526001600160a01b038316906370a08231906112f1903090600401611b06565b602060405180830381865afa15801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190611bb7565b60608501526040840151156113b757604080850151905163a9059cbb60e01b81526001600160a01b0385169163a9059cbb91611372913391600401611bff565b6020604051808303816000875af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190611b8e565b505b60608401511561143757606084015160405163a9059cbb60e01b81526001600160a01b0384169163a9059cbb916113f2913391600401611bff565b6020604051808303816000875af1158015611411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114359190611b8e565b505b604080516002808252606082018352909160208301908036833750505060808501526040840151845161146a9190611ccb565b846080015160008151811061148157611481611b54565b602002602001018181525050836060015184602001516114a19190611ccb565b84608001516001815181106114b8576114b8611b54565b6020908102919091010152604080516002808252606082019092529081602001602082028036833750505060a085018190526040850151815190919060009061150357611503611b54565b60200260200101818152505083606001518460a0015160018151811061152b5761152b611b54565b6020026020010181815250507ff471c761d3d5d25c66f3d23a33cf7f9aaea894aa0fbcbb3bb158b1bea3c2ed4584608001518760405161156c929190611c47565b60405180910390a17fb4df4b62c251866b0421eb65c2beafa02a7d9e8a267e952174b984257924e1758460a00151876040516115a9929190611c47565b60405180910390a150505050505050565b7f515bff1426cf6c4fb5ebb9b3e24eeca6b61f1bf3996e6c15108dda282fa29a4390565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611616576116166115de565b60405290565b604051606081016001600160401b0381118282101715611616576116166115de565b604051601f8201601f191681016001600160401b0381118282101715611666576116666115de565b604052919050565b60006001600160401b03821115611687576116876115de565b5060051b60200190565b6001600160a01b03811681146116a657600080fd5b50565b600082601f8301126116ba57600080fd5b813560206116cf6116ca8361166e565b61163e565b82815260069290921b840181019181810190868411156116ee57600080fd5b8286015b8481101561173f576040818903121561170b5760008081fd5b6117136115f4565b813561171e81611691565b81528185013561172d81611691565b818601528352918301916040016116f2565b509695505050505050565b600082601f83011261175b57600080fd5b81356001600160401b03811115611774576117746115de565b611787601f8201601f191660200161163e565b81815284602083860101111561179c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000606082840312156117cb57600080fd5b6117d361161c565b905081356001600160401b03808211156117ec57600080fd5b818401915084601f83011261180057600080fd5b813560206118106116ca8361166e565b82815260069290921b8401810191818101908884111561182f57600080fd5b948201945b8386101561187b576040868a03121561184d5760008081fd5b6118556115f4565b863561186081611691565b81528684013584820152825260409095019490820190611834565b8652508581013593508284111561189157600080fd5b61189d878588016116a9565b908501525060408401359150808211156118b657600080fd5b506118c38482850161174a565b60408301525092915050565b600082601f8301126118e057600080fd5b813560206118f06116ca8361166e565b82815260059290921b8401810191818101908684111561190f57600080fd5b8286015b8481101561173f5780358352918301918301611913565b60006060828403121561193c57600080fd5b61194461161c565b9050813561195181611691565b81526020828101356001600160401b038082111561196e57600080fd5b818501915085601f83011261198257600080fd5b81356119906116ca8261166e565b81815260059190911b830184019084810190888311156119af57600080fd5b938501935b828510156119dd5784358060020b81146119ce5760008081fd5b825293850193908501906119b4565b808688015250505060408501359250808311156119f957600080fd5b50506118c3848285016118cf565b60008060408385031215611a1a57600080fd5b82356001600160401b0380821115611a3157600080fd5b611a3d868387016117b9565b93506020850135915080821115611a5357600080fd5b50611a608582860161192a565b9150509250929050565b600080600060608486031215611a7f57600080fd5b83356001600160401b0380821115611a9657600080fd5b611aa2878388016117b9565b94506020860135915080821115611ab857600080fd5b50611ac58682870161192a565b925050604084013590509250925092565b600060208284031215611ae857600080fd5b5035919050565b9182526001600160a01b0316602082015260400190565b6001600160a01b0391909116815260200190565b60008060408385031215611b2d57600080fd5b8251611b3881611691565b6020840151909250611b4981611691565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611ba057600080fd5b81518015158114611bb057600080fd5b9392505050565b600060208284031215611bc957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611bf857611bf8611bd0565b5060010190565b6001600160a01b03929092168252602082015260400190565b6000825160005b81811015611c395760208186018101518583015201611c1f565b506000920191825250919050565b604080825283519082018190526000906020906060840190828701845b82811015611c8057815184529284019290840190600101611c64565b5050508381038285015284518082528583019183019060005b81811015611cbe5783516001600160a01b031683529284019291840191600101611c99565b5090979650505050505050565b81810381811115611cde57611cde611bd0565b9291505056fea2646970667358221220f1ebcd1ee47418fd307be64fdc57847433673d06544b37255d0dee3094ae7bab64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}