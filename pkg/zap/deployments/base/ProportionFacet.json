{
  "address": "0xdAaCb9C7053c44F3161684c4b0a98A11Aa19dcd0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "internalType": "int24[]",
          "name": "tickRange",
          "type": "int24[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProportionFacet.PoolTokenPrices[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "name": "getProportionForRebalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "inputTokenAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inputTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "outputTokenAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputTokenProportions",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "poolProportionsUsd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputSwapExpected",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IProportionFacet.ResultOfProportion",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "int24[]",
          "name": "tickRange",
          "type": "int24[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProportionFacet.InputSwapToken[]",
          "name": "inputTokens",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProportionFacet.PoolTokenPrices[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "name": "getProportionForZap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "inputTokenAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inputTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "outputTokenAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputTokenProportions",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "poolProportionsUsd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputSwapExpected",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IProportionFacet.ResultOfProportion",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd9e08df79405371f92ea29a135dd38e126fec57b063466ba820d182d1bb840b",
  "receipt": {
    "to": null,
    "from": "0xab918d486c61ADd7c577F1af938117bBD422f088",
    "contractAddress": "0xdAaCb9C7053c44F3161684c4b0a98A11Aa19dcd0",
    "transactionIndex": 57,
    "gasUsed": "2929059",
    "logsBloom": "0x
    "blockHash": "0xc3d4e9d4a3c8a3b9310a6c73915c62e4c008a86d3b8230d2f62f34455d0a80ef",
    "transactionHash": "0xcd9e08df79405371f92ea29a135dd38e126fec57b063466ba820d182d1bb840b",
    "logs": [],
    "blockNumber": 19005114,
    "cumulativeGasUsed": "18256634",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "43afb12b01ee97793a487968576e5e8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"internalType\":\"int24[]\",\"name\":\"tickRange\",\"type\":\"int24[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IProportionFacet.PoolTokenPrices[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"getProportionForRebalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"inputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"outputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputTokenProportions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"poolProportionsUsd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputSwapExpected\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IProportionFacet.ResultOfProportion\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"int24[]\",\"name\":\"tickRange\",\"type\":\"int24[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IProportionFacet.InputSwapToken[]\",\"name\":\"inputTokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IProportionFacet.PoolTokenPrices[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"getProportionForZap\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"inputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"outputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputTokenProportions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"poolProportionsUsd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputSwapExpected\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IProportionFacet.ResultOfProportion\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/core/ProportionFacet.sol\":\"ProportionFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/facets/core/ProportionFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../interfaces/Constants.sol\\\";\\n\\ncontract ProportionFacet is IProportionFacet {\\n    function getProportionForZap(\\n        address pair,\\n        int24[] memory tickRange,\\n        InputSwapToken[] memory inputTokens,\\n        PoolTokenPrices[] memory prices\\n    ) external view returns (ResultOfProportion memory result) {\\n        require(prices.length == 2, \\\"prices != 2 tokens\\\");\\n\\n        IMasterFacet master = IMasterFacet(address(this));\\n        uint8[] memory decimals = new uint8[](inputTokens.length);\\n        OutTokenInfo[] memory outTokens = new OutTokenInfo[](2);\\n        uint256 sumInputsUsd;\\n\\n        outTokens[0].idx = inputTokens.length;\\n        outTokens[1].idx = inputTokens.length;\\n        (outTokens[0].token, outTokens[1].token) = master.getPoolTokens(pair);\\n        require(\\n            outTokens[0].token == prices[0].tokenAddress && outTokens[1].token == prices[1].tokenAddress,\\n            \\\"Invalid price tokens\\\"\\n        );\\n\\n        result.inputTokenAddresses = new address[](inputTokens.length);\\n        result.inputTokenAmounts = new uint256[](inputTokens.length);\\n        result.outputTokenAddresses = new address[](2);\\n        result.outputTokenProportions = new uint256[](2);\\n        result.outputTokenAmounts = new uint256[](2);\\n        result.poolProportionsUsd = new uint256[](2);\\n        result.outputSwapExpected = new uint256[](2);\\n\\n        for (uint256 i = 0; i < inputTokens.length; i++) {\\n            decimals[i] = IERC20Metadata(inputTokens[i].tokenAddress).decimals();\\n            uint256 amountUsd = master.mulDiv(inputTokens[i].price, inputTokens[i].amount, 10 ** decimals[i]);\\n            sumInputsUsd += amountUsd;\\n            if (inputTokens[i].tokenAddress == outTokens[0].token) {\\n                outTokens[0].idx = i;\\n                outTokens[0].amountUsd = amountUsd;\\n                continue;\\n            }\\n            if (inputTokens[i].tokenAddress == outTokens[1].token) {\\n                outTokens[1].idx = i;\\n                outTokens[1].amountUsd = amountUsd;\\n                continue;\\n            }\\n            // front (!)\\n            result.inputTokenAddresses[i] = inputTokens[i].tokenAddress;\\n            result.inputTokenAmounts[i] = inputTokens[i].amount;\\n        }\\n\\n        (outTokens[0].propAmount, outTokens[1].propAmount) = getProportion(pair, tickRange);\\n        outTokens[0].prop = outTokens[0].propAmount * master.getCurrentPrice(pair);\\n        outTokens[1].prop = outTokens[0].prop + outTokens[1].propAmount * (10 ** IERC20Metadata(outTokens[1].token).decimals());\\n        result.poolProportionsUsd[0] = master.mulDiv(sumInputsUsd, outTokens[0].prop, outTokens[1].prop);\\n        result.poolProportionsUsd[1] = sumInputsUsd - result.poolProportionsUsd[0];\\n        result.outputSwapExpected[0] = master.mulDiv(result.poolProportionsUsd[0], 10 ** IERC20Metadata(outTokens[0].token).decimals(), prices[0].price);\\n        result.outputSwapExpected[1] = master.mulDiv(result.poolProportionsUsd[1], 10 ** IERC20Metadata(outTokens[1].token).decimals(), prices[1].price);\\n\\n        if (result.poolProportionsUsd[0] == outTokens[0].amountUsd && result.poolProportionsUsd[1] == outTokens[1].amountUsd &&\\n            (outTokens[0].prop == 0 || outTokens[0].prop == outTokens[1].prop)) {\\n            delete result.inputTokenAddresses;\\n            delete result.inputTokenAmounts;\\n            setOutputToken(inputTokens, outTokens, result, 0);\\n            setOutputToken(inputTokens, outTokens, result, 1);\\n            return result;\\n        }\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            if (outTokens[i].idx < inputTokens.length && result.poolProportionsUsd[i] < outTokens[i].amountUsd) {\\n                outTokens[i].amountToSwap = master.mulDiv(outTokens[i].amountUsd - result.poolProportionsUsd[i], 10 ** decimals[outTokens[i].idx], inputTokens[outTokens[i].idx].price);\\n                result.inputTokenAddresses[outTokens[i].idx] = inputTokens[outTokens[i].idx].tokenAddress;\\n                result.inputTokenAmounts[outTokens[i].idx] = outTokens[i].amountToSwap;\\n                result.outputTokenAddresses[0] = outTokens[1 - i].token;\\n                // front (!)\\n                result.outputTokenProportions[0] = BASE_DIV;\\n                result.outputTokenAmounts[i] = inputTokens[outTokens[i].idx].amount - outTokens[i].amountToSwap;\\n                result.outputSwapExpected[i] = result.outputSwapExpected[i] > result.outputTokenAmounts[i] ? result.outputSwapExpected[i] - result.outputTokenAmounts[i] : 0;\\n                setOutputToken(inputTokens, outTokens, result, 1 - i);\\n                return result;\\n            }\\n        }\\n\\n        result.outputTokenAddresses[0] = outTokens[0].token;\\n        result.outputTokenAddresses[1] = outTokens[1].token;\\n        result.outputTokenProportions[0] = master.mulDiv(result.poolProportionsUsd[0] - outTokens[0].amountUsd, BASE_DIV,\\n            (result.poolProportionsUsd[0] + result.poolProportionsUsd[1]) - (outTokens[0].amountUsd + outTokens[1].amountUsd));\\n        result.outputTokenProportions[1] = BASE_DIV - result.outputTokenProportions[0];\\n        setOutputToken(inputTokens, outTokens, result, 0);\\n        setOutputToken(inputTokens, outTokens, result, 1);\\n        return result;\\n    }\\n\\n    function getProportionForRebalance(\\n        uint256 tokenId,\\n        address poolId,\\n        int24[] memory tickRange,\\n        PoolTokenPrices[] memory prices\\n    ) external view returns (ResultOfProportion memory result) {\\n        require(prices.length == 2, \\\"!= 2 tokens\\\");\\n        IMasterFacet master = IMasterFacet(address(this));\\n        uint8[] memory decimals = new uint8[](2);\\n        OutTokenInfo[] memory outTokens = new OutTokenInfo[](2);\\n        uint256 sumInputsUsd;\\n\\n        (outTokens[0].token, outTokens[1].token) = master.getPoolTokens(poolId);\\n        require(\\n            outTokens[0].token == prices[0].tokenAddress && outTokens[1].token == prices[1].tokenAddress,\\n            \\\"Invalid input tokens\\\"\\n        );\\n        result.inputTokenAddresses = new address[](1);\\n        result.inputTokenAmounts = new uint256[](1);\\n        result.outputTokenAddresses = new address[](1);\\n        result.outputTokenProportions = new uint256[](1);\\n        result.outputTokenAmounts = new uint256[](2);\\n        result.poolProportionsUsd = new uint256[](2);\\n        result.outputSwapExpected = new uint256[](2);\\n\\n        (outTokens[0].amount, outTokens[1].amount) = master.getPositionAmounts(tokenId);\\n        for (uint256 i = 0; i < 2; i++) {\\n            decimals[i] = IERC20Metadata(prices[i].tokenAddress).decimals();\\n            uint256 amountUsd = master.mulDiv(prices[i].price, outTokens[i].amount, 10 ** decimals[i]);\\n            sumInputsUsd += amountUsd;\\n            outTokens[i].amountUsd = amountUsd;\\n        }\\n\\n        (outTokens[0].propAmount, outTokens[1].propAmount) = getProportion(poolId, tickRange);\\n        outTokens[0].prop = outTokens[0].propAmount * master.getCurrentPrice(poolId);\\n        outTokens[1].prop = outTokens[0].prop + outTokens[1].propAmount * (10 ** decimals[1]);\\n        result.poolProportionsUsd[0] = master.mulDiv(sumInputsUsd, outTokens[0].prop, outTokens[1].prop);\\n        result.poolProportionsUsd[1] = sumInputsUsd - result.poolProportionsUsd[0];\\n        result.outputSwapExpected[0] = master.mulDiv(result.poolProportionsUsd[0], 10 ** IERC20Metadata(outTokens[0].token).decimals(), prices[0].price);\\n        result.outputSwapExpected[1] = master.mulDiv(result.poolProportionsUsd[1], 10 ** IERC20Metadata(outTokens[1].token).decimals(), prices[1].price);\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            if (result.poolProportionsUsd[i] < outTokens[i].amountUsd) {\\n                outTokens[i].amountToSwap = master.mulDiv(outTokens[i].amountUsd - result.poolProportionsUsd[i], 10 ** decimals[i], prices[i].price);\\n                result.inputTokenAddresses[0] = prices[i].tokenAddress;\\n                result.inputTokenAmounts[0] = outTokens[i].amountToSwap;\\n                result.outputTokenAddresses[0] = outTokens[1 - i].token;\\n                // front (!)\\n                result.outputTokenProportions[0] = BASE_DIV;\\n                result.outputTokenAmounts[i] = outTokens[i].amount - outTokens[i].amountToSwap;\\n                result.outputTokenAmounts[1 - i] = outTokens[1 - i].amount;\\n                result.outputSwapExpected[i] = result.outputSwapExpected[i] > result.outputTokenAmounts[i] ? result.outputSwapExpected[i] - result.outputTokenAmounts[i] : 0;\\n                result.outputSwapExpected[1 - i] = result.outputSwapExpected[1 - i] > result.outputTokenAmounts[1 - i] ? result.outputSwapExpected[1 - i] - result.outputTokenAmounts[1 - i] : 0;\\n                break;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getProportion(\\n        address pair,\\n        int24[] memory tickRange\\n    ) internal view returns (uint256 token0Amount, uint256 token1Amount) {\\n        IMasterFacet master = IMasterFacet(address(this));\\n        (uint256 decimals0, uint256 decimals1) = master.getPoolDecimals(pair);\\n        uint256 dec0 = 10 ** decimals0;\\n        uint256 dec1 = 10 ** decimals1;\\n        uint160 sqrtRatioX96 = master.getPoolSqrtRatioX96(pair);\\n\\n        uint160 sqrtRatio0 = master.getSqrtRatioAtTick(tickRange[0]);\\n        uint160 sqrtRatio1 = master.getSqrtRatioAtTick(tickRange[1]);\\n        uint128 liquidity = master.getLiquidityForAmounts(sqrtRatioX96, sqrtRatio0, sqrtRatio1, dec0 * 1000, dec1 * 1000);\\n        (token0Amount, token1Amount) = master.getAmountsForLiquidity(sqrtRatioX96, sqrtRatio0, sqrtRatio1, liquidity);\\n        uint256 denominator = dec0 > dec1 ? dec0 : dec1;\\n\\n        token0Amount = token0Amount * (denominator / dec0);\\n        token1Amount = token1Amount * (denominator / dec1);\\n    }\\n\\n    function setOutputToken(\\n        InputSwapToken[] memory inputTokens,\\n        OutTokenInfo[] memory outTokens,\\n        ResultOfProportion memory result,\\n        uint256 i) internal pure {\\n        result.outputTokenAmounts[i] = outTokens[i].idx < inputTokens.length ? inputTokens[outTokens[i].idx].amount : 0;\\n        result.outputSwapExpected[i] = result.outputSwapExpected[i] > result.outputTokenAmounts[i] ? result.outputSwapExpected[i] - result.outputTokenAmounts[i] : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7502e36106b87a42b49d89ab92b9d63a9d175ad2f7c04540ebf4183c71d33b68\",\"license\":\"MIT\"},\"contracts/interfaces/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nbytes32 constant UNIT_ROLE = keccak256(\\\"UNIT_ROLE\\\");\\nbytes32 constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\nuint256 constant MAX_UINT_VALUE = type(uint256).max;\\nuint256 constant BASE_DIV = 1000000;\\n\\naddress constant MASTER_CHEF_V3 = 0x5e09ACf80C0296740eC5d6F643005a4ef8DaA694;\\n\",\"keccak256\":\"0x0006b5dd141ee8a2132f48753b05a0dc175ff2501a60a85f129bc6eaad82f6fd\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./core/IPoolMathFacet.sol\\\";\\nimport \\\"./core/IPositionManagerFacet.sol\\\";\\nimport \\\"./core/IZapFacet.sol\\\";\\nimport \\\"./core/IMathFacet.sol\\\";\\nimport \\\"./core/IProportionFacet.sol\\\";\\nimport \\\"./Modifiers.sol\\\";\\nimport \\\"../libraries/core/LibCoreStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IMasterFacet is IPoolMathFacet, IPositionManagerFacet, IZapFacet, IMathFacet, IProportionFacet {}\\n\",\"keccak256\":\"0x775cfc10d6253a6a573fba125d9a7e3203754a8a3a873c6fec983e3d9c71bf64\",\"license\":\"MIT\"},\"contracts/interfaces/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessControl} from \\\"../libraries/core/LibAccessControl.sol\\\";\\nimport {LibCoreStorage} from \\\"../libraries/core/LibCoreStorage.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Modifiers {\\n    modifier onlyRole(bytes32 role) {\\n        LibAccessControl.checkRole(role);\\n        _;\\n    }\\n\\n    modifier onlyDiamond() {\\n        require(LibCoreStorage.coreStorage().diamond == msg.sender, \\\"Restricted to Diamond\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(LibAccessControl.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x42e6fcfce02e6b642f34275da1dfc6e0538c43484e0054eee9ad23dc941c261d\",\"license\":\"MIT\"},\"contracts/interfaces/core/IMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMathFacet {\\n    function getCurrentPrice(address pair) external view returns (uint256);\\n\\n    function getTickSpacing(address pair) external view returns (int24);\\n\\n    function tickToPrice(address pair, int24 tick) external view returns (uint256);\\n\\n    function priceToClosestTick(address pair, uint256[] memory prices) external view returns (int24[] memory);\\n\\n    function getCurrentPoolTick(address pair) external view returns (int24 tick);\\n\\n    function closestTicksForCurrentTick(address pair) external view returns (int24 left, int24 right);\\n}\\n\",\"keccak256\":\"0x5a75edd0a8cbf7c3b2c7e05084f5469eb9e10906d6e63327a5e4d92dad2f72bb\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPoolMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPoolMathFacet {\\n    function toUint160(uint256 y) external view returns (uint160);\\n\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) external view returns (uint256);\\n\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) external view returns (int24);\\n\\n    function getSqrtRatioAtTick(int24 tick) external view returns (uint160);\\n\\n    function getPoolDecimals(address pair) external view returns (uint256, uint256);\\n\\n    function getPoolSqrtRatioX96(address pair) external view returns (uint160);\\n\\n    function getPoolTickSpacing(address pair) external view returns (int24);\\n\\n    function getPoolTick(address pair) external view returns (int24);\\n\\n    function getPoolTokens(address pair) external view returns (address, address);\\n\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external view returns (uint128);\\n\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe11314e0c1d656150fad39805414e3a96281859f1ae172aee68827da778e221c\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPositionManagerFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPositionManagerFacet {\\n    event CollectRewards(uint256 amount0, uint256 amount1);\\n\\n    struct PositionInfo {\\n        string platform;\\n        uint256 tokenId;\\n        address poolId;\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 fee0;\\n        uint256 fee1;\\n        uint256 emissions;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int24 currentTick;\\n        bool isStaked;\\n    }\\n\\n    function mintPosition(\\n        address pair,\\n        int24 tickRange0,\\n        int24 tickRange1,\\n        uint256 amountOut0,\\n        uint256 amountOut1,\\n        address recipient\\n    ) external returns (uint256);\\n\\n    function increaseLiquidity(\\n        uint256 tokenId,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external returns (uint128);\\n\\n    function closePosition(uint256 tokenId, address recipient, address feeRecipient) external;\\n\\n    function getPositions(address wallet) external view returns (PositionInfo[] memory);\\n\\n    function getPositionAmounts(uint256 tokenId) external view returns (uint256, uint256);\\n\\n    function checkForOwner(uint256 tokenId, address sender) external view;\\n\\n    function getTokens(uint256 tokenId) external view returns (address, address);\\n\\n    function getTicks(uint256 tokenId) external view returns (int24, int24);\\n\\n    function getPool(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d3c4c9f7f3cec4dfa026e505cac9231cb4c556dbe64e655f473cdaa51209d27\",\"license\":\"MIT\"},\"contracts/interfaces/core/IProportionFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IProportionFacet {\\n    struct InputSwapToken {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    struct PoolTokenPrices {\\n        address tokenAddress;\\n        uint256 price;\\n    }\\n\\n    struct ResultOfProportion {\\n        address[] inputTokenAddresses;\\n        uint256[] inputTokenAmounts;\\n        address[] outputTokenAddresses;\\n        uint256[] outputTokenProportions;\\n        uint256[] outputTokenAmounts;\\n        uint256[] poolProportionsUsd;\\n        uint256[] outputSwapExpected;\\n    }\\n\\n    struct OutTokenInfo {\\n        uint256 idx;\\n        uint256 amount;\\n        uint256 amountUsd;\\n        uint256 prop;\\n        uint256 propAmount;\\n        uint256 amountToSwap;\\n        uint256 outAmount;\\n        address token;\\n    }\\n\\n    function getProportionForZap(\\n        address pair,\\n        int24[] memory tickRange,\\n        InputSwapToken[] memory inputTokens,\\n        PoolTokenPrices[] memory prices\\n    ) external view returns (ResultOfProportion memory);\\n\\n    function getProportionForRebalance(\\n        uint256 tokenId,\\n        address poolId,\\n        int24[] memory tickRange,\\n        PoolTokenPrices[] memory prices\\n    ) external view returns (ResultOfProportion memory);\\n}\\n\",\"keccak256\":\"0xf11c956f93a22c1181c4eb858326484c5e350b867f3da6aa83ea7c99a0869a62\",\"license\":\"MIT\"},\"contracts/interfaces/core/IZapFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IZapFacet {\\n    struct ZapInParams {\\n        address pair;\\n        int24[] tickRange;\\n        uint256[] amountsOut;\\n    }\\n\\n    struct OutputToken {\\n        address tokenAddress;\\n        address receiver;\\n        uint256 amountMin;\\n    }\\n\\n    struct InputToken {\\n        address tokenAddress;\\n        uint256 amountIn;\\n    }\\n\\n    struct SwapData {\\n        InputToken[] inputs;\\n        OutputToken[] outputs;\\n        bytes data;\\n    }\\n\\n    struct ResultOfLiquidity {\\n        uint amountAsset0Before;\\n        uint amountAsset1Before;\\n\\n        uint amountAsset0After;\\n        uint amountAsset1After;\\n\\n        uint[] amountsPut;\\n        uint[] amountsReturned;\\n    }\\n\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external;\\n\\n    function zapOut(uint256 tokenId) external;\\n\\n    function rebalance(SwapData memory swapData, ZapInParams memory paramsData, uint256 tokenId) external;\\n\\n    function increase(SwapData memory swapData, ZapInParams memory paramsData, uint256 tokenId) external;\\n\\n    function merge(uint256 tokenIn, uint256[] memory tokensOut) external;\\n}\\n\",\"keccak256\":\"0xa2320ed2263a5b7d2c93925c2daecbb4e01993cff01b93d92919a9894daa984a\",\"license\":\"MIT\"},\"contracts/libraries/core/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_SLOT = keccak256(\\\"access.control.storage\\\");\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n\\n    function accessControlStorage() internal pure returns (Layout storage l) {\\n        bytes32 slot = ACCESS_CONTROL_STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        checkRole(role);\\n        _;\\n    }\\n\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return accessControlStorage().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function renounceRole(bytes32 role) internal {\\n        revokeRole(role, msg.sender);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x751a6e0e4acfc3878f6cff6716b786881a5fde23e1262b7591081070a627e16c\",\"license\":\"MIT\"},\"contracts/libraries/core/LibCoreStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibCoreStorage {\\n    bytes32 internal constant CORE_STORAGE_POSITION = keccak256(\\\"core.storage\\\");\\n\\n    struct CoreStorage {\\n        address odosRouter;\\n        address npm;\\n        uint256 stakeSlippageBP;\\n        address diamond;\\n    }\\n\\n    function coreStorage() internal pure returns (CoreStorage storage ds) {\\n        bytes32 position = CORE_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25a26795568f7a50aed18b949ef764828e674758e1037bf3d2175750a23457f9\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506133fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b298ad6e1461003b578063ffaf3a9a14610064575b600080fd5b61004e610049366004612e49565b610077565b60405161005b9190612f3c565b60405180910390f35b61004e610072366004613012565b6110f1565b61007f612bf0565b81516002146100c35760405162461bcd60e51b815260206004820152600b60248201526a213d203220746f6b656e7360a81b60448201526064015b60405180910390fd5b604080516002808252606082018352309260009291906020830190803683375050604080516002808252606082019092529293506000929150602082015b610109612c2d565b81526020019060019003908161010157505060405163ca4f280360e01b81529091506000906001600160a01b0385169063ca4f28039061014d908b90600401613128565b6040805180830381865afa158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d919061313c565b836000815181106101a0576101a0613176565b602002602001015160e001846001815181106101be576101be613176565b60209081029190910101516001600160a01b0392831660e09091015291169052855186906000906101f1576101f1613176565b6020026020010151600001516001600160a01b03168260008151811061021957610219613176565b602002602001015160e001516001600160a01b031614801561028857508560018151811061024957610249613176565b6020026020010151600001516001600160a01b03168260018151811061027157610271613176565b602002602001015160e001516001600160a01b0316145b6102cb5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e70757420746f6b656e7360601b60448201526064016100ba565b60408051600180825281830190925290602080830190803683375050508552604080516001808252818301909252906020808301908036833701905050602086015260408051600180825281830190925290816020016020820280368337505050604086810191909152805160018082528183019092529060208083019080368337505050606086810191909152604080516002808252928101825291906020830190803683375050506080860152604080516002808252606082018352909160208301908036833750505060a086015260408051600280825260608201835290916020830190803683370190505060c0860152604051630693132f60e51b8152600481018a90526001600160a01b0385169063d26265e0906024016040805180830381865afa158015610403573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610427919061318c565b8360008151811061043a5761043a613176565b60200260200101516020018460018151811061045857610458613176565b60209081029190910181015101919091525260005b600281101561063e5786818151811061048857610488613176565b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f591906131b0565b84828151811061050757610507613176565b602002602001019060ff16908160ff16815250506000856001600160a01b031663aa9a091289848151811061053e5761053e613176565b60200260200101516020015186858151811061055c5761055c613176565b60200260200101516020015188868151811061057a5761057a613176565b6020026020010151600a61058e91906132d6565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa1580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb91906132e5565b905061060781846132fe565b92508084838151811061061c5761061c613176565b602090810291909101015160400152508061063681613311565b91505061046d565b5061064988886126f3565b8360008151811061065c5761065c613176565b60200260200101516080018460018151811061067a5761067a613176565b602090810291909101015160800191909152526040516384cc315b60e01b81526001600160a01b038516906384cc315b906106b9908b90600401613128565b602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa91906132e5565b8260008151811061070d5761070d613176565b602002602001015160800151610723919061332a565b8260008151811061073657610736613176565b602002602001015160600181815250508260018151811061075957610759613176565b6020026020010151600a61076d91906132d6565b8260018151811061078057610780613176565b602002602001015160800151610796919061332a565b826000815181106107a9576107a9613176565b6020026020010151606001516107bf91906132fe565b826001815181106107d2576107d2613176565b60200260200101516060018181525050836001600160a01b031663aa9a0912828460008151811061080557610805613176565b6020026020010151606001518560018151811061082457610824613176565b6020026020010151606001516040518463ffffffff1660e01b815260040161085f939291909283526020830191909152604082015260600190565b602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a091906132e5565b8560a001516000815181106108b7576108b7613176565b6020026020010181815250508460a001516000815181106108da576108da613176565b6020026020010151816108ed9190613341565b8560a0015160018151811061090457610904613176565b602002602001018181525050836001600160a01b031663aa9a09128660a0015160008151811061093657610936613176565b60200260200101518460008151811061095157610951613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be91906131b0565b6109c990600a6132d6565b896000815181106109dc576109dc613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401610a17939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5891906132e5565b8560c00151600081518110610a6f57610a6f613176565b602002602001018181525050836001600160a01b031663aa9a09128660a00151600181518110610aa157610aa1613176565b602002602001015184600181518110610abc57610abc613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2991906131b0565b610b3490600a6132d6565b89600181518110610b4757610b47613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401610b82939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc391906132e5565b8560c00151600181518110610bda57610bda613176565b60200260200101818152505060005b60028110156110e357828181518110610c0457610c04613176565b6020026020010151604001518660a001518281518110610c2657610c26613176565b602002602001015110156110d157846001600160a01b031663aa9a09128760a001518381518110610c5957610c59613176565b6020026020010151858481518110610c7357610c73613176565b602002602001015160400151610c899190613341565b868481518110610c9b57610c9b613176565b6020026020010151600a610caf91906132d6565b8a8581518110610cc157610cc1613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401610cfc939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3d91906132e5565b838281518110610d4f57610d4f613176565b602002602001015160a0018181525050868181518110610d7157610d71613176565b6020026020010151600001518660000151600081518110610d9457610d94613176565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610dc657610dc6613176565b602002602001015160a001518660200151600081518110610de957610de9613176565b602090810291909101015282610e00826001613341565b81518110610e1057610e10613176565b602002602001015160e001518660400151600081518110610e3357610e33613176565b60200260200101906001600160a01b031690816001600160a01b031681525050620f42408660600151600081518110610e6e57610e6e613176565b602002602001018181525050828181518110610e8c57610e8c613176565b602002602001015160a00151838281518110610eaa57610eaa613176565b602002602001015160200151610ec09190613341565b86608001518281518110610ed657610ed6613176565b602090810291909101015282610eed826001613341565b81518110610efd57610efd613176565b6020026020010151602001518660800151826001610f1b9190613341565b81518110610f2b57610f2b613176565b60200260200101818152505085608001518181518110610f4d57610f4d613176565b60200260200101518660c001518281518110610f6b57610f6b613176565b602002602001015111610f7f576000610fc5565b85608001518181518110610f9557610f95613176565b60200260200101518660c001518281518110610fb357610fb3613176565b6020026020010151610fc59190613341565b8660c001518281518110610fdb57610fdb613176565b60209081029190910101526080860151610ff6826001613341565b8151811061100657611006613176565b60200260200101518660c001518260016110209190613341565b8151811061103057611030613176565b6020026020010151116110445760006110a0565b6080860151611054826001613341565b8151811061106457611064613176565b60200260200101518660c0015182600161107e9190613341565b8151811061108e5761108e613176565b60200260200101516110a09190613341565b60c08701516110b0836001613341565b815181106110c0576110c0613176565b6020026020010181815250506110e3565b806110db81613311565b915050610be9565b50505050505b949350505050565b6110f9612bf0565b815160021461113f5760405162461bcd60e51b815260206004820152601260248201527170726963657320213d203220746f6b656e7360701b60448201526064016100ba565b825130906000906001600160401b0381111561115d5761115d612c93565b604051908082528060200260200182016040528015611186578160200160208202803683370190505b506040805160028082526060820190925291925060009190816020015b6111ab612c2d565b8152602001906001900390816111a357905050905060008651826000815181106111d7576111d7613176565b602002602001015160000181815250508651826001815181106111fc576111fc613176565b60209081029190910101515260405163ca4f280360e01b81526001600160a01b0385169063ca4f280390611234908c90600401613128565b6040805180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611274919061313c565b8360008151811061128757611287613176565b602002602001015160e001846001815181106112a5576112a5613176565b60209081029190910101516001600160a01b0392831660e09091015291169052855186906000906112d8576112d8613176565b6020026020010151600001516001600160a01b03168260008151811061130057611300613176565b602002602001015160e001516001600160a01b031614801561136f57508560018151811061133057611330613176565b6020026020010151600001516001600160a01b03168260018151811061135857611358613176565b602002602001015160e001516001600160a01b0316145b6113b25760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420707269636520746f6b656e7360601b60448201526064016100ba565b86516001600160401b038111156113cb576113cb612c93565b6040519080825280602002602001820160405280156113f4578160200160208202803683370190505b50855286516001600160401b0381111561141057611410612c93565b604051908082528060200260200182016040528015611439578160200160208202803683370190505b5060208601526040805160028082526060820190925290816020016020820280368337505050604086810191909152805160028082526060820183529091602083019080368337505050606086810191909152604080516002808252928101825291906020830190803683375050506080860152604080516002808252606082018352909160208301908036833750505060a0860152604080516002808252606082018352909160208301908036833750505060c086015260005b87518110156118665787818151811061150f5761150f613176565b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c91906131b0565b84828151811061158e5761158e613176565b602002602001019060ff16908160ff16815250506000856001600160a01b031663aa9a09128a84815181106115c5576115c5613176565b6020026020010151604001518b85815181106115e3576115e3613176565b60200260200101516020015188868151811061160157611601613176565b6020026020010151600a61161591906132d6565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa15801561165e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168291906132e5565b905061168e81846132fe565b9250836000815181106116a3576116a3613176565b602002602001015160e001516001600160a01b03168983815181106116ca576116ca613176565b6020026020010151600001516001600160a01b0316036117325781846000815181106116f8576116f8613176565b60200260200101516000018181525050808460008151811061171c5761171c613176565b6020026020010151604001818152505050611854565b8360018151811061174557611745613176565b602002602001015160e001516001600160a01b031689838151811061176c5761176c613176565b6020026020010151600001516001600160a01b0316036117be57818460018151811061179a5761179a613176565b60200260200101516000018181525050808460018151811061171c5761171c613176565b8882815181106117d0576117d0613176565b602002602001015160000151876000015183815181106117f2576117f2613176565b60200260200101906001600160a01b031690816001600160a01b03168152505088828151811061182457611824613176565b6020026020010151602001518760200151838151811061184657611846613176565b602002602001018181525050505b8061185e81613311565b9150506114f4565b5061187189896126f3565b8360008151811061188457611884613176565b6020026020010151608001846001815181106118a2576118a2613176565b602090810291909101015160800191909152526040516384cc315b60e01b81526001600160a01b038516906384cc315b906118e1908c90600401613128565b602060405180830381865afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192291906132e5565b8260008151811061193557611935613176565b60200260200101516080015161194b919061332a565b8260008151811061195e5761195e613176565b602002602001015160600181815250508160018151811061198157611981613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906131b0565b6119f990600a6132d6565b82600181518110611a0c57611a0c613176565b602002602001015160800151611a22919061332a565b82600081518110611a3557611a35613176565b602002602001015160600151611a4b91906132fe565b82600181518110611a5e57611a5e613176565b60200260200101516060018181525050836001600160a01b031663aa9a09128284600081518110611a9157611a91613176565b60200260200101516060015185600181518110611ab057611ab0613176565b6020026020010151606001516040518463ffffffff1660e01b8152600401611aeb939291909283526020830191909152604082015260600190565b602060405180830381865afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c91906132e5565b8560a00151600081518110611b4357611b43613176565b6020026020010181815250508460a00151600081518110611b6657611b66613176565b602002602001015181611b799190613341565b8560a00151600181518110611b9057611b90613176565b602002602001018181525050836001600160a01b031663aa9a09128660a00151600081518110611bc257611bc2613176565b602002602001015184600081518110611bdd57611bdd613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a91906131b0565b611c5590600a6132d6565b89600081518110611c6857611c68613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401611ca3939291909283526020830191909152604082015260600190565b602060405180830381865afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce491906132e5565b8560c00151600081518110611cfb57611cfb613176565b602002602001018181525050836001600160a01b031663aa9a09128660a00151600181518110611d2d57611d2d613176565b602002602001015184600181518110611d4857611d48613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906131b0565b611dc090600a6132d6565b89600181518110611dd357611dd3613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401611e0e939291909283526020830191909152604082015260600190565b602060405180830381865afa158015611e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4f91906132e5565b8560c00151600181518110611e6657611e66613176565b60200260200101818152505081600081518110611e8557611e85613176565b6020026020010151604001518560a00151600081518110611ea857611ea8613176565b6020026020010151148015611ef8575081600181518110611ecb57611ecb613176565b6020026020010151604001518560a00151600181518110611eee57611eee613176565b6020026020010151145b8015611f67575081600081518110611f1257611f12613176565b60200260200101516060015160001480611f67575081600181518110611f3a57611f3a613176565b60200260200101516060015182600081518110611f5957611f59613176565b602002602001015160600151145b15611f995760608086526020860152611f838783876000612ab0565b611f908783876001612ab0565b505050506110e9565b60005b600281101561244b578751838281518110611fb957611fb9613176565b60200260200101516000015110801561200b5750828181518110611fdf57611fdf613176565b6020026020010151604001518660a00151828151811061200157612001613176565b6020026020010151105b1561243957846001600160a01b031663aa9a09128760a00151838151811061203557612035613176565b602002602001015185848151811061204f5761204f613176565b6020026020010151604001516120659190613341565b8686858151811061207857612078613176565b6020026020010151600001518151811061209457612094613176565b6020026020010151600a6120a891906132d6565b8b8786815181106120bb576120bb613176565b602002602001015160000151815181106120d7576120d7613176565b6020026020010151604001516040518463ffffffff1660e01b8152600401612112939291909283526020830191909152604082015260600190565b602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215391906132e5565b83828151811061216557612165613176565b602002602001015160a00181815250508783828151811061218857612188613176565b602002602001015160000151815181106121a4576121a4613176565b60200260200101516000015186600001518483815181106121c7576121c7613176565b602002602001015160000151815181106121e3576121e3613176565b60200260200101906001600160a01b031690816001600160a01b03168152505082818151811061221557612215613176565b602002602001015160a00151866020015184838151811061223857612238613176565b6020026020010151600001518151811061225457612254613176565b60209081029190910101528261226b826001613341565b8151811061227b5761227b613176565b602002602001015160e00151866040015160008151811061229e5761229e613176565b60200260200101906001600160a01b031690816001600160a01b031681525050620f424086606001516000815181106122d9576122d9613176565b6020026020010181815250508281815181106122f7576122f7613176565b602002602001015160a001518884838151811061231657612316613176565b6020026020010151600001518151811061233257612332613176565b6020026020010151602001516123489190613341565b8660800151828151811061235e5761235e613176565b6020026020010181815250508560800151818151811061238057612380613176565b60200260200101518660c00151828151811061239e5761239e613176565b6020026020010151116123b25760006123f8565b856080015181815181106123c8576123c8613176565b60200260200101518660c0015182815181106123e6576123e6613176565b60200260200101516123f89190613341565b8660c00151828151811061240e5761240e613176565b602090810291909101015261242f88848861242a856001613341565b612ab0565b50505050506110e9565b8061244381613311565b915050611f9c565b508160008151811061245f5761245f613176565b602002602001015160e00151856040015160008151811061248257612482613176565b60200260200101906001600160a01b031690816001600160a01b031681525050816001815181106124b5576124b5613176565b602002602001015160e0015185604001516001815181106124d8576124d8613176565b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663aa9a09128360008151811061251a5761251a613176565b6020026020010151604001518760a0015160008151811061253d5761253d613176565b602002602001015161254f9190613341565b620f42408560018151811061256657612566613176565b6020026020010151604001518660008151811061258557612585613176565b60200260200101516040015161259b91906132fe565b8960a001516001815181106125b2576125b2613176565b60200260200101518a60a001516000815181106125d1576125d1613176565b60200260200101516125e391906132fe565b6125ed9190613341565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a91906132e5565b856060015160008151811061267157612671613176565b602002602001018181525050846060015160008151811061269457612694613176565b6020026020010151620f42406126aa9190613341565b85606001516001815181106126c1576126c1613176565b6020026020010181815250506126da8783876000612ab0565b6126e78783876001612ab0565b50505050949350505050565b60405163d79357fb60e01b81526000908190309082908190839063d79357fb90612721908a90600401613128565b6040805180830381865afa15801561273d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612761919061318c565b9092509050600061277383600a613354565b9050600061278283600a613354565b90506000856001600160a01b0316635730ba088b6040518263ffffffff1660e01b81526004016127b29190613128565b602060405180830381865afa1580156127cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f39190613360565b90506000866001600160a01b031663986cfba38b60008151811061281957612819613176565b60200260200101516040518263ffffffff1660e01b8152600401612846919060029190910b815260200190565b602060405180830381865afa158015612863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128879190613360565b90506000876001600160a01b031663986cfba38c6001815181106128ad576128ad613176565b60200260200101516040518263ffffffff1660e01b81526004016128da919060029190910b815260200190565b602060405180830381865afa1580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b9190613360565b905060006001600160a01b038916636098fd4a85858561293d8b6103e861332a565b6129498b6103e861332a565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a401602060405180830381865afa1580156129ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cf919061337d565b60405163c72e160b60e01b81526001600160a01b038681166004830152858116602483015284811660448301526001600160801b0383166064830152919250908a169063c72e160b906084016040805180830381865afa158015612a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5b919061318c565b909b5099506000858711612a6f5785612a71565b865b9050612a7d87826133a6565b612a87908d61332a565b9b50612a9386826133a6565b612a9d908c61332a565b9a50505050505050505050509250929050565b8351838281518110612ac457612ac4613176565b60200260200101516000015110612adc576000612b18565b83838281518110612aef57612aef613176565b60200260200101516000015181518110612b0b57612b0b613176565b6020026020010151602001515b82608001518281518110612b2e57612b2e613176565b60200260200101818152505081608001518181518110612b5057612b50613176565b60200260200101518260c001518281518110612b6e57612b6e613176565b602002602001015111612b82576000612bc8565b81608001518181518110612b9857612b98613176565b60200260200101518260c001518281518110612bb657612bb6613176565b6020026020010151612bc89190613341565b8260c001518281518110612bde57612bde613176565b60200260200101818152505050505050565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6001600160a01b0381168114612c9057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612ccb57612ccb612c93565b60405290565b604051606081016001600160401b0381118282101715612ccb57612ccb612c93565b604051601f8201601f191681016001600160401b0381118282101715612d1b57612d1b612c93565b604052919050565b60006001600160401b03821115612d3c57612d3c612c93565b5060051b60200190565b600082601f830112612d5757600080fd5b81356020612d6c612d6783612d23565b612cf3565b82815260059290921b84018101918181019086841115612d8b57600080fd5b8286015b84811015612db65780358060020b8114612da95760008081fd5b8352918301918301612d8f565b509695505050505050565b600082601f830112612dd257600080fd5b81356020612de2612d6783612d23565b82815260069290921b84018101918181019086841115612e0157600080fd5b8286015b84811015612db65760408189031215612e1e5760008081fd5b612e26612ca9565b8135612e3181612c7b565b81528185013585820152835291830191604001612e05565b60008060008060808587031215612e5f57600080fd5b843593506020850135612e7181612c7b565b925060408501356001600160401b0380821115612e8d57600080fd5b612e9988838901612d46565b93506060870135915080821115612eaf57600080fd5b50612ebc87828801612dc1565b91505092959194509250565b600081518084526020808501945080840160005b83811015612f015781516001600160a01b031687529582019590820190600101612edc565b509495945050505050565b600081518084526020808501945080840160005b83811015612f0157815187529582019590820190600101612f20565b602081526000825160e06020840152612f59610100840182612ec8565b90506020840151601f1980858403016040860152612f778383612f0c565b92506040860151915080858403016060860152612f948383612ec8565b92506060860151915080858403016080860152612fb18383612f0c565b925060808601519150808584030160a0860152612fce8383612f0c565b925060a08601519150808584030160c0860152612feb8383612f0c565b925060c08601519150808584030160e0860152506130098282612f0c565b95945050505050565b6000806000806080858703121561302857600080fd5b843561303381612c7b565b93506020858101356001600160401b038082111561305057600080fd5b61305c89838a01612d46565b955060409150818801358181111561307357600080fd5b8801601f81018a1361308457600080fd5b8035613092612d6782612d23565b8181526060918202830186019186820191908d8411156130b157600080fd5b938701935b838510156131025780858f0312156130ce5760008081fd5b6130d6612cd1565b85356130e181612c7b565b815285890135898201528786013588820152835293840193918701916130b6565b9098508b013595505050508083111561311a57600080fd5b5050612ebc87828801612dc1565b6001600160a01b0391909116815260200190565b6000806040838503121561314f57600080fd5b825161315a81612c7b565b602084015190925061316b81612c7b565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561319f57600080fd5b505080516020909101519092909150565b6000602082840312156131c257600080fd5b815160ff811681146131d357600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561322b578160001904821115613211576132116131da565b8085161561321e57918102915b93841c93908002906131f5565b509250929050565b600082613242575060016132d0565b8161324f575060006132d0565b8160018114613265576002811461326f5761328b565b60019150506132d0565b60ff841115613280576132806131da565b50506001821b6132d0565b5060208310610133831016604e8410600b84101617156132ae575081810a6132d0565b6132b883836131f0565b80600019048211156132cc576132cc6131da565b0290505b92915050565b60006131d360ff841683613233565b6000602082840312156132f757600080fd5b5051919050565b808201808211156132d0576132d06131da565b600060018201613323576133236131da565b5060010190565b80820281158282048414176132d0576132d06131da565b818103818111156132d0576132d06131da565b60006131d38383613233565b60006020828403121561337257600080fd5b81516131d381612c7b565b60006020828403121561338f57600080fd5b81516001600160801b03811681146131d357600080fd5b6000826133c357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cb14d56adbbe91241ffb5f31889515a85aca634eb0fdfe280368cf2d93d8633a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063b298ad6e1461003b578063ffaf3a9a14610064575b600080fd5b61004e610049366004612e49565b610077565b60405161005b9190612f3c565b60405180910390f35b61004e610072366004613012565b6110f1565b61007f612bf0565b81516002146100c35760405162461bcd60e51b815260206004820152600b60248201526a213d203220746f6b656e7360a81b60448201526064015b60405180910390fd5b604080516002808252606082018352309260009291906020830190803683375050604080516002808252606082019092529293506000929150602082015b610109612c2d565b81526020019060019003908161010157505060405163ca4f280360e01b81529091506000906001600160a01b0385169063ca4f28039061014d908b90600401613128565b6040805180830381865afa158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d919061313c565b836000815181106101a0576101a0613176565b602002602001015160e001846001815181106101be576101be613176565b60209081029190910101516001600160a01b0392831660e09091015291169052855186906000906101f1576101f1613176565b6020026020010151600001516001600160a01b03168260008151811061021957610219613176565b602002602001015160e001516001600160a01b031614801561028857508560018151811061024957610249613176565b6020026020010151600001516001600160a01b03168260018151811061027157610271613176565b602002602001015160e001516001600160a01b0316145b6102cb5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e70757420746f6b656e7360601b60448201526064016100ba565b60408051600180825281830190925290602080830190803683375050508552604080516001808252818301909252906020808301908036833701905050602086015260408051600180825281830190925290816020016020820280368337505050604086810191909152805160018082528183019092529060208083019080368337505050606086810191909152604080516002808252928101825291906020830190803683375050506080860152604080516002808252606082018352909160208301908036833750505060a086015260408051600280825260608201835290916020830190803683370190505060c0860152604051630693132f60e51b8152600481018a90526001600160a01b0385169063d26265e0906024016040805180830381865afa158015610403573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610427919061318c565b8360008151811061043a5761043a613176565b60200260200101516020018460018151811061045857610458613176565b60209081029190910181015101919091525260005b600281101561063e5786818151811061048857610488613176565b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f591906131b0565b84828151811061050757610507613176565b602002602001019060ff16908160ff16815250506000856001600160a01b031663aa9a091289848151811061053e5761053e613176565b60200260200101516020015186858151811061055c5761055c613176565b60200260200101516020015188868151811061057a5761057a613176565b6020026020010151600a61058e91906132d6565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa1580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb91906132e5565b905061060781846132fe565b92508084838151811061061c5761061c613176565b602090810291909101015160400152508061063681613311565b91505061046d565b5061064988886126f3565b8360008151811061065c5761065c613176565b60200260200101516080018460018151811061067a5761067a613176565b602090810291909101015160800191909152526040516384cc315b60e01b81526001600160a01b038516906384cc315b906106b9908b90600401613128565b602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa91906132e5565b8260008151811061070d5761070d613176565b602002602001015160800151610723919061332a565b8260008151811061073657610736613176565b602002602001015160600181815250508260018151811061075957610759613176565b6020026020010151600a61076d91906132d6565b8260018151811061078057610780613176565b602002602001015160800151610796919061332a565b826000815181106107a9576107a9613176565b6020026020010151606001516107bf91906132fe565b826001815181106107d2576107d2613176565b60200260200101516060018181525050836001600160a01b031663aa9a0912828460008151811061080557610805613176565b6020026020010151606001518560018151811061082457610824613176565b6020026020010151606001516040518463ffffffff1660e01b815260040161085f939291909283526020830191909152604082015260600190565b602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a091906132e5565b8560a001516000815181106108b7576108b7613176565b6020026020010181815250508460a001516000815181106108da576108da613176565b6020026020010151816108ed9190613341565b8560a0015160018151811061090457610904613176565b602002602001018181525050836001600160a01b031663aa9a09128660a0015160008151811061093657610936613176565b60200260200101518460008151811061095157610951613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be91906131b0565b6109c990600a6132d6565b896000815181106109dc576109dc613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401610a17939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5891906132e5565b8560c00151600081518110610a6f57610a6f613176565b602002602001018181525050836001600160a01b031663aa9a09128660a00151600181518110610aa157610aa1613176565b602002602001015184600181518110610abc57610abc613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2991906131b0565b610b3490600a6132d6565b89600181518110610b4757610b47613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401610b82939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc391906132e5565b8560c00151600181518110610bda57610bda613176565b60200260200101818152505060005b60028110156110e357828181518110610c0457610c04613176565b6020026020010151604001518660a001518281518110610c2657610c26613176565b602002602001015110156110d157846001600160a01b031663aa9a09128760a001518381518110610c5957610c59613176565b6020026020010151858481518110610c7357610c73613176565b602002602001015160400151610c899190613341565b868481518110610c9b57610c9b613176565b6020026020010151600a610caf91906132d6565b8a8581518110610cc157610cc1613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401610cfc939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3d91906132e5565b838281518110610d4f57610d4f613176565b602002602001015160a0018181525050868181518110610d7157610d71613176565b6020026020010151600001518660000151600081518110610d9457610d94613176565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610dc657610dc6613176565b602002602001015160a001518660200151600081518110610de957610de9613176565b602090810291909101015282610e00826001613341565b81518110610e1057610e10613176565b602002602001015160e001518660400151600081518110610e3357610e33613176565b60200260200101906001600160a01b031690816001600160a01b031681525050620f42408660600151600081518110610e6e57610e6e613176565b602002602001018181525050828181518110610e8c57610e8c613176565b602002602001015160a00151838281518110610eaa57610eaa613176565b602002602001015160200151610ec09190613341565b86608001518281518110610ed657610ed6613176565b602090810291909101015282610eed826001613341565b81518110610efd57610efd613176565b6020026020010151602001518660800151826001610f1b9190613341565b81518110610f2b57610f2b613176565b60200260200101818152505085608001518181518110610f4d57610f4d613176565b60200260200101518660c001518281518110610f6b57610f6b613176565b602002602001015111610f7f576000610fc5565b85608001518181518110610f9557610f95613176565b60200260200101518660c001518281518110610fb357610fb3613176565b6020026020010151610fc59190613341565b8660c001518281518110610fdb57610fdb613176565b60209081029190910101526080860151610ff6826001613341565b8151811061100657611006613176565b60200260200101518660c001518260016110209190613341565b8151811061103057611030613176565b6020026020010151116110445760006110a0565b6080860151611054826001613341565b8151811061106457611064613176565b60200260200101518660c0015182600161107e9190613341565b8151811061108e5761108e613176565b60200260200101516110a09190613341565b60c08701516110b0836001613341565b815181106110c0576110c0613176565b6020026020010181815250506110e3565b806110db81613311565b915050610be9565b50505050505b949350505050565b6110f9612bf0565b815160021461113f5760405162461bcd60e51b815260206004820152601260248201527170726963657320213d203220746f6b656e7360701b60448201526064016100ba565b825130906000906001600160401b0381111561115d5761115d612c93565b604051908082528060200260200182016040528015611186578160200160208202803683370190505b506040805160028082526060820190925291925060009190816020015b6111ab612c2d565b8152602001906001900390816111a357905050905060008651826000815181106111d7576111d7613176565b602002602001015160000181815250508651826001815181106111fc576111fc613176565b60209081029190910101515260405163ca4f280360e01b81526001600160a01b0385169063ca4f280390611234908c90600401613128565b6040805180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611274919061313c565b8360008151811061128757611287613176565b602002602001015160e001846001815181106112a5576112a5613176565b60209081029190910101516001600160a01b0392831660e09091015291169052855186906000906112d8576112d8613176565b6020026020010151600001516001600160a01b03168260008151811061130057611300613176565b602002602001015160e001516001600160a01b031614801561136f57508560018151811061133057611330613176565b6020026020010151600001516001600160a01b03168260018151811061135857611358613176565b602002602001015160e001516001600160a01b0316145b6113b25760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420707269636520746f6b656e7360601b60448201526064016100ba565b86516001600160401b038111156113cb576113cb612c93565b6040519080825280602002602001820160405280156113f4578160200160208202803683370190505b50855286516001600160401b0381111561141057611410612c93565b604051908082528060200260200182016040528015611439578160200160208202803683370190505b5060208601526040805160028082526060820190925290816020016020820280368337505050604086810191909152805160028082526060820183529091602083019080368337505050606086810191909152604080516002808252928101825291906020830190803683375050506080860152604080516002808252606082018352909160208301908036833750505060a0860152604080516002808252606082018352909160208301908036833750505060c086015260005b87518110156118665787818151811061150f5761150f613176565b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c91906131b0565b84828151811061158e5761158e613176565b602002602001019060ff16908160ff16815250506000856001600160a01b031663aa9a09128a84815181106115c5576115c5613176565b6020026020010151604001518b85815181106115e3576115e3613176565b60200260200101516020015188868151811061160157611601613176565b6020026020010151600a61161591906132d6565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa15801561165e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168291906132e5565b905061168e81846132fe565b9250836000815181106116a3576116a3613176565b602002602001015160e001516001600160a01b03168983815181106116ca576116ca613176565b6020026020010151600001516001600160a01b0316036117325781846000815181106116f8576116f8613176565b60200260200101516000018181525050808460008151811061171c5761171c613176565b6020026020010151604001818152505050611854565b8360018151811061174557611745613176565b602002602001015160e001516001600160a01b031689838151811061176c5761176c613176565b6020026020010151600001516001600160a01b0316036117be57818460018151811061179a5761179a613176565b60200260200101516000018181525050808460018151811061171c5761171c613176565b8882815181106117d0576117d0613176565b602002602001015160000151876000015183815181106117f2576117f2613176565b60200260200101906001600160a01b031690816001600160a01b03168152505088828151811061182457611824613176565b6020026020010151602001518760200151838151811061184657611846613176565b602002602001018181525050505b8061185e81613311565b9150506114f4565b5061187189896126f3565b8360008151811061188457611884613176565b6020026020010151608001846001815181106118a2576118a2613176565b602090810291909101015160800191909152526040516384cc315b60e01b81526001600160a01b038516906384cc315b906118e1908c90600401613128565b602060405180830381865afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192291906132e5565b8260008151811061193557611935613176565b60200260200101516080015161194b919061332a565b8260008151811061195e5761195e613176565b602002602001015160600181815250508160018151811061198157611981613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906131b0565b6119f990600a6132d6565b82600181518110611a0c57611a0c613176565b602002602001015160800151611a22919061332a565b82600081518110611a3557611a35613176565b602002602001015160600151611a4b91906132fe565b82600181518110611a5e57611a5e613176565b60200260200101516060018181525050836001600160a01b031663aa9a09128284600081518110611a9157611a91613176565b60200260200101516060015185600181518110611ab057611ab0613176565b6020026020010151606001516040518463ffffffff1660e01b8152600401611aeb939291909283526020830191909152604082015260600190565b602060405180830381865afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c91906132e5565b8560a00151600081518110611b4357611b43613176565b6020026020010181815250508460a00151600081518110611b6657611b66613176565b602002602001015181611b799190613341565b8560a00151600181518110611b9057611b90613176565b602002602001018181525050836001600160a01b031663aa9a09128660a00151600081518110611bc257611bc2613176565b602002602001015184600081518110611bdd57611bdd613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a91906131b0565b611c5590600a6132d6565b89600081518110611c6857611c68613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401611ca3939291909283526020830191909152604082015260600190565b602060405180830381865afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce491906132e5565b8560c00151600081518110611cfb57611cfb613176565b602002602001018181525050836001600160a01b031663aa9a09128660a00151600181518110611d2d57611d2d613176565b602002602001015184600181518110611d4857611d48613176565b602002602001015160e001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906131b0565b611dc090600a6132d6565b89600181518110611dd357611dd3613176565b6020026020010151602001516040518463ffffffff1660e01b8152600401611e0e939291909283526020830191909152604082015260600190565b602060405180830381865afa158015611e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4f91906132e5565b8560c00151600181518110611e6657611e66613176565b60200260200101818152505081600081518110611e8557611e85613176565b6020026020010151604001518560a00151600081518110611ea857611ea8613176565b6020026020010151148015611ef8575081600181518110611ecb57611ecb613176565b6020026020010151604001518560a00151600181518110611eee57611eee613176565b6020026020010151145b8015611f67575081600081518110611f1257611f12613176565b60200260200101516060015160001480611f67575081600181518110611f3a57611f3a613176565b60200260200101516060015182600081518110611f5957611f59613176565b602002602001015160600151145b15611f995760608086526020860152611f838783876000612ab0565b611f908783876001612ab0565b505050506110e9565b60005b600281101561244b578751838281518110611fb957611fb9613176565b60200260200101516000015110801561200b5750828181518110611fdf57611fdf613176565b6020026020010151604001518660a00151828151811061200157612001613176565b6020026020010151105b1561243957846001600160a01b031663aa9a09128760a00151838151811061203557612035613176565b602002602001015185848151811061204f5761204f613176565b6020026020010151604001516120659190613341565b8686858151811061207857612078613176565b6020026020010151600001518151811061209457612094613176565b6020026020010151600a6120a891906132d6565b8b8786815181106120bb576120bb613176565b602002602001015160000151815181106120d7576120d7613176565b6020026020010151604001516040518463ffffffff1660e01b8152600401612112939291909283526020830191909152604082015260600190565b602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215391906132e5565b83828151811061216557612165613176565b602002602001015160a00181815250508783828151811061218857612188613176565b602002602001015160000151815181106121a4576121a4613176565b60200260200101516000015186600001518483815181106121c7576121c7613176565b602002602001015160000151815181106121e3576121e3613176565b60200260200101906001600160a01b031690816001600160a01b03168152505082818151811061221557612215613176565b602002602001015160a00151866020015184838151811061223857612238613176565b6020026020010151600001518151811061225457612254613176565b60209081029190910101528261226b826001613341565b8151811061227b5761227b613176565b602002602001015160e00151866040015160008151811061229e5761229e613176565b60200260200101906001600160a01b031690816001600160a01b031681525050620f424086606001516000815181106122d9576122d9613176565b6020026020010181815250508281815181106122f7576122f7613176565b602002602001015160a001518884838151811061231657612316613176565b6020026020010151600001518151811061233257612332613176565b6020026020010151602001516123489190613341565b8660800151828151811061235e5761235e613176565b6020026020010181815250508560800151818151811061238057612380613176565b60200260200101518660c00151828151811061239e5761239e613176565b6020026020010151116123b25760006123f8565b856080015181815181106123c8576123c8613176565b60200260200101518660c0015182815181106123e6576123e6613176565b60200260200101516123f89190613341565b8660c00151828151811061240e5761240e613176565b602090810291909101015261242f88848861242a856001613341565b612ab0565b50505050506110e9565b8061244381613311565b915050611f9c565b508160008151811061245f5761245f613176565b602002602001015160e00151856040015160008151811061248257612482613176565b60200260200101906001600160a01b031690816001600160a01b031681525050816001815181106124b5576124b5613176565b602002602001015160e0015185604001516001815181106124d8576124d8613176565b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663aa9a09128360008151811061251a5761251a613176565b6020026020010151604001518760a0015160008151811061253d5761253d613176565b602002602001015161254f9190613341565b620f42408560018151811061256657612566613176565b6020026020010151604001518660008151811061258557612585613176565b60200260200101516040015161259b91906132fe565b8960a001516001815181106125b2576125b2613176565b60200260200101518a60a001516000815181106125d1576125d1613176565b60200260200101516125e391906132fe565b6125ed9190613341565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a91906132e5565b856060015160008151811061267157612671613176565b602002602001018181525050846060015160008151811061269457612694613176565b6020026020010151620f42406126aa9190613341565b85606001516001815181106126c1576126c1613176565b6020026020010181815250506126da8783876000612ab0565b6126e78783876001612ab0565b50505050949350505050565b60405163d79357fb60e01b81526000908190309082908190839063d79357fb90612721908a90600401613128565b6040805180830381865afa15801561273d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612761919061318c565b9092509050600061277383600a613354565b9050600061278283600a613354565b90506000856001600160a01b0316635730ba088b6040518263ffffffff1660e01b81526004016127b29190613128565b602060405180830381865afa1580156127cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f39190613360565b90506000866001600160a01b031663986cfba38b60008151811061281957612819613176565b60200260200101516040518263ffffffff1660e01b8152600401612846919060029190910b815260200190565b602060405180830381865afa158015612863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128879190613360565b90506000876001600160a01b031663986cfba38c6001815181106128ad576128ad613176565b60200260200101516040518263ffffffff1660e01b81526004016128da919060029190910b815260200190565b602060405180830381865afa1580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b9190613360565b905060006001600160a01b038916636098fd4a85858561293d8b6103e861332a565b6129498b6103e861332a565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a401602060405180830381865afa1580156129ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cf919061337d565b60405163c72e160b60e01b81526001600160a01b038681166004830152858116602483015284811660448301526001600160801b0383166064830152919250908a169063c72e160b906084016040805180830381865afa158015612a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5b919061318c565b909b5099506000858711612a6f5785612a71565b865b9050612a7d87826133a6565b612a87908d61332a565b9b50612a9386826133a6565b612a9d908c61332a565b9a50505050505050505050509250929050565b8351838281518110612ac457612ac4613176565b60200260200101516000015110612adc576000612b18565b83838281518110612aef57612aef613176565b60200260200101516000015181518110612b0b57612b0b613176565b6020026020010151602001515b82608001518281518110612b2e57612b2e613176565b60200260200101818152505081608001518181518110612b5057612b50613176565b60200260200101518260c001518281518110612b6e57612b6e613176565b602002602001015111612b82576000612bc8565b81608001518181518110612b9857612b98613176565b60200260200101518260c001518281518110612bb657612bb6613176565b6020026020010151612bc89190613341565b8260c001518281518110612bde57612bde613176565b60200260200101818152505050505050565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6001600160a01b0381168114612c9057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612ccb57612ccb612c93565b60405290565b604051606081016001600160401b0381118282101715612ccb57612ccb612c93565b604051601f8201601f191681016001600160401b0381118282101715612d1b57612d1b612c93565b604052919050565b60006001600160401b03821115612d3c57612d3c612c93565b5060051b60200190565b600082601f830112612d5757600080fd5b81356020612d6c612d6783612d23565b612cf3565b82815260059290921b84018101918181019086841115612d8b57600080fd5b8286015b84811015612db65780358060020b8114612da95760008081fd5b8352918301918301612d8f565b509695505050505050565b600082601f830112612dd257600080fd5b81356020612de2612d6783612d23565b82815260069290921b84018101918181019086841115612e0157600080fd5b8286015b84811015612db65760408189031215612e1e5760008081fd5b612e26612ca9565b8135612e3181612c7b565b81528185013585820152835291830191604001612e05565b60008060008060808587031215612e5f57600080fd5b843593506020850135612e7181612c7b565b925060408501356001600160401b0380821115612e8d57600080fd5b612e9988838901612d46565b93506060870135915080821115612eaf57600080fd5b50612ebc87828801612dc1565b91505092959194509250565b600081518084526020808501945080840160005b83811015612f015781516001600160a01b031687529582019590820190600101612edc565b509495945050505050565b600081518084526020808501945080840160005b83811015612f0157815187529582019590820190600101612f20565b602081526000825160e06020840152612f59610100840182612ec8565b90506020840151601f1980858403016040860152612f778383612f0c565b92506040860151915080858403016060860152612f948383612ec8565b92506060860151915080858403016080860152612fb18383612f0c565b925060808601519150808584030160a0860152612fce8383612f0c565b925060a08601519150808584030160c0860152612feb8383612f0c565b925060c08601519150808584030160e0860152506130098282612f0c565b95945050505050565b6000806000806080858703121561302857600080fd5b843561303381612c7b565b93506020858101356001600160401b038082111561305057600080fd5b61305c89838a01612d46565b955060409150818801358181111561307357600080fd5b8801601f81018a1361308457600080fd5b8035613092612d6782612d23565b8181526060918202830186019186820191908d8411156130b157600080fd5b938701935b838510156131025780858f0312156130ce5760008081fd5b6130d6612cd1565b85356130e181612c7b565b815285890135898201528786013588820152835293840193918701916130b6565b9098508b013595505050508083111561311a57600080fd5b5050612ebc87828801612dc1565b6001600160a01b0391909116815260200190565b6000806040838503121561314f57600080fd5b825161315a81612c7b565b602084015190925061316b81612c7b565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561319f57600080fd5b505080516020909101519092909150565b6000602082840312156131c257600080fd5b815160ff811681146131d357600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561322b578160001904821115613211576132116131da565b8085161561321e57918102915b93841c93908002906131f5565b509250929050565b600082613242575060016132d0565b8161324f575060006132d0565b8160018114613265576002811461326f5761328b565b60019150506132d0565b60ff841115613280576132806131da565b50506001821b6132d0565b5060208310610133831016604e8410600b84101617156132ae575081810a6132d0565b6132b883836131f0565b80600019048211156132cc576132cc6131da565b0290505b92915050565b60006131d360ff841683613233565b6000602082840312156132f757600080fd5b5051919050565b808201808211156132d0576132d06131da565b600060018201613323576133236131da565b5060010190565b80820281158282048414176132d0576132d06131da565b818103818111156132d0576132d06131da565b60006131d38383613233565b60006020828403121561337257600080fd5b81516131d381612c7b565b60006020828403121561338f57600080fd5b81516001600160801b03811681146131d357600080fd5b6000826133c357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cb14d56adbbe91241ffb5f31889515a85aca634eb0fdfe280368cf2d93d8633a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}