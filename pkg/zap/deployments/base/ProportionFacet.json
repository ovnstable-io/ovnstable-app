{
  "address": "0xba90572Aa6166e6A84eE0B6a81b1Ba745E8F20a4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "int24[]",
          "name": "tickRange",
          "type": "int24[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProportionFacet.InputSwapToken[]",
          "name": "inputTokens",
          "type": "tuple[]"
        }
      ],
      "name": "getProportionForZap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "inputTokenAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inputTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "outputTokenAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputTokenProportions",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "outputTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "poolProportionsUsd",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IProportionFacet.ResultOfProportion",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x86a4b535ae20e35e50ccf2f839160e73456e3ce2e3a7c02d98c7b324799c40b3",
  "receipt": {
    "to": null,
    "from": "0x66BC0120b3287f08408BCC76ee791f0bad17Eeef",
    "contractAddress": "0xba90572Aa6166e6A84eE0B6a81b1Ba745E8F20a4",
    "transactionIndex": 54,
    "gasUsed": "1741006",
    "logsBloom": "0x
    "blockHash": "0x92f7ca620e518a0ea484ff6fd54245334e711a9e4ba0fea259d84be28c628a9a",
    "transactionHash": "0x86a4b535ae20e35e50ccf2f839160e73456e3ce2e3a7c02d98c7b324799c40b3",
    "logs": [],
    "blockNumber": 16674159,
    "cumulativeGasUsed": "10500733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e4e29db725c5131624a64ffbc85474e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"int24[]\",\"name\":\"tickRange\",\"type\":\"int24[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IProportionFacet.InputSwapToken[]\",\"name\":\"inputTokens\",\"type\":\"tuple[]\"}],\"name\":\"getProportionForZap\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"inputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"outputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputTokenProportions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"poolProportionsUsd\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IProportionFacet.ResultOfProportion\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/core/ProportionFacet.sol\":\"ProportionFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/facets/core/ProportionFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../interfaces/Constants.sol\\\";\\n\\ncontract ProportionFacet is IProportionFacet {\\n    function getProportion(\\n        address pair,\\n        int24[] memory tickRange\\n    ) internal view returns (uint256 token0Amount, uint256 token1Amount) {\\n        IMasterFacet master = IMasterFacet(address(this));\\n        (uint256 decimals0, uint256 decimals1) = master.getPoolDecimals(pair);\\n        uint256 dec0 = 10 ** decimals0;\\n        uint256 dec1 = 10 ** decimals1;\\n        uint160 sqrtRatioX96 = master.getPoolSqrtRatioX96(pair);\\n\\n        uint160 sqrtRatio0 = master.getSqrtRatioAtTick(tickRange[0]);\\n        uint160 sqrtRatio1 = master.getSqrtRatioAtTick(tickRange[1]);\\n        uint128 liquidity = master.getLiquidityForAmounts(sqrtRatioX96, sqrtRatio0, sqrtRatio1, dec0 * 1000, dec1 * 1000);\\n        (token0Amount, token1Amount) = master.getAmountsForLiquidity(sqrtRatioX96, sqrtRatio0, sqrtRatio1, liquidity);\\n        uint256 denominator = dec0 > dec1 ? dec0 : dec1;\\n\\n        token0Amount = token0Amount * (denominator / dec0);\\n        token1Amount = token1Amount * (denominator / dec1);\\n    }\\n\\n    function getProportionForZap(\\n        address pair,\\n        int24[] memory tickRange,\\n        InputSwapToken[] memory inputTokens\\n    ) public view returns (ResultOfProportion memory result) {\\n        IMasterFacet master = IMasterFacet(address(this));\\n        uint8[] memory decimals = new uint8[](inputTokens.length);\\n        OutTokenInfo[] memory outTokens = new OutTokenInfo[](2);\\n        uint256 sumInputsUsd;\\n\\n        outTokens[0].idx = inputTokens.length;\\n        outTokens[1].idx = inputTokens.length;\\n        (outTokens[0].token, outTokens[1].token) = master.getPoolTokens(pair);\\n\\n        result.inputTokenAddresses = new address[](inputTokens.length);\\n        result.inputTokenAmounts = new uint256[](inputTokens.length);\\n        result.outputTokenAddresses = new address[](2);\\n        result.outputTokenProportions = new uint256[](2);\\n        result.outputTokenAmounts = new uint256[](2);\\n        result.poolProportionsUsd = new uint256[](2);\\n\\n        for (uint256 i = 0; i < inputTokens.length; i++) {\\n            decimals[i] = IERC20Metadata(inputTokens[i].tokenAddress).decimals();\\n            uint256 amountUsd = master.mulDiv(inputTokens[i].price, inputTokens[i].amount, 10 ** decimals[i]);\\n            sumInputsUsd += amountUsd;\\n            if (inputTokens[i].tokenAddress == outTokens[0].token) {\\n                outTokens[0].idx = i;\\n                outTokens[0].amountUsd = amountUsd;\\n                continue;\\n            }\\n            if (inputTokens[i].tokenAddress == outTokens[1].token) {\\n                outTokens[1].idx = i;\\n                outTokens[1].amountUsd = amountUsd;\\n                continue;\\n            }\\n            // front (!)\\n            result.inputTokenAddresses[i] = inputTokens[i].tokenAddress;\\n            result.inputTokenAmounts[i] = inputTokens[i].amount;\\n        }\\n\\n        (outTokens[0].propAmount, outTokens[1].propAmount) = getProportion(pair, tickRange);\\n        outTokens[0].prop = outTokens[0].propAmount * master.getCurrentPrice(pair);\\n        outTokens[1].prop = outTokens[0].prop + outTokens[1].propAmount * (10 ** IERC20Metadata(outTokens[1].token).decimals());\\n        result.poolProportionsUsd[0] = master.mulDiv(sumInputsUsd, outTokens[0].prop, outTokens[1].prop);\\n        result.poolProportionsUsd[1] = sumInputsUsd - result.poolProportionsUsd[0];\\n\\n        if (result.poolProportionsUsd[0] == outTokens[0].amountUsd && result.poolProportionsUsd[1] == outTokens[1].amountUsd &&\\n            (outTokens[0].prop == 0 || outTokens[0].prop == outTokens[1].prop)) {\\n            delete result.inputTokenAddresses;\\n            delete result.inputTokenAmounts;\\n            result.outputTokenAmounts[0] = outTokens[0].idx < inputTokens.length ? inputTokens[outTokens[0].idx].amount : 0;\\n            result.outputTokenAmounts[1] = outTokens[1].idx < inputTokens.length ? inputTokens[outTokens[1].idx].amount : 0;\\n            return result;\\n        }\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            if (outTokens[i].idx < inputTokens.length && result.poolProportionsUsd[i] < outTokens[i].amountUsd) {\\n                outTokens[i].amountToSwap = master.mulDiv(outTokens[i].amountUsd - result.poolProportionsUsd[i], 10 ** decimals[outTokens[i].idx], inputTokens[outTokens[i].idx].price);\\n                result.inputTokenAddresses[outTokens[i].idx] = inputTokens[outTokens[i].idx].tokenAddress;\\n                result.inputTokenAmounts[outTokens[i].idx] = outTokens[i].amountToSwap;\\n                result.outputTokenAddresses[0] = i == 0 ? outTokens[1].token : outTokens[0].token;\\n                // front (!)\\n                result.outputTokenProportions[0] = BASE_DIV;\\n                result.outputTokenAmounts[i] = inputTokens[outTokens[i].idx].amount - outTokens[i].amountToSwap;\\n                result.outputTokenAmounts[1 - i] = outTokens[1 - i].idx < inputTokens.length ? inputTokens[outTokens[1 - i].idx].amount : 0;\\n                return result;\\n            }\\n        }\\n\\n        result.outputTokenAddresses[0] = outTokens[0].token;\\n        result.outputTokenAddresses[1] = outTokens[1].token;\\n        result.outputTokenProportions[0] = master.mulDiv(result.poolProportionsUsd[0] - outTokens[0].amountUsd, BASE_DIV,\\n            (result.poolProportionsUsd[0] + result.poolProportionsUsd[1]) - (outTokens[0].amountUsd + outTokens[1].amountUsd));\\n        result.outputTokenProportions[1] = BASE_DIV - result.outputTokenProportions[0];\\n        result.outputTokenAmounts[0] = outTokens[0].idx < inputTokens.length ? inputTokens[outTokens[0].idx].amount : 0;\\n        result.outputTokenAmounts[1] = outTokens[1].idx < inputTokens.length ? inputTokens[outTokens[1].idx].amount : 0;\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6210beab384361acfd3c974bd911145a3c2b4db4549283b4d65631646ccf3645\",\"license\":\"MIT\"},\"contracts/interfaces/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nbytes32 constant UNIT_ROLE = keccak256(\\\"UNIT_ROLE\\\");\\nbytes32 constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\nuint256 constant MAX_UINT_VALUE = type(uint256).max;\\nuint256 constant BASE_DIV = 1000000;\\n\\naddress constant AERODROME_FACTORY = 0x5e7BB104d84c7CB9B682AaC2F3d509f5F406809A;\\n\",\"keccak256\":\"0xad76ff056cdca14d169fd2cc2fd6b44fe42916fea3f75ca8961522231ac0a928\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./core/IPoolMathFacet.sol\\\";\\nimport \\\"./core/IPositionManagerFacet.sol\\\";\\nimport \\\"./core/IZapFacet.sol\\\";\\nimport \\\"./core/IMathFacet.sol\\\";\\nimport \\\"./core/IProportionFacet.sol\\\";\\nimport \\\"./Modifiers.sol\\\";\\nimport \\\"../libraries/core/LibCoreStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\ninterface IMasterFacet is IPoolMathFacet, IPositionManagerFacet, IZapFacet, IMathFacet, IProportionFacet {}\\n\",\"keccak256\":\"0x7e636ec1eb63b1658b5767fbd1c50651ef938ebf6e8e28af9508005fa5898866\",\"license\":\"MIT\"},\"contracts/interfaces/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessControl} from \\\"../libraries/core/LibAccessControl.sol\\\";\\nimport {LibCoreStorage} from \\\"../libraries/core/LibCoreStorage.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Modifiers {\\n    modifier onlyRole(bytes32 role) {\\n        LibAccessControl.checkRole(role);\\n        _;\\n    }\\n\\n    modifier onlyDiamond() {\\n        require(LibCoreStorage.coreStorage().diamond == msg.sender, \\\"Restricted to Diamond\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(LibAccessControl.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x42e6fcfce02e6b642f34275da1dfc6e0538c43484e0054eee9ad23dc941c261d\",\"license\":\"MIT\"},\"contracts/interfaces/core/IMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMathFacet {\\n    function getCurrentPrice(address pair) external view returns (uint256);\\n\\n    function getTickSpacing(address pair) external view returns (int24);\\n\\n    function tickToPrice(address pair, int24 tick) external view returns (uint256);\\n\\n    function priceToClosestTick(address pair, uint256[] memory prices) external view returns (int24[] memory);\\n\\n    function getCurrentPoolTick(address pair) external view returns (int24 tick);\\n\\n    function closestTicksForCurrentTick(address pair) external view returns (int24 left, int24 right);\\n}\\n\",\"keccak256\":\"0x5a75edd0a8cbf7c3b2c7e05084f5469eb9e10906d6e63327a5e4d92dad2f72bb\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPoolMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPoolMathFacet {\\n    function toUint160(uint256 y) external view returns (uint160);\\n\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) external view returns (uint256);\\n\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) external view returns (int24);\\n\\n    function getSqrtRatioAtTick(int24 tick) external view returns (uint160);\\n\\n    function getPoolDecimals(address pair) external view returns (uint256, uint256);\\n\\n    function getPoolSqrtRatioX96(address pair) external view returns (uint160);\\n\\n    function getPoolTickSpacing(address pair) external view returns (int24);\\n\\n    function getPoolTick(address pair) external view returns (int24);\\n\\n    function getPoolTokens(address pair) external view returns (address, address);\\n\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external view returns (uint128);\\n\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe11314e0c1d656150fad39805414e3a96281859f1ae172aee68827da778e221c\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPositionManagerFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPositionManagerFacet {\\n    struct PositionInfo {\\n        string platform;\\n        uint256 tokenId;\\n        address poolId;\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 rewardAmount0;\\n        uint256 rewardAmount1;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 apr;\\n    }\\n\\n    function mintPosition(\\n        address pair,\\n        int24 tickRange0,\\n        int24 tickRange1,\\n        uint256 amountOut0,\\n        uint256 amountOut1\\n    ) external returns (uint256);\\n\\n    function getPositions(address wallet) external view returns (PositionInfo[] memory);\\n}\\n\",\"keccak256\":\"0xf313988230f77e47402d65ec13fe8ea3cab463387618c273f10f6e8f3a1451b0\",\"license\":\"MIT\"},\"contracts/interfaces/core/IProportionFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IProportionFacet {\\n    struct InputSwapToken {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    struct ResultOfProportion {\\n        address[] inputTokenAddresses;\\n        uint256[] inputTokenAmounts;\\n        address[] outputTokenAddresses;\\n        uint256[] outputTokenProportions;\\n        uint256[] outputTokenAmounts;\\n        uint256[] poolProportionsUsd;\\n    }\\n\\n    struct OutTokenInfo {\\n        uint256 idx;\\n        uint256 amountUsd;\\n        uint256 prop;\\n        uint256 propAmount;\\n        uint256 amountToSwap;\\n        uint256 outAmount;\\n        address token;\\n    }\\n\\n    function getProportionForZap(\\n        address pair,\\n        int24[] memory tickRange,\\n        InputSwapToken[] memory inputTokens\\n    ) external view returns (ResultOfProportion memory);\\n}\\n\",\"keccak256\":\"0x1d041666404336180d67cc78f7b40559d07de54cac9d386c50c6f5ca354ee4d2\",\"license\":\"MIT\"},\"contracts/interfaces/core/IZapFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IZapFacet {\\n    struct ZapInParams {\\n        address pair;\\n        int24[] tickRange;\\n        uint256[] amountsOut;\\n    }\\n\\n    struct OutputToken {\\n        address tokenAddress;\\n        address receiver;\\n    }\\n\\n    struct InputToken {\\n        address tokenAddress;\\n        uint256 amountIn;\\n    }\\n\\n    struct SwapData {\\n        InputToken[] inputs;\\n        OutputToken[] outputs;\\n        bytes data;\\n    }\\n\\n    struct ResultOfLiquidity {\\n        uint amountAsset0Before;\\n        uint amountAsset1Before;\\n\\n        uint amountAsset0After;\\n        uint amountAsset1After;\\n\\n        uint[] amountsPut;\\n        uint[] amountsReturned;\\n    }\\n\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external;\\n}\\n\",\"keccak256\":\"0x0328053f415ba9530e78d0a77756784bf7ce020bb85f02d131d1613e07fe6a25\",\"license\":\"MIT\"},\"contracts/libraries/core/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_SLOT = keccak256(\\\"access.control.storage\\\");\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n\\n    function accessControlStorage() internal pure returns (Layout storage l) {\\n        bytes32 slot = ACCESS_CONTROL_STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        checkRole(role);\\n        _;\\n    }\\n\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return accessControlStorage().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function renounceRole(bytes32 role) internal {\\n        revokeRole(role, msg.sender);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x751a6e0e4acfc3878f6cff6716b786881a5fde23e1262b7591081070a627e16c\",\"license\":\"MIT\"},\"contracts/libraries/core/LibCoreStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibCoreStorage {\\n    bytes32 internal constant CORE_STORAGE_POSITION = keccak256(\\\"core.storage\\\");\\n\\n    struct CoreStorage {\\n        address odosRouter;\\n        address npm;\\n        uint256 stakeSlippageBP;\\n        address diamond;\\n    }\\n\\n    function coreStorage() internal pure returns (CoreStorage storage ds) {\\n        bytes32 position = CORE_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25a26795568f7a50aed18b949ef764828e674758e1037bf3d2175750a23457f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e85806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638866c09f14610030575b600080fd5b61004361003e3660046119ae565b610059565b6040516100509190611afe565b60405180910390f35b6100926040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b815130906000906001600160401b038111156100b0576100b061187b565b6040519080825280602002602001820160405280156100d9578160200160208202803683370190505b506040805160028082526060820190925291925060009190816020015b61013f6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816100f6579050509050600085518260008151811061016b5761016b611bb6565b6020026020010151600001818152505085518260018151811061019057610190611bb6565b60209081029190910101515260405163ca4f280360e01b81526001600160a01b0385169063ca4f2803906101c8908b90600401611bcc565b6040805180830381865afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190611be0565b8360008151811061021b5761021b611bb6565b602002602001015160c0018460018151811061023957610239611bb6565b60209081029190910101516001600160a01b0392831660c0909101529116905285516001600160401b038111156102725761027261187b565b60405190808252806020026020018201604052801561029b578160200160208202803683370190505b50855285516001600160401b038111156102b7576102b761187b565b6040519080825280602002602001820160405280156102e0578160200160208202803683370190505b5060208601526040805160028082526060820190925290816020016020820280368337505050604086810191909152805160028082526060820183529091602083019080368337505050606086810191909152604080516002808252928101825291906020830190803683375050506080860152604080516002808252606082018352909160208301908036833750505060a086015260005b86518110156106eb5786818151811061039457610394611bb6565b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190611c1a565b84828151811061041357610413611bb6565b602002602001019060ff16908160ff16815250506000856001600160a01b031663aa9a091289848151811061044a5761044a611bb6565b6020026020010151604001518a858151811061046857610468611bb6565b60200260200101516020015188868151811061048657610486611bb6565b6020026020010151600a61049a9190611d39565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa1580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105079190611d48565b90506105138184611d61565b92508360008151811061052857610528611bb6565b602002602001015160c001516001600160a01b031688838151811061054f5761054f611bb6565b6020026020010151600001516001600160a01b0316036105b757818460008151811061057d5761057d611bb6565b6020026020010151600001818152505080846000815181106105a1576105a1611bb6565b60200260200101516020018181525050506106d9565b836001815181106105ca576105ca611bb6565b602002602001015160c001516001600160a01b03168883815181106105f1576105f1611bb6565b6020026020010151600001516001600160a01b03160361064357818460018151811061061f5761061f611bb6565b6020026020010151600001818152505080846001815181106105a1576105a1611bb6565b87828151811061065557610655611bb6565b6020026020010151600001518760000151838151811061067757610677611bb6565b60200260200101906001600160a01b031690816001600160a01b0316815250508782815181106106a9576106a9611bb6565b602002602001015160200151876020015183815181106106cb576106cb611bb6565b602002602001018181525050505b806106e381611d74565b915050610379565b506106f688886114a6565b8360008151811061070957610709611bb6565b60200260200101516060018460018151811061072757610727611bb6565b602090810291909101015160600191909152526040516384cc315b60e01b81526001600160a01b038516906384cc315b90610766908b90600401611bcc565b602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190611d48565b826000815181106107ba576107ba611bb6565b6020026020010151606001516107d09190611d8d565b826000815181106107e3576107e3611bb6565b602002602001015160400181815250508160018151811061080657610806611bb6565b602002602001015160c001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108739190611c1a565b61087e90600a611d39565b8260018151811061089157610891611bb6565b6020026020010151606001516108a79190611d8d565b826000815181106108ba576108ba611bb6565b6020026020010151604001516108d09190611d61565b826001815181106108e3576108e3611bb6565b60200260200101516040018181525050836001600160a01b031663aa9a0912828460008151811061091657610916611bb6565b6020026020010151604001518560018151811061093557610935611bb6565b6020026020010151604001516040518463ffffffff1660e01b8152600401610970939291909283526020830191909152604082015260600190565b602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190611d48565b8560a001516000815181106109c8576109c8611bb6565b6020026020010181815250508460a001516000815181106109eb576109eb611bb6565b6020026020010151816109fe9190611da4565b8560a00151600181518110610a1557610a15611bb6565b60200260200101818152505081600081518110610a3457610a34611bb6565b6020026020010151602001518560a00151600081518110610a5757610a57611bb6565b6020026020010151148015610aa7575081600181518110610a7a57610a7a611bb6565b6020026020010151602001518560a00151600181518110610a9d57610a9d611bb6565b6020026020010151145b8015610b16575081600081518110610ac157610ac1611bb6565b60200260200101516040015160001480610b16575081600181518110610ae957610ae9611bb6565b60200260200101516040015182600081518110610b0857610b08611bb6565b602002602001015160400151145b15610c485760608086526020860152855182518390600090610b3a57610b3a611bb6565b60200260200101516000015110610b52576000610b8f565b8582600081518110610b6657610b66611bb6565b60200260200101516000015181518110610b8257610b82611bb6565b6020026020010151602001515b8560800151600081518110610ba657610ba6611bb6565b602002602001018181525050855182600181518110610bc757610bc7611bb6565b60200260200101516000015110610bdf576000610c1c565b8582600181518110610bf357610bf3611bb6565b60200260200101516000015181518110610c0f57610c0f611bb6565b6020026020010151602001515b8560800151600181518110610c3357610c33611bb6565b6020026020010181815250505050505061149f565b60005b60028110156110fe578651838281518110610c6857610c68611bb6565b602002602001015160000151108015610cba5750828181518110610c8e57610c8e611bb6565b6020026020010151602001518660a001518281518110610cb057610cb0611bb6565b6020026020010151105b156110ec57846001600160a01b031663aa9a09128760a001518381518110610ce457610ce4611bb6565b6020026020010151858481518110610cfe57610cfe611bb6565b602002602001015160200151610d149190611da4565b86868581518110610d2757610d27611bb6565b60200260200101516000015181518110610d4357610d43611bb6565b6020026020010151600a610d579190611d39565b8a878681518110610d6a57610d6a611bb6565b60200260200101516000015181518110610d8657610d86611bb6565b6020026020010151604001516040518463ffffffff1660e01b8152600401610dc1939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190611d48565b838281518110610e1457610e14611bb6565b6020026020010151608001818152505086838281518110610e3757610e37611bb6565b60200260200101516000015181518110610e5357610e53611bb6565b6020026020010151600001518660000151848381518110610e7657610e76611bb6565b60200260200101516000015181518110610e9257610e92611bb6565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610ec457610ec4611bb6565b6020026020010151608001518660200151848381518110610ee757610ee7611bb6565b60200260200101516000015181518110610f0357610f03611bb6565b60209081029190910101528015610f385782600081518110610f2757610f27611bb6565b602002602001015160c00151610f58565b82600181518110610f4b57610f4b611bb6565b602002602001015160c001515b8660400151600081518110610f6f57610f6f611bb6565b60200260200101906001600160a01b031690816001600160a01b031681525050620f42408660600151600081518110610faa57610faa611bb6565b602002602001018181525050828181518110610fc857610fc8611bb6565b60200260200101516080015187848381518110610fe757610fe7611bb6565b6020026020010151600001518151811061100357611003611bb6565b6020026020010151602001516110199190611da4565b8660800151828151811061102f5761102f611bb6565b6020908102919091010152865183611048836001611da4565b8151811061105857611058611bb6565b602002602001015160000151106110705760006110b6565b868361107d836001611da4565b8151811061108d5761108d611bb6565b602002602001015160000151815181106110a9576110a9611bb6565b6020026020010151602001515b60808701516110c6836001611da4565b815181106110d6576110d6611bb6565b602002602001018181525050505050505061149f565b806110f681611d74565b915050610c4b565b508160008151811061111257611112611bb6565b602002602001015160c00151856040015160008151811061113557611135611bb6565b60200260200101906001600160a01b031690816001600160a01b0316815250508160018151811061116857611168611bb6565b602002602001015160c00151856040015160018151811061118b5761118b611bb6565b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663aa9a0912836000815181106111cd576111cd611bb6565b6020026020010151602001518760a001516000815181106111f0576111f0611bb6565b60200260200101516112029190611da4565b620f42408560018151811061121957611219611bb6565b6020026020010151602001518660008151811061123857611238611bb6565b60200260200101516020015161124e9190611d61565b8960a0015160018151811061126557611265611bb6565b60200260200101518a60a0015160008151811061128457611284611bb6565b60200260200101516112969190611d61565b6112a09190611da4565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d9190611d48565b856060015160008151811061132457611324611bb6565b602002602001018181525050846060015160008151811061134757611347611bb6565b6020026020010151620f424061135d9190611da4565b856060015160018151811061137457611374611bb6565b60200260200101818152505085518260008151811061139557611395611bb6565b602002602001015160000151106113ad5760006113ea565b85826000815181106113c1576113c1611bb6565b602002602001015160000151815181106113dd576113dd611bb6565b6020026020010151602001515b856080015160008151811061140157611401611bb6565b60200260200101818152505085518260018151811061142257611422611bb6565b6020026020010151600001511061143a576000611477565b858260018151811061144e5761144e611bb6565b6020026020010151600001518151811061146a5761146a611bb6565b6020026020010151602001515b856080015160018151811061148e5761148e611bb6565b602002602001018181525050505050505b9392505050565b60405163d79357fb60e01b81526000908190309082908190839063d79357fb906114d4908a90600401611bcc565b6040805180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611db7565b9092509050600061152683600a611ddb565b9050600061153583600a611ddb565b90506000856001600160a01b0316635730ba088b6040518263ffffffff1660e01b81526004016115659190611bcc565b602060405180830381865afa158015611582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a69190611de7565b90506000866001600160a01b031663986cfba38b6000815181106115cc576115cc611bb6565b60200260200101516040518263ffffffff1660e01b81526004016115f9919060029190910b815260200190565b602060405180830381865afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a9190611de7565b90506000876001600160a01b031663986cfba38c60018151811061166057611660611bb6565b60200260200101516040518263ffffffff1660e01b815260040161168d919060029190910b815260200190565b602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190611de7565b905060006001600160a01b038916636098fd4a8585856116f08b6103e8611d8d565b6116fc8b6103e8611d8d565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a401602060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190611e04565b60405163c72e160b60e01b81526001600160a01b038681166004830152858116602483015284811660448301526001600160801b0383166064830152919250908a169063c72e160b906084016040805180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190611db7565b909b50995060008587116118225785611824565b865b90506118308782611e2d565b61183a908d611d8d565b9b506118468682611e2d565b611850908c611d8d565b9a50505050505050505050509250929050565b6001600160a01b038116811461187857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156118b3576118b361187b565b60405290565b604051601f8201601f191681016001600160401b03811182821017156118e1576118e161187b565b604052919050565b60006001600160401b038211156119025761190261187b565b5060051b60200190565b600082601f83011261191d57600080fd5b8135602061193261192d836118e9565b6118b9565b8281526060928302850182019282820191908785111561195157600080fd5b8387015b858110156119a15781818a03121561196d5760008081fd5b611975611891565b813561198081611863565b81528186013586820152604080830135908201528452928401928101611955565b5090979650505050505050565b6000806000606084860312156119c357600080fd5b83356119ce81611863565b92506020848101356001600160401b03808211156119eb57600080fd5b818701915087601f8301126119ff57600080fd5b8135611a0d61192d826118e9565b81815260059190911b8301840190848101908a831115611a2c57600080fd5b938501935b82851015611a5a5784358060020b8114611a4b5760008081fd5b82529385019390850190611a31565b965050506040870135925080831115611a7257600080fd5b5050611a808682870161190c565b9150509250925092565b600081518084526020808501945080840160005b83811015611ac35781516001600160a01b031687529582019590820190600101611a9e565b509495945050505050565b600081518084526020808501945080840160005b83811015611ac357815187529582019590820190600101611ae2565b602081526000825160c06020840152611b1a60e0840182611a8a565b90506020840151601f1980858403016040860152611b388383611ace565b92506040860151915080858403016060860152611b558383611a8a565b92506060860151915080858403016080860152611b728383611ace565b925060808601519150808584030160a0860152611b8f8383611ace565b925060a08601519150808584030160c086015250611bad8282611ace565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0391909116815260200190565b60008060408385031215611bf357600080fd5b8251611bfe81611863565b6020840151909250611c0f81611863565b809150509250929050565b600060208284031215611c2c57600080fd5b815160ff8116811461149f57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611c8e578160001904821115611c7457611c74611c3d565b80851615611c8157918102915b93841c9390800290611c58565b509250929050565b600082611ca557506001611d33565b81611cb257506000611d33565b8160018114611cc85760028114611cd257611cee565b6001915050611d33565b60ff841115611ce357611ce3611c3d565b50506001821b611d33565b5060208310610133831016604e8410600b8410161715611d11575081810a611d33565b611d1b8383611c53565b8060001904821115611d2f57611d2f611c3d565b0290505b92915050565b600061149f60ff841683611c96565b600060208284031215611d5a57600080fd5b5051919050565b80820180821115611d3357611d33611c3d565b600060018201611d8657611d86611c3d565b5060010190565b8082028115828204841417611d3357611d33611c3d565b81810381811115611d3357611d33611c3d565b60008060408385031215611dca57600080fd5b505080516020909101519092909150565b600061149f8383611c96565b600060208284031215611df957600080fd5b815161149f81611863565b600060208284031215611e1657600080fd5b81516001600160801b038116811461149f57600080fd5b600082611e4a57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122014cc1a2b394c2646fe59408341d678ddda92aacca71a8ec51ae91aa40b1c890364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638866c09f14610030575b600080fd5b61004361003e3660046119ae565b610059565b6040516100509190611afe565b60405180910390f35b6100926040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b815130906000906001600160401b038111156100b0576100b061187b565b6040519080825280602002602001820160405280156100d9578160200160208202803683370190505b506040805160028082526060820190925291925060009190816020015b61013f6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001906001900390816100f6579050509050600085518260008151811061016b5761016b611bb6565b6020026020010151600001818152505085518260018151811061019057610190611bb6565b60209081029190910101515260405163ca4f280360e01b81526001600160a01b0385169063ca4f2803906101c8908b90600401611bcc565b6040805180830381865afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190611be0565b8360008151811061021b5761021b611bb6565b602002602001015160c0018460018151811061023957610239611bb6565b60209081029190910101516001600160a01b0392831660c0909101529116905285516001600160401b038111156102725761027261187b565b60405190808252806020026020018201604052801561029b578160200160208202803683370190505b50855285516001600160401b038111156102b7576102b761187b565b6040519080825280602002602001820160405280156102e0578160200160208202803683370190505b5060208601526040805160028082526060820190925290816020016020820280368337505050604086810191909152805160028082526060820183529091602083019080368337505050606086810191909152604080516002808252928101825291906020830190803683375050506080860152604080516002808252606082018352909160208301908036833750505060a086015260005b86518110156106eb5786818151811061039457610394611bb6565b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190611c1a565b84828151811061041357610413611bb6565b602002602001019060ff16908160ff16815250506000856001600160a01b031663aa9a091289848151811061044a5761044a611bb6565b6020026020010151604001518a858151811061046857610468611bb6565b60200260200101516020015188868151811061048657610486611bb6565b6020026020010151600a61049a9190611d39565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa1580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105079190611d48565b90506105138184611d61565b92508360008151811061052857610528611bb6565b602002602001015160c001516001600160a01b031688838151811061054f5761054f611bb6565b6020026020010151600001516001600160a01b0316036105b757818460008151811061057d5761057d611bb6565b6020026020010151600001818152505080846000815181106105a1576105a1611bb6565b60200260200101516020018181525050506106d9565b836001815181106105ca576105ca611bb6565b602002602001015160c001516001600160a01b03168883815181106105f1576105f1611bb6565b6020026020010151600001516001600160a01b03160361064357818460018151811061061f5761061f611bb6565b6020026020010151600001818152505080846001815181106105a1576105a1611bb6565b87828151811061065557610655611bb6565b6020026020010151600001518760000151838151811061067757610677611bb6565b60200260200101906001600160a01b031690816001600160a01b0316815250508782815181106106a9576106a9611bb6565b602002602001015160200151876020015183815181106106cb576106cb611bb6565b602002602001018181525050505b806106e381611d74565b915050610379565b506106f688886114a6565b8360008151811061070957610709611bb6565b60200260200101516060018460018151811061072757610727611bb6565b602090810291909101015160600191909152526040516384cc315b60e01b81526001600160a01b038516906384cc315b90610766908b90600401611bcc565b602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190611d48565b826000815181106107ba576107ba611bb6565b6020026020010151606001516107d09190611d8d565b826000815181106107e3576107e3611bb6565b602002602001015160400181815250508160018151811061080657610806611bb6565b602002602001015160c001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108739190611c1a565b61087e90600a611d39565b8260018151811061089157610891611bb6565b6020026020010151606001516108a79190611d8d565b826000815181106108ba576108ba611bb6565b6020026020010151604001516108d09190611d61565b826001815181106108e3576108e3611bb6565b60200260200101516040018181525050836001600160a01b031663aa9a0912828460008151811061091657610916611bb6565b6020026020010151604001518560018151811061093557610935611bb6565b6020026020010151604001516040518463ffffffff1660e01b8152600401610970939291909283526020830191909152604082015260600190565b602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190611d48565b8560a001516000815181106109c8576109c8611bb6565b6020026020010181815250508460a001516000815181106109eb576109eb611bb6565b6020026020010151816109fe9190611da4565b8560a00151600181518110610a1557610a15611bb6565b60200260200101818152505081600081518110610a3457610a34611bb6565b6020026020010151602001518560a00151600081518110610a5757610a57611bb6565b6020026020010151148015610aa7575081600181518110610a7a57610a7a611bb6565b6020026020010151602001518560a00151600181518110610a9d57610a9d611bb6565b6020026020010151145b8015610b16575081600081518110610ac157610ac1611bb6565b60200260200101516040015160001480610b16575081600181518110610ae957610ae9611bb6565b60200260200101516040015182600081518110610b0857610b08611bb6565b602002602001015160400151145b15610c485760608086526020860152855182518390600090610b3a57610b3a611bb6565b60200260200101516000015110610b52576000610b8f565b8582600081518110610b6657610b66611bb6565b60200260200101516000015181518110610b8257610b82611bb6565b6020026020010151602001515b8560800151600081518110610ba657610ba6611bb6565b602002602001018181525050855182600181518110610bc757610bc7611bb6565b60200260200101516000015110610bdf576000610c1c565b8582600181518110610bf357610bf3611bb6565b60200260200101516000015181518110610c0f57610c0f611bb6565b6020026020010151602001515b8560800151600181518110610c3357610c33611bb6565b6020026020010181815250505050505061149f565b60005b60028110156110fe578651838281518110610c6857610c68611bb6565b602002602001015160000151108015610cba5750828181518110610c8e57610c8e611bb6565b6020026020010151602001518660a001518281518110610cb057610cb0611bb6565b6020026020010151105b156110ec57846001600160a01b031663aa9a09128760a001518381518110610ce457610ce4611bb6565b6020026020010151858481518110610cfe57610cfe611bb6565b602002602001015160200151610d149190611da4565b86868581518110610d2757610d27611bb6565b60200260200101516000015181518110610d4357610d43611bb6565b6020026020010151600a610d579190611d39565b8a878681518110610d6a57610d6a611bb6565b60200260200101516000015181518110610d8657610d86611bb6565b6020026020010151604001516040518463ffffffff1660e01b8152600401610dc1939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190611d48565b838281518110610e1457610e14611bb6565b6020026020010151608001818152505086838281518110610e3757610e37611bb6565b60200260200101516000015181518110610e5357610e53611bb6565b6020026020010151600001518660000151848381518110610e7657610e76611bb6565b60200260200101516000015181518110610e9257610e92611bb6565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610ec457610ec4611bb6565b6020026020010151608001518660200151848381518110610ee757610ee7611bb6565b60200260200101516000015181518110610f0357610f03611bb6565b60209081029190910101528015610f385782600081518110610f2757610f27611bb6565b602002602001015160c00151610f58565b82600181518110610f4b57610f4b611bb6565b602002602001015160c001515b8660400151600081518110610f6f57610f6f611bb6565b60200260200101906001600160a01b031690816001600160a01b031681525050620f42408660600151600081518110610faa57610faa611bb6565b602002602001018181525050828181518110610fc857610fc8611bb6565b60200260200101516080015187848381518110610fe757610fe7611bb6565b6020026020010151600001518151811061100357611003611bb6565b6020026020010151602001516110199190611da4565b8660800151828151811061102f5761102f611bb6565b6020908102919091010152865183611048836001611da4565b8151811061105857611058611bb6565b602002602001015160000151106110705760006110b6565b868361107d836001611da4565b8151811061108d5761108d611bb6565b602002602001015160000151815181106110a9576110a9611bb6565b6020026020010151602001515b60808701516110c6836001611da4565b815181106110d6576110d6611bb6565b602002602001018181525050505050505061149f565b806110f681611d74565b915050610c4b565b508160008151811061111257611112611bb6565b602002602001015160c00151856040015160008151811061113557611135611bb6565b60200260200101906001600160a01b031690816001600160a01b0316815250508160018151811061116857611168611bb6565b602002602001015160c00151856040015160018151811061118b5761118b611bb6565b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663aa9a0912836000815181106111cd576111cd611bb6565b6020026020010151602001518760a001516000815181106111f0576111f0611bb6565b60200260200101516112029190611da4565b620f42408560018151811061121957611219611bb6565b6020026020010151602001518660008151811061123857611238611bb6565b60200260200101516020015161124e9190611d61565b8960a0015160018151811061126557611265611bb6565b60200260200101518a60a0015160008151811061128457611284611bb6565b60200260200101516112969190611d61565b6112a09190611da4565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d9190611d48565b856060015160008151811061132457611324611bb6565b602002602001018181525050846060015160008151811061134757611347611bb6565b6020026020010151620f424061135d9190611da4565b856060015160018151811061137457611374611bb6565b60200260200101818152505085518260008151811061139557611395611bb6565b602002602001015160000151106113ad5760006113ea565b85826000815181106113c1576113c1611bb6565b602002602001015160000151815181106113dd576113dd611bb6565b6020026020010151602001515b856080015160008151811061140157611401611bb6565b60200260200101818152505085518260018151811061142257611422611bb6565b6020026020010151600001511061143a576000611477565b858260018151811061144e5761144e611bb6565b6020026020010151600001518151811061146a5761146a611bb6565b6020026020010151602001515b856080015160018151811061148e5761148e611bb6565b602002602001018181525050505050505b9392505050565b60405163d79357fb60e01b81526000908190309082908190839063d79357fb906114d4908a90600401611bcc565b6040805180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611db7565b9092509050600061152683600a611ddb565b9050600061153583600a611ddb565b90506000856001600160a01b0316635730ba088b6040518263ffffffff1660e01b81526004016115659190611bcc565b602060405180830381865afa158015611582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a69190611de7565b90506000866001600160a01b031663986cfba38b6000815181106115cc576115cc611bb6565b60200260200101516040518263ffffffff1660e01b81526004016115f9919060029190910b815260200190565b602060405180830381865afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a9190611de7565b90506000876001600160a01b031663986cfba38c60018151811061166057611660611bb6565b60200260200101516040518263ffffffff1660e01b815260040161168d919060029190910b815260200190565b602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190611de7565b905060006001600160a01b038916636098fd4a8585856116f08b6103e8611d8d565b6116fc8b6103e8611d8d565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a401602060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190611e04565b60405163c72e160b60e01b81526001600160a01b038681166004830152858116602483015284811660448301526001600160801b0383166064830152919250908a169063c72e160b906084016040805180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190611db7565b909b50995060008587116118225785611824565b865b90506118308782611e2d565b61183a908d611d8d565b9b506118468682611e2d565b611850908c611d8d565b9a50505050505050505050509250929050565b6001600160a01b038116811461187857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156118b3576118b361187b565b60405290565b604051601f8201601f191681016001600160401b03811182821017156118e1576118e161187b565b604052919050565b60006001600160401b038211156119025761190261187b565b5060051b60200190565b600082601f83011261191d57600080fd5b8135602061193261192d836118e9565b6118b9565b8281526060928302850182019282820191908785111561195157600080fd5b8387015b858110156119a15781818a03121561196d5760008081fd5b611975611891565b813561198081611863565b81528186013586820152604080830135908201528452928401928101611955565b5090979650505050505050565b6000806000606084860312156119c357600080fd5b83356119ce81611863565b92506020848101356001600160401b03808211156119eb57600080fd5b818701915087601f8301126119ff57600080fd5b8135611a0d61192d826118e9565b81815260059190911b8301840190848101908a831115611a2c57600080fd5b938501935b82851015611a5a5784358060020b8114611a4b5760008081fd5b82529385019390850190611a31565b965050506040870135925080831115611a7257600080fd5b5050611a808682870161190c565b9150509250925092565b600081518084526020808501945080840160005b83811015611ac35781516001600160a01b031687529582019590820190600101611a9e565b509495945050505050565b600081518084526020808501945080840160005b83811015611ac357815187529582019590820190600101611ae2565b602081526000825160c06020840152611b1a60e0840182611a8a565b90506020840151601f1980858403016040860152611b388383611ace565b92506040860151915080858403016060860152611b558383611a8a565b92506060860151915080858403016080860152611b728383611ace565b925060808601519150808584030160a0860152611b8f8383611ace565b925060a08601519150808584030160c086015250611bad8282611ace565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0391909116815260200190565b60008060408385031215611bf357600080fd5b8251611bfe81611863565b6020840151909250611c0f81611863565b809150509250929050565b600060208284031215611c2c57600080fd5b815160ff8116811461149f57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611c8e578160001904821115611c7457611c74611c3d565b80851615611c8157918102915b93841c9390800290611c58565b509250929050565b600082611ca557506001611d33565b81611cb257506000611d33565b8160018114611cc85760028114611cd257611cee565b6001915050611d33565b60ff841115611ce357611ce3611c3d565b50506001821b611d33565b5060208310610133831016604e8410600b8410161715611d11575081810a611d33565b611d1b8383611c53565b8060001904821115611d2f57611d2f611c3d565b0290505b92915050565b600061149f60ff841683611c96565b600060208284031215611d5a57600080fd5b5051919050565b80820180821115611d3357611d33611c3d565b600060018201611d8657611d86611c3d565b5060010190565b8082028115828204841417611d3357611d33611c3d565b81810381811115611d3357611d33611c3d565b60008060408385031215611dca57600080fd5b505080516020909101519092909150565b600061149f8383611c96565b600060208284031215611df957600080fd5b815161149f81611863565b600060208284031215611e1657600080fd5b81516001600160801b038116811461149f57600080fd5b600082611e4a57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122014cc1a2b394c2646fe59408341d678ddda92aacca71a8ec51ae91aa40b1c890364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}