{
  "address": "0xf6DC12cDDf3C30CE70A3F2BAf6d52577fBc2Ea73",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUsdt",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolMendiUsdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolUsdcDaiUsdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mendi",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cUsdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unitroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "velocoreVault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolMendiUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolUsdcDaiUsdt",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyMendiUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unitroller",
      "outputs": [
        {
          "internalType": "contract Unitroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "velocoreVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8a36493f5eb220afdc68fce67ef95b4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdt\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolMendiUsdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUsdcDaiUsdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mendi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unitroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"velocoreVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolMendiUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolUsdcDaiUsdt\",\"type\":\"address\"}],\"internalType\":\"struct StrategyMendiUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitroller\",\"outputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"velocoreVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/usdt/StrategyMendiUsdt.sol\":\"StrategyMendiUsdt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Mendi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface Unitroller {\\r\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) external returns (uint);\\r\\n    function claimComp(address holder, CToken[] memory cTokens) external;\\r\\n}\\r\\n\\r\\ninterface CToken {\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function comptroller() external view returns (address);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function balanceOfUnderlying(address account) external returns (uint);\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function borrow(uint borrowAmount) external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xfe36c0f55a60b33fba4a68b03e1c80a496bc446c33d415d611c1a4a6b933fae5\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/VelocoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ntype Token is bytes32;\\r\\n\\r\\nstruct VelocoreOperation {\\r\\n    bytes32 poolId;\\r\\n    bytes32[] tokenInformations;\\r\\n    bytes data;\\r\\n}\\r\\n\\r\\nenum OperationType {\\r\\n    SWAP,\\r\\n    STAKE,\\r\\n    CONVERT,\\r\\n    VOTE,\\r\\n    USER\\r\\n}\\r\\n\\r\\nenum AmountType {\\r\\n    EXACTLY,\\r\\n    AT_MOST,\\r\\n    ALL\\r\\n}\\r\\n\\r\\ninterface IVault {\\r\\n    function notifyInitialSupply(Token, uint128, uint128) external;\\r\\n    function attachBribe(IGauge gauge, IBribe bribe) external;\\r\\n    function killBribe(IGauge gauge, IBribe bribe) external;\\r\\n    function killGauge(IGauge gauge, bool t) external;\\r\\n    function ballotToken() external returns (Token);\\r\\n    function emissionToken() external returns (Token);\\r\\n    function execute(Token[] calldata tokenRef, int128[] memory deposit, VelocoreOperation[] calldata ops)\\r\\n    external\\r\\n    payable;\\r\\n\\r\\n    function query(address user, Token[] calldata tokenRef, int128[] memory deposit, VelocoreOperation[] calldata ops)\\r\\n    external\\r\\n    returns (int128[] memory);\\r\\n\\r\\n    function inspect(address lens, bytes memory data) external;\\r\\n}\\r\\n\\r\\ninterface IPool {\\r\\n    function poolParams() external view returns (bytes memory);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Gauges are just pools.\\r\\n * instead of velocore__execute, they interact with velocore__gauge.\\r\\n * (un)staking is done by putting/extracting staking token (usually LP token) from/into the pool with velocore__gauge.\\r\\n * harvesting is done by setting the staking amount to zero.\\r\\n */\\r\\ninterface IGauge is IPool {\\r\\n    /**\\r\\n     * @dev This method is called by Vault.execute().\\r\\n     * the parameters and return values are the same as velocore__execute.\\r\\n     * The only difference is that the vault will call velocore__emission before calling velocore__gauge.\\r\\n     */\\r\\n    function velocore__gauge(address user, Token[] calldata tokens, int128[] memory amounts, bytes calldata data)\\r\\n    external\\r\\n    returns (int128[] memory deltaGauge, int128[] memory deltaPool);\\r\\n\\r\\n    /**\\r\\n     * @dev This method is called by Vault.execute() before calling velocore__emission or changing votes.\\r\\n     *\\r\\n     * The vault will credit emitted VC into the gauge balance.\\r\\n     * IGauge is expected to update its internal ledger.\\r\\n     * @param newEmissions newly emitted VCs since last emission\\r\\n     */\\r\\n    function velocore__emission(uint256 newEmissions) external;\\r\\n\\r\\n    function stakeableTokens() external view returns (Token[] memory);\\r\\n    function stakedTokens(address user) external view returns (uint256[] memory);\\r\\n    function stakedTokens() external view returns (uint256[] memory);\\r\\n    function emissionShare(address user) external view returns (uint256);\\r\\n    function naturalBribes() external view returns (Token[] memory);\\r\\n}\\r\\n\\r\\ninterface IBribe is IPool {\\r\\n    /**\\r\\n     * @dev This method is called when someone vote/harvest from/to a @param gauge,\\r\\n     * and when this IBribe happens to be attached to the gauge.\\r\\n     *\\r\\n     * Attachment can happen without IBribe's permission. Implementations must verify that @param gauge is correct.\\r\\n     *\\r\\n     * Returns balance deltas; their net differences are credited as bribe.\\r\\n     * deltaExternal must be zero or negative; Vault will take specified amounts from the contract's balance\\r\\n     *\\r\\n     * @param  gauge  the gauge to bribe for.\\r\\n     * @param  elapsed  elapsed time after last call; can be used to save gas.\\r\\n     */\\r\\n    function velocore__bribe(IGauge gauge, uint256 elapsed)\\r\\n    external\\r\\n    returns (\\r\\n        Token[] memory bribeTokens,\\r\\n        int128[] memory deltaGauge,\\r\\n        int128[] memory deltaPool,\\r\\n        int128[] memory deltaExternal\\r\\n    );\\r\\n\\r\\n    function bribeTokens(IGauge gauge) external view returns (Token[] memory);\\r\\n    function bribeRates(IGauge gauge) external view returns (uint256[] memory);\\r\\n}\\r\\n\\r\\nlibrary VelocoreV2Library {\\r\\n\\r\\n    function toToken(IERC20 tok) internal pure returns (Token) {\\r\\n        return Token.wrap(bytes32(uint256(uint160(address(tok)))));\\r\\n    }\\r\\n\\r\\n    function run2(\\r\\n        address vault,\\r\\n        uint256 value,\\r\\n        address pool,\\r\\n        OperationType operationType,\\r\\n        IERC20 token0,\\r\\n        AmountType amountType0,\\r\\n        uint256 amount0,\\r\\n        IERC20 token1,\\r\\n        AmountType amountType1,\\r\\n        uint256 amount1\\r\\n    ) internal {\\r\\n\\r\\n        token0.approve(vault, amount0);\\r\\n\\r\\n        Token[] memory tokens = new Token[](2);\\r\\n        tokens[0] = toToken(token0);\\r\\n        tokens[1] = toToken(token1);\\r\\n\\r\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\r\\n        ops[0].poolId = bytes32(bytes1(uint8(operationType))) | bytes32(uint256(uint160(pool)));\\r\\n        ops[0].tokenInformations = new bytes32[](2);\\r\\n        ops[0].data = \\\"\\\";\\r\\n\\r\\n        ops[0].tokenInformations[0] = bytes32(bytes1(0x00)) | bytes32(bytes2(uint16(amountType0))) | bytes32(amount0);\\r\\n        ops[0].tokenInformations[1] = bytes32(bytes1(0x01)) | bytes32(bytes2(uint16(amountType1))) | bytes32(amount1);\\r\\n\\r\\n        IVault(vault).execute{value: value}(tokens, new int128[](2), ops);\\r\\n    }\\r\\n\\r\\n    function run3(\\r\\n        address vault,\\r\\n        uint256 value,\\r\\n        address pool,\\r\\n        OperationType operationType,\\r\\n        IERC20 token0,\\r\\n        AmountType amountType0,\\r\\n        uint256 amount0,\\r\\n        IERC20 token1,\\r\\n        AmountType amountType1,\\r\\n        uint256 amount1,\\r\\n        IERC20 token2,\\r\\n        AmountType amountType2,\\r\\n        uint256 amount2\\r\\n    ) internal {\\r\\n\\r\\n        token0.approve(vault, amount0);\\r\\n\\r\\n        Token[] memory tokens = new Token[](3);\\r\\n        tokens[0] = toToken(token0);\\r\\n        tokens[1] = toToken(token1);\\r\\n        tokens[2] = toToken(token2);\\r\\n\\r\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\r\\n        ops[0].poolId = bytes32(bytes1(uint8(operationType))) | bytes32(uint256(uint160(pool)));\\r\\n        ops[0].tokenInformations = new bytes32[](3);\\r\\n        ops[0].data = \\\"\\\";\\r\\n\\r\\n        ops[0].tokenInformations[0] = bytes32(bytes1(0x00)) | bytes32(bytes2(uint16(amountType0))) | bytes32(amount0);\\r\\n        ops[0].tokenInformations[1] = bytes32(bytes1(0x01)) | bytes32(bytes2(uint16(amountType1))) | bytes32(amount1);\\r\\n        ops[0].tokenInformations[2] = bytes32(bytes1(0x02)) | bytes32(bytes2(uint16(amountType2))) | bytes32(amount2);\\r\\n\\r\\n        IVault(vault).execute{value: value}(tokens, new int128[](3), ops);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x28290bef5751bb47581a6bb03a14bef392734f70c9008ac45d134ddd30b018a7\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IControlRole.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n    uint256 public swapSlippageBP;\\r\\n    uint256 public navSlippageBP;\\r\\n    uint256 public stakeSlippageBP;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        swapSlippageBP = 20;\\r\\n        navSlippageBP = 20;\\r\\n        stakeSlippageBP = 4;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortfolioAgent() {\\r\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\r\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setSlippages(\\r\\n        uint256 _swapSlippageBP,\\r\\n        uint256 _navSlippageBP,\\r\\n        uint256 _stakeSlippageBP\\r\\n    ) public onlyPortfolioAgent {\\r\\n        swapSlippageBP = _swapSlippageBP;\\r\\n        navSlippageBP = _navSlippageBP;\\r\\n        stakeSlippageBP = _stakeSlippageBP;\\r\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        uint256 withdrawAmount;\\r\\n        uint256 rewardAmount;\\r\\n        if (_targetIsZero) {\\r\\n            rewardAmount = _claimRewards(_beneficiary);\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 rewardAmount = _claimRewards(_to);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xdad1bb1765b23745141b982d10052842e49f7c0e2b81077bf4a15fa09896a425\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IControlRole {\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf45e3261bc0e319aeffb0f00b6843bb6398a044dd710794a5f8088a426ca84c\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf24a033c2df4207da5f2cdcf30ae65632f0063483573ddaeb92a766f8d6556d0\",\"license\":\"GPL-3.0\"},\"contracts/usdt/StrategyMendiUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Mendi.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/VelocoreV2.sol\\\";\\r\\n\\r\\ncontract StrategyMendiUsdt is Strategy {\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address usdt;\\r\\n        address usdc;\\r\\n        address mendi;\\r\\n        address cUsdt;\\r\\n        address unitroller;\\r\\n        address velocoreVault;\\r\\n        address poolMendiUsdc;\\r\\n        address poolUsdcDaiUsdt;\\r\\n    }\\r\\n\\r\\n    // --- params\\r\\n\\r\\n    IERC20 public usdt;\\r\\n    IERC20 public usdc;\\r\\n    IERC20 public mendi;\\r\\n    CToken public cUsdt;\\r\\n    Unitroller public unitroller;\\r\\n    address public velocoreVault;\\r\\n    address public poolMendiUsdc;\\r\\n    address public poolUsdcDaiUsdt;\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n    // --- Setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        require(params.usdt != address(0), 'usdt is empty');\\r\\n        require(params.usdc != address(0), 'usdc is empty');\\r\\n        require(params.mendi != address(0), 'mendi is empty');\\r\\n        require(params.cUsdt != address(0), 'cUsdt is empty');\\r\\n        require(params.unitroller != address(0), 'unitroller is empty');\\r\\n        require(params.velocoreVault != address(0), 'velocoreVault is empty');\\r\\n        require(params.poolMendiUsdc != address(0), 'poolMendiUsdc is empty');\\r\\n        require(params.poolUsdcDaiUsdt != address(0), 'poolUsdcDaiUsdt is empty');\\r\\n\\r\\n        usdt = IERC20(params.usdt);\\r\\n        usdc = IERC20(params.usdc);\\r\\n        mendi = IERC20(params.mendi);\\r\\n        cUsdt = CToken(params.cUsdt);\\r\\n        unitroller = Unitroller(params.unitroller);\\r\\n        velocoreVault = params.velocoreVault;\\r\\n        poolMendiUsdc = params.poolMendiUsdc;\\r\\n        poolUsdcDaiUsdt = params.poolUsdcDaiUsdt;\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        usdt.approve(address(cUsdt), _amount);\\r\\n        cUsdt.mint(usdt.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n        cUsdt.redeemUnderlying(_amount);\\r\\n        return usdt.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n        cUsdt.redeem(cUsdt.balanceOf(address(this)));\\r\\n        return usdt.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function _totalValue() internal view returns (uint256) {\\r\\n        return usdt.balanceOf(address(this)) + cUsdt.balanceOf(address(this)) * cUsdt.exchangeRateStored() / 1e18;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        // claim rewards\\r\\n        if (cUsdt.balanceOf(address(this)) > 0) {\\r\\n            CToken[] memory cTokens = new CToken[](1);\\r\\n            cTokens[0] = cUsdt;\\r\\n            unitroller.claimComp(address(this), cTokens);\\r\\n        }\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 totalUsdt = usdt.balanceOf(address(this));\\r\\n\\r\\n        uint256 mendiBalance = mendi.balanceOf(address(this));\\r\\n        if (mendiBalance > 0) {\\r\\n            VelocoreV2Library.run2(\\r\\n                velocoreVault,\\r\\n                0,\\r\\n                poolMendiUsdc,\\r\\n                OperationType.SWAP,\\r\\n                mendi,\\r\\n                AmountType.EXACTLY,\\r\\n                mendiBalance,\\r\\n                usdc,\\r\\n                AmountType.AT_MOST,\\r\\n                0\\r\\n            );\\r\\n            uint256 usdcBalance = usdc.balanceOf(address(this));\\r\\n            if (usdcBalance > 0) {\\r\\n                VelocoreV2Library.run2(\\r\\n                    velocoreVault,\\r\\n                    0,\\r\\n                    poolUsdcDaiUsdt,\\r\\n                    OperationType.SWAP,\\r\\n                    usdc,\\r\\n                    AmountType.EXACTLY,\\r\\n                    usdcBalance,\\r\\n                    usdt,\\r\\n                    AmountType.AT_MOST,\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        totalUsdt = usdt.balanceOf(address(this)) - totalUsdt;\\r\\n\\r\\n        if (totalUsdt > 0) {\\r\\n            usdt.transfer(_to, totalUsdt);\\r\\n        }\\r\\n\\r\\n        return totalUsdt;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe6388ea8adfd238bc058e0117bbcec351f9c3fb8af0333fc233ae5a5bedfb3e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff1615808015620000375750600054600160ff909116105b8062000067575062000054306200014160201b620017291760201c565b15801562000067575060005460ff166001145b620000cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f3576000805461ff0019166101001790555b80156200013a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000150565b6001600160a01b03163b151590565b608051613337620001886000396000818161070401528181610744015281816107e30152818161082301526108b201526133376000f3fe6080604052600436106101ee5760003560e01c80636603171b1161010d578063ae30c110116100a0578063c26257571161006f578063c262575714610565578063d1ace33c14610586578063d547741f146105a7578063ef5cfb8c146105c7578063f6f6b881146105e757600080fd5b8063ae30c110146104ed578063bad1d3da1461050d578063bafc4bb81461052e578063bf52e0801461054f57600080fd5b8063a217fddf116100dc578063a217fddf14610498578063a3673b381461027c578063a440b21a146104ad578063adc9772e146104cd57600080fd5b80636603171b146104205780637d5f5802146104415780638129fc1c1461046357806391d148541461047857600080fd5b80633e413bee116101855780635ca558f8116101545780635ca558f8146103955780635dbd733a146103ab5780635f33f281146103df578063620b75df1461040057600080fd5b80633e413bee1461032c5780634f1ef2861461034d57806352d1902d14610360578063561f07731461037557600080fd5b80632f2ff15d116101c15780632f2ff15d146102915780632f48ab7d146102b357806336568abe146102ec5780633659cfe61461030c57600080fd5b806301ffc9a7146101f3578063119cd87914610228578063248a9ca31461024c5780632576e65a1461027c575b600080fd5b3480156101ff57600080fd5b5061021361020e366004612bb9565b610607565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061023e60fd5481565b60405190815260200161021f565b34801561025857600080fd5b5061023e610267366004612be3565b60009081526065602052604090206001015490565b34801561028857600080fd5b5061023e61063e565b34801561029d57600080fd5b506102b16102ac366004612c13565b61064d565b005b3480156102bf57600080fd5b5061012d546102d4906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b3480156102f857600080fd5b506102b1610307366004612c13565b610677565b34801561031857600080fd5b506102b1610327366004612c3f565b6106fa565b34801561033857600080fd5b5061012e546102d4906001600160a01b031681565b6102b161035b366004612c70565b6107d9565b34801561036c57600080fd5b5061023e6108a5565b34801561038157600080fd5b506102b1610390366004612d32565b610958565b3480156103a157600080fd5b5061023e60fe5481565b3480156103b757600080fd5b5061023e7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156103eb57600080fd5b5061012f546102d4906001600160a01b031681565b34801561040c57600080fd5b5060fb546102d4906001600160a01b031681565b34801561042c57600080fd5b50610134546102d4906001600160a01b031681565b34801561044d57600080fd5b5061023e60008051602061329b83398151915281565b34801561046f57600080fd5b506102b1610e40565b34801561048457600080fd5b50610213610493366004612c13565b610f0a565b3480156104a457600080fd5b5061023e600081565b3480156104b957600080fd5b506102b16104c8366004612c3f565b610f35565b3480156104d957600080fd5b506102b16104e8366004612d4b565b611064565b3480156104f957600080fd5b506102b1610508366004612d75565b611267565b34801561051957600080fd5b50610131546102d4906001600160a01b031681565b34801561053a57600080fd5b50610130546102d4906001600160a01b031681565b34801561055b57600080fd5b5061023e60fc5481565b34801561057157600080fd5b50610132546102d4906001600160a01b031681565b34801561059257600080fd5b50610133546102d4906001600160a01b031681565b3480156105b357600080fd5b506102b16105c2366004612c13565b6113cd565b3480156105d357600080fd5b5061023e6105e2366004612c3f565b6113f2565b3480156105f357600080fd5b5061023e610602366004612daf565b611477565b60006001600160e01b03198216637965db0b60e01b148061063857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610648611738565b905090565b600082815260656020526040902060010154610668816118b3565b61067283836118bd565b505050565b6001600160a01b03811633146106ec5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f68282611943565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107425760405162461bcd60e51b81526004016106e390612dfe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661078b6000805160206132bb833981519152546001600160a01b031690565b6001600160a01b0316146107b15760405162461bcd60e51b81526004016106e390612e4a565b6107ba816119aa565b604080516000808252602082019092526107d6918391906119b5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108215760405162461bcd60e51b81526004016106e390612dfe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661086a6000805160206132bb833981519152546001600160a01b031690565b6001600160a01b0316146108905760405162461bcd60e51b81526004016106e390612e4a565b610899826119aa565b6106f6828260016119b5565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109455760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106e3565b506000805160206132bb83398151915290565b610963600033610f0a565b6109a65760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b60006109b56020830183612c3f565b6001600160a01b0316036109fb5760405162461bcd60e51b815260206004820152600d60248201526c7573647420697320656d70747960981b60448201526064016106e3565b6000610a0d6040830160208401612c3f565b6001600160a01b031603610a535760405162461bcd60e51b815260206004820152600d60248201526c7573646320697320656d70747960981b60448201526064016106e3565b6000610a656060830160408401612c3f565b6001600160a01b031603610aac5760405162461bcd60e51b815260206004820152600e60248201526d6d656e646920697320656d70747960901b60448201526064016106e3565b6000610abe6080830160608401612c3f565b6001600160a01b031603610b055760405162461bcd60e51b815260206004820152600e60248201526d635573647420697320656d70747960901b60448201526064016106e3565b6000610b1760a0830160808401612c3f565b6001600160a01b031603610b635760405162461bcd60e51b8152602060048201526013602482015272756e6974726f6c6c657220697320656d70747960681b60448201526064016106e3565b6000610b7560c0830160a08401612c3f565b6001600160a01b031603610bc45760405162461bcd60e51b815260206004820152601660248201527576656c6f636f72655661756c7420697320656d70747960501b60448201526064016106e3565b6000610bd660e0830160c08401612c3f565b6001600160a01b031603610c255760405162461bcd60e51b8152602060048201526016602482015275706f6f6c4d656e64695573646320697320656d70747960501b60448201526064016106e3565b6000610c38610100830160e08401612c3f565b6001600160a01b031603610c8e5760405162461bcd60e51b815260206004820152601860248201527f706f6f6c557364634461695573647420697320656d707479000000000000000060448201526064016106e3565b610c9b6020820182612c3f565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610ccc6040820160208301612c3f565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610cfd6060820160408301612c3f565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610d2e6080820160608301612c3f565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610d5f60a0820160808301612c3f565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610d9060c0820160a08301612c3f565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610dc160e0820160c08301612c3f565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610df3610100820160e08301612c3f565b61013480546001600160a01b0319166001600160a01b03929092169190911790556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b600054610100900460ff1615808015610e605750600054600160ff909116105b80610e7a5750303b158015610e7a575060005460ff166001145b610e965760405162461bcd60e51b81526004016106e390612e96565b6000805460ff191660011790558015610eb9576000805461ff0019166101001790555b610ec1611b20565b80156107d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f40600033610f0a565b610f835760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016106e3565b60fb54610ffe9060008051602061329b833981519152906001600160a01b03166113cd565b61101660008051602061329b8339815191528261064d565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610eff565b61107c60008051602061329b83398151915233610f0a565b6110985760405162461bcd60e51b81526004016106e390612ee4565b6000611107306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190612f1b565b60fd54611c05565b6040516370a0823160e01b815230600482015290915061117d9084906001600160a01b038216906370a0823190602401602060405180830381865afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190612f1b565b611c2f565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e09190612f1b565b101561122e5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6112917fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f0a565b80611329575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190612f34565b6113805760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b60648201526084016106e3565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a9060600161125a565b6000828152606560205260409020600101546113e8816118b3565b6106728383611943565b600061140c60008051602061329b83398151915233610f0a565b6114285760405162461bcd60e51b81526004016106e390612ee4565b600061143383611d85565b9050801561146f576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061149160008051602061329b83398151915233610f0a565b6114ad5760405162461bcd60e51b81526004016106e390612ee4565b60006114f0306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110db573d6000803e3d6000fd5b905060008084156115175761150486611d85565b90506115108887612188565b9150611586565b6115228888886122cd565b9150868210156115865760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106e3565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e99190612f1b565b10156116375760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb906044016020604051808303816000875af1158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa9190612f34565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a1801561171e576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b6000670de0b6b3a764000061013060009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb9190612f1b565b610130546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190612f1b565b6118329190612f67565b61183c9190612f7e565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190612f1b565b6106489190612fa0565b6107d681336123b4565b6118c78282610f0a565b6106f65760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118ff3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61194d8282610f0a565b156106f65760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106f6816118b3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119e8576106728361240d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a42575060408051601f3d908101601f19168201909252611a3f91810190612f1b565b60015b611aa55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106e3565b6000805160206132bb8339815191528114611b145760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106e3565b506106728383836124a9565b600054610100900460ff1615808015611b405750600054600160ff909116105b80611b5a5750303b158015611b5a575060005460ff166001145b611b765760405162461bcd60e51b81526004016106e390612e96565b6000805460ff191660011790558015611b99576000805461ff0019166101001790555b611ba16124d4565b611ba96124d4565b611bb46000336118bd565b601460fc81905560fd55600460fe5580156107d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610eff565b6000612710611c148382612fb3565b611c1e9085612f67565b611c289190612f7e565b9392505050565b61012d546101305460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015611c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caa9190612f34565b506101305461012d546040516370a0823160e01b81523060048201526001600160a01b039283169263a0712d689216906370a0823190602401602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190612f1b565b6040518263ffffffff1660e01b8152600401611d4291815260200190565b6020604051808303816000875af1158015611d61573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190612f1b565b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df79190612f1b565b1115611eb3576040805160018082528183019092526000916020808301908036833750506101305482519293506001600160a01b031691839150600090611e4057611e40612fc6565b6001600160a01b0392831660209182029290920101526101315460405162e1ed9760e51b8152911690631c3db2e090611e7f9030908590600401612fdc565b600060405180830381600087803b158015611e9957600080fd5b505af1158015611ead573d6000803e3d6000fd5b50505050505b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190612f1b565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f949190612f1b565b9050801561208857610132546101335461012f5461012e54611fd6936001600160a01b0390811693600093908216928492918216918391899116600183612541565b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120449190612f1b565b9050801561208657610132546101345461012e5461012d54612086936001600160a01b0390811693600093908216928492918216918391899116600183612541565b505b61012d546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa1580156120d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f59190612f1b565b6120ff9190612fb3565b915081156121815761012d5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561215b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217f9190612f34565b505b5092915050565b610130546040516370a0823160e01b81523060048201526000916001600160a01b03169063db006a759082906370a0823190602401602060405180830381865afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190612f1b565b6040518263ffffffff1660e01b815260040161221c91815260200190565b6020604051808303816000875af115801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190612f1b565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156122a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c289190612f1b565b6101305460405163852a12e360e01b8152600481018490526000916001600160a01b03169063852a12e3906024016020604051808303816000875af115801561231a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233e9190612f1b565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ac9190612f1b565b949350505050565b6123be8282610f0a565b6106f6576123cb81612899565b6123d68360206128ab565b6040516020016123e792919061305c565b60408051601f198184030181529082905262461bcd60e51b82526106e3916004016130fd565b6001600160a01b0381163b61247a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106e3565b6000805160206132bb83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6124b283612a47565b6000825111806124bf5750805b15610672576124ce8383612a87565b50505050565b600054610100900460ff1661253f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106e3565b565b60405163095ea7b360e01b81526001600160a01b038b811660048301526024820186905287169063095ea7b3906044016020604051808303816000875af1158015612590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b49190612f34565b506040805160028082526060820183526000926020830190803683370190505090506001600160a01b038716816000815181106125f3576125f3612fc6565b60209081029190910101526001600160a01b0384168160018151811061261b5761261b612fc6565b6020908102919091010152604080516001808252818301909252600091816020015b604080516060808201835260008252602080830182905292820152825260001990920191018161263d5790505090506001600160a01b038a1689600481111561268857612688613110565b60f81b6001600160f81b03191617816000815181106126a9576126a9612fc6565b602090810291909101015152604080516002808252606082019092529081602001602082028036833701905050816000815181106126e9576126e9612fc6565b602002602001015160200181905250604051806020016040528060008152508160008151811061271b5761271b612fc6565b6020908102919091010151604001528587600281111561273d5761273d613110565b60f01b6001600160f01b031916600060f81b6001600160f81b03191617178160008151811061276e5761276e612fc6565b60200260200101516020015160008151811061278c5761278c612fc6565b6020908102919091010152828460028111156127aa576127aa613110565b60f01b6001600160f01b031916600160f81b6001600160f81b0319161717816000815181106127db576127db612fc6565b6020026020010151602001516001815181106127f9576127f9612fc6565b6020908102919091010152604080516002808252606082019092526001600160a01b038e169163d3115a8a918e9186919081602001602082028036833701905050856040518563ffffffff1660e01b8152600401612859939291906131d6565b6000604051808303818588803b15801561287257600080fd5b505af1158015612886573d6000803e3d6000fd5b5050505050505050505050505050505050565b60606106386001600160a01b03831660145b606060006128ba836002612f67565b6128c5906002612fa0565b67ffffffffffffffff8111156128dd576128dd612c5a565b6040519080825280601f01601f191660200182016040528015612907576020820181803683370190505b509050600360fc1b8160008151811061292257612922612fc6565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061295157612951612fc6565b60200101906001600160f81b031916908160001a9053506000612975846002612f67565b612980906001612fa0565b90505b60018111156129f8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129b4576129b4612fc6565b1a60f81b8282815181106129ca576129ca612fc6565b60200101906001600160f81b031916908160001a90535060049490941c936129f181613267565b9050612983565b508315611c285760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e3565b612a508161240d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612aef5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106e3565b600080846001600160a01b031684604051612b0a919061327e565b600060405180830381855af49150503d8060008114612b45576040519150601f19603f3d011682016040523d82523d6000602084013e612b4a565b606091505b5091509150612b7282826040518060600160405280602781526020016132db60279139612b7b565b95945050505050565b60608315612b8a575081611c28565b611c288383815115612b9f5781518083602001fd5b8060405162461bcd60e51b81526004016106e391906130fd565b600060208284031215612bcb57600080fd5b81356001600160e01b031981168114611c2857600080fd5b600060208284031215612bf557600080fd5b5035919050565b80356001600160a01b038116811461147257600080fd5b60008060408385031215612c2657600080fd5b82359150612c3660208401612bfc565b90509250929050565b600060208284031215612c5157600080fd5b611c2882612bfc565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612c8357600080fd5b612c8c83612bfc565b9150602083013567ffffffffffffffff80821115612ca957600080fd5b818501915085601f830112612cbd57600080fd5b813581811115612ccf57612ccf612c5a565b604051601f8201601f19908116603f01168101908382118183101715612cf757612cf7612c5a565b81604052828152886020848701011115612d1057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006101008284031215612d4557600080fd5b50919050565b60008060408385031215612d5e57600080fd5b612d6783612bfc565b946020939093013593505050565b600080600060608486031215612d8a57600080fd5b505081359360208301359350604090920135919050565b80151581146107d657600080fd5b60008060008060808587031215612dc557600080fd5b612dce85612bfc565b935060208501359250612de360408601612bfc565b91506060850135612df381612da1565b939692955090935050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b600060208284031215612f2d57600080fd5b5051919050565b600060208284031215612f4657600080fd5b8151611c2881612da1565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761063857610638612f51565b600082612f9b57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561063857610638612f51565b8181038181111561063857610638612f51565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561302a57855185168352948301949183019160010161300c565b509098975050505050505050565b60005b8381101561305357818101518382015260200161303b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613094816017850160208801613038565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516130c5816028840160208801613038565b01602801949350505050565b600081518084526130e9816020860160208601613038565b601f01601f19169290920160200192915050565b602081526000611c2860208301846130d1565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501808196508360051b810191508286016000805b868110156131c8578385038a528251805186528681015160608888018190528151908801819052608088019189019085905b808210156131975782518452928a0192918a019160019190910190613177565b505050604080830151925087820381890152506131b481836130d1565b9b88019b9650505091850191600101613145565b509298975050505050505050565b606080825284519082018190526000906020906080840190828801845b8281101561320f578151845292840192908401906001016131f3565b5050508381038285015285518082528683019183019060005b81811015613247578351600f0b83529284019291840191600101613228565b5050848103604086015261325b8187613126565b98975050505050505050565b60008161327657613276612f51565b506000190190565b60008251613290818460208701613038565b919091019291505056fe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207961fd8657ed4101bf40e6e73bb69bd60d22be045e25ac35f8db22b164a3b54564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80636603171b1161010d578063ae30c110116100a0578063c26257571161006f578063c262575714610565578063d1ace33c14610586578063d547741f146105a7578063ef5cfb8c146105c7578063f6f6b881146105e757600080fd5b8063ae30c110146104ed578063bad1d3da1461050d578063bafc4bb81461052e578063bf52e0801461054f57600080fd5b8063a217fddf116100dc578063a217fddf14610498578063a3673b381461027c578063a440b21a146104ad578063adc9772e146104cd57600080fd5b80636603171b146104205780637d5f5802146104415780638129fc1c1461046357806391d148541461047857600080fd5b80633e413bee116101855780635ca558f8116101545780635ca558f8146103955780635dbd733a146103ab5780635f33f281146103df578063620b75df1461040057600080fd5b80633e413bee1461032c5780634f1ef2861461034d57806352d1902d14610360578063561f07731461037557600080fd5b80632f2ff15d116101c15780632f2ff15d146102915780632f48ab7d146102b357806336568abe146102ec5780633659cfe61461030c57600080fd5b806301ffc9a7146101f3578063119cd87914610228578063248a9ca31461024c5780632576e65a1461027c575b600080fd5b3480156101ff57600080fd5b5061021361020e366004612bb9565b610607565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061023e60fd5481565b60405190815260200161021f565b34801561025857600080fd5b5061023e610267366004612be3565b60009081526065602052604090206001015490565b34801561028857600080fd5b5061023e61063e565b34801561029d57600080fd5b506102b16102ac366004612c13565b61064d565b005b3480156102bf57600080fd5b5061012d546102d4906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b3480156102f857600080fd5b506102b1610307366004612c13565b610677565b34801561031857600080fd5b506102b1610327366004612c3f565b6106fa565b34801561033857600080fd5b5061012e546102d4906001600160a01b031681565b6102b161035b366004612c70565b6107d9565b34801561036c57600080fd5b5061023e6108a5565b34801561038157600080fd5b506102b1610390366004612d32565b610958565b3480156103a157600080fd5b5061023e60fe5481565b3480156103b757600080fd5b5061023e7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156103eb57600080fd5b5061012f546102d4906001600160a01b031681565b34801561040c57600080fd5b5060fb546102d4906001600160a01b031681565b34801561042c57600080fd5b50610134546102d4906001600160a01b031681565b34801561044d57600080fd5b5061023e60008051602061329b83398151915281565b34801561046f57600080fd5b506102b1610e40565b34801561048457600080fd5b50610213610493366004612c13565b610f0a565b3480156104a457600080fd5b5061023e600081565b3480156104b957600080fd5b506102b16104c8366004612c3f565b610f35565b3480156104d957600080fd5b506102b16104e8366004612d4b565b611064565b3480156104f957600080fd5b506102b1610508366004612d75565b611267565b34801561051957600080fd5b50610131546102d4906001600160a01b031681565b34801561053a57600080fd5b50610130546102d4906001600160a01b031681565b34801561055b57600080fd5b5061023e60fc5481565b34801561057157600080fd5b50610132546102d4906001600160a01b031681565b34801561059257600080fd5b50610133546102d4906001600160a01b031681565b3480156105b357600080fd5b506102b16105c2366004612c13565b6113cd565b3480156105d357600080fd5b5061023e6105e2366004612c3f565b6113f2565b3480156105f357600080fd5b5061023e610602366004612daf565b611477565b60006001600160e01b03198216637965db0b60e01b148061063857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610648611738565b905090565b600082815260656020526040902060010154610668816118b3565b61067283836118bd565b505050565b6001600160a01b03811633146106ec5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f68282611943565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107425760405162461bcd60e51b81526004016106e390612dfe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661078b6000805160206132bb833981519152546001600160a01b031690565b6001600160a01b0316146107b15760405162461bcd60e51b81526004016106e390612e4a565b6107ba816119aa565b604080516000808252602082019092526107d6918391906119b5565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108215760405162461bcd60e51b81526004016106e390612dfe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661086a6000805160206132bb833981519152546001600160a01b031690565b6001600160a01b0316146108905760405162461bcd60e51b81526004016106e390612e4a565b610899826119aa565b6106f6828260016119b5565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109455760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106e3565b506000805160206132bb83398151915290565b610963600033610f0a565b6109a65760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b60006109b56020830183612c3f565b6001600160a01b0316036109fb5760405162461bcd60e51b815260206004820152600d60248201526c7573647420697320656d70747960981b60448201526064016106e3565b6000610a0d6040830160208401612c3f565b6001600160a01b031603610a535760405162461bcd60e51b815260206004820152600d60248201526c7573646320697320656d70747960981b60448201526064016106e3565b6000610a656060830160408401612c3f565b6001600160a01b031603610aac5760405162461bcd60e51b815260206004820152600e60248201526d6d656e646920697320656d70747960901b60448201526064016106e3565b6000610abe6080830160608401612c3f565b6001600160a01b031603610b055760405162461bcd60e51b815260206004820152600e60248201526d635573647420697320656d70747960901b60448201526064016106e3565b6000610b1760a0830160808401612c3f565b6001600160a01b031603610b635760405162461bcd60e51b8152602060048201526013602482015272756e6974726f6c6c657220697320656d70747960681b60448201526064016106e3565b6000610b7560c0830160a08401612c3f565b6001600160a01b031603610bc45760405162461bcd60e51b815260206004820152601660248201527576656c6f636f72655661756c7420697320656d70747960501b60448201526064016106e3565b6000610bd660e0830160c08401612c3f565b6001600160a01b031603610c255760405162461bcd60e51b8152602060048201526016602482015275706f6f6c4d656e64695573646320697320656d70747960501b60448201526064016106e3565b6000610c38610100830160e08401612c3f565b6001600160a01b031603610c8e5760405162461bcd60e51b815260206004820152601860248201527f706f6f6c557364634461695573647420697320656d707479000000000000000060448201526064016106e3565b610c9b6020820182612c3f565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610ccc6040820160208301612c3f565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610cfd6060820160408301612c3f565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610d2e6080820160608301612c3f565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610d5f60a0820160808301612c3f565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610d9060c0820160a08301612c3f565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610dc160e0820160c08301612c3f565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610df3610100820160e08301612c3f565b61013480546001600160a01b0319166001600160a01b03929092169190911790556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b600054610100900460ff1615808015610e605750600054600160ff909116105b80610e7a5750303b158015610e7a575060005460ff166001145b610e965760405162461bcd60e51b81526004016106e390612e96565b6000805460ff191660011790558015610eb9576000805461ff0019166101001790555b610ec1611b20565b80156107d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f40600033610f0a565b610f835760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016106e3565b60fb54610ffe9060008051602061329b833981519152906001600160a01b03166113cd565b61101660008051602061329b8339815191528261064d565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610eff565b61107c60008051602061329b83398151915233610f0a565b6110985760405162461bcd60e51b81526004016106e390612ee4565b6000611107306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190612f1b565b60fd54611c05565b6040516370a0823160e01b815230600482015290915061117d9084906001600160a01b038216906370a0823190602401602060405180830381865afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190612f1b565b611c2f565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e09190612f1b565b101561122e5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6112917fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f0a565b80611329575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190612f34565b6113805760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b60648201526084016106e3565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a9060600161125a565b6000828152606560205260409020600101546113e8816118b3565b6106728383611943565b600061140c60008051602061329b83398151915233610f0a565b6114285760405162461bcd60e51b81526004016106e390612ee4565b600061143383611d85565b9050801561146f576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061149160008051602061329b83398151915233610f0a565b6114ad5760405162461bcd60e51b81526004016106e390612ee4565b60006114f0306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110db573d6000803e3d6000fd5b905060008084156115175761150486611d85565b90506115108887612188565b9150611586565b6115228888886122cd565b9150868210156115865760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106e3565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e99190612f1b565b10156116375760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb906044016020604051808303816000875af1158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa9190612f34565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a1801561171e576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b6000670de0b6b3a764000061013060009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb9190612f1b565b610130546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190612f1b565b6118329190612f67565b61183c9190612f7e565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190612f1b565b6106489190612fa0565b6107d681336123b4565b6118c78282610f0a565b6106f65760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118ff3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61194d8282610f0a565b156106f65760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106f6816118b3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119e8576106728361240d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a42575060408051601f3d908101601f19168201909252611a3f91810190612f1b565b60015b611aa55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106e3565b6000805160206132bb8339815191528114611b145760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106e3565b506106728383836124a9565b600054610100900460ff1615808015611b405750600054600160ff909116105b80611b5a5750303b158015611b5a575060005460ff166001145b611b765760405162461bcd60e51b81526004016106e390612e96565b6000805460ff191660011790558015611b99576000805461ff0019166101001790555b611ba16124d4565b611ba96124d4565b611bb46000336118bd565b601460fc81905560fd55600460fe5580156107d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610eff565b6000612710611c148382612fb3565b611c1e9085612f67565b611c289190612f7e565b9392505050565b61012d546101305460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015611c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caa9190612f34565b506101305461012d546040516370a0823160e01b81523060048201526001600160a01b039283169263a0712d689216906370a0823190602401602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190612f1b565b6040518263ffffffff1660e01b8152600401611d4291815260200190565b6020604051808303816000875af1158015611d61573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190612f1b565b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df79190612f1b565b1115611eb3576040805160018082528183019092526000916020808301908036833750506101305482519293506001600160a01b031691839150600090611e4057611e40612fc6565b6001600160a01b0392831660209182029290920101526101315460405162e1ed9760e51b8152911690631c3db2e090611e7f9030908590600401612fdc565b600060405180830381600087803b158015611e9957600080fd5b505af1158015611ead573d6000803e3d6000fd5b50505050505b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190612f1b565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f949190612f1b565b9050801561208857610132546101335461012f5461012e54611fd6936001600160a01b0390811693600093908216928492918216918391899116600183612541565b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120449190612f1b565b9050801561208657610132546101345461012e5461012d54612086936001600160a01b0390811693600093908216928492918216918391899116600183612541565b505b61012d546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa1580156120d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f59190612f1b565b6120ff9190612fb3565b915081156121815761012d5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561215b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217f9190612f34565b505b5092915050565b610130546040516370a0823160e01b81523060048201526000916001600160a01b03169063db006a759082906370a0823190602401602060405180830381865afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190612f1b565b6040518263ffffffff1660e01b815260040161221c91815260200190565b6020604051808303816000875af115801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190612f1b565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156122a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c289190612f1b565b6101305460405163852a12e360e01b8152600481018490526000916001600160a01b03169063852a12e3906024016020604051808303816000875af115801561231a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233e9190612f1b565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ac9190612f1b565b949350505050565b6123be8282610f0a565b6106f6576123cb81612899565b6123d68360206128ab565b6040516020016123e792919061305c565b60408051601f198184030181529082905262461bcd60e51b82526106e3916004016130fd565b6001600160a01b0381163b61247a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106e3565b6000805160206132bb83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6124b283612a47565b6000825111806124bf5750805b15610672576124ce8383612a87565b50505050565b600054610100900460ff1661253f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106e3565b565b60405163095ea7b360e01b81526001600160a01b038b811660048301526024820186905287169063095ea7b3906044016020604051808303816000875af1158015612590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b49190612f34565b506040805160028082526060820183526000926020830190803683370190505090506001600160a01b038716816000815181106125f3576125f3612fc6565b60209081029190910101526001600160a01b0384168160018151811061261b5761261b612fc6565b6020908102919091010152604080516001808252818301909252600091816020015b604080516060808201835260008252602080830182905292820152825260001990920191018161263d5790505090506001600160a01b038a1689600481111561268857612688613110565b60f81b6001600160f81b03191617816000815181106126a9576126a9612fc6565b602090810291909101015152604080516002808252606082019092529081602001602082028036833701905050816000815181106126e9576126e9612fc6565b602002602001015160200181905250604051806020016040528060008152508160008151811061271b5761271b612fc6565b6020908102919091010151604001528587600281111561273d5761273d613110565b60f01b6001600160f01b031916600060f81b6001600160f81b03191617178160008151811061276e5761276e612fc6565b60200260200101516020015160008151811061278c5761278c612fc6565b6020908102919091010152828460028111156127aa576127aa613110565b60f01b6001600160f01b031916600160f81b6001600160f81b0319161717816000815181106127db576127db612fc6565b6020026020010151602001516001815181106127f9576127f9612fc6565b6020908102919091010152604080516002808252606082019092526001600160a01b038e169163d3115a8a918e9186919081602001602082028036833701905050856040518563ffffffff1660e01b8152600401612859939291906131d6565b6000604051808303818588803b15801561287257600080fd5b505af1158015612886573d6000803e3d6000fd5b5050505050505050505050505050505050565b60606106386001600160a01b03831660145b606060006128ba836002612f67565b6128c5906002612fa0565b67ffffffffffffffff8111156128dd576128dd612c5a565b6040519080825280601f01601f191660200182016040528015612907576020820181803683370190505b509050600360fc1b8160008151811061292257612922612fc6565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061295157612951612fc6565b60200101906001600160f81b031916908160001a9053506000612975846002612f67565b612980906001612fa0565b90505b60018111156129f8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129b4576129b4612fc6565b1a60f81b8282815181106129ca576129ca612fc6565b60200101906001600160f81b031916908160001a90535060049490941c936129f181613267565b9050612983565b508315611c285760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e3565b612a508161240d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612aef5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106e3565b600080846001600160a01b031684604051612b0a919061327e565b600060405180830381855af49150503d8060008114612b45576040519150601f19603f3d011682016040523d82523d6000602084013e612b4a565b606091505b5091509150612b7282826040518060600160405280602781526020016132db60279139612b7b565b95945050505050565b60608315612b8a575081611c28565b611c288383815115612b9f5781518083602001fd5b8060405162461bcd60e51b81526004016106e391906130fd565b600060208284031215612bcb57600080fd5b81356001600160e01b031981168114611c2857600080fd5b600060208284031215612bf557600080fd5b5035919050565b80356001600160a01b038116811461147257600080fd5b60008060408385031215612c2657600080fd5b82359150612c3660208401612bfc565b90509250929050565b600060208284031215612c5157600080fd5b611c2882612bfc565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612c8357600080fd5b612c8c83612bfc565b9150602083013567ffffffffffffffff80821115612ca957600080fd5b818501915085601f830112612cbd57600080fd5b813581811115612ccf57612ccf612c5a565b604051601f8201601f19908116603f01168101908382118183101715612cf757612cf7612c5a565b81604052828152886020848701011115612d1057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006101008284031215612d4557600080fd5b50919050565b60008060408385031215612d5e57600080fd5b612d6783612bfc565b946020939093013593505050565b600080600060608486031215612d8a57600080fd5b505081359360208301359350604090920135919050565b80151581146107d657600080fd5b60008060008060808587031215612dc557600080fd5b612dce85612bfc565b935060208501359250612de360408601612bfc565b91506060850135612df381612da1565b939692955090935050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b600060208284031215612f2d57600080fd5b5051919050565b600060208284031215612f4657600080fd5b8151611c2881612da1565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761063857610638612f51565b600082612f9b57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561063857610638612f51565b8181038181111561063857610638612f51565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561302a57855185168352948301949183019160010161300c565b509098975050505050505050565b60005b8381101561305357818101518382015260200161303b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613094816017850160208801613038565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516130c5816028840160208801613038565b01602801949350505050565b600081518084526130e9816020860160208601613038565b601f01601f19169290920160200192915050565b602081526000611c2860208301846130d1565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501808196508360051b810191508286016000805b868110156131c8578385038a528251805186528681015160608888018190528151908801819052608088019189019085905b808210156131975782518452928a0192918a019160019190910190613177565b505050604080830151925087820381890152506131b481836130d1565b9b88019b9650505091850191600101613145565b509298975050505050505050565b606080825284519082018190526000906020906080840190828801845b8281101561320f578151845292840192908401906001016131f3565b5050508381038285015285518082528683019183019060005b81811015613247578351600f0b83529284019291840191600101613228565b5050848103604086015261325b8187613126565b98975050505050505050565b60008161327657613276612f51565b506000190190565b60008251613290818460208701613038565b919091019291505056fe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207961fd8657ed4101bf40e6e73bb69bd60d22be045e25ac35f8db22b164a3b54564736f6c63430008110033",
  "implementation": "0xD51c03f8a24aa836874d6107fC74C0C2EFe1763E",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3645,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 3647,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 3649,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 3651,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 4036,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 4143,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "usdt",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 4146,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "usdc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 4149,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "mendi",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 4152,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "cUsdt",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(CToken)2917"
      },
      {
        "astId": 4155,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "unitroller",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(Unitroller)2823"
      },
      {
        "astId": 4157,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "velocoreVault",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 4159,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "poolMendiUsdc",
        "offset": 0,
        "slot": "307",
        "type": "t_address"
      },
      {
        "astId": 4161,
        "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
        "label": "poolUsdcDaiUsdt",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)2917": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2662": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Unitroller)2823": {
        "encoding": "inplace",
        "label": "contract Unitroller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/usdt/StrategyMendiUsdt.sol:StrategyMendiUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}