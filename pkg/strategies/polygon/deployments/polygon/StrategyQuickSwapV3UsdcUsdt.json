{
  "address": "0x956E1DA95b339Eda148AC22158a252bf6C0a4f59",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dquickToken",
      "outputs": [
        {
          "internalType": "contract IDragonLair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmingCenter",
      "outputs": [
        {
          "internalType": "contract IFarmingCenter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonfungiblePositionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdt",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IAlgebraPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickSwapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdtToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wmaticToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dquickToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quickToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nonfungiblePositionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmingCenter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "synapseSwapRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quickSwapRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdt",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            }
          ],
          "internalType": "struct StrategyQuickSwapV3UsdcUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "synapseSwapRouter",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickLower",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickUpper",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "1546f78a59f5d0406c9a24522389cee6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dquickToken\",\"outputs\":[{\"internalType\":\"contract IDragonLair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingCenter\",\"outputs\":[{\"internalType\":\"contract IFarmingCenter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdt\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IAlgebraPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickSwapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dquickToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quickToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmingCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"synapseSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quickSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdt\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct StrategyQuickSwapV3UsdcUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synapseSwapRouter\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickLower\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickUpper\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyQuickSwapV3UsdcUsdt.sol\":\"StrategyQuickSwapV3UsdcUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n\\r\\n    function latestRound() external view returns (uint256);\\r\\n\\r\\n    function getAnswer(uint256 roundId) external view returns (int256);\\r\\n\\r\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n    // if they do not have data to report, instead of returning unset values\\r\\n    // which could be misinterpreted as actual reported values.\\r\\n    function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n    function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nlibrary ChainlinkLibrary {\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function convertTokenToUSD(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * price / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / price;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f0789834374f2a403c74670e9a46841ef29b30cf48aad60706f76526e3f845a\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/QuickSwapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/// @title Non-fungible token for positions\\r\\n/// @notice Wraps Algebra positions in a non-fungible token interface which allows for them to be transferred\\r\\n/// and authorized.\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\ninterface INonfungiblePositionManager is IERC721 {\\r\\n    /// @notice Emitted when liquidity is increased for a position NFT\\r\\n    /// @dev Also emitted when a token is minted\\r\\n    /// @param tokenId The ID of the token for which liquidity was increased\\r\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\r\\n    /// @param actualLiquidity the actual liquidity that was added into a pool. Could differ from\\r\\n    /// _liquidity_ when using FeeOnTransfer tokens\\r\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\r\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\r\\n    event IncreaseLiquidity(\\r\\n        uint256 indexed tokenId,\\r\\n        uint128 liquidity,\\r\\n        uint128 actualLiquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address pool\\r\\n    );\\r\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\r\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\r\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\r\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\r\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\r\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n    /// @notice Emitted when tokens are collected for a position NFT\\r\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\r\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\r\\n    /// @param recipient The address of the account that received the collected tokens\\r\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\r\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\r\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice Returns the position information associated with a given token ID.\\r\\n    /// @dev Throws if the token ID is not valid.\\r\\n    /// @param tokenId The ID of the token that represents the position\\r\\n    /// @return nonce The nonce for permits\\r\\n    /// @return operator The address that is approved for spending\\r\\n    /// @return token0 The address of the token0 for a specific pool\\r\\n    /// @return token1 The address of the token1 for a specific pool\\r\\n    /// @return tickLower The lower end of the tick range for the position\\r\\n    /// @return tickUpper The higher end of the tick range for the position\\r\\n    /// @return liquidity The liquidity of the position\\r\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\r\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\r\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\r\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\r\\n    function positions(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint96 nonce,\\r\\n        address operator,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 feeGrowthInside0LastX128,\\r\\n        uint256 feeGrowthInside1LastX128,\\r\\n        uint128 tokensOwed0,\\r\\n        uint128 tokensOwed1\\r\\n    );\\r\\n\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a new position wrapped in a NFT\\r\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\r\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\r\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\r\\n    /// @return tokenId The ID of the token that represents the minted position\\r\\n    /// @return liquidity The amount of liquidity for this position\\r\\n    /// @return amount0 The amount of token0\\r\\n    /// @return amount1 The amount of token1\\r\\n    function mint(MintParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint256 tokenId,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\r\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\r\\n    /// amount0Desired The desired amount of token0 to be spent,\\r\\n    /// amount1Desired The desired amount of token1 to be spent,\\r\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\r\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\r\\n    /// deadline The time by which the transaction must be included to effect the change\\r\\n    /// @return liquidity The new liquidity amount as a result of the increase\\r\\n    /// @return amount0 The amount of token0 to achieve resulting liquidity\\r\\n    /// @return amount1 The amount of token1 to achieve resulting liquidity\\r\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\r\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\r\\n    /// amount The amount by which liquidity will be decreased,\\r\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\r\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\r\\n    /// deadline The time by which the transaction must be included to effect the change\\r\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\r\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\r\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\r\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\r\\n    /// recipient The account that should receive the tokens,\\r\\n    /// amount0Max The maximum amount of token0 to collect,\\r\\n    /// amount1Max The maximum amount of token1 to collect\\r\\n    /// @return amount0 The amount of fees collected in token0\\r\\n    /// @return amount1 The amount of fees collected in token1\\r\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\r\\n    /// must be collected first.\\r\\n    /// @param tokenId The ID of the token that is being burned\\r\\n    function burn(uint256 tokenId) external payable;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IAlgebraPool {\\r\\n    /**\\r\\n     * @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n   * and is exposed as a single method to save gas when accessed externally.\\r\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\r\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\r\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\r\\n   * boundary;\\r\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\r\\n   * Returns timepointIndex The index of the last written timepoint;\\r\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\r\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\r\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\r\\n   */\\r\\n    function globalState()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint160 price,\\r\\n        int24 tick,\\r\\n        uint16 fee,\\r\\n        uint16 timepointIndex,\\r\\n        uint8 communityFeeToken0,\\r\\n        uint8 communityFeeToken1,\\r\\n        bool unlocked\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice The currently in range liquidity available to the pool\\r\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\r\\n   * Returned value cannot exceed type(uint128).max\\r\\n   */\\r\\n    function liquidity() external view returns (uint128);\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Liquidity amount functions\\r\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\nlibrary LiquidityAmounts {\\r\\n    /// @notice Downcasts uint256 to uint128\\r\\n    /// @param x The uint258 to be downcasted\\r\\n    /// @return y The passed value, downcasted to uint128\\r\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\r\\n        require((y = uint128(x)) == x);\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\r\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount0 The amount0 being sent in\\r\\n    /// @return liquidity The amount of returned liquidity\\r\\n    function getLiquidityForAmount0(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount0\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Constants.Q96);\\r\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\r\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount1 The amount1 being sent in\\r\\n    /// @return liquidity The amount of returned liquidity\\r\\n    function getLiquidityForAmount1(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount1\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n        return toUint128(FullMath.mulDiv(amount1, Constants.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\r\\n    /// pool prices and the prices at the tick boundaries\\r\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount0 The amount of token0 being sent in\\r\\n    /// @param amount1 The amount of token1 being sent in\\r\\n    /// @return liquidity The maximum amount of liquidity received\\r\\n    function getLiquidityForAmounts(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\r\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\r\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\r\\n\\r\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\r\\n        } else {\\r\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount0 The amount of token0\\r\\n    function getAmount0ForLiquidity(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount0) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return\\r\\n        FullMath.mulDiv(uint256(liquidity) << Constants.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96) /\\r\\n        sqrtRatioAX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount1 The amount of token1\\r\\n    function getAmount1ForLiquidity(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Constants.Q96);\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\r\\n    /// pool prices and the prices at the tick boundaries\\r\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount0 The amount of token0\\r\\n    /// @return amount1 The amount of token1\\r\\n    function getAmountsForLiquidity(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\r\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\r\\n        } else {\\r\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // 512-bit multiply [prod1 prod0] = a * b\\r\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n        // then use the Chinese Remainder Theorem to reconstruct\\r\\n        // the 512 bit result. The result is stored in two 256\\r\\n        // variables such that product = prod1 * 2**256 + prod0\\r\\n        uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n        uint256 prod1; // Most significant 256 bits of the product\\r\\n        assembly {\\r\\n            let mm := mulmod(a, b, not(0))\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        // Make sure the result is less than 2**256.\\r\\n        // Also prevents denominator == 0\\r\\n        require(denominator > prod1);\\r\\n\\r\\n        // Handle non-overflow cases, 256 by 256 division\\r\\n        if (prod1 == 0) {\\r\\n            assembly {\\r\\n                result := div(prod0, denominator)\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        ///////////////////////////////////////////////\\r\\n        // 512 by 256 division.\\r\\n        ///////////////////////////////////////////////\\r\\n\\r\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n        // Compute remainder using mulmod\\r\\n        // Subtract 256 bit remainder from 512 bit number\\r\\n        assembly {\\r\\n            let remainder := mulmod(a, b, denominator)\\r\\n            prod1 := sub(prod1, gt(remainder, prod0))\\r\\n            prod0 := sub(prod0, remainder)\\r\\n        }\\r\\n\\r\\n        // Factor powers of two out of denominator\\r\\n        // Compute largest power of two divisor of denominator.\\r\\n        // Always >= 1.\\r\\n        uint256 twos = denominator & (~denominator + 1);\\r\\n        // Divide denominator by power of two\\r\\n        assembly {\\r\\n            denominator := div(denominator, twos)\\r\\n        }\\r\\n\\r\\n        // Divide [prod1 prod0] by the factors of two\\r\\n        assembly {\\r\\n            prod0 := div(prod0, twos)\\r\\n        }\\r\\n        // Shift in bits from prod1 into prod0. For this we need\\r\\n        // to flip `twos` such that it is 2**256 / twos.\\r\\n        // If twos is zero, then it becomes one\\r\\n        assembly {\\r\\n            twos := add(div(sub(0, twos), twos), 1)\\r\\n        }\\r\\n        prod0 |= prod1 * twos;\\r\\n\\r\\n        // Invert denominator mod 2**256\\r\\n        // Now that denominator is an odd number, it has an inverse\\r\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n        // Compute the inverse by starting with a seed that is correct\\r\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n        uint256 inv = (3 * denominator) ^ 2;\\r\\n        // Now use Newton-Raphson iteration to improve the precision.\\r\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n        // arithmetic, doubling the correct bits in each step.\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n        // Because the division is now exact we can divide by multiplying\\r\\n        // with the modular inverse of denominator. This will give us the\\r\\n        // correct result modulo 2**256. Since the preconditions guarantee\\r\\n        // that the outcome is less than 2**256, this is the final result.\\r\\n        // We don't need to compute the high bits of the result and prod1\\r\\n        // is no longer required.\\r\\n        result = prod0 * inv;\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    function mulDivRoundingUp(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        if (a == 0 || ((result = a * b) / a == b)) {\\r\\n            require(denominator > 0);\\r\\n            assembly {\\r\\n                result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n            }\\r\\n        } else {\\r\\n            result = mulDiv(a, b, denominator);\\r\\n            if (mulmod(a, b, denominator) > 0) {\\r\\n                require(result < type(uint256).max);\\r\\n                result++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns ceil(x / y)\\r\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n    /// @param x The dividend\\r\\n    /// @param y The divisor\\r\\n    /// @return z The quotient, ceil(x / y)\\r\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            z := add(div(x, y), gt(mod(x, y), 0))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary Constants {\\r\\n    uint8 internal constant RESOLUTION = 96;\\r\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\r\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\r\\n    // fee value in hundredths of a bip, i.e. 1e-6\\r\\n    uint16 internal constant BASE_FEE = 100;\\r\\n    int24 internal constant TICK_SPACING = 60;\\r\\n\\r\\n    // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\r\\n    uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;\\r\\n\\r\\n    uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\r\\n    uint8 internal constant MAX_COMMUNITY_FEE = 250;\\r\\n    uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\\r\\n        // get abs value\\r\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n        //TODO uncomment\\r\\n        //require(absTick <= uint256(MAX_TICK), 'T');\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        price = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param price The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(price >= MIN_SQRT_RATIO && price < MAX_SQRT_RATIO, 'R');\\r\\n        uint256 ratio = uint256(price) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IFarmingCenter is IERC721 {\\r\\n    struct VirtualPoolAddresses {\\r\\n        address eternalVirtualPool;\\r\\n        address limitVirtualPool;\\r\\n    }\\r\\n\\r\\n    /// @param rewardToken The token being distributed as a reward\\r\\n    /// @param bonusRewardToken The bonus token being distributed as a reward\\r\\n    /// @param pool The Algebra pool\\r\\n    /// @param startTime The time when the incentive program begins\\r\\n    /// @param endTime The time when rewards stop accruing\\r\\n    struct IncentiveKey {\\r\\n        IERC20Minimal rewardToken;\\r\\n        IERC20Minimal bonusRewardToken;\\r\\n        IAlgebraPool pool;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n    }\\r\\n\\r\\n    function virtualPoolAddresses(address) external view returns (address, address);\\r\\n\\r\\n    /// @notice The nonfungible position manager with which this farming contract is compatible\\r\\n    function nonfungiblePositionManager() external view returns (INonfungiblePositionManager);\\r\\n\\r\\n    function l2Nfts(uint256)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint96 nonce,\\r\\n        address operator,\\r\\n        uint256 tokenId\\r\\n    );\\r\\n\\r\\n    /// @notice Returns information about a deposited NFT\\r\\n    /// @param tokenId The ID of the deposit (and token) that is being transferred\\r\\n    /// @return L2TokenId The nft layer2 id,\\r\\n    /// numberOfFarms The number of farms,\\r\\n    /// inLimitFarming The parameter showing if the token is in the limit farm,\\r\\n    /// owner The owner of deposit\\r\\n    function deposits(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 L2TokenId,\\r\\n        uint32 numberOfFarms,\\r\\n        bool inLimitFarming,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    /// @notice Updates activeIncentive in AlgebraPool\\r\\n    /// @dev only farming can do it\\r\\n    /// @param pool The AlgebraPool for which farming was created\\r\\n    /// @param virtualPool The virtual pool to be connected\\r\\n    function connectVirtualPool(IAlgebraPool pool, address virtualPool) external;\\r\\n\\r\\n    /// @notice Enters in incentive (time-limited or eternal farming) with NFT-position token\\r\\n    /// @dev token must be deposited in FarmingCenter\\r\\n    /// @param key The incentive event key\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @param tokensLocked Amount of tokens to lock for liquidity multiplier (if tiers are used)\\r\\n    /// @param isLimit Is incentive time-limited or eternal\\r\\n    function enterFarming(\\r\\n        IncentiveKey memory key,\\r\\n        uint256 tokenId,\\r\\n        uint256 tokensLocked,\\r\\n        bool isLimit\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exits from incentive (time-limited or eternal farming) with NFT-position token\\r\\n    /// @param key The incentive event key\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @param isLimit Is incentive time-limited or eternal\\r\\n    function exitFarming(\\r\\n        IncentiveKey memory key,\\r\\n        uint256 tokenId,\\r\\n        bool isLimit\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\r\\n    /// @dev \\\"proxies\\\" to NonfungiblePositionManager\\r\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\r\\n    /// recipient The account that should receive the tokens,\\r\\n    /// amount0Max The maximum amount of token0 to collect,\\r\\n    /// amount1Max The maximum amount of token1 to collect\\r\\n    /// @return amount0 The amount of fees collected in token0\\r\\n    /// @return amount1 The amount of fees collected in token1\\r\\n    function collect(INonfungiblePositionManager.CollectParams calldata params)\\r\\n    external\\r\\n    returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice Used to collect reward from eternal farming. Then reward can be claimed.\\r\\n    /// @param key The incentive event key\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @return reward The amount of collected reward\\r\\n    /// @return bonusReward The amount of collected  bonus reward\\r\\n    function collectRewards(IncentiveKey memory key, uint256 tokenId)\\r\\n    external\\r\\n    returns (uint256 reward, uint256 bonusReward);\\r\\n\\r\\n    /// @notice Used to claim and send rewards from farming(s)\\r\\n    /// @dev can be used via static call to get current rewards for user\\r\\n    /// @param rewardToken The token that is a reward\\r\\n    /// @param to The address to be rewarded\\r\\n    /// @param amountRequestedIncentive Amount to claim in incentive (limit) farming\\r\\n    /// @param amountRequestedEternal Amount to claim in eternal farming\\r\\n    /// @return reward The summary amount of claimed rewards\\r\\n    function claimReward(\\r\\n        IERC20Minimal rewardToken,\\r\\n        address to,\\r\\n        uint256 amountRequestedIncentive,\\r\\n        uint256 amountRequestedEternal\\r\\n    ) external returns (uint256 reward);\\r\\n\\r\\n    /// @notice Withdraw Algebra NFT-position token\\r\\n    /// @dev can be used via static call to get current rewards for user\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @param to New owner of position NFT\\r\\n    /// @param data The additional data for NonfungiblePositionManager\\r\\n    function withdrawToken(\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Emitted when ownership of a deposit changes\\r\\n    /// @param tokenId The ID of the deposit (and token) that is being transferred\\r\\n    /// @param oldOwner The owner before the deposit was transferred\\r\\n    /// @param newOwner The owner after the deposit was transferred\\r\\n    event DepositTransferred(uint256 indexed tokenId, address indexed oldOwner, address indexed newOwner);\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Minimal ERC20 interface for Algebra\\r\\n/// @notice Contains a subset of the full ERC20 interface that is used in Algebra\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IERC20Minimal {\\r\\n    /// @notice Returns the balance of a token\\r\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\r\\n    /// @return The number of tokens held by the account\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\r\\n    /// @param recipient The account that will receive the amount transferred\\r\\n    /// @param amount The number of tokens to send from the sender to the recipient\\r\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /// @notice Returns the current allowance given to a spender by an owner\\r\\n    /// @param owner The account of the token owner\\r\\n    /// @param spender The account of the token spender\\r\\n    /// @return The current allowance granted by `owner` to `spender`\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\r\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\r\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\r\\n    /// @return Returns true for a successful approval, false for unsuccessful\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\r\\n    /// @param sender The account from which the transfer will be initiated\\r\\n    /// @param recipient The recipient of the transfer\\r\\n    /// @param amount The amount of the transfer\\r\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\r\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\r\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\r\\n    /// @param value The amount of tokens that were transferred\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\r\\n    /// @param owner The account that approved spending of its tokens\\r\\n    /// @param spender The account for which the spending allowance was modified\\r\\n    /// @param value The new allowance from the owner to the spender\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IDragonLair is IERC20 {\\r\\n\\r\\n    function quick() external;\\r\\n\\r\\n    // Enter the lair. Pay some QUICK. Earn some dragon QUICK.\\r\\n    function enter(uint256 _quickAmount) external;\\r\\n\\r\\n    // Leave the lair. Claim back your QUICK.\\r\\n    function leave(uint256 _dQuickAmount) external;\\r\\n\\r\\n    // returns the total amount of QUICK an address has in the contract including fees earned\\r\\n    function QUICKBalance(address _account) external view returns (uint256 quickAmount_);\\r\\n\\r\\n    //returns how much QUICK someone gets for depositing dQUICK\\r\\n    function dQUICKForQUICK(uint256 _dQuickAmount) external view returns (uint256 quickAmount_);\\r\\n\\r\\n    //returns how much dQUICK someone gets for depositing QUICK\\r\\n    function QUICKForDQUICK(uint256 _quickAmount) external view returns (uint256 dQuickAmount_);\\r\\n}\",\"keccak256\":\"0xd83b167fcc24ec09583f3ed3b4634daba4bc11692838da32c6990019924be096\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Synapse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface ISwap {\\r\\n    // pool data view functions\\r\\n    function getA() external view returns (uint256);\\r\\n\\r\\n    function getToken(uint8 index) external view returns (IERC20);\\r\\n\\r\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\r\\n\\r\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n    function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n    // min return calculation functions\\r\\n    function calculateSwap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n    function calculateRemoveLiquidity(uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n    function calculateRemoveLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex\\r\\n    ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n    // state modifying functions\\r\\n    function initialize(\\r\\n        IERC20[] memory pooledTokens,\\r\\n        uint8[] memory decimals,\\r\\n        string memory lpTokenName,\\r\\n        string memory lpTokenSymbol,\\r\\n        uint256 a,\\r\\n        uint256 fee,\\r\\n        uint256 adminFee,\\r\\n        address lpTokenTargetAddress\\r\\n    ) external;\\r\\n\\r\\n    function swap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx,\\r\\n        uint256 minDy,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 minToMint,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 amount,\\r\\n        uint256[] calldata minAmounts,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function removeLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex,\\r\\n        uint256 minAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidityImbalance(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 maxBurnAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IMiniChefV2 {\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint128 accSynapsePerShare;\\r\\n        uint64 lastRewardTime;\\r\\n        uint64 allocPoint;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\r\\n\\r\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function harvest(uint256 pid, address to) external;\\r\\n\\r\\n    function withdrawAndHarvest(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid, address to) external;\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract SynapseExchange {\\r\\n\\r\\n    ISwap private synapseSwap;\\r\\n\\r\\n    function _setSynapseSwap(address _synapseSwap) internal {\\r\\n        synapseSwap = ISwap(_synapseSwap);\\r\\n    }\\r\\n\\r\\n    function _synapseCalculateSwap(\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        uint256 dx\\r\\n    ) internal view returns (uint256) {\\r\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\r\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\r\\n        return synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\r\\n    }\\r\\n\\r\\n    function _synapseSwap(\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        uint256 dx\\r\\n    ) internal returns (uint256) {\\r\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\r\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\r\\n        uint256 minDy = synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\r\\n        if (minDy == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        IERC20(tokenFrom).approve(address(synapseSwap), dx);\\r\\n        return synapseSwap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, block.timestamp);\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SynapseLibrary {\\r\\n\\r\\n    function calculateSwap(\\r\\n        ISwap synapseSwap,\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        uint256 dx\\r\\n    ) internal view returns (uint256) {\\r\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\r\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\r\\n        return synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        ISwap synapseSwap,\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        uint256 dx\\r\\n    ) internal returns (uint256) {\\r\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\r\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\r\\n        uint256 minDy = synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\r\\n        if (minDy == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        IERC20(tokenFrom).approve(address(synapseSwap), dx);\\r\\n        return synapseSwap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmount0(\\r\\n        ISwap synapseSwap,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amount0) {\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = calculateSwap(synapseSwap, token0, token1, amount0);\\r\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        ISwap synapseSwap,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Total,\\r\\n        uint256 totalAmountLpTokens,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\r\\n            uint256 amount0 = calculateSwap(synapseSwap, token1, token0, amount1);\\r\\n            amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amounts of token0 and token1 nominated in token2 where amount2Total is total getting amount nominated in token2\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmounts(\\r\\n        ISwap synapseSwap,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address token2,\\r\\n        uint256 amount2Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amount0InToken2, uint256 amount1InToken2) {\\r\\n        amount0InToken2 = (amount2Total * reserve0) / (reserve0 + reserve1 * amount0 / amount1);\\r\\n        console.log(\\\"amount0InToken2: %s\\\", amount0InToken2);\\r\\n        amount1InToken2 = amount2Total - amount0InToken2;\\r\\n        console.log(\\\"amount1InToken2: %s\\\", amount1InToken2);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            amount0 = calculateSwap(synapseSwap, token2, token0, amount0InToken2);\\r\\n            console.log(\\\"amount0: %s\\\", amount0);\\r\\n            amount1 = calculateSwap(synapseSwap, token2, token1, amount1InToken2);\\r\\n            console.log(\\\"amount1: %s\\\", amount1);\\r\\n            amount0InToken2 = (amount2Total * reserve0) / (reserve0 + reserve1 * amount0 / amount1);\\r\\n            console.log(\\\"amount0InToken2 %s: %s\\\", i, amount0InToken2);\\r\\n            amount1InToken2 = amount2Total - amount0InToken2;\\r\\n            console.log(\\\"amount1InToken2 %s: %s\\\", i, amount1InToken2);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount2Total is total getting amount nominated in token2\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        ISwap synapseSwap,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address token2,\\r\\n        uint256 amount2Total,\\r\\n        uint256 totalAmountLpTokens,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = 0;\\r\\n        for (uint i = 0; i < precision + 1; i++) {\\r\\n            uint256 amount0InToken2 = reserve0 * amount2Total / (reserve0 + reserve1 * amount0 / amount1);\\r\\n            console.log(\\\"amount0InToken2: %s\\\", amount0InToken2);\\r\\n            amount0 = calculateSwap(synapseSwap, token2, token0, amount0InToken2);\\r\\n            console.log(\\\"amount0: %s\\\", amount0);\\r\\n            amount1 = calculateSwap(synapseSwap, token2, token1, amount2Total - amount0InToken2);\\r\\n            console.log(\\\"amount1: %s\\\", amount1);\\r\\n            amountLpTokens = (totalAmountLpTokens * (amount0 + amount1 * reserve0 / reserve1)) / (reserve0 + reserve1 * amount0 / amount1);\\r\\n            console.log(\\\"amountLpTokens %s: %s\\\", i, amountLpTokens);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x069dbe0bb116e4f1584d6f552c2a019850dd02b93993b0fb048ac99ce01e854e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/UniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router01.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\r\\n */\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\r\\n */\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract UniswapV2Exchange {\\r\\n\\r\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 4;\\r\\n\\r\\n    IUniswapV2Router02 private uniswapRouter;\\r\\n\\r\\n    function _setUniswapRouter(address _uniswapRouter) internal {\\r\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\r\\n    }\\r\\n\\r\\n    function _swapExactTokensForTokens(\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(uniswapRouter), amountInput);\\r\\n\\r\\n        uint256 amountOutMin = _getAmountsOut(inputToken, outputToken, amountInput);\\r\\n        if (amountOutMin == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = uniswapRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            OvnMath.subBasisPoints(amountOutMin, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function _getAmountsOut(\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = uniswapRouter.getAmountsOut(amountInput, path);\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\r\\n\\r\\n        IERC20(tokenA).approve(address(uniswapRouter), amountADesired);\\r\\n        IERC20(tokenB).approve(address(uniswapRouter), amountBDesired);\\r\\n\\r\\n        return uniswapRouter.addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            amountADesired,\\r\\n            amountBDesired,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address lpToken,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB) {\\r\\n\\r\\n        IERC20(lpToken).approve(address(uniswapRouter), liquidity);\\r\\n\\r\\n        return uniswapRouter.removeLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        IUniswapV2Router02 uniswapRouter,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address to\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(uniswapRouter), amountInput);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = uniswapRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(\\r\\n        IUniswapV2Router02 uniswapRouter,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = uniswapRouter.getAmountsOut(amountInput, path);\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb055a96fd58184726272fa50a21a7751ba8301b92cdd6a5cc07cf72e469e2a90\",\"license\":\"GPL-2.0-or-later\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(UPGRADER_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 withdrawAmount;\\r\\n        if (_targetIsZero) {\\r\\n            uint256 totalAsset = _claimRewards(_beneficiary);\\r\\n            if (totalAsset > 0) {\\r\\n                emit Reward(totalAsset);\\r\\n            }\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 totalAsset = _claimRewards(_to);\\r\\n        if (totalAsset > 0) {\\r\\n            emit Reward(totalAsset);\\r\\n        }\\r\\n        return totalAsset;\\r\\n    }\\r\\n\\r\\n    function healthFactorBalance() external override onlyPortfolioManager {\\r\\n        uint256 healthFactor = _healthFactorBalance();\\r\\n        if (healthFactor > 0) {\\r\\n            emit BalanceHealthFactor(healthFactor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\r\\n        _setHealthFactor(healthFactor);\\r\\n        emit SetHealthFactor(healthFactor);\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\r\\n\\r\\n    }\\r\\n\\r\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\r\\n\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x0de3c60c48ceb4ee886aa3e54508bb60bd59014acf9c50a9d316763d228d8b38\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    event BalanceHealthFactor(uint256 healthFactor);\\r\\n    event SetHealthFactor(uint256 healthFactor);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n    function healthFactorBalance() external;\\r\\n\\r\\n    function setHealthFactor(uint256 healthFactor) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6f594531cead6f7549b468eaae509fc9e84fade6e8f337f8de1c6d7927d7e878\",\"license\":\"GPL-3.0\"},\"contracts/StrategyQuickSwapV3UsdcUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Synapse.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/QuickSwapV3.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/UniswapV2.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\r\\n\\r\\n\\r\\ncontract StrategyQuickSwapV3UsdcUsdt is Strategy, IERC721Receiver {\\r\\n\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address usdcToken;\\r\\n        address usdtToken;\\r\\n        address wmaticToken;\\r\\n        address dquickToken;\\r\\n        address quickToken;\\r\\n        address nonfungiblePositionManager;\\r\\n        address farmingCenter;\\r\\n        address pool;\\r\\n        address synapseSwapRouter;\\r\\n        address quickSwapRouter;\\r\\n        address oracleUsdc;\\r\\n        address oracleUsdt;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    // --- params\\r\\n\\r\\n    IERC20 public usdcToken;\\r\\n    IERC20 public usdtToken;\\r\\n    IERC20 public wmaticToken;\\r\\n    IDragonLair public dquickToken;\\r\\n    IERC20 public quickToken;\\r\\n\\r\\n    INonfungiblePositionManager public nonfungiblePositionManager;\\r\\n    IFarmingCenter public farmingCenter;\\r\\n    IAlgebraPool public pool;\\r\\n\\r\\n    ISwap public synapseSwapRouter;\\r\\n    IUniswapV2Router02 public quickSwapRouter;\\r\\n\\r\\n    IPriceFeed public oracleUsdc;\\r\\n    IPriceFeed public oracleUsdt;\\r\\n\\r\\n    int24 public tickLower;\\r\\n    int24 public tickUpper;\\r\\n\\r\\n    uint256 public usdcTokenDenominator;\\r\\n    uint256 public usdtTokenDenominator;\\r\\n\\r\\n    uint256 public tokenId;\\r\\n\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        usdcToken = IERC20(params.usdcToken);\\r\\n        usdtToken = IERC20(params.usdtToken);\\r\\n        wmaticToken = IERC20(params.wmaticToken);\\r\\n        dquickToken = IDragonLair(params.dquickToken);\\r\\n        quickToken = IERC20(params.quickToken);\\r\\n\\r\\n        nonfungiblePositionManager = INonfungiblePositionManager(params.nonfungiblePositionManager);\\r\\n        farmingCenter = IFarmingCenter(params.farmingCenter);\\r\\n        pool = IAlgebraPool(params.pool);\\r\\n\\r\\n        synapseSwapRouter = ISwap(params.synapseSwapRouter);\\r\\n        quickSwapRouter = IUniswapV2Router02(params.quickSwapRouter);\\r\\n\\r\\n        oracleUsdc = IPriceFeed(params.oracleUsdc);\\r\\n        oracleUsdt = IPriceFeed(params.oracleUsdt);\\r\\n\\r\\n        tickLower = params.tickLower;\\r\\n        tickUpper = params.tickUpper;\\r\\n\\r\\n        usdcTokenDenominator = 10 ** IERC20Metadata(params.usdcToken).decimals();\\r\\n        usdtTokenDenominator = 10 ** IERC20Metadata(params.usdcToken).decimals();\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n\\r\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\r\\n\\r\\n        uint128 totalLiquidity = pool.liquidity();\\r\\n        (uint256 amount0, uint256 amount1) = _getAmounts(totalLiquidity);\\r\\n        require(amount0 > 10 ** 3 && amount1 > 10 ** 3, 'Liquidity reserves too low');\\r\\n\\r\\n        if (tokenId != 0) {\\r\\n            // if we already farming then exit farm\\r\\n            if (farmingCenter.balanceOf(address(this)) == 1) {\\r\\n                _exitFarm();\\r\\n            }\\r\\n\\r\\n            _collectFees();\\r\\n        }\\r\\n\\r\\n        // count amount usdt to swap\\r\\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\\r\\n        uint256 amountUsdcFromUsdt;\\r\\n        if (usdtBalance > 0) {\\r\\n            amountUsdcFromUsdt = SynapseLibrary.calculateSwap(\\r\\n                synapseSwapRouter,\\r\\n                address(usdtToken),\\r\\n                address(usdcToken),\\r\\n                usdtBalance\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\r\\n        uint256 amountUsdcToSwap;\\r\\n        if (usdcBalance > 0) {\\r\\n            amountUsdcToSwap = SynapseLibrary.getAmount0(\\r\\n                synapseSwapRouter,\\r\\n                address(usdcToken),\\r\\n                address(usdtToken),\\r\\n                usdcBalance - amountUsdcFromUsdt,\\r\\n                amount0,\\r\\n                amount1,\\r\\n                usdcTokenDenominator,\\r\\n                usdtTokenDenominator,\\r\\n                1\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // swap usdc to usdt\\r\\n        SynapseLibrary.swap(\\r\\n            synapseSwapRouter,\\r\\n            address(usdcToken),\\r\\n            address(usdtToken),\\r\\n            amountUsdcToSwap\\r\\n        );\\r\\n\\r\\n        // increase liquidity\\r\\n        usdcBalance = usdcToken.balanceOf(address(this));\\r\\n        usdtBalance = usdtToken.balanceOf(address(this));\\r\\n        usdcToken.approve(address(nonfungiblePositionManager), usdcBalance);\\r\\n        usdtToken.approve(address(nonfungiblePositionManager), usdtBalance);\\r\\n\\r\\n        if (tokenId == 0) {\\r\\n            INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\\r\\n                token0: address(usdcToken),\\r\\n                token1: address(usdtToken),\\r\\n                tickLower: tickLower,\\r\\n                tickUpper: tickUpper,\\r\\n                amount0Desired: usdcBalance,\\r\\n                amount1Desired: usdtBalance,\\r\\n                amount0Min: usdcBalance * 99 / 100,\\r\\n                amount1Min: usdtBalance * 99 / 100,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp\\r\\n            });\\r\\n\\r\\n            (tokenId,,,) = nonfungiblePositionManager.mint(params);\\r\\n\\r\\n            _enterFarm();\\r\\n\\r\\n        } else {\\r\\n            INonfungiblePositionManager.IncreaseLiquidityParams memory params = INonfungiblePositionManager.IncreaseLiquidityParams({\\r\\n                tokenId: tokenId,\\r\\n                amount0Desired: usdcBalance,\\r\\n                amount1Desired: usdtBalance,\\r\\n                amount0Min: usdcBalance * 99 / 100,\\r\\n                amount1Min: usdtBalance * 99 / 100,\\r\\n                deadline: block.timestamp\\r\\n            });\\r\\n\\r\\n            nonfungiblePositionManager.increaseLiquidity(params);\\r\\n\\r\\n            // if we are not farming then enter farm\\r\\n            if (farmingCenter.balanceOf(address(this)) == 0) {\\r\\n                _enterFarm();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\r\\n\\r\\n        uint128 totalLiquidity = pool.liquidity();\\r\\n        (uint256 amount0, uint256 amount1) = _getAmounts(totalLiquidity);\\r\\n        require(amount0 > 10 ** 3 && amount1 > 10 ** 3, 'Liquidity reserves too low');\\r\\n\\r\\n        // if enough free usdc to unstake\\r\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\r\\n        if (usdcBalance >= _amount) {\\r\\n            return usdcBalance;\\r\\n        }\\r\\n\\r\\n        (,,,,,, uint128 liquidity,,,,) = nonfungiblePositionManager.positions(tokenId);\\r\\n        if (liquidity > 0) {\\r\\n\\r\\n            _exitFarm();\\r\\n\\r\\n            // count amount to unstake\\r\\n            uint256 liquidityToWithdraw = SynapseLibrary.getAmountLpTokens(\\r\\n                synapseSwapRouter,\\r\\n                address(usdcToken),\\r\\n                address(usdtToken),\\r\\n                // add 10 to _amount for smooth withdraw\\r\\n                _amount + 10,\\r\\n                uint256(totalLiquidity),\\r\\n                amount0,\\r\\n                amount1,\\r\\n                usdcTokenDenominator,\\r\\n                usdtTokenDenominator,\\r\\n                1\\r\\n            );\\r\\n\\r\\n            // decrease liquidity\\r\\n            INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n                tokenId: tokenId,\\r\\n                liquidity: uint128(liquidityToWithdraw),\\r\\n                amount0Min: amount0 * liquidityToWithdraw / totalLiquidity * 99 / 100,\\r\\n                amount1Min: amount1 * liquidityToWithdraw / totalLiquidity * 99 / 100,\\r\\n                deadline: block.timestamp\\r\\n            });\\r\\n\\r\\n            nonfungiblePositionManager.decreaseLiquidity(params);\\r\\n\\r\\n            _collectFees();\\r\\n\\r\\n            (,,,,,, liquidity,,,,) = nonfungiblePositionManager.positions(tokenId);\\r\\n            if (liquidity > 0) {\\r\\n                _enterFarm();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // swap usdt to usdc\\r\\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\\r\\n        if (usdtBalance > 0) {\\r\\n            uint256 amountUsdcFromUsdt = SynapseLibrary.calculateSwap(\\r\\n                synapseSwapRouter,\\r\\n                address(usdtToken),\\r\\n                address(usdcToken),\\r\\n                usdtBalance\\r\\n            );\\r\\n\\r\\n            if (amountUsdcFromUsdt > 0) {\\r\\n                SynapseLibrary.swap(\\r\\n                    synapseSwapRouter,\\r\\n                    address(usdtToken),\\r\\n                    address(usdcToken),\\r\\n                    usdtBalance\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdcToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\r\\n\\r\\n        uint128 totalLiquidity = pool.liquidity();\\r\\n        (uint256 amount0, uint256 amount1) = _getAmounts(totalLiquidity);\\r\\n        require(amount0 > 10 ** 3 && amount1 > 10 ** 3, 'Liquidity reserves too low');\\r\\n\\r\\n        (,,,,,, uint128 liquidity,,,,) = nonfungiblePositionManager.positions(tokenId);\\r\\n        if (liquidity > 0) {\\r\\n\\r\\n            _exitFarm();\\r\\n\\r\\n            // decrease liquidity\\r\\n            INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n                tokenId: tokenId,\\r\\n                liquidity: uint128(liquidity),\\r\\n                amount0Min: amount0 * liquidity / totalLiquidity * 99 / 100,\\r\\n                amount1Min: amount1 * liquidity / totalLiquidity * 99 / 100,\\r\\n                deadline: block.timestamp\\r\\n            });\\r\\n\\r\\n            nonfungiblePositionManager.decreaseLiquidity(params);\\r\\n\\r\\n            _collectFees();\\r\\n\\r\\n            (,,,,,, liquidity,,,,) = nonfungiblePositionManager.positions(tokenId);\\r\\n            if (liquidity > 0) {\\r\\n                _enterFarm();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // swap usdt to usdc\\r\\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\\r\\n        if (usdtBalance > 0) {\\r\\n            uint256 amountUsdcFromUsdt = SynapseLibrary.calculateSwap(\\r\\n                synapseSwapRouter,\\r\\n                address(usdtToken),\\r\\n                address(usdcToken),\\r\\n                usdtBalance\\r\\n            );\\r\\n\\r\\n            if (amountUsdcFromUsdt > 0) {\\r\\n                SynapseLibrary.swap(\\r\\n                    synapseSwapRouter,\\r\\n                    address(usdtToken),\\r\\n                    address(usdcToken),\\r\\n                    usdtBalance\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdcToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue(true);\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue(false);\\r\\n    }\\r\\n\\r\\n    function _totalValue(bool nav) internal view returns (uint256) {\\r\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\r\\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\\r\\n\\r\\n        if (tokenId > 0) {\\r\\n            (,,,,,, uint128 liquidity,,,,) = nonfungiblePositionManager.positions(tokenId);\\r\\n            if (liquidity > 0) {\\r\\n                (uint256 amount0, uint256 amount1) = _getAmounts(liquidity);\\r\\n                usdcBalance += amount0;\\r\\n                usdtBalance += amount1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 usdcBalanceFromUsdt;\\r\\n        if (usdtBalance > 0) {\\r\\n            if (nav) {\\r\\n                uint256 priceUsdc = uint256(oracleUsdc.latestAnswer());\\r\\n                uint256 priceUsdt = uint256(oracleUsdt.latestAnswer());\\r\\n                usdcBalanceFromUsdt = (usdtBalance * usdcTokenDenominator * priceUsdt) / (usdtTokenDenominator * priceUsdc);\\r\\n            } else {\\r\\n                usdcBalanceFromUsdt = SynapseLibrary.calculateSwap(\\r\\n                    synapseSwapRouter,\\r\\n                    address(usdtToken),\\r\\n                    address(usdcToken),\\r\\n                    usdtBalance\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdcBalance + usdcBalanceFromUsdt;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        if (tokenId == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // collect fees\\r\\n        _exitFarm();\\r\\n        _collectFees();\\r\\n        _enterFarm();\\r\\n\\r\\n        // claim rewards\\r\\n        (,,,,,, uint128 liquidity,,,,) = nonfungiblePositionManager.positions(tokenId);\\r\\n        if (liquidity > 0) {\\r\\n            IFarmingCenter.IncentiveKey memory incentiveKey = _getIncentiveKey();\\r\\n            farmingCenter.collectRewards(incentiveKey, tokenId);\\r\\n            farmingCenter.claimReward(IERC20Minimal(address(dquickToken)), address(this), 0, type(uint256).max);\\r\\n            farmingCenter.claimReward(IERC20Minimal(address(wmaticToken)), address(this), 0, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 totalUsdc;\\r\\n\\r\\n        // convert dquick to quick\\r\\n        uint256 dquickBalance = dquickToken.balanceOf(address(this));\\r\\n        if (dquickBalance > 0) {\\r\\n            dquickToken.leave(dquickBalance);\\r\\n        }\\r\\n\\r\\n        // sell quick\\r\\n        uint256 quickBalance = quickToken.balanceOf(address(this));\\r\\n        if (quickBalance > 0) {\\r\\n            uint256 amountOutMin = UniswapV2Library.getAmountsOut(\\r\\n                quickSwapRouter,\\r\\n                address(quickToken),\\r\\n                address(usdcToken),\\r\\n                quickBalance\\r\\n            );\\r\\n\\r\\n            if (amountOutMin > 0) {\\r\\n                uint256 quickUsdc = UniswapV2Library.swapExactTokensForTokens(\\r\\n                    quickSwapRouter,\\r\\n                    address(quickToken),\\r\\n                    address(usdcToken),\\r\\n                    quickBalance,\\r\\n                    amountOutMin * 99 / 100,\\r\\n                    address(this)\\r\\n                );\\r\\n\\r\\n                totalUsdc += quickUsdc;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // sell wmatic\\r\\n        uint256 wmaticBalance = wmaticToken.balanceOf(address(this));\\r\\n        if (wmaticBalance > 0) {\\r\\n            uint256 amountOutMin = UniswapV2Library.getAmountsOut(\\r\\n                quickSwapRouter,\\r\\n                address(wmaticToken),\\r\\n                address(usdcToken),\\r\\n                wmaticBalance\\r\\n            );\\r\\n\\r\\n            if (amountOutMin > 0) {\\r\\n                uint256 wmaticUsdc = UniswapV2Library.swapExactTokensForTokens(\\r\\n                    quickSwapRouter,\\r\\n                    address(wmaticToken),\\r\\n                    address(usdcToken),\\r\\n                    wmaticBalance,\\r\\n                    amountOutMin * 99 / 100,\\r\\n                    address(this)\\r\\n                );\\r\\n\\r\\n                totalUsdc += wmaticUsdc;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (totalUsdc > 0) {\\r\\n            usdcToken.transfer(_to, totalUsdc);\\r\\n        }\\r\\n\\r\\n        return totalUsdc;\\r\\n    }\\r\\n\\r\\n    function _getAmounts(uint128 liquidity) internal view returns (uint256 amount0, uint256 amount1) {\\r\\n        (uint160 price,,,,,,) = pool.globalState();\\r\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\\r\\n            price,\\r\\n            TickMath.getSqrtRatioAtTick(tickLower),\\r\\n            TickMath.getSqrtRatioAtTick(tickUpper),\\r\\n            liquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _enterFarm() internal {\\r\\n        IFarmingCenter.IncentiveKey memory incentiveKey = _getIncentiveKey();\\r\\n\\r\\n        // transfer tokenId to farm\\r\\n        nonfungiblePositionManager.safeTransferFrom(address(this), address(farmingCenter), tokenId, \\\"\\\");\\r\\n\\r\\n        // enter farming\\r\\n        farmingCenter.enterFarming(incentiveKey, tokenId, 0, false);\\r\\n    }\\r\\n\\r\\n    function _exitFarm() internal {\\r\\n        IFarmingCenter.IncentiveKey memory incentiveKey = _getIncentiveKey();\\r\\n\\r\\n        // exit farming\\r\\n        farmingCenter.exitFarming(incentiveKey, tokenId, false);\\r\\n\\r\\n        // withdraw token\\r\\n        farmingCenter.withdrawToken(tokenId, address(this), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _getIncentiveKey() internal view returns (IFarmingCenter.IncentiveKey memory incentiveKey) {\\r\\n        incentiveKey = IFarmingCenter.IncentiveKey({\\r\\n            rewardToken: IERC20Minimal(address(dquickToken)),\\r\\n            bonusRewardToken: IERC20Minimal(address(wmaticToken)),\\r\\n            pool: pool,\\r\\n            startTime: uint256(1663631794),\\r\\n            endTime: uint256(4104559500)\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function _collectFees() internal {\\r\\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\\r\\n            tokenId: tokenId,\\r\\n            recipient: address(this),\\r\\n            amount0Max: type(uint128).max,\\r\\n            amount1Max: type(uint128).max\\r\\n        });\\r\\n\\r\\n        nonfungiblePositionManager.collect(collectParams);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x869c45efcbc3460f04d8711e0b81b680de2ef374d9d27441da86ad61aa7a5feb\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c80637d5f580211610139578063b44a2722116100b6578063dd56e5d81161007a578063dd56e5d8146106c9578063e189eb42146106ea578063ef5cfb8c1461070b578063f6f6b8811461072b578063f72c0d8b1461074b578063ffdc1f651461077f57600080fd5b8063b44a27221461062f578063ba97756b14610650578063c3bc6ff114610671578063cc6522c314610688578063d547741f146106a957600080fd5b8063a440b21a116100fd578063a440b21a1461058c578063a98ad46c146105ac578063abf4be01146105cd578063adc9772e146105ee578063aec2609d1461060e57600080fd5b80637d5f58021461050b5780638129fc1c1461052d57806391d1485414610542578063a217fddf14610562578063a3673b381461057757600080fd5b806331111708116101c757806355b812a81161018b57806355b812a81461045e57806359c4f905146104935780635fea9cbb146104b5578063620b75df146104d65780637b73aa4e146104f657600080fd5b806331111708146103d657806336568abe146103f65780633659cfe6146104165780634f1ef2861461043657806352d1902d1461044957600080fd5b806316f0115b1161020e57806316f0115b1461033957806317d70f7c1461035a578063248a9ca3146103715780632576e65a146103a15780632f2ff15d146103b657600080fd5b806301ffc9a71461024b57806306da3f2e1461028057806310c804b9146102a557806311eac855146102c7578063150b7a0214610300575b600080fd5b34801561025757600080fd5b5061026b610266366004614ffd565b6107a0565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102976101395481565b604051908152602001610277565b3480156102b157600080fd5b506102c56102c0366004615044565b6107d7565b005b3480156102d357600080fd5b5061012d546102e8906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b34801561030c57600080fd5b5061032061031b366004614d96565b610c32565b6040516001600160e01b03199091168152602001610277565b34801561034557600080fd5b50610134546102e8906001600160a01b031681565b34801561036657600080fd5b5061029761013b5481565b34801561037d57600080fd5b5061029761038c366004614f9b565b60009081526065602052604090206001015490565b3480156103ad57600080fd5b50610297610c43565b3480156103c257600080fd5b506102c56103d1366004614fcd565b610c54565b3480156103e257600080fd5b506102c56103f1366004614f9b565b610c7e565b34801561040257600080fd5b506102c5610411366004614fcd565b610ce9565b34801561042257600080fd5b506102c5610431366004614d79565b610d67565b6102c5610444366004614e02565b610e47565b34801561045557600080fd5b50610297610f14565b34801561046a57600080fd5b506101385461048090600160b81b900460020b81565b60405160029190910b8152602001610277565b34801561049f57600080fd5b506101385461048090600160a01b900460020b81565b3480156104c157600080fd5b50610137546102e8906001600160a01b031681565b3480156104e257600080fd5b5060fb546102e8906001600160a01b031681565b34801561050257600080fd5b506102c5610fc7565b34801561051757600080fd5b506102976000805160206159cf83398151915281565b34801561053957600080fd5b506102c5610ffd565b34801561054e57600080fd5b5061026b61055d366004614fcd565b61106b565b34801561056e57600080fd5b50610297600081565b34801561058357600080fd5b50610297611096565b34801561059857600080fd5b506102c56105a7366004614d79565b6110a2565b3480156105b857600080fd5b5061012e546102e8906001600160a01b031681565b3480156105d957600080fd5b5061012f546102e8906001600160a01b031681565b3480156105fa57600080fd5b506102c5610609366004614e52565b6111d1565b34801561061a57600080fd5b50610131546102e8906001600160a01b031681565b34801561063b57600080fd5b50610132546102e8906001600160a01b031681565b34801561065c57600080fd5b50610135546102e8906001600160a01b031681565b34801561067d57600080fd5b5061029761013a5481565b34801561069457600080fd5b50610138546102e8906001600160a01b031681565b3480156106b557600080fd5b506102c56106c4366004614fcd565b6112be565b3480156106d557600080fd5b50610133546102e8906001600160a01b031681565b3480156106f657600080fd5b50610136546102e8906001600160a01b031681565b34801561071757600080fd5b50610297610726366004614d79565b6112e3565b34801561073757600080fd5b50610297610746366004614e7e565b611368565b34801561075757600080fd5b506102977f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561078b57600080fd5b50610130546102e8906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806107d157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107e260003361106b565b61082a5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064015b60405180910390fd5b6108376020820182614d79565b61012d80546001600160a01b0319166001600160a01b03929092169190911790556108686040820160208301614d79565b61012e80546001600160a01b0319166001600160a01b03929092169190911790556108996060820160408301614d79565b61012f80546001600160a01b0319166001600160a01b03929092169190911790556108ca6080820160608301614d79565b61013080546001600160a01b0319166001600160a01b03929092169190911790556108fb60a0820160808301614d79565b61013180546001600160a01b0319166001600160a01b039290921691909117905561092c60c0820160a08301614d79565b61013280546001600160a01b0319166001600160a01b039290921691909117905561095d60e0820160c08301614d79565b61013380546001600160a01b0319166001600160a01b039290921691909117905561098f610100820160e08301614d79565b61013480546001600160a01b0319166001600160a01b03929092169190911790556109c261012082016101008301614d79565b61013580546001600160a01b0319166001600160a01b03929092169190911790556109f561014082016101208301614d79565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610a2861016082016101408301614d79565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610a5b61018082016101608301614d79565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610a8e6101a082016101808301615027565b610138805460029290920b62ffffff16600160a01b0262ffffff60a01b19909216919091179055610ac76101c082016101a08301615027565b610138805460029290920b62ffffff16600160b81b0262ffffff60b81b19909216919091179055610afb6020820182614d79565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b919061519c565b610b7690600a6157ac565b61013955610b876020820182614d79565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bbf57600080fd5b505afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf7919061519c565b610c0290600a6157ac565b61013a556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b630a85bd0160e11b5b949350505050565b6000610c4f6000611542565b905090565b600082815260656020526040902060010154610c6f816118b2565b610c7983836118bc565b505050565b610c966000805160206159cf8339815191523361106b565b610cb25760405162461bcd60e51b8152600401610821906153d3565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b0381163314610d595760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610821565b610d638282611942565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610db05760405162461bcd60e51b81526004016108219061540a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610df96000805160206159ef833981519152546001600160a01b031690565b6001600160a01b031614610e1f5760405162461bcd60e51b815260040161082190615456565b610e28816119a9565b60408051600080825260208201909252610e44918391906119d3565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e905760405162461bcd60e51b81526004016108219061540a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ed96000805160206159ef833981519152546001600160a01b031690565b6001600160a01b031614610eff5760405162461bcd60e51b815260040161082190615456565b610f08826119a9565b610d63828260016119d3565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fb45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610821565b506000805160206159ef83398151915290565b610fdf6000805160206159cf8339815191523361106b565b610ffb5760405162461bcd60e51b8152600401610821906153d3565b565b60006110096001611b4d565b90508015611021576000805461ff0019166101001790555b611029611bd5565b8015610e44576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610cde565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610c4f6001611542565b6110ad60003361106b565b6110f05760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610821565b6001600160a01b0381166111465760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610821565b60fb5461116b906000805160206159cf833981519152906001600160a01b03166112be565b6111836000805160206159cf83398151915282610c54565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610cde565b6111e96000805160206159cf8339815191523361106b565b6112055760405162461bcd60e51b8152600401610821906153d3565b6040516370a0823160e01b81523060048201526112879083906001600160a01b038216906370a082319060240160206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190614fb4565b611c3e565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b6000828152606560205260409020600101546112d9816118b2565b610c798383611942565b60006112fd6000805160206159cf8339815191523361106b565b6113195760405162461bcd60e51b8152600401610821906153d3565b600061132483612465565b90508015611360576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b60006113826000805160206159cf8339815191523361106b565b61139e5760405162461bcd60e51b8152600401610821906153d3565b600082156113ff5760006113b185612465565b905080156113ed576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b6113f78786612a88565b91505061146e565b61140a868686612f7a565b90508481101561146e5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610821565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b1580156114b857600080fd5b505af11580156114cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f09190614f7e565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c39190614fb4565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561160d57600080fd5b505afa158015611621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116459190614fb4565b61013b5490915015611721576101325461013b5460405163133f757160e31b815260048101919091526000916001600160a01b0316906399fbab88906024016101606040518083038186803b15801561169d57600080fd5b505afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d591906151b7565b5050505096505050505050506000816001600160801b0316111561171f576000806116ff8361353a565b909250905061170e828661573d565b945061171a818561573d565b935050505b505b6000811561189f5784156118765761013754604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561177557600080fd5b505afa158015611789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ad9190614fb4565b9050600061013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561180057600080fd5b505afa158015611814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118389190614fb4565b90508161013a546118499190615857565b8161013954866118599190615857565b6118639190615857565b61186d9190615755565b9250505061189f565b6101355461012e5461012d5461189c926001600160a01b03908116928116911685613613565b90505b6118a9818461573d565b95945050505050565b610e4481336137a7565b6118c6828261106b565b610d635760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61194c828261106b565b15610d635760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610d63816118b2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a0657610c798361380b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3f57600080fd5b505afa925050508015611a6f575060408051601f3d908101601f19168201909252611a6c91810190614fb4565b60015b611ad25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610821565b6000805160206159ef8339815191528114611b415760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610821565b50610c798383836138a7565b60008054610100900460ff1615611b94578160ff166001148015611b705750303b155b611b8c5760405162461bcd60e51b8152600401610821906154a2565b506000919050565b60005460ff808416911610611bbb5760405162461bcd60e51b8152600401610821906154a2565b506000805460ff191660ff92909216919091179055600190565b6000611be16001611b4d565b90508015611bf9576000805461ff0019166101001790555b611c016138d2565b611c096138d2565b611c146000336118bc565b6110297f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336118bc565b61012d546001600160a01b03838116911614611c6c5760405162461bcd60e51b815260040161082190615527565b6101345460408051630d34328160e11b815290516000926001600160a01b031691631a686502916004808301926020929190829003018186803b158015611cb257600080fd5b505afa158015611cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cea919061505d565b9050600080611cf88361353a565b915091506103e882118015611d0e57506103e881115b611d2a5760405162461bcd60e51b8152600401610821906154f0565b61013b5415611dc757610133546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611d7757600080fd5b505afa158015611d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daf9190614fb4565b60011415611dbf57611dbf61393d565b611dc7613a31565b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e0c57600080fd5b505afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e449190614fb4565b905060008115611e77576101355461012e5461012d54611e74926001600160a01b03908116928116911685613613565b90505b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ebc57600080fd5b505afa158015611ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef49190614fb4565b905060008115611f3c576101355461012d5461012e54611f39926001600160a01b039081169281169116611f28878761589e565b8a8a6101395461013a546001613afa565b90505b6101355461012d5461012e54611f62926001600160a01b03908116928116911684613ba5565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611fa757600080fd5b505afa158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdf9190614fb4565b61012e546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a082319060240160206040518083038186803b15801561202457600080fd5b505afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c9190614fb4565b61012d546101325460405163095ea7b360e01b81526001600160a01b03918216600482015260248101869052929650169063095ea7b390604401602060405180830381600087803b1580156120b057600080fd5b505af11580156120c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e89190614f7e565b5061012e546101325460405163095ea7b360e01b81526001600160a01b0391821660048201526024810187905291169063095ea7b390604401602060405180830381600087803b15801561213b57600080fd5b505af115801561214f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121739190614f7e565b5061013b546122bb57604080516101408101825261012d546001600160a01b03908116825261012e5416602082015261013854600160a01b8104600290810b810b93830193909352600160b81b9004820b90910b60608201526080810183905260a0810185905260009060c0810160646121ee866063615857565b6121f89190615755565b8152602001606461220a886063615857565b6122149190615755565b815230602082015242604091820152610132549051639cc1a28360e01b81529192506001600160a01b031690639cc1a2839061225490849060040161560c565b608060405180830381600087803b15801561226e57600080fd5b505af1158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a6919061513c565b50505061013b556122b5613e3b565b5061245a565b60006040518060c0016040528061013b54815260200184815260200186815260200160648560636122ec9190615857565b6122f69190615755565b81526020016064612308886063615857565b6123129190615755565b815242602091820152610132546040805163219f5d1760e01b8152845160048201529284015160248401528301516044830152606083015160648301526080830151608483015260a083015160a48301529192506001600160a01b039091169063219f5d179060c401606060405180830381600087803b15801561239557600080fd5b505af11580156123a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cd9190615078565b5050610133546040516370a0823160e01b81523060048201526001600160a01b0390911691506370a082319060240160206040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190614fb4565b61245857612458613e3b565b505b505050505050505050565b600061013b546000141561247b57506000919050565b61248361393d565b61248b613a31565b612493613e3b565b6101325461013b5460405163133f757160e31b815260048101919091526000916001600160a01b0316906399fbab88906024016101606040518083038186803b1580156124df57600080fd5b505afa1580156124f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251791906151b7565b5050505096505050505050506000816001600160801b031611156126ff57600061253f613f05565b6101335461013b546040516307cf0b0f60e31b81529293506001600160a01b0390911691633e78587891612578918591906004016155a1565b6040805180830381600087803b15801561259157600080fd5b505af11580156125a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c99190615178565b50506101335461013054604051633f46232960e21b81526001600160a01b03918216600482015230602482015260006044820152600019606482015291169063fd188ca490608401602060405180830381600087803b15801561262b57600080fd5b505af115801561263f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126639190614fb4565b506101335461012f54604051633f46232960e21b81526001600160a01b03918216600482015230602482015260006044820152600019606482015291169063fd188ca490608401602060405180830381600087803b1580156126c457600080fd5b505af11580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc9190614fb4565b50505b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127809190614fb4565b905080156127e857610130546040516367dfd4c960e01b8152600481018390526001600160a01b03909116906367dfd4c990602401600060405180830381600087803b1580156127cf57600080fd5b505af11580156127e3573d6000803e3d6000fd5b505050505b610131546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561282d57600080fd5b505afa158015612841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128659190614fb4565b905080156128f357610136546101315461012d54600092612897926001600160a01b0391821692908216911685613f7a565b905080156128f157610136546101315461012d546000926128e1926001600160a01b039182169290821691168660646128d1886063615857565b6128db9190615755565b306140a3565b90506128ed818661573d565b9450505b505b61012f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561293857600080fd5b505afa15801561294c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129709190614fb4565b905080156129ee576101365461012f5461012d546000926129a2926001600160a01b0391821692908216911685613f7a565b905080156129ec576101365461012f5461012d546000926129dc926001600160a01b039182169290821691168660646128d1886063615857565b90506129e8818761573d565b9550505b505b8315612a7d5761012d5460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018790529091169063a9059cbb90604401602060405180830381600087803b158015612a4357600080fd5b505af1158015612a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7b9190614f7e565b505b509195945050505050565b61012d546000906001600160a01b03848116911614612ab95760405162461bcd60e51b815260040161082190615527565b6101345460408051630d34328160e11b815290516000926001600160a01b031691631a686502916004808301926020929190829003018186803b158015612aff57600080fd5b505afa158015612b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b37919061505d565b9050600080612b458361353a565b915091506103e882118015612b5b57506103e881115b612b775760405162461bcd60e51b8152600401610821906154f0565b6101325461013b5460405163133f757160e31b815260048101919091526000916001600160a01b0316906399fbab88906024016101606040518083038186803b158015612bc357600080fd5b505afa158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb91906151b7565b5050505096505050505050506000816001600160801b03161115612e1157612c2161393d565b60006040518060a0016040528061013b548152602001836001600160801b031681526020016064876001600160801b0316856001600160801b031688612c679190615857565b612c719190615755565b612c7c906063615857565b612c869190615755565b81526020016064876001600160801b0316856001600160801b031687612cac9190615857565b612cb69190615755565b612cc1906063615857565b612ccb9190615755565b81524260209091015261013254604051630624e65f60e11b81529192506001600160a01b031690630c49ccbe90612d0690849060040161555e565b6040805180830381600087803b158015612d1f57600080fd5b505af1158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d579190615178565b5050612d61613a31565b6101325461013b5460405163133f757160e31b81526001600160a01b03909216916399fbab8891612d989160040190815260200190565b6101606040518083038186803b158015612db157600080fd5b505afa158015612dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de991906151b7565b50929a5050506001600160801b038916159650612e0f9550505050505057612e0f613e3b565b505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612e5657600080fd5b505afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614fb4565b90508015612ef2576101355461012e5461012d54600092612ec0926001600160a01b0391821692908216911685613613565b90508015612ef0576101355461012e5461012d54612eee926001600160a01b03908116928116911685613ba5565b505b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612f3657600080fd5b505afa158015612f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6e9190614fb4565b98975050505050505050565b61012d546000906001600160a01b03858116911614612fab5760405162461bcd60e51b815260040161082190615527565b6101345460408051630d34328160e11b815290516000926001600160a01b031691631a686502916004808301926020929190829003018186803b158015612ff157600080fd5b505afa158015613005573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613029919061505d565b90506000806130378361353a565b915091506103e88211801561304d57506103e881115b6130695760405162461bcd60e51b8152600401610821906154f0565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156130ae57600080fd5b505afa1580156130c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e69190614fb4565b90508681106130fa57935061353392505050565b6101325461013b5460405163133f757160e31b815260048101919091526000916001600160a01b0316906399fbab88906024016101606040518083038186803b15801561314657600080fd5b505afa15801561315a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317e91906151b7565b5050505096505050505050506000816001600160801b031611156133cd576131a461393d565b6101355461012d5461012e546000926131ee926001600160a01b039182169290821691166131d38d600a61573d565b8a6001600160801b03168a8a6101395461013a546001614259565b905060006040518060a0016040528061013b548152602001836001600160801b031681526020016064896001600160801b0316858a61322d9190615857565b6132379190615755565b613242906063615857565b61324c9190615755565b815260200160646001600160801b038a16613267868a615857565b6132719190615755565b61327c906063615857565b6132869190615755565b81524260209091015261013254604051630624e65f60e11b81529192506001600160a01b031690630c49ccbe906132c190849060040161555e565b6040805180830381600087803b1580156132da57600080fd5b505af11580156132ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133129190615178565b505061331c613a31565b6101325461013b5460405163133f757160e31b81526001600160a01b03909216916399fbab88916133539160040190815260200190565b6101606040518083038186803b15801561336c57600080fd5b505afa158015613380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a491906151b7565b50929b5050506001600160801b038a161596506133ca95505050505050576133ca613e3b565b50505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561341257600080fd5b505afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190614fb4565b905080156134ae576101355461012e5461012d5460009261347c926001600160a01b0391821692908216911685613613565b905080156134ac576101355461012e5461012d546134aa926001600160a01b03908116928116911685613ba5565b505b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156134f257600080fd5b505afa158015613506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352a9190614fb4565b96505050505050505b9392505050565b600080600061013460009054906101000a90046001600160a01b03166001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e06040518083038186803b15801561358e57600080fd5b505afa1580156135a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c691906150ad565b5050505050509050613608816135eb61013860149054906101000a900460020b614331565b6101385461360290600160b81b900460020b614331565b87614703565b909590945092505050565b6040516319b02f4960e21b81526001600160a01b03848116600483015260009182918716906366c0bd249060240160206040518083038186803b15801561365957600080fd5b505afa15801561366d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613691919061519c565b6040516319b02f4960e21b81526001600160a01b0386811660048301529192506000918816906366c0bd249060240160206040518083038186803b1580156136d857600080fd5b505afa1580156136ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613710919061519c565b60405163a95b089f60e01b815260ff808516600483015282166024820152604481018690529091506001600160a01b0388169063a95b089f9060640160206040518083038186803b15801561376457600080fd5b505afa158015613778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379c9190614fb4565b979650505050505050565b6137b1828261106b565b610d63576137c9816001600160a01b0316601461479f565b6137d483602061479f565b6040516020016137e592919061532b565b60408051601f198184030181529082905262461bcd60e51b8252610821916004016153a0565b6001600160a01b0381163b6138785760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610821565b6000805160206159ef83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6138b08361493b565b6000825111806138bd5750805b15610c79576138cc838361497b565b50505050565b600054610100900460ff16610ffb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610821565b6000613947613f05565b6101335461013b54604051630d099f2f60e21b81529293506001600160a01b03909116916334267cbc91613983918591906000906004016155bc565b600060405180830381600087803b15801561399d57600080fd5b505af11580156139b1573d6000803e3d6000fd5b50506101335461013b54604051633c423f0b60e01b8152600481019190915230602482015260606044820152600060648201526001600160a01b039091169250633c423f0b91506084015b600060405180830381600087803b158015613a1657600080fd5b505af1158015613a2a573d6000803e3d6000fd5b5050505050565b6040805160808101825261013b54815230602082019081526001600160801b038284018181526060840182815261013254955163fc6f786560e01b81528551600482015293516001600160a01b0390811660248601529151831660448501525190911660648301529192919091169063fc6f7865906084016040805180830381600087803b158015613ac257600080fd5b505af1158015613ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190615178565b60008484613b088589615857565b613b129190615755565b613b1c919061573d565b613b268689615857565b613b309190615755565b905060005b82811015613b97576000613b4b8c8c8c86613613565b90508683613b59838b615857565b613b639190615755565b613b6d919061573d565b613b77888b615857565b613b819190615755565b9250508080613b8f906158f8565b915050613b35565b509998505050505050505050565b6040516319b02f4960e21b81526001600160a01b03848116600483015260009182918716906366c0bd249060240160206040518083038186803b158015613beb57600080fd5b505afa158015613bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c23919061519c565b6040516319b02f4960e21b81526001600160a01b0386811660048301529192506000918816906366c0bd249060240160206040518083038186803b158015613c6a57600080fd5b505afa158015613c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca2919061519c565b60405163a95b089f60e01b815260ff808516600483015282166024820152604481018690529091506000906001600160a01b0389169063a95b089f9060640160206040518083038186803b158015613cf957600080fd5b505afa158015613d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d319190614fb4565b905080613d445760009350505050610c3b565b60405163095ea7b360e01b81526001600160a01b0389811660048301526024820187905288169063095ea7b390604401602060405180830381600087803b158015613d8e57600080fd5b505af1158015613da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dc69190614f7e565b506040516348b4aac360e11b815260ff80851660048301528316602482015260448101869052606481018290524260848201526001600160a01b0389169063916955869060a401602060405180830381600087803b158015613e2757600080fd5b505af1158015612f4a573d6000803e3d6000fd5b6000613e45613f05565b610132546101335461013b54604051635c46a7ef60e11b81523060048201526001600160a01b03928316602482015260448101919091526080606482015260006084820152929350169063b88d4fde9060a401600060405180830381600087803b158015613eb257600080fd5b505af1158015613ec6573d6000803e3d6000fd5b50506101335461013b54604051631143967160e11b81526001600160a01b0390921693506322872ce292506139fc9185919060009081906004016155e0565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506040805160a081018252610130546001600160a01b03908116825261012f548116602083015261013454169181019190915263632901b2606082015263f4a69b8c608082015290565b604080516002808252606082018352600092839291906020830190803683370190505090508481600081518110613fb357613fb3615970565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110613fe757613fe7615970565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009188169063d06ca61f9061402690879086906004016156b7565b60006040518083038186803b15801561403e57600080fd5b505afa158015614052573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261407a9190810190614ed1565b90508060018151811061408f5761408f615970565b602002602001015192505050949350505050565b60405163095ea7b360e01b81526001600160a01b038781166004830152602482018590526000919087169063095ea7b390604401602060405180830381600087803b1580156140f157600080fd5b505af1158015614105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141299190614f7e565b50604080516002808252606082018352600092602083019080368337019050509050868160008151811061415f5761415f615970565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061419357614193615970565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918a16906338ed1739906141d8908990899087908a9042906004016156d0565b600060405180830381600087803b1580156141f257600080fd5b505af1158015614206573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261422e9190810190614ed1565b90508060018151811061424357614243615970565b6020026020010151925050509695505050505050565b60006142658486615857565b61426f8488615857565b614279919061573d565b836142848a8a615857565b61428e9190615857565b6142989190615755565b905060005b82811015614322576000886142b28489615857565b6142bc9190615755565b905060006142cc8e8d8f85613613565b90506142d88189615857565b6142e2838b615857565b6142ec919061573d565b826142f78d8d615857565b6143019190615857565b61430b9190615755565b93505050808061431a906158f8565b91505061429d565b509a9950505050505050505050565b60008060008360020b12614348578260020b614355565b8260020b61435590615927565b905060006001821661436b57600160801b61437d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156143bc5760806143b7826ffff97272373d413259a46990580e213a615857565b901c90505b60048216156143e65760806143e1826ffff2e50f5f656932ef12357cf3c7fdcc615857565b901c90505b600882161561441057608061440b826fffe5caca7e10e4e61c3624eaa0941cd0615857565b901c90505b601082161561443a576080614435826fffcb9843d60f6159c9db58835c926644615857565b901c90505b602082161561446457608061445f826fff973b41fa98c081472e6896dfb254c0615857565b901c90505b604082161561448e576080614489826fff2ea16466c96a3843ec78b326b52861615857565b901c90505b60808216156144b85760806144b3826ffe5dee046a99a2a811c461f1969c3053615857565b901c90505b6101008216156144e35760806144de826ffcbe86c7900a88aedcffc83b479aa3a4615857565b901c90505b61020082161561450e576080614509826ff987a7253ac413176f2b074cf7815e54615857565b901c90505b610400821615614539576080614534826ff3392b0822b70005940c7a398e4b70f3615857565b901c90505b61080082161561456457608061455f826fe7159475a2c29b7443b29c7fa6e889d9615857565b901c90505b61100082161561458f57608061458a826fd097f3bdfd2022b8845ad8f792aa5825615857565b901c90505b6120008216156145ba5760806145b5826fa9f746462d870fdf8a65dc1f90e061e5615857565b901c90505b6140008216156145e55760806145e0826f70d869a156d2a1b890bb3df62baf32f7615857565b901c90505b61800082161561461057608061460b826f31be135f97d08fd981231505542fcfa6615857565b901c90505b6201000082161561463c576080614637826f09aa508b5b7a84e1c677de54f3e99bc9615857565b901c90505b62020000821615614667576080614662826e5d6af8dedb81196699c329225ee604615857565b901c90505b6204000082161561469157608061468c826d2216e584f5fa1ea926041bedfe98615857565b901c90505b620800008216156146b95760806146b4826b048a170391f7dc42444e8fa2615857565b901c90505b60008460020b13156146d4576146d181600019615755565b90505b6146e364010000000082615913565b156146ef5760016146f2565b60005b610c3b9060ff16602083901c61573d565b600080836001600160a01b0316856001600160a01b03161115614724579293925b846001600160a01b0316866001600160a01b03161161474f57614748858585614a66565b9150614796565b836001600160a01b0316866001600160a01b0316101561478857614774868585614a66565b9150614781858785614ad9565b9050614796565b614793858585614ad9565b90505b94509492505050565b606060006147ae836002615857565b6147b990600261573d565b67ffffffffffffffff8111156147d1576147d1615986565b6040519080825280601f01601f1916602001820160405280156147fb576020820181803683370190505b509050600360fc1b8160008151811061481657614816615970565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061484557614845615970565b60200101906001600160f81b031916908160001a9053506000614869846002615857565b61487490600161573d565b90505b60018111156148ec576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106148a8576148a8615970565b1a60f81b8282815181106148be576148be615970565b60200101906001600160f81b031916908160001a90535060049490941c936148e5816158e1565b9050614877565b5083156135335760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610821565b6149448161380b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149e35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610821565b600080846001600160a01b0316846040516149fe919061530f565b600060405180830381855af49150503d8060008114614a39576040519150601f19603f3d011682016040523d82523d6000602084013e614a3e565b606091505b50915091506118a98282604051806060016040528060278152602001615a0f60279139614b23565b6000826001600160a01b0316846001600160a01b03161115614a86579192915b6001600160a01b038416614acf6fffffffffffffffffffffffffffffffff60601b606085901b16614ab78787615876565b6001600160a01b0316866001600160a01b0316614b5c565b610c3b9190615755565b6000826001600160a01b0316846001600160a01b03161115614af9579192915b610c3b6001600160801b038316614b108686615876565b6001600160a01b0316600160601b614b5c565b60608315614b32575081613533565b825115614b425782518084602001fd5b8160405162461bcd60e51b815260040161082191906153a0565b600080614b698486615857565b9050600060001985870982811083820303915050808411614b8957600080fd5b80614b9957508290049050613533565b83858709808303921090036000614bb28519600161573d565b8516948590049492839004926000819003046001019050614bd38183615857565b909217916000614be4866003615857565b6002189050614bf38187615857565b614bfe90600261589e565b614c089082615857565b9050614c148187615857565b614c1f90600261589e565b614c299082615857565b9050614c358187615857565b614c4090600261589e565b614c4a9082615857565b9050614c568187615857565b614c6190600261589e565b614c6b9082615857565b9050614c778187615857565b614c8290600261589e565b614c8c9082615857565b9050614c988187615857565b614ca390600261589e565b614cad9082615857565b9050612f6e8185615857565b80516113638161599c565b600082601f830112614cd557600080fd5b813567ffffffffffffffff811115614cef57614cef615986565b614d02601f8201601f191660200161570c565b818152846020838601011115614d1757600080fd5b816020850160208301376000918101602001919091529392505050565b8051611363816159bf565b80516001600160801b038116811461136357600080fd5b805161ffff8116811461136357600080fd5b805160ff8116811461136357600080fd5b600060208284031215614d8b57600080fd5b81356135338161599c565b60008060008060808587031215614dac57600080fd5b8435614db78161599c565b93506020850135614dc78161599c565b925060408501359150606085013567ffffffffffffffff811115614dea57600080fd5b614df687828801614cc4565b91505092959194509250565b60008060408385031215614e1557600080fd5b8235614e208161599c565b9150602083013567ffffffffffffffff811115614e3c57600080fd5b614e4885828601614cc4565b9150509250929050565b60008060408385031215614e6557600080fd5b8235614e708161599c565b946020939093013593505050565b60008060008060808587031215614e9457600080fd5b8435614e9f8161599c565b9350602085013592506040850135614eb68161599c565b91506060850135614ec6816159b1565b939692955090935050565b60006020808385031215614ee457600080fd5b825167ffffffffffffffff80821115614efc57600080fd5b818501915085601f830112614f1057600080fd5b815181811115614f2257614f22615986565b8060051b9150614f3384830161570c565b8181528481019084860184860187018a1015614f4e57600080fd5b600095505b83861015614f71578051835260019590950194918601918601614f53565b5098975050505050505050565b600060208284031215614f9057600080fd5b8151613533816159b1565b600060208284031215614fad57600080fd5b5035919050565b600060208284031215614fc657600080fd5b5051919050565b60008060408385031215614fe057600080fd5b823591506020830135614ff28161599c565b809150509250929050565b60006020828403121561500f57600080fd5b81356001600160e01b03198116811461353357600080fd5b60006020828403121561503957600080fd5b8135613533816159bf565b60006101c0828403121561505757600080fd5b50919050565b60006020828403121561506f57600080fd5b61353382614d3f565b60008060006060848603121561508d57600080fd5b61509684614d3f565b925060208401519150604084015190509250925092565b600080600080600080600060e0888a0312156150c857600080fd5b87516150d38161599c565b60208901519097506150e4816159bf565b95506150f260408901614d56565b945061510060608901614d56565b935061510e60808901614d68565b925061511c60a08901614d68565b915060c088015161512c816159b1565b8091505092959891949750929550565b6000806000806080858703121561515257600080fd5b8451935061516260208601614d3f565b6040860151606090960151949790965092505050565b6000806040838503121561518b57600080fd5b505080516020909101519092909150565b6000602082840312156151ae57600080fd5b61353382614d68565b60008060008060008060008060008060006101608c8e0312156151d957600080fd5b8b516bffffffffffffffffffffffff811681146151f557600080fd5b60208d0151909b506152068161599c565b60408d0151909a506152178161599c565b985061522560608d01614cb9565b975061523360808d01614d34565b965061524160a08d01614d34565b955061524f60c08d01614d3f565b945060e08c015193506101008c0151925061526d6101208d01614d3f565b915061527c6101408d01614d3f565b90509295989b509295989b9093969950565b600081518084526020808501945080840160005b838110156152c75781516001600160a01b0316875295820195908201906001016152a2565b509495945050505050565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015190830152608090810151910152565b600082516153218184602087016158b5565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516153638160178501602088016158b5565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516153948160288401602088016158b5565b01602801949350505050565b60208152600082518060208401526153bf8160408501602087016158b5565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601a908201527f4c697175696469747920726573657276657320746f6f206c6f77000000000000604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b60c081016155af82856152d2565b8260a08301529392505050565b60e081016155ca82866152d2565b8360a083015282151560c0830152949350505050565b61010081016155ef82876152d2565b8460a08301528360c083015282151560e083015295945050505050565b81516001600160a01b031681526101408101602083015161563860208401826001600160a01b03169052565b50604083015161564d604084018260020b9052565b506060830151615662606084018260020b9052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401516156a6828501826001600160a01b03169052565b505061012092830151919092015290565b828152604060208201526000610c3b604083018461528e565b85815284602082015260a0604082015260006156ef60a083018661528e565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561573557615735615986565b604052919050565b6000821982111561575057615750615944565b500190565b6000826157645761576461595a565b500490565b600181815b808511156157a457816000190482111561578a5761578a615944565b8085161561579757918102915b93841c939080029061576e565b509250929050565b600061353360ff8416836000826157c5575060016107d1565b816157d2575060006107d1565b81600181146157e857600281146157f25761580e565b60019150506107d1565b60ff84111561580357615803615944565b50506001821b6107d1565b5060208310610133831016604e8410600b8410161715615831575081810a6107d1565b61583b8383615769565b806000190482111561584f5761584f615944565b029392505050565b600081600019048311821515161561587157615871615944565b500290565b60006001600160a01b038381169083168181101561589657615896615944565b039392505050565b6000828210156158b0576158b0615944565b500390565b60005b838110156158d05781810151838201526020016158b8565b838111156138cc5750506000910152565b6000816158f0576158f0615944565b506000190190565b600060001982141561590c5761590c615944565b5060010190565b6000826159225761592261595a565b500690565b6000600160ff1b82141561593d5761593d615944565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e4457600080fd5b8015158114610e4457600080fd5b8060020b8114610e4457600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122043d39a0eb99d8b75fdcf9ab3ab6ad91539257093ec0717d6d1d044b31a9c08e764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1363,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1670,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 21487,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 21823,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 40766,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "usdcToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2409"
      },
      {
        "astId": 40769,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "usdtToken",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2409"
      },
      {
        "astId": 40772,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2409"
      },
      {
        "astId": 40775,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "dquickToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IDragonLair)17427"
      },
      {
        "astId": 40778,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "quickToken",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IERC20)2409"
      },
      {
        "astId": 40781,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "nonfungiblePositionManager",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(INonfungiblePositionManager)16050"
      },
      {
        "astId": 40784,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "farmingCenter",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IFarmingCenter)17320"
      },
      {
        "astId": 40787,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "pool",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IAlgebraPool)16075"
      },
      {
        "astId": 40790,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "synapseSwapRouter",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(ISwap)17759"
      },
      {
        "astId": 40793,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "quickSwapRouter",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IUniswapV2Router02)19480"
      },
      {
        "astId": 40796,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPriceFeed)9481"
      },
      {
        "astId": 40799,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "oracleUsdt",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IPriceFeed)9481"
      },
      {
        "astId": 40801,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "tickLower",
        "offset": 20,
        "slot": "312",
        "type": "t_int24"
      },
      {
        "astId": 40803,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "tickUpper",
        "offset": 23,
        "slot": "312",
        "type": "t_int24"
      },
      {
        "astId": 40805,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "usdcTokenDenominator",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 40807,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "usdtTokenDenominator",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 40809,
        "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
        "label": "tokenId",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAlgebraPool)16075": {
        "encoding": "inplace",
        "label": "contract IAlgebraPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDragonLair)17427": {
        "encoding": "inplace",
        "label": "contract IDragonLair",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2409": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFarmingCenter)17320": {
        "encoding": "inplace",
        "label": "contract IFarmingCenter",
        "numberOfBytes": "20"
      },
      "t_contract(INonfungiblePositionManager)16050": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)9481": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)17759": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)19480": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyQuickSwapV3UsdcUsdt.sol:StrategyQuickSwapV3UsdcUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}