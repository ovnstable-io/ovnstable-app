{
  "address": "0x69554b32c001Fd161aa48Bae6fD8785767087672",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV1UsdcUsdtPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV2DodoUsdtPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoMine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV1Helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoApprove",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "balancerVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "balancerPoolIdWmaticUsdcWethBal",
          "type": "bytes32"
        }
      ],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wmaticToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcLPToken",
          "type": "address"
        }
      ],
      "name": "StrategyUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolIdWmaticUsdcWethBal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoMine",
      "outputs": [
        {
          "internalType": "contract IDODOMine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV1UsdcUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV2DodoUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dodoV1UsdcUsdtPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoV2DodoUsdtPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoMine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoV1Helper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoApprove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolIdWmaticUsdcWethBal",
          "type": "bytes32"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmaticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcLPToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "4b5d2f13f93a0dde367f73cf9ee5fb5f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV1UsdcUsdtPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV2DodoUsdtPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoMine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV1Helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoApprove\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balancerPoolIdWmaticUsdcWethBal\",\"type\":\"bytes32\"}],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wmaticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcLPToken\",\"type\":\"address\"}],\"name\":\"StrategyUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolIdWmaticUsdcWethBal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoMine\",\"outputs\":[{\"internalType\":\"contract IDODOMine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV1UsdcUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV2DodoUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoV1UsdcUsdtPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoV2DodoUsdtPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoMine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoV1Helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoApprove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolIdWmaticUsdcWethBal\",\"type\":\"bytes32\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcLPToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyDodoUsdc.sol\":\"StrategyDodoUsdc\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/StrategyDodoUsdc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./core/Strategy.sol\\\";\\nimport \\\"./exchanges/DodoExchange.sol\\\";\\nimport \\\"./exchanges/BalancerExchange.sol\\\";\\nimport \\\"./libraries/OvnMath.sol\\\";\\nimport \\\"./libraries/StrategyDodoLibrary.sol\\\";\\nimport \\\"./connectors/dodo/interfaces/IDODOV1.sol\\\";\\nimport \\\"./connectors/dodo/interfaces/IDODOV2.sol\\\";\\nimport \\\"./connectors/dodo/interfaces/IDODOMine.sol\\\";\\n\\n\\ncontract StrategyDodoUsdc is Strategy, DodoExchange, BalancerExchange {\\n    using OvnMath for uint256;\\n\\n    IERC20 public usdcToken;\\n    IERC20 public usdtToken;\\n    IERC20 public dodoToken;\\n    IERC20 public wmaticToken;\\n    IERC20 public usdcLPToken;\\n\\n    IDODOV1 public dodoV1UsdcUsdtPool;\\n    IDODOV2 public dodoV2DodoUsdtPool;\\n    IDODOMine public dodoMine;\\n    bytes32 public balancerPoolIdWmaticUsdcWethBal;\\n\\n\\n    // --- events\\n\\n    event StrategyUpdatedTokens(address usdcToken, address usdtToken, address dodoToken, address wmaticToken, address usdcLPToken);\\n\\n    event StrategyUpdatedParams(address dodoV1UsdcUsdtPool, address dodoV2DodoUsdtPool, address dodoMine, address dodoV1Helper,\\n        address dodoProxy, address dodoApprove, address balancerVault, bytes32 balancerPoolIdWmaticUsdcWethBal);\\n\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n    // --- Setters\\n\\n    function setTokens(\\n        address _usdcToken,\\n        address _usdtToken,\\n        address _dodoToken,\\n        address _wmaticToken,\\n        address _usdcLPToken\\n    ) external onlyAdmin {\\n\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdtToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_wmaticToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcLPToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = IERC20(_usdcToken);\\n        usdtToken = IERC20(_usdtToken);\\n        dodoToken = IERC20(_dodoToken);\\n        wmaticToken = IERC20(_wmaticToken);\\n        usdcLPToken = IERC20(_usdcLPToken);\\n\\n        emit StrategyUpdatedTokens(_usdcToken, _usdtToken, _dodoToken, _wmaticToken, _usdcLPToken);\\n    }\\n\\n    function setParams(\\n        address _dodoV1UsdcUsdtPool,\\n        address _dodoV2DodoUsdtPool,\\n        address _dodoMine,\\n        address _dodoV1Helper,\\n        address _dodoProxy,\\n        address _dodoApprove,\\n        address _balancerVault,\\n        bytes32 _balancerPoolIdWmaticUsdcWethBal\\n    ) external onlyAdmin {\\n\\n        require(_dodoV1UsdcUsdtPool != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoV2DodoUsdtPool != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoMine != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoV1Helper != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoProxy != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoApprove != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerPoolIdWmaticUsdcWethBal != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n\\n        dodoV1UsdcUsdtPool = IDODOV1(_dodoV1UsdcUsdtPool);\\n        dodoV2DodoUsdtPool = IDODOV2(_dodoV2DodoUsdtPool);\\n        dodoMine = IDODOMine(_dodoMine);\\n        _setDodoParams(_dodoV1Helper, _dodoProxy, _dodoApprove);\\n        setBalancerVault(_balancerVault);\\n        balancerPoolIdWmaticUsdcWethBal = _balancerPoolIdWmaticUsdcWethBal;\\n\\n        emit StrategyUpdatedParams(_dodoV1UsdcUsdtPool, _dodoV2DodoUsdtPool, _dodoMine, _dodoV1Helper, _dodoProxy,\\n            _dodoApprove, _balancerVault, _balancerPoolIdWmaticUsdcWethBal);\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        // stake all usdc tokens\\n        uint256 usdcTokenAmount = usdcToken.balanceOf(address(this));\\n\\n        // add liquidity to pool\\n        usdcToken.approve(address(dodoV1UsdcUsdtPool), usdcTokenAmount);\\n        dodoV1UsdcUsdtPool.depositBaseTo(address(this), usdcTokenAmount);\\n\\n        // stake all lp tokens\\n        uint256 usdcLPTokenBalance = usdcLPToken.balanceOf(address(this));\\n        usdcLPToken.approve(address(dodoMine), usdcLPTokenBalance);\\n        dodoMine.deposit(usdcLPTokenBalance);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        uint256 amountToUnstake = StrategyDodoLibrary._getAmountIn(_amount, dodoV1UsdcUsdtPool);\\n\\n        // get lp tokens\\n        uint256 usdcLPTokenTotalSupply = usdcLPToken.totalSupply();\\n        (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\n        uint256 unstakeLpBalance = amountToUnstake * usdcLPTokenTotalSupply / baseTarget;\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\n        if (unstakeLpBalance > userLPBalance) {\\n            unstakeLpBalance = userLPBalance;\\n        }\\n\\n        // unstake lp tokens\\n        dodoMine.withdraw(unstakeLpBalance);\\n\\n        // remove liquidity from pool\\n        dodoV1UsdcUsdtPool.withdrawAllBase();\\n\\n        // return all usdc tokens\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        // get all lp tokens\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\n        if (userLPBalance == 0) {\\n            return usdcToken.balanceOf(address(this));\\n        }\\n\\n        // unstake lp tokens\\n        dodoMine.withdraw(userLPBalance);\\n\\n        // remove liquidity from pool\\n        dodoV1UsdcUsdtPool.withdrawAllBase();\\n\\n        // return all usdc tokens\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external override view returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external override view returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\n        if (userLPBalance > 0) {\\n            uint256 usdcLPTokenTotalSupply = usdcLPToken.totalSupply();\\n            (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\n            uint256 usdcTokenAmount = baseTarget * userLPBalance / usdcLPTokenTotalSupply;\\n\\n            if(nav){\\n                usdcBalance += usdcTokenAmount;\\n            }else {\\n                // minus 0.06%\\n                usdcBalance += usdcTokenAmount - (usdcTokenAmount * 6 / 10000);\\n            }\\n\\n        }\\n\\n        return usdcBalance;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\n        if (userLPBalance == 0) {\\n            return 0;\\n        }\\n\\n        // claim rewards\\n        dodoMine.claimAllRewards();\\n\\n        // sell rewards\\n        uint256 totalUsdc;\\n\\n        uint256 dodoBalance = dodoToken.balanceOf(address(this));\\n        if (dodoBalance > 0) {\\n            // swap v2 dodo -> usdt\\n            uint256 usdtTokenAmount = _useDodoSwapV2(\\n                address(dodoV2DodoUsdtPool),\\n                address(dodoToken),\\n                address(usdtToken),\\n                dodoBalance,\\n                1,\\n                0\\n            );\\n\\n            uint256 usdcTokenAmount;\\n            if (usdtTokenAmount > 0) {\\n                // swap v1 usdt -> usdc\\n                usdcTokenAmount = _useDodoSwapV1(\\n                    address(dodoV1UsdcUsdtPool),\\n                    address(usdtToken),\\n                    address(usdcToken),\\n                    usdtTokenAmount,\\n                    1,\\n                    1\\n                );\\n            }\\n\\n            totalUsdc += usdcTokenAmount;\\n        }\\n\\n        uint256 wmaticBalance = wmaticToken.balanceOf(address(this));\\n        if (wmaticBalance > 0) {\\n            uint256 wmaticUsdc = swap(\\n                balancerPoolIdWmaticUsdcWethBal,\\n                IVault.SwapKind.GIVEN_IN,\\n                IAsset(address(wmaticToken)),\\n                IAsset(address(usdcToken)),\\n                address(this),\\n                address(this),\\n                wmaticBalance,\\n                0\\n            );\\n\\n            totalUsdc += wmaticUsdc;\\n        }\\n\\n        if (totalUsdc > 0) {\\n            usdcToken.transfer(_to, totalUsdc);\\n        }\\n\\n        return totalUsdc;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x13a94671e716b42a249e6d441fceafdf4de0d5ac56614aa10654bab2ddbc7208\",\"license\":\"MIT\"},\"contracts/connectors/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b2d22bff80c423dcd8b10442e1ee1782100321f6bd3c00649e38d8b1f40c91b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5a4963a182807f12235071151cb535109a8f3066ba1af6fef80c0c829ddd7722\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0614fa16712fbf61015568ad06ede003075147da1dd773d78bbf52e1925b7b59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xe1424191e0efbf544f52f2510ec3b1ae451f4af9345dae9b25a370a7c496c219\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00522f13583cc1876568fd1c57c8afbce4baf1fe89dcea4a9b60a8a988f4df25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/dodo/interfaces/IDODOMine.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOMine {\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function claimAllRewards() external;\\n\\n}\\n\",\"keccak256\":\"0xc238515ff8677c97ad3e58f062696c934bdeceb545e69978a1b6ecce333f79a1\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOProxy.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOProxy {\\n    function dodoSwapV1(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool,\\n        uint256 deadLine\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function dodoSwapV2TokenToToken(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external returns (uint256 returnAmount);\\n}\",\"keccak256\":\"0x6360277bac272439faf6a26471493ca933e1542f3b76b2ae12212b80e737b2bb\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOV1.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOV1 {\\n    function init(\\n        address owner,\\n        address supervisor,\\n        address maintainer,\\n        address baseToken,\\n        address quoteToken,\\n        address oracle,\\n        uint256 lpFeeRate,\\n        uint256 mtFeeRate,\\n        uint256 k,\\n        uint256 gasPriceLimit\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function claimOwnership() external;\\n\\n    function sellBaseToken(\\n        uint256 amount,\\n        uint256 minReceiveQuote,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function buyBaseToken(\\n        uint256 amount,\\n        uint256 maxPayQuote,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\\n\\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\\n\\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\\n\\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\\n\\n    function withdrawBase(uint256 amount) external returns (uint256);\\n\\n    function withdrawAllBase() external returns (uint256);\\n\\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\\n\\n    function withdrawQuote(uint256 amount) external returns (uint256);\\n\\n    function withdrawAllQuote() external returns (uint256);\\n\\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\\n\\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\\n\\n    function _BASE_TOKEN_() external returns (address);\\n\\n    function _QUOTE_TOKEN_() external returns (address);\\n\\n    function _K_() external view returns (uint256);\\n\\n    function _R_STATUS_() external view returns (RStatus);\\n\\n    function _TARGET_BASE_TOKEN_AMOUNT_() external view returns (uint256);\\n\\n    function _TARGET_QUOTE_TOKEN_AMOUNT_() external view returns (uint256);\\n\\n    function _BASE_BALANCE_() external view returns (uint256);\\n\\n    function _QUOTE_BALANCE_() external view returns (uint256);\\n\\n    function getOraclePrice() external view returns (uint256);\\n\\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\\n\\n}\\n\",\"keccak256\":\"0xd2eed9841282d06138fcc41244d29ac869d7fd6a145dd9e78a038f0ac0015020\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOV1Helper.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOV1Helper {\\n    function querySellQuoteToken(\\n        address dodoV1Pool,\\n        uint256 quoteAmount\\n    ) external view returns (uint256 receivedBaseAmount);\\n\\n    function querySellBaseToken(\\n        address dodoV1Pool,\\n        uint256 baseAmount\\n    ) external view returns (uint256 receivedQuoteAmount);\\n}\\n\",\"keccak256\":\"0x70a7deedd64a71b9aacf4a20150b86d29a85d352605fbb062406cc96e8b00ed0\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOV2.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOV2 {\\n    function querySellBase(\\n        address trader,\\n        uint256 payBaseAmount\\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\\n\\n    function querySellQuote(\\n        address trader,\\n        uint256 payQuoteAmount\\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\\n}\\n\",\"keccak256\":\"0x49940c4f58c5e93b581cd625ae7e163cc0e5df02aa19a208c59be71d8ac2d862\",\"license\":\"Apache-2.0\"},\"contracts/core/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n    function healthFactorBalance() external; // Balancing aave health factor\\n\\n    function setHealthFactor(uint256 healthFactor) external; // Aave healthFactor setter\\n}\\n\",\"keccak256\":\"0x25b0bffd26c9e171cacfc505c07a34cee978992aab68d0fdfe8c133deb255c4e\",\"license\":\"GPL-3.0\"},\"contracts/core/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyPortfolioManager {\\n        emit Stake(_amount);\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            emit Reward(_claimRewards(_beneficiary));\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function healthFactorBalance() external override onlyPortfolioManager {\\n        uint256 healthFactor = _healthFactorBalance();\\n        if (healthFactor > 0) {\\n            emit BalanceHealthFactor(healthFactor);\\n        }\\n    }\\n\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\n        _setHealthFactor(healthFactor);\\n\\n        emit SetHealthFactor(healthFactor);\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\n        \\n    }\\n\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\n\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ff7993f57cc0fd74c813187822650bd4722aa65e6a5aaf4bca4cb821ad2fe2c\",\"license\":\"MIT\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IGeneralPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IPoolSwapStructs.sol\\\";\\n\\n\\nabstract contract BalancerExchange {\\n\\n    int256 public constant MAX_VALUE = 10 ** 27;\\n\\n    IVault private balancerVault;\\n\\n    function setBalancerVault(address _balancerVault) internal {\\n        balancerVault = IVault(_balancerVault);\\n    }\\n\\n    function swap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 limit\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\n    }\\n\\n    function swap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\n    }\\n\\n    function batchSwap(\\n        bytes32 poolId1,\\n        bytes32 poolId2,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenMid,\\n        IAsset tokenOut,\\n        address sender,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\n\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\n\\n        IVault.BatchSwapStep memory batchSwap1;\\n        batchSwap1.poolId = poolId1;\\n        batchSwap1.assetInIndex = 0;\\n        batchSwap1.assetOutIndex = 1;\\n        batchSwap1.amount = amount;\\n        swaps[0] = batchSwap1;\\n\\n        IVault.BatchSwapStep memory batchSwap2;\\n        batchSwap2.poolId = poolId2;\\n        batchSwap2.assetInIndex = 1;\\n        batchSwap2.assetOutIndex = 2;\\n        batchSwap2.amount = 0;\\n        swaps[1] = batchSwap2;\\n\\n        IAsset[] memory assets = new IAsset[](3);\\n        assets[0] = tokenIn;\\n        assets[1] = tokenMid;\\n        assets[2] = tokenOut;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = recipient;\\n        fundManagement.toInternalBalance = false;\\n\\n        int256[] memory limits = new int256[](3);\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\n            limits[0] = MAX_VALUE;\\n            limits[1] = MAX_VALUE;\\n            limits[2] = MAX_VALUE;\\n        } else {\\n            limits[0] = 0;\\n            limits[1] = 0;\\n            limits[2] = 0;\\n        }\\n\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\n    }\\n\\n    function onSwap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 balance\\n    ) internal view returns (uint256) {\\n\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\n        swapRequest.kind = kind;\\n        swapRequest.tokenIn = tokenIn;\\n        swapRequest.tokenOut = tokenOut;\\n        swapRequest.amount = balance;\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(poolId);\\n\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\n\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\n\\n            uint256 indexIn;\\n            uint256 indexOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    indexIn = i;\\n                } else if (tokens[i] == tokenOut) {\\n                    indexOut = i;\\n                }\\n            }\\n\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\n\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n\\n        } else {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n        }\\n    }\\n\\n    /**\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountToSwap(\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision,\\n        bytes32 poolId,\\n        IERC20 token0,\\n        IERC20 token1\\n    ) internal view returns (uint256) {\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\n        }\\n\\n        return amount0ToSwap;\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountLpTokensToWithdraw(\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalLpBalance,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        bytes32 poolId,\\n        IERC20 token0,\\n        IERC20 token1\\n    ) internal view returns (uint256) {\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\n        for (uint i = 0; i < 1; i++) {\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\n            uint256 amount0 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\n        }\\n        return lpBalance;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd8818122d67890893a599b6b3d78bda105881b00ec1a674bd3ad916437be7996\",\"license\":\"MIT\"},\"contracts/exchanges/DodoExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/dodo/interfaces/IDODOV1Helper.sol\\\";\\nimport \\\"../connectors/dodo/interfaces/IDODOProxy.sol\\\";\\nimport \\\"../connectors/dodo/interfaces/IDODOV2.sol\\\";\\n\\n/*\\n    There are six swap functions in DODOProxy. Which are executed for different sources or versions\\n\\n    - dodoSwapV1: Used for DODOV1 pools\\n    - dodoSwapV2ETHToToken: Used for DODOV2 pools and specify ETH as fromToken\\n    - dodoSwapV2TokenToETH: Used for DODOV2 pools and specify ETH as toToken\\n    - dodoSwapV2TokenToToken:  Used for DODOV2 pools and both fromToken and toToken are ERC20\\n    - externalSwap: Used for executing third-party protocols' aggregation algorithm\\n    - mixSwap: Used for executing DODO\\u2019s custom aggregation algorithm\\n\\n    Note: Best Trading path is calculated by off-chain program. DODOProxy's swap functions is only used for executing.\\n*/\\nabstract contract DodoExchange {\\n\\n    IDODOV1Helper private dodoV1Helper;\\n    IDODOProxy private dodoProxy;\\n    address private dodoApprove;\\n\\n    function _setDodoParams(\\n        address _dodoV1Helper,\\n        address _dodoProxy,\\n        address _dodoApprove\\n    ) internal {\\n        dodoV1Helper = IDODOV1Helper(_dodoV1Helper);\\n        dodoProxy = IDODOProxy(_dodoProxy);\\n        dodoApprove = _dodoApprove;\\n    }\\n\\n    /*\\n        The code example assumes user wanting to use the specify DODOV1 pool for swapping\\n\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\n        combination to represent the multi-hop directions to save gas consumption\\n        For example:\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\n    */\\n    function _useDodoSwapV1(\\n        address dodoV1Pool,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 slippage,\\n        uint256 directions\\n    ) internal returns (uint256) {\\n\\n        uint256 minReturnAmount;\\n        if (directions == 0) {\\n            uint256 receivedQuoteAmount = dodoV1Helper.querySellBaseToken(dodoV1Pool, fromTokenAmount);\\n            minReturnAmount = receivedQuoteAmount * (100 - slippage) / 100;\\n        } else {\\n            uint256 receivedBaseAmount = dodoV1Helper.querySellQuoteToken(dodoV1Pool, fromTokenAmount);\\n            minReturnAmount = receivedBaseAmount * (100 - slippage) / 100;\\n        }\\n        if (minReturnAmount == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV1Pool;\\n\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\n\\n        return dodoProxy.dodoSwapV1(\\n            fromToken,\\n            toToken,\\n            fromTokenAmount,\\n            minReturnAmount,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    /*\\n        The code example assumes user wanting to use the specify DODOV2 pool for swapping\\n\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\n        combination to represent the multi-hop directions to save gas consumption\\n        For example:\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\n    */\\n    function _useDodoSwapV2(\\n        address dodoV2Pool,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 slippage,\\n        uint256 directions\\n    ) internal returns (uint256) {\\n\\n        uint256 minReturnAmount;\\n        if (directions == 0) {\\n            (uint256 receiveQuoteAmount,) = IDODOV2(dodoV2Pool).querySellBase(address(this), fromTokenAmount);\\n            minReturnAmount = receiveQuoteAmount * (100 - slippage) / 100;\\n        } else {\\n            (uint256 receiveBaseAmount,) = IDODOV2(dodoV2Pool).querySellQuote(address(this), fromTokenAmount);\\n            minReturnAmount = receiveBaseAmount * (100 - slippage) / 100;\\n        }\\n        if (minReturnAmount == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV2Pool;\\n\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\n\\n        return dodoProxy.dodoSwapV2TokenToToken(\\n            fromToken,\\n            toToken,\\n            fromTokenAmount,\\n            minReturnAmount,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x48e950c23f0633b4ad838d6b27ca05998bc20320a55102b06d696d3f3c36cd75\",\"license\":\"MIT\"},\"contracts/libraries/DecimalMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title DecimalMath\\n * @author DODO Breeder\\n *\\n * @notice Functions for fixed point number with 18 decimals\\n */\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    uint256 constant ONE = 10**18;\\n\\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d) / ONE;\\n    }\\n\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d).divCeil(ONE);\\n    }\\n\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(ONE).div(d);\\n    }\\n\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(ONE).divCeil(d);\\n    }\\n}\\n\",\"keccak256\":\"0x883913e8488e851ad58c5b2b37794f82c1e5b20434db2e1590abe8856d06bf0d\",\"license\":\"Apache-2.0\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x377ce54ff6d7546f2f3ec6f2f5b52382937f148523c137fa9159b23f2da08a4a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/StrategyDodoLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../connectors/dodo/interfaces/IDODOV1.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./DecimalMath.sol\\\";\\n\\nlibrary StrategyDodoLibrary {\\n    using SafeMath for uint256;\\n\\n\\n    struct Context {\\n        IDODOV1 dodo;\\n        uint256 amountOut;\\n        uint256 fairAmount;\\n        uint256 targetBase;\\n        uint256 dd;\\n        uint256 a;\\n        uint256 b;\\n        uint256 c;\\n        uint256 d;\\n        uint256 e;\\n        uint256 g;\\n        uint256 h;\\n        uint256 i;\\n    }\\n\\n    function _getAmountIn(uint256 amountOut, IDODOV1 dodo) internal view returns (uint256) {\\n        if (dodo._R_STATUS_() != IDODOV1.RStatus.ABOVE_ONE) {\\n            return amountOut;\\n        }\\n\\n        Context memory ctx;\\n        ctx.dodo = dodo;\\n        ctx.amountOut = amountOut;\\n\\n        ctx.fairAmount = _fairAmount(ctx);\\n        ctx.targetBase = _solveQuadraticFunctionForTargetCeil(ctx);\\n\\n        ctx.dd = getDD(ctx);\\n        ctx.a = getA(ctx);\\n        ctx.b = getB(ctx);\\n        ctx.c = getC(ctx);\\n        ctx.d = getD(ctx);\\n        ctx.e = getE(ctx);\\n        ctx.g = getG(ctx);\\n        ctx.h = getH(ctx);\\n        ctx.i = getI(ctx);\\n\\n        uint256 underSqrt = ctx.a.add(ctx.c).add(ctx.d).add(ctx.e).sub(ctx.b);\\n        uint256 sqrt = underSqrt.sqrt();\\n        uint256 t1 = ctx.g.add(sqrt);\\n        uint256 t2 = t1.mul(1e18).div(ctx.i);\\n        uint256 res = ctx.h.sub(t2);\\n\\n        return res;\\n    }\\n\\n\\n    function _fairAmount(Context memory ctx) internal view returns (uint256){\\n        uint256 spareQuote = ctx.dodo._QUOTE_BALANCE_().sub(ctx.dodo._TARGET_QUOTE_TOKEN_AMOUNT_());\\n        uint256 price = ctx.dodo.getOraclePrice();\\n        uint256 fairAmount = DecimalMath.divFloor(spareQuote, price);\\n        return fairAmount;\\n    }\\n\\n    function getDD(Context memory ctx) internal view returns (uint256){\\n        return ctx.dodo._BASE_BALANCE_().mul(2).sub(ctx.amountOut);\\n    }\\n\\n    function getA(Context memory ctx) internal view returns (uint256){\\n        return ctx.fairAmount.mul(ctx.fairAmount).add(ctx.targetBase.mul(ctx.targetBase));\\n    }\\n\\n    function getB(Context memory ctx) internal view returns (uint256){\\n\\n        uint256 t1 = ctx.fairAmount.mul(ctx.dodo._K_()).mul(2).div(1e18);\\n        uint256 t2 = ctx.dd.add(ctx.fairAmount).add(t1);\\n        uint256 t3 = t2.mul(ctx.targetBase).mul(2);\\n\\n        return t3;\\n    }\\n\\n    function getC(Context memory ctx) internal view returns (uint256){\\n        return ctx.dd.mul(ctx.fairAmount).mul(2);\\n    }\\n\\n    function getD(Context memory ctx) internal view returns (uint256){\\n        return ctx.c.mul(ctx.dodo._K_()).mul(2).div(1e18);\\n    }\\n\\n    function getE(Context memory ctx) internal view returns (uint256){\\n        return ctx.dd.mul(ctx.dd);\\n    }\\n\\n    function getG(Context memory ctx) internal view returns (uint256){\\n        return ctx.targetBase.add(ctx.fairAmount).sub(ctx.dd);\\n    }\\n\\n    function getH(Context memory ctx) internal view returns (uint256){\\n        return ctx.targetBase.add(ctx.dodo._BASE_BALANCE_()).sub(ctx.dd);\\n    }\\n\\n    function getI(Context memory ctx) internal view returns (uint256){\\n        return ctx.dodo._K_().mul(2).add(uint256(2).mul(1e18));\\n    }\\n\\n\\n    function _solveQuadraticFunctionForTargetCeil(\\n        Context memory ctx\\n    ) internal view returns (uint256) {\\n        uint256 V1 = ctx.dodo._BASE_BALANCE_();\\n        uint256 k = ctx.dodo._K_();\\n\\n        // V0 = V1+V1*(sqrt-1)/2k\\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mulCeil(k, ctx.fairAmount).mul(4), V1);\\n        sqrt = sqrt.add(DecimalMath.ONE).mul(DecimalMath.ONE).sqrt();\\n        uint256 premium = DecimalMath.divCeil(sqrt.sub(DecimalMath.ONE), k.mul(2));\\n        // V0 is greater than or equal to V1 according to the solution\\n        return DecimalMath.mul(V1, DecimalMath.ONE.add(premium));\\n    }\\n}\\n\",\"keccak256\":\"0xc4e4bdf06e8d331a6336d9b30b22464b91e5cd6a4e6a4833c485bdb36327e6fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b5060006200002760016200008e565b9050801562000040576000805461ff0019166101001790555b801562000087576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50620001af565b60008054610100900460ff161562000127578160ff166001148015620000c75750620000c530620001a060201b620012fb1760201c565b155b6200011f5760405162461bcd60e51b815260206004820152602e60248201526000805160206200480483398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001865760405162461bcd60e51b815260206004820152602e60248201526000805160206200480483398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000116565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b60805160601c61461a620001ea6000396000818161095b0152818161099b01528181610a3b01528181610a7b0152610b0a015261461a6000f3fe6080604052600436106101f95760003560e01c80637b73aa4e1161010d578063a440b21a116100a0578063adc9772e1161006f578063adc9772e1461059d578063d547741f146105bd578063ef5cfb8c146105dd578063f6f6b881146105fd578063f72c0d8b1461061d57600080fd5b8063a440b21a1461051a578063a7a61d051461053a578063a98ad46c1461055b578063abf4be011461057c57600080fd5b806387b94e6c116100dc57806387b94e6c146104b057806391d14854146104d0578063a217fddf146104f0578063a3673b381461050557600080fd5b80637b73aa4e146104435780637d5f5802146104585780638129fc1c1461047a5780638400150a1461048f57600080fd5b80632576e65a116101905780633659cfe61161015f5780633659cfe6146103ba5780634f1ef286146103da57806352d1902d146103ed578063620b75df1461040257806375123ff91461042257600080fd5b80632576e65a146103455780632f2ff15d1461035a578063311117081461037a57806336568abe1461039a57600080fd5b80630fc55bfd116101cc5780630fc55bfd146102b157806311eac855146102d3578063154e4f58146102f4578063248a9ca31461031557600080fd5b806301ffc9a7146101fe578063063bde241461023357806307ab0a7e146102615780630d9fe3fd1461029a575b600080fd5b34801561020a57600080fd5b5061021e610219366004613fea565b610651565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b506102536b033b2e3c9fd0803ce800000081565b60405190815260200161022a565b34801561026d57600080fd5b5061016854610282906001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b3480156102a657600080fd5b5061025361016a5481565b3480156102bd57600080fd5b506102d16102cc366004613d3f565b610688565b005b3480156102df57600080fd5b5061016254610282906001600160a01b031681565b34801561030057600080fd5b5061016754610282906001600160a01b031681565b34801561032157600080fd5b50610253610330366004613f8c565b60009081526065602052604090206001015490565b34801561035157600080fd5b5061025361082c565b34801561036657600080fd5b506102d1610375366004613fbe565b61083d565b34801561038657600080fd5b506102d1610395366004613f8c565b610867565b3480156103a657600080fd5b506102d16103b5366004613fbe565b6108d2565b3480156103c657600080fd5b506102d16103d5366004613d24565b610950565b6102d16103e8366004613e34565b610a30565b3480156103f957600080fd5b50610253610afd565b34801561040e57600080fd5b5060fb54610282906001600160a01b031681565b34801561042e57600080fd5b5061016454610282906001600160a01b031681565b34801561044f57600080fd5b506102d1610bb0565b34801561046457600080fd5b5061025360008051602061457e83398151915281565b34801561048657600080fd5b506102d1610be6565b34801561049b57600080fd5b5061016954610282906001600160a01b031681565b3480156104bc57600080fd5b506102d16104cb366004613da4565b610c54565b3480156104dc57600080fd5b5061021e6104eb366004613fbe565b610e9e565b3480156104fc57600080fd5b50610253600081565b34801561051157600080fd5b50610253610ec9565b34801561052657600080fd5b506102d1610535366004613d24565b610ed5565b34801561054657600080fd5b5061016654610282906001600160a01b031681565b34801561056757600080fd5b5061016354610282906001600160a01b031681565b34801561058857600080fd5b5061016554610282906001600160a01b031681565b3480156105a957600080fd5b506102d16105b8366004613ef6565b610fad565b3480156105c957600080fd5b506102d16105d8366004613fbe565b611096565b3480156105e957600080fd5b506102536105f8366004613d24565b6110bb565b34801561060957600080fd5b50610253610618366004613f20565b61113f565b34801561062957600080fd5b506102537f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061068257506301ffc9a760e01b6001600160e01b03198316145b92915050565b610693600033610e9e565b6106b85760405162461bcd60e51b81526004016106af906142ea565b60405180910390fd5b6001600160a01b0385166106de5760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b0384166107045760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b03831661072a5760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b0382166107505760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b0381166107765760405162461bcd60e51b81526004016106af9061434f565b61016280546001600160a01b038781166001600160a01b03199283168117909355610163805488831690841681179091556101648054888416908516811790915561016580548885169086168117909155610166805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f6465fcb206f5f301860b147ada687bc58f38a1834bbea161e3e2be627d40f8489060a00160405180910390a15050505050565b6000610838600061130a565b905090565b6000828152606560205260409020600101546108588161158a565b6108628383611594565b505050565b61087f60008051602061457e83398151915233610e9e565b61089b5760405162461bcd60e51b81526004016106af906141cd565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146109425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106af565b61094c828261161a565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109995760405162461bcd60e51b81526004016106af90614204565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109e260008051602061459e833981519152546001600160a01b031690565b6001600160a01b031614610a085760405162461bcd60e51b81526004016106af90614250565b610a1181611681565b60408051600080825260208201909252610a2d918391906116ab565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a795760405162461bcd60e51b81526004016106af90614204565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ac260008051602061459e833981519152546001600160a01b031690565b6001600160a01b031614610ae85760405162461bcd60e51b81526004016106af90614250565b610af182611681565b61094c828260016116ab565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b9d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106af565b5060008051602061459e83398151915290565b610bc860008051602061457e83398151915233610e9e565b610be45760405162461bcd60e51b81526004016106af906141cd565b565b6000610bf26001611825565b90508015610c0a576000805461ff0019166101001790555b610c126118ad565b8015610a2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016108c7565b610c5f600033610e9e565b610c7b5760405162461bcd60e51b81526004016106af906142ea565b6001600160a01b038816610ca15760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038716610cc75760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038616610ced5760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038516610d135760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038416610d395760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038316610d5f5760405162461bcd60e51b81526004016106af9061434f565b80610dac5760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f7765640000000000000060448201526064016106af565b61016780546001600160a01b038a81166001600160a01b0319928316811790935561016880548b8316908416811790915561016980548b8416908516811790915561012d80548b8516908616811790915561012e80548b8616908716811790915561012f80548b871690881681179091556101308054968b1696909716861790965561016a889055604080519788526020880194909452868401929092526060860152608085015260a084019290925260c083015260e08201839052517fad6dcec0852f5b75a1c2b7546b3fc4a5a5a33e6a8c36dcf3316cbf397dfbb52e918190036101000190a15050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610838600161130a565b610ee0600033610e9e565b610efc5760405162461bcd60e51b81526004016106af906142ea565b6001600160a01b038116610f225760405162461bcd60e51b81526004016106af9061434f565b60fb54610f479060008051602061457e833981519152906001600160a01b0316611096565b610f5f60008051602061457e8339815191528261083d565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016108c7565b610fc560008051602061457e83398151915233610e9e565b610fe15760405162461bcd60e51b81526004016106af906141cd565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b815230600482015261094c9083906001600160a01b038216906370a082319060240160206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190613fa5565b611916565b6000828152606560205260409020600101546110b18161158a565b610862838361161a565b60006110d560008051602061457e83398151915233610e9e565b6110f15760405162461bcd60e51b81526004016106af906141cd565b60006110fc83611c43565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161112f91815260200190565b60405180910390a190505b919050565b600061115960008051602061457e83398151915233610e9e565b6111755760405162461bcd60e51b81526004016106af906141cd565b600082156111c9577f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1346111a785611c43565b60405190815260200160405180910390a16111c28685611f91565b9050611238565b6111d4868686612237565b9050848110156112385760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106af565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb9061126690879085906004016141a1565b602060405180830381600087803b15801561128057600080fd5b505af1158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b89190613f6f565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b610162546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b9190613fa5565b610169546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156113d557600080fd5b505afa1580156113e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140d9190613fa5565b905080156115835761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190613fa5565b9050600061016760009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d9190614035565b50905060008261152d858461449e565b611537919061447c565b90508615611550576115498186614464565b945061157f565b61271061155e82600661449e565b611568919061447c565b61157290826144bd565b61157c9086614464565b94505b5050505b5092915050565b610a2d81336125b6565b61159e8282610e9e565b61094c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115d63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116248282610e9e565b1561094c5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361094c8161158a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156116de576108628361261a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171757600080fd5b505afa925050508015611747575060408051601f3d908101601f1916820190925261174491810190613fa5565b60015b6117aa5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106af565b60008051602061459e83398151915281146118195760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106af565b506108628383836126b6565b60008054610100900460ff161561186c578160ff1660011480156118485750303b155b6118645760405162461bcd60e51b81526004016106af9061429c565b506000919050565b60005460ff8084169116106118935760405162461bcd60e51b81526004016106af9061429c565b506000805460ff191660ff92909216919091179055600190565b60006118b96001611825565b905080156118d1576000805461ff0019166101001790555b6118d96126e1565b6118e16126e1565b6118ec600033611594565b610c127f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611594565b610162546001600160a01b038381169116146119445760405162461bcd60e51b81526004016106af90614318565b610162546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561198957600080fd5b505afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c19190613fa5565b610162546101675460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926119fb92169085906004016141a1565b602060405180830381600087803b158015611a1557600080fd5b505af1158015611a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d9190613f6f565b506101675460405163aa06ce9b60e01b81526001600160a01b039091169063aa06ce9b90611a8190309085906004016141a1565b602060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad39190613fa5565b50610166546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b519190613fa5565b610166546101695460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392611b8b92169085906004016141a1565b602060405180830381600087803b158015611ba557600080fd5b505af1158015611bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdd9190613f6f565b506101695460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b5050505050505050565b610169546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611c8c57600080fd5b505afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc49190613fa5565b905080611cd45750600092915050565b61016960009054906101000a90046001600160a01b03166001600160a01b0316630b83a7276040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d2557600080fd5b505af1158015611d39573d6000803e3d6000fd5b5050610164546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe9190613fa5565b90508015611e3857610168546101645461016354600092611df3926001600160a01b039182169290821691168560018661274c565b905060008115611e2957610167546101635461016254611e26926001600160a01b03908116928116911685600180612a2a565b90505b611e338185614464565b935050505b610165546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e7d57600080fd5b505afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190613fa5565b90508015611efa5761016a546101655461016254600092611eea92909184916001600160a01b03908116911630808885612c8a565b9050611ef68185614464565b9350505b8215611f87576101625460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611f3390899087906004016141a1565b602060405180830381600087803b158015611f4d57600080fd5b505af1158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190613f6f565b505b5090949350505050565b610162546000906001600160a01b03848116911614611fc25760405162461bcd60e51b81526004016106af90614318565b610169546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561200757600080fd5b505afa15801561201b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203f9190613fa5565b9050806120ca57610162546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561208a57600080fd5b505afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c29190613fa5565b915050610682565b61016954604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561211157600080fd5b505af1158015612125573d6000803e3d6000fd5b5050505061016760009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561217a57600080fd5b505af115801561218e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b29190613fa5565b50610162546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156121f757600080fd5b505afa15801561220b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222f9190613fa5565b949350505050565b610162546000906001600160a01b038581169116146122685760405162461bcd60e51b81526004016106af90614318565b610167546000906122839085906001600160a01b0316612eea565b9050600061016660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122d657600080fd5b505afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190613fa5565b9050600061016760009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190614035565b5090506000816123a8848661449e565b6123b2919061447c565b610169546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156123fc57600080fd5b505afa158015612410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124349190613fa5565b905080821115612442578091505b61016954604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b5050505061016760009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156124f257600080fd5b505af1158015612506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252a9190613fa5565b50610162546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561256f57600080fd5b505afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190613fa5565b955050505050505b9392505050565b6125c08282610e9e565b61094c576125d8816001600160a01b03166014613169565b6125e3836020613169565b6040516020016125f49291906140a1565b60408051601f198184030181529082905262461bcd60e51b82526106af916004016141ba565b6001600160a01b0381163b6126875760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106af565b60008051602061459e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126bf83613305565b6000825111806126cc5750805b15610862576126db8383613345565b50505050565b600054610100900460ff16610be45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106af565b600080826127ff57604051633cd0243b60e11b81526000906001600160a01b038a16906379a04876906127859030908a906004016141a1565b604080518083038186803b15801561279c57600080fd5b505afa1580156127b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d49190614035565b50905060646127e386826144bd565b6127ed908361449e565b6127f7919061447c565b9150506128a6565b6040516366410a2160e01b81526000906001600160a01b038a16906366410a21906128309030908a906004016141a1565b604080518083038186803b15801561284757600080fd5b505afa15801561285b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287f9190614035565b509050606461288e86826144bd565b612898908361449e565b6128a2919061447c565b9150505b806128b5576000915050612a20565b6040805160018082528183019092526000916020808301908036833701905050905088816000815181106128eb576128eb614543565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b39261292d929116908a906004016141a1565b602060405180830381600087803b15801561294757600080fd5b505af115801561295b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297f9190613f6f565b5061012e546001600160a01b031663f87dc1b789898986868a60006129a642610258614464565b6040518963ffffffff1660e01b81526004016129c9989796959493929190614116565b602060405180830381600087803b1580156129e357600080fd5b505af11580156129f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1b9190613fa5565b925050505b9695505050505050565b60008082612ae05761012d54604051631de9507f60e31b81526000916001600160a01b03169063ef4a83f890612a66908c908a906004016141a1565b60206040518083038186803b158015612a7e57600080fd5b505afa158015612a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab69190613fa5565b90506064612ac486826144bd565b612ace908361449e565b612ad8919061447c565b915050612b8a565b61012d5460405163ca19ebd960e01b81526000916001600160a01b03169063ca19ebd990612b14908c908a906004016141a1565b60206040518083038186803b158015612b2c57600080fd5b505afa158015612b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b649190613fa5565b90506064612b7286826144bd565b612b7c908361449e565b612b86919061447c565b9150505b80612b99576000915050612a20565b604080516001808252818301909252600091602080830190803683370190505090508881600081518110612bcf57612bcf614543565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b392612c11929116908a906004016141a1565b602060405180830381600087803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c639190613f6f565b5061012e546001600160a01b0316630dd4ebd989898986868a60006129a642610258614464565b610130546040516370a0823160e01b81523060048201526000916001600160a01b038981169263095ea7b392919091169083906370a082319060240160206040518083038186803b158015612cde57600080fd5b505afa158015612cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d169190613fa5565b6040518363ffffffff1660e01b8152600401612d339291906141a1565b602060405180830381600087803b158015612d4d57600080fd5b505af1158015612d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d859190613f6f565b50612dd26040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b89815260208101896001811115612deb57612deb61452d565b90816001811115612dfe57612dfe61452d565b9052506001600160a01b0388811660408381019190915288821660608085019190915260808085018890528251908101835260006020820181905291810191909152888316815287831691810191909152610130549091166352bbbe29838387612e6a42610258614464565b6040518563ffffffff1660e01b8152600401612e899493929190614386565b602060405180830381600087803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edb9190613fa5565b9b9a5050505050505050505050565b60006001826001600160a01b03166317be952e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2757600080fd5b505afa158015612f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5f9190614014565b6002811115612f7057612f7061452d565b14612f7c575081610682565b612ff0604051806101a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03831681526020810184905261300c81613439565b604082015261301a816135b0565b60608201526130288161372d565b6080820152613036816137b1565b60a0820152613044816137d6565b60c0820152613052816138b0565b60e0820152613060816138d2565b61010082015261306f81613968565b61012082015261307e8161397a565b61014082015261308d8161399f565b61016082015261309c81613a2c565b8161018001818152505060006130e98260c001516130e38461012001516130dd8661010001516130dd8860e001518960a00151613a8690919063ffffffff16565b90613a86565b90613ad1565b905060006130f682613b19565b9050600061311282856101400151613a8690919063ffffffff16565b9050600061314085610180015161313a670de0b6b3a764000085613b7190919063ffffffff16565b90613bd2565b9050600061315c82876101600151613ad190919063ffffffff16565b9998505050505050505050565b6060600061317883600261449e565b613183906002614464565b67ffffffffffffffff81111561319b5761319b614559565b6040519080825280601f01601f1916602001820160405280156131c5576020820181803683370190505b509050600360fc1b816000815181106131e0576131e0614543565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061320f5761320f614543565b60200101906001600160f81b031916908160001a905350600061323384600261449e565b61323e906001614464565b90505b60018111156132b6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061327257613272614543565b1a60f81b82828151811061328857613288614543565b60200101906001600160f81b031916908160001a90535060049490941c936132af81614500565b9050613241565b5083156125af5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106af565b61330e8161261a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6133ad5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106af565b600080846001600160a01b0316846040516133c89190614085565b600060405180830381855af49150503d8060008114613403576040519150601f19603f3d011682016040523d82523d6000602084013e613408565b606091505b509150915061343082826040518060600160405280602781526020016145be60279139613c1e565b95945050505050565b60008061352983600001516001600160a01b031663245c96856040518163ffffffff1660e01b815260040160206040518083038186803b15801561347c57600080fd5b505afa158015613490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b49190613fa5565b84600001516001600160a01b0316637c9b8e896040518163ffffffff1660e01b815260040160206040518083038186803b1580156134f157600080fd5b505afa158015613505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e39190613fa5565b9050600083600001516001600160a01b031663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561356a57600080fd5b505afa15801561357e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a29190613fa5565b905060006134308383613c57565b60008082600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f057600080fd5b505afa158015613604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136289190613fa5565b9050600083600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561366957600080fd5b505afa15801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a19190613fa5565b905060006136c76136c160046136bb858960400151613c6f565b90613b71565b84613c8d565b90506136e76136e2670de0b6b3a76400006136bb8482613a86565b613b19565b9050600061371061370083670de0b6b3a7640000613ad1565b61370b856002613b71565b613c8d565b9050612a2084613728670de0b6b3a764000084613a86565b613ca5565b600061068282602001516130e3600285600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561377957600080fd5b505afa15801561378d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bb9190613fa5565b6060810151600090610682906137c79080613b71565b60408401516130dd9080613b71565b60008061386d670de0b6b3a764000061313a60026136bb87600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561382a57600080fd5b505afa15801561383e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138629190613fa5565b604089015190613b71565b90506000613890826130dd86604001518760800151613a8690919063ffffffff16565b9050600061343060026136bb876060015185613b7190919063ffffffff16565b600061068260026136bb84604001518560800151613b7190919063ffffffff16565b6000610682670de0b6b3a764000061313a60026136bb86600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561392557600080fd5b505afa158015613939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395d9190613fa5565b60e088015190613b71565b60808101516000906106829080613b71565b600061068282608001516130e384604001518560600151613a8690919063ffffffff16565b600061068282608001516130e384600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156139e957600080fd5b505afa1580156139fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a219190613fa5565b606086015190613a86565b6000610682613a446002670de0b6b3a7640000613b71565b6130dd600285600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561377957600080fd5b600080613a938385614464565b9050838110156125af5760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b60448201526064016106af565b600082821115613b0f5760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b60448201526064016106af565b6125af82846144bd565b600080613b2760028461447c565b613b32906001614464565b90508291505b81811015613b6b57905080600281613b50818661447c565b613b5a9190614464565b613b64919061447c565b9050613b38565b50919050565b600082613b8057506000610682565b6000613b8c838561449e565b905082613b99858361447c565b146125af5760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b60448201526064016106af565b6000808211613c145760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b60448201526064016106af565b6125af828461447c565b60608315613c2d5750816125af565b825115613c3d5782518084602001fd5b8160405162461bcd60e51b81526004016106af91906141ba565b60006125af8261313a85670de0b6b3a7640000613b71565b60006125af670de0b6b3a7640000613c878585613b71565b90613cc4565b60006125af82613c8785670de0b6b3a7640000613b71565b6000670de0b6b3a7640000613cba8484613b71565b6125af919061447c565b600080613cd18484613bd2565b90506000613cdf848361449e565b613ce990866144bd565b90508015613d0557613cfc826001614464565b92505050610682565b509050610682565b80356001600160a01b038116811461113a57600080fd5b600060208284031215613d3657600080fd5b6125af82613d0d565b600080600080600060a08688031215613d5757600080fd5b613d6086613d0d565b9450613d6e60208701613d0d565b9350613d7c60408701613d0d565b9250613d8a60608701613d0d565b9150613d9860808701613d0d565b90509295509295909350565b600080600080600080600080610100898b031215613dc157600080fd5b613dca89613d0d565b9750613dd860208a01613d0d565b9650613de660408a01613d0d565b9550613df460608a01613d0d565b9450613e0260808a01613d0d565b9350613e1060a08a01613d0d565b9250613e1e60c08a01613d0d565b915060e089013590509295985092959890939650565b60008060408385031215613e4757600080fd5b613e5083613d0d565b9150602083013567ffffffffffffffff80821115613e6d57600080fd5b818501915085601f830112613e8157600080fd5b813581811115613e9357613e93614559565b604051601f8201601f19908116603f01168101908382118183101715613ebb57613ebb614559565b81604052828152886020848701011115613ed457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215613f0957600080fd5b613f1283613d0d565b946020939093013593505050565b60008060008060808587031215613f3657600080fd5b613f3f85613d0d565b935060208501359250613f5460408601613d0d565b91506060850135613f648161456f565b939692955090935050565b600060208284031215613f8157600080fd5b81516125af8161456f565b600060208284031215613f9e57600080fd5b5035919050565b600060208284031215613fb757600080fd5b5051919050565b60008060408385031215613fd157600080fd5b82359150613fe160208401613d0d565b90509250929050565b600060208284031215613ffc57600080fd5b81356001600160e01b0319811681146125af57600080fd5b60006020828403121561402657600080fd5b8151600381106125af57600080fd5b6000806040838503121561404857600080fd5b505080516020909101519092909150565b600081518084526140718160208601602086016144d4565b601f01601f19169290920160200192915050565b600082516140978184602087016144d4565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140d98160178501602088016144d4565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161410a8160288401602088016144d4565b01602801949350505050565b6001600160a01b038981168252888116602080840191909152604083018990526060830188905261010060808401819052875190840181905260009261012085019289810192855b8181101561417c57845184168652948201949382019360010161415e565b505050505060a08301959095525091151560c083015260e09091015295945050505050565b6001600160a01b03929092168252602082015260400190565b6020815260006125af6020830184614059565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60e08152845160e082015260006020860151600281106143b657634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b031661012083015260608601516143eb6101408401826001600160a01b03169052565b50608086015161016083015260a086015160c06101808401526144126101a0840182614059565b915050614452602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b6000821982111561447757614477614517565b500190565b60008261449957634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156144b8576144b8614517565b500290565b6000828210156144cf576144cf614517565b500390565b60005b838110156144ef5781810151838201526020016144d7565b838111156126db5750506000910152565b60008161450f5761450f614517565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610a2d57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206e78a7f85fb195cbe4bd5481a398651b518ae94f548c7e5ae5f2a025d35b1a0164736f6c63430008060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80637b73aa4e1161010d578063a440b21a116100a0578063adc9772e1161006f578063adc9772e1461059d578063d547741f146105bd578063ef5cfb8c146105dd578063f6f6b881146105fd578063f72c0d8b1461061d57600080fd5b8063a440b21a1461051a578063a7a61d051461053a578063a98ad46c1461055b578063abf4be011461057c57600080fd5b806387b94e6c116100dc57806387b94e6c146104b057806391d14854146104d0578063a217fddf146104f0578063a3673b381461050557600080fd5b80637b73aa4e146104435780637d5f5802146104585780638129fc1c1461047a5780638400150a1461048f57600080fd5b80632576e65a116101905780633659cfe61161015f5780633659cfe6146103ba5780634f1ef286146103da57806352d1902d146103ed578063620b75df1461040257806375123ff91461042257600080fd5b80632576e65a146103455780632f2ff15d1461035a578063311117081461037a57806336568abe1461039a57600080fd5b80630fc55bfd116101cc5780630fc55bfd146102b157806311eac855146102d3578063154e4f58146102f4578063248a9ca31461031557600080fd5b806301ffc9a7146101fe578063063bde241461023357806307ab0a7e146102615780630d9fe3fd1461029a575b600080fd5b34801561020a57600080fd5b5061021e610219366004613fea565b610651565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b506102536b033b2e3c9fd0803ce800000081565b60405190815260200161022a565b34801561026d57600080fd5b5061016854610282906001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b3480156102a657600080fd5b5061025361016a5481565b3480156102bd57600080fd5b506102d16102cc366004613d3f565b610688565b005b3480156102df57600080fd5b5061016254610282906001600160a01b031681565b34801561030057600080fd5b5061016754610282906001600160a01b031681565b34801561032157600080fd5b50610253610330366004613f8c565b60009081526065602052604090206001015490565b34801561035157600080fd5b5061025361082c565b34801561036657600080fd5b506102d1610375366004613fbe565b61083d565b34801561038657600080fd5b506102d1610395366004613f8c565b610867565b3480156103a657600080fd5b506102d16103b5366004613fbe565b6108d2565b3480156103c657600080fd5b506102d16103d5366004613d24565b610950565b6102d16103e8366004613e34565b610a30565b3480156103f957600080fd5b50610253610afd565b34801561040e57600080fd5b5060fb54610282906001600160a01b031681565b34801561042e57600080fd5b5061016454610282906001600160a01b031681565b34801561044f57600080fd5b506102d1610bb0565b34801561046457600080fd5b5061025360008051602061457e83398151915281565b34801561048657600080fd5b506102d1610be6565b34801561049b57600080fd5b5061016954610282906001600160a01b031681565b3480156104bc57600080fd5b506102d16104cb366004613da4565b610c54565b3480156104dc57600080fd5b5061021e6104eb366004613fbe565b610e9e565b3480156104fc57600080fd5b50610253600081565b34801561051157600080fd5b50610253610ec9565b34801561052657600080fd5b506102d1610535366004613d24565b610ed5565b34801561054657600080fd5b5061016654610282906001600160a01b031681565b34801561056757600080fd5b5061016354610282906001600160a01b031681565b34801561058857600080fd5b5061016554610282906001600160a01b031681565b3480156105a957600080fd5b506102d16105b8366004613ef6565b610fad565b3480156105c957600080fd5b506102d16105d8366004613fbe565b611096565b3480156105e957600080fd5b506102536105f8366004613d24565b6110bb565b34801561060957600080fd5b50610253610618366004613f20565b61113f565b34801561062957600080fd5b506102537f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061068257506301ffc9a760e01b6001600160e01b03198316145b92915050565b610693600033610e9e565b6106b85760405162461bcd60e51b81526004016106af906142ea565b60405180910390fd5b6001600160a01b0385166106de5760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b0384166107045760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b03831661072a5760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b0382166107505760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b0381166107765760405162461bcd60e51b81526004016106af9061434f565b61016280546001600160a01b038781166001600160a01b03199283168117909355610163805488831690841681179091556101648054888416908516811790915561016580548885169086168117909155610166805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f6465fcb206f5f301860b147ada687bc58f38a1834bbea161e3e2be627d40f8489060a00160405180910390a15050505050565b6000610838600061130a565b905090565b6000828152606560205260409020600101546108588161158a565b6108628383611594565b505050565b61087f60008051602061457e83398151915233610e9e565b61089b5760405162461bcd60e51b81526004016106af906141cd565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146109425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106af565b61094c828261161a565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109995760405162461bcd60e51b81526004016106af90614204565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109e260008051602061459e833981519152546001600160a01b031690565b6001600160a01b031614610a085760405162461bcd60e51b81526004016106af90614250565b610a1181611681565b60408051600080825260208201909252610a2d918391906116ab565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a795760405162461bcd60e51b81526004016106af90614204565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ac260008051602061459e833981519152546001600160a01b031690565b6001600160a01b031614610ae85760405162461bcd60e51b81526004016106af90614250565b610af182611681565b61094c828260016116ab565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b9d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106af565b5060008051602061459e83398151915290565b610bc860008051602061457e83398151915233610e9e565b610be45760405162461bcd60e51b81526004016106af906141cd565b565b6000610bf26001611825565b90508015610c0a576000805461ff0019166101001790555b610c126118ad565b8015610a2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016108c7565b610c5f600033610e9e565b610c7b5760405162461bcd60e51b81526004016106af906142ea565b6001600160a01b038816610ca15760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038716610cc75760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038616610ced5760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038516610d135760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038416610d395760405162461bcd60e51b81526004016106af9061434f565b6001600160a01b038316610d5f5760405162461bcd60e51b81526004016106af9061434f565b80610dac5760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f7765640000000000000060448201526064016106af565b61016780546001600160a01b038a81166001600160a01b0319928316811790935561016880548b8316908416811790915561016980548b8416908516811790915561012d80548b8516908616811790915561012e80548b8616908716811790915561012f80548b871690881681179091556101308054968b1696909716861790965561016a889055604080519788526020880194909452868401929092526060860152608085015260a084019290925260c083015260e08201839052517fad6dcec0852f5b75a1c2b7546b3fc4a5a5a33e6a8c36dcf3316cbf397dfbb52e918190036101000190a15050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610838600161130a565b610ee0600033610e9e565b610efc5760405162461bcd60e51b81526004016106af906142ea565b6001600160a01b038116610f225760405162461bcd60e51b81526004016106af9061434f565b60fb54610f479060008051602061457e833981519152906001600160a01b0316611096565b610f5f60008051602061457e8339815191528261083d565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016108c7565b610fc560008051602061457e83398151915233610e9e565b610fe15760405162461bcd60e51b81526004016106af906141cd565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b815230600482015261094c9083906001600160a01b038216906370a082319060240160206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190613fa5565b611916565b6000828152606560205260409020600101546110b18161158a565b610862838361161a565b60006110d560008051602061457e83398151915233610e9e565b6110f15760405162461bcd60e51b81526004016106af906141cd565b60006110fc83611c43565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161112f91815260200190565b60405180910390a190505b919050565b600061115960008051602061457e83398151915233610e9e565b6111755760405162461bcd60e51b81526004016106af906141cd565b600082156111c9577f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1346111a785611c43565b60405190815260200160405180910390a16111c28685611f91565b9050611238565b6111d4868686612237565b9050848110156112385760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106af565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb9061126690879085906004016141a1565b602060405180830381600087803b15801561128057600080fd5b505af1158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b89190613f6f565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b610162546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b9190613fa5565b610169546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156113d557600080fd5b505afa1580156113e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140d9190613fa5565b905080156115835761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190613fa5565b9050600061016760009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d9190614035565b50905060008261152d858461449e565b611537919061447c565b90508615611550576115498186614464565b945061157f565b61271061155e82600661449e565b611568919061447c565b61157290826144bd565b61157c9086614464565b94505b5050505b5092915050565b610a2d81336125b6565b61159e8282610e9e565b61094c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115d63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116248282610e9e565b1561094c5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361094c8161158a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156116de576108628361261a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171757600080fd5b505afa925050508015611747575060408051601f3d908101601f1916820190925261174491810190613fa5565b60015b6117aa5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106af565b60008051602061459e83398151915281146118195760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106af565b506108628383836126b6565b60008054610100900460ff161561186c578160ff1660011480156118485750303b155b6118645760405162461bcd60e51b81526004016106af9061429c565b506000919050565b60005460ff8084169116106118935760405162461bcd60e51b81526004016106af9061429c565b506000805460ff191660ff92909216919091179055600190565b60006118b96001611825565b905080156118d1576000805461ff0019166101001790555b6118d96126e1565b6118e16126e1565b6118ec600033611594565b610c127f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611594565b610162546001600160a01b038381169116146119445760405162461bcd60e51b81526004016106af90614318565b610162546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561198957600080fd5b505afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c19190613fa5565b610162546101675460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926119fb92169085906004016141a1565b602060405180830381600087803b158015611a1557600080fd5b505af1158015611a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d9190613f6f565b506101675460405163aa06ce9b60e01b81526001600160a01b039091169063aa06ce9b90611a8190309085906004016141a1565b602060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad39190613fa5565b50610166546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b519190613fa5565b610166546101695460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392611b8b92169085906004016141a1565b602060405180830381600087803b158015611ba557600080fd5b505af1158015611bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdd9190613f6f565b506101695460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b5050505050505050565b610169546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611c8c57600080fd5b505afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc49190613fa5565b905080611cd45750600092915050565b61016960009054906101000a90046001600160a01b03166001600160a01b0316630b83a7276040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d2557600080fd5b505af1158015611d39573d6000803e3d6000fd5b5050610164546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe9190613fa5565b90508015611e3857610168546101645461016354600092611df3926001600160a01b039182169290821691168560018661274c565b905060008115611e2957610167546101635461016254611e26926001600160a01b03908116928116911685600180612a2a565b90505b611e338185614464565b935050505b610165546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e7d57600080fd5b505afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190613fa5565b90508015611efa5761016a546101655461016254600092611eea92909184916001600160a01b03908116911630808885612c8a565b9050611ef68185614464565b9350505b8215611f87576101625460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611f3390899087906004016141a1565b602060405180830381600087803b158015611f4d57600080fd5b505af1158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190613f6f565b505b5090949350505050565b610162546000906001600160a01b03848116911614611fc25760405162461bcd60e51b81526004016106af90614318565b610169546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561200757600080fd5b505afa15801561201b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203f9190613fa5565b9050806120ca57610162546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561208a57600080fd5b505afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c29190613fa5565b915050610682565b61016954604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561211157600080fd5b505af1158015612125573d6000803e3d6000fd5b5050505061016760009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561217a57600080fd5b505af115801561218e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b29190613fa5565b50610162546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156121f757600080fd5b505afa15801561220b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222f9190613fa5565b949350505050565b610162546000906001600160a01b038581169116146122685760405162461bcd60e51b81526004016106af90614318565b610167546000906122839085906001600160a01b0316612eea565b9050600061016660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122d657600080fd5b505afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190613fa5565b9050600061016760009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190614035565b5090506000816123a8848661449e565b6123b2919061447c565b610169546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156123fc57600080fd5b505afa158015612410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124349190613fa5565b905080821115612442578091505b61016954604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b5050505061016760009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156124f257600080fd5b505af1158015612506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252a9190613fa5565b50610162546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561256f57600080fd5b505afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190613fa5565b955050505050505b9392505050565b6125c08282610e9e565b61094c576125d8816001600160a01b03166014613169565b6125e3836020613169565b6040516020016125f49291906140a1565b60408051601f198184030181529082905262461bcd60e51b82526106af916004016141ba565b6001600160a01b0381163b6126875760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106af565b60008051602061459e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126bf83613305565b6000825111806126cc5750805b15610862576126db8383613345565b50505050565b600054610100900460ff16610be45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106af565b600080826127ff57604051633cd0243b60e11b81526000906001600160a01b038a16906379a04876906127859030908a906004016141a1565b604080518083038186803b15801561279c57600080fd5b505afa1580156127b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d49190614035565b50905060646127e386826144bd565b6127ed908361449e565b6127f7919061447c565b9150506128a6565b6040516366410a2160e01b81526000906001600160a01b038a16906366410a21906128309030908a906004016141a1565b604080518083038186803b15801561284757600080fd5b505afa15801561285b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287f9190614035565b509050606461288e86826144bd565b612898908361449e565b6128a2919061447c565b9150505b806128b5576000915050612a20565b6040805160018082528183019092526000916020808301908036833701905050905088816000815181106128eb576128eb614543565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b39261292d929116908a906004016141a1565b602060405180830381600087803b15801561294757600080fd5b505af115801561295b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297f9190613f6f565b5061012e546001600160a01b031663f87dc1b789898986868a60006129a642610258614464565b6040518963ffffffff1660e01b81526004016129c9989796959493929190614116565b602060405180830381600087803b1580156129e357600080fd5b505af11580156129f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1b9190613fa5565b925050505b9695505050505050565b60008082612ae05761012d54604051631de9507f60e31b81526000916001600160a01b03169063ef4a83f890612a66908c908a906004016141a1565b60206040518083038186803b158015612a7e57600080fd5b505afa158015612a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab69190613fa5565b90506064612ac486826144bd565b612ace908361449e565b612ad8919061447c565b915050612b8a565b61012d5460405163ca19ebd960e01b81526000916001600160a01b03169063ca19ebd990612b14908c908a906004016141a1565b60206040518083038186803b158015612b2c57600080fd5b505afa158015612b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b649190613fa5565b90506064612b7286826144bd565b612b7c908361449e565b612b86919061447c565b9150505b80612b99576000915050612a20565b604080516001808252818301909252600091602080830190803683370190505090508881600081518110612bcf57612bcf614543565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b392612c11929116908a906004016141a1565b602060405180830381600087803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c639190613f6f565b5061012e546001600160a01b0316630dd4ebd989898986868a60006129a642610258614464565b610130546040516370a0823160e01b81523060048201526000916001600160a01b038981169263095ea7b392919091169083906370a082319060240160206040518083038186803b158015612cde57600080fd5b505afa158015612cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d169190613fa5565b6040518363ffffffff1660e01b8152600401612d339291906141a1565b602060405180830381600087803b158015612d4d57600080fd5b505af1158015612d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d859190613f6f565b50612dd26040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b89815260208101896001811115612deb57612deb61452d565b90816001811115612dfe57612dfe61452d565b9052506001600160a01b0388811660408381019190915288821660608085019190915260808085018890528251908101835260006020820181905291810191909152888316815287831691810191909152610130549091166352bbbe29838387612e6a42610258614464565b6040518563ffffffff1660e01b8152600401612e899493929190614386565b602060405180830381600087803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edb9190613fa5565b9b9a5050505050505050505050565b60006001826001600160a01b03166317be952e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2757600080fd5b505afa158015612f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5f9190614014565b6002811115612f7057612f7061452d565b14612f7c575081610682565b612ff0604051806101a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03831681526020810184905261300c81613439565b604082015261301a816135b0565b60608201526130288161372d565b6080820152613036816137b1565b60a0820152613044816137d6565b60c0820152613052816138b0565b60e0820152613060816138d2565b61010082015261306f81613968565b61012082015261307e8161397a565b61014082015261308d8161399f565b61016082015261309c81613a2c565b8161018001818152505060006130e98260c001516130e38461012001516130dd8661010001516130dd8860e001518960a00151613a8690919063ffffffff16565b90613a86565b90613ad1565b905060006130f682613b19565b9050600061311282856101400151613a8690919063ffffffff16565b9050600061314085610180015161313a670de0b6b3a764000085613b7190919063ffffffff16565b90613bd2565b9050600061315c82876101600151613ad190919063ffffffff16565b9998505050505050505050565b6060600061317883600261449e565b613183906002614464565b67ffffffffffffffff81111561319b5761319b614559565b6040519080825280601f01601f1916602001820160405280156131c5576020820181803683370190505b509050600360fc1b816000815181106131e0576131e0614543565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061320f5761320f614543565b60200101906001600160f81b031916908160001a905350600061323384600261449e565b61323e906001614464565b90505b60018111156132b6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061327257613272614543565b1a60f81b82828151811061328857613288614543565b60200101906001600160f81b031916908160001a90535060049490941c936132af81614500565b9050613241565b5083156125af5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106af565b61330e8161261a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6133ad5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106af565b600080846001600160a01b0316846040516133c89190614085565b600060405180830381855af49150503d8060008114613403576040519150601f19603f3d011682016040523d82523d6000602084013e613408565b606091505b509150915061343082826040518060600160405280602781526020016145be60279139613c1e565b95945050505050565b60008061352983600001516001600160a01b031663245c96856040518163ffffffff1660e01b815260040160206040518083038186803b15801561347c57600080fd5b505afa158015613490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b49190613fa5565b84600001516001600160a01b0316637c9b8e896040518163ffffffff1660e01b815260040160206040518083038186803b1580156134f157600080fd5b505afa158015613505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e39190613fa5565b9050600083600001516001600160a01b031663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561356a57600080fd5b505afa15801561357e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a29190613fa5565b905060006134308383613c57565b60008082600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f057600080fd5b505afa158015613604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136289190613fa5565b9050600083600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561366957600080fd5b505afa15801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a19190613fa5565b905060006136c76136c160046136bb858960400151613c6f565b90613b71565b84613c8d565b90506136e76136e2670de0b6b3a76400006136bb8482613a86565b613b19565b9050600061371061370083670de0b6b3a7640000613ad1565b61370b856002613b71565b613c8d565b9050612a2084613728670de0b6b3a764000084613a86565b613ca5565b600061068282602001516130e3600285600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561377957600080fd5b505afa15801561378d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bb9190613fa5565b6060810151600090610682906137c79080613b71565b60408401516130dd9080613b71565b60008061386d670de0b6b3a764000061313a60026136bb87600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561382a57600080fd5b505afa15801561383e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138629190613fa5565b604089015190613b71565b90506000613890826130dd86604001518760800151613a8690919063ffffffff16565b9050600061343060026136bb876060015185613b7190919063ffffffff16565b600061068260026136bb84604001518560800151613b7190919063ffffffff16565b6000610682670de0b6b3a764000061313a60026136bb86600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561392557600080fd5b505afa158015613939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395d9190613fa5565b60e088015190613b71565b60808101516000906106829080613b71565b600061068282608001516130e384604001518560600151613a8690919063ffffffff16565b600061068282608001516130e384600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156139e957600080fd5b505afa1580156139fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a219190613fa5565b606086015190613a86565b6000610682613a446002670de0b6b3a7640000613b71565b6130dd600285600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561377957600080fd5b600080613a938385614464565b9050838110156125af5760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b60448201526064016106af565b600082821115613b0f5760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b60448201526064016106af565b6125af82846144bd565b600080613b2760028461447c565b613b32906001614464565b90508291505b81811015613b6b57905080600281613b50818661447c565b613b5a9190614464565b613b64919061447c565b9050613b38565b50919050565b600082613b8057506000610682565b6000613b8c838561449e565b905082613b99858361447c565b146125af5760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b60448201526064016106af565b6000808211613c145760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b60448201526064016106af565b6125af828461447c565b60608315613c2d5750816125af565b825115613c3d5782518084602001fd5b8160405162461bcd60e51b81526004016106af91906141ba565b60006125af8261313a85670de0b6b3a7640000613b71565b60006125af670de0b6b3a7640000613c878585613b71565b90613cc4565b60006125af82613c8785670de0b6b3a7640000613b71565b6000670de0b6b3a7640000613cba8484613b71565b6125af919061447c565b600080613cd18484613bd2565b90506000613cdf848361449e565b613ce990866144bd565b90508015613d0557613cfc826001614464565b92505050610682565b509050610682565b80356001600160a01b038116811461113a57600080fd5b600060208284031215613d3657600080fd5b6125af82613d0d565b600080600080600060a08688031215613d5757600080fd5b613d6086613d0d565b9450613d6e60208701613d0d565b9350613d7c60408701613d0d565b9250613d8a60608701613d0d565b9150613d9860808701613d0d565b90509295509295909350565b600080600080600080600080610100898b031215613dc157600080fd5b613dca89613d0d565b9750613dd860208a01613d0d565b9650613de660408a01613d0d565b9550613df460608a01613d0d565b9450613e0260808a01613d0d565b9350613e1060a08a01613d0d565b9250613e1e60c08a01613d0d565b915060e089013590509295985092959890939650565b60008060408385031215613e4757600080fd5b613e5083613d0d565b9150602083013567ffffffffffffffff80821115613e6d57600080fd5b818501915085601f830112613e8157600080fd5b813581811115613e9357613e93614559565b604051601f8201601f19908116603f01168101908382118183101715613ebb57613ebb614559565b81604052828152886020848701011115613ed457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215613f0957600080fd5b613f1283613d0d565b946020939093013593505050565b60008060008060808587031215613f3657600080fd5b613f3f85613d0d565b935060208501359250613f5460408601613d0d565b91506060850135613f648161456f565b939692955090935050565b600060208284031215613f8157600080fd5b81516125af8161456f565b600060208284031215613f9e57600080fd5b5035919050565b600060208284031215613fb757600080fd5b5051919050565b60008060408385031215613fd157600080fd5b82359150613fe160208401613d0d565b90509250929050565b600060208284031215613ffc57600080fd5b81356001600160e01b0319811681146125af57600080fd5b60006020828403121561402657600080fd5b8151600381106125af57600080fd5b6000806040838503121561404857600080fd5b505080516020909101519092909150565b600081518084526140718160208601602086016144d4565b601f01601f19169290920160200192915050565b600082516140978184602087016144d4565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140d98160178501602088016144d4565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161410a8160288401602088016144d4565b01602801949350505050565b6001600160a01b038981168252888116602080840191909152604083018990526060830188905261010060808401819052875190840181905260009261012085019289810192855b8181101561417c57845184168652948201949382019360010161415e565b505050505060a08301959095525091151560c083015260e09091015295945050505050565b6001600160a01b03929092168252602082015260400190565b6020815260006125af6020830184614059565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60e08152845160e082015260006020860151600281106143b657634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b031661012083015260608601516143eb6101408401826001600160a01b03169052565b50608086015161016083015260a086015160c06101808401526144126101a0840182614059565b915050614452602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b6000821982111561447757614477614517565b500190565b60008261449957634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156144b8576144b8614517565b500290565b6000828210156144cf576144cf614517565b500390565b60005b838110156144ef5781810151838201526020016144d7565b838111156126db5750506000910152565b60008161450f5761450f614517565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610a2d57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206e78a7f85fb195cbe4bd5481a398651b518ae94f548c7e5ae5f2a025d35b1a0164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1363,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1670,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32344,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 32666,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33660,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV1Helper",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IDODOV1Helper)28192"
      },
      {
        "astId": 33663,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoProxy",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IDODOProxy)27992"
      },
      {
        "astId": 33665,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoApprove",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 32682,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "balancerVault",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IVault)27647"
      },
      {
        "astId": 33650,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13711,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdcToken",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 13714,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdtToken",
        "offset": 0,
        "slot": "355",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 13717,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoToken",
        "offset": 0,
        "slot": "356",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 13720,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "357",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 13723,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdcLPToken",
        "offset": 0,
        "slot": "358",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 13726,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV1UsdcUsdtPool",
        "offset": 0,
        "slot": "359",
        "type": "t_contract(IDODOV1)28171"
      },
      {
        "astId": 13729,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV2DodoUsdtPool",
        "offset": 0,
        "slot": "360",
        "type": "t_contract(IDODOV2)28217"
      },
      {
        "astId": 13732,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoMine",
        "offset": 0,
        "slot": "361",
        "type": "t_contract(IDODOMine)27945"
      },
      {
        "astId": 13734,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "balancerPoolIdWmaticUsdcWethBal",
        "offset": 0,
        "slot": "362",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDODOMine)27945": {
        "encoding": "inplace",
        "label": "contract IDODOMine",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOProxy)27992": {
        "encoding": "inplace",
        "label": "contract IDODOProxy",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1)28171": {
        "encoding": "inplace",
        "label": "contract IDODOV1",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1Helper)28192": {
        "encoding": "inplace",
        "label": "contract IDODOV1Helper",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV2)28217": {
        "encoding": "inplace",
        "label": "contract IDODOV2",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1823": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)27647": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}