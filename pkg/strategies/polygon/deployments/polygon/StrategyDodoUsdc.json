{
  "address": "0xaF7800Ee99ABF99986978B0D357E5f6813aF8638",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV1UsdcUsdtPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV2DodoUsdtPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoMine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV1Helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoApprove",
          "type": "address"
        }
      ],
      "name": "StrategyDodoUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcLPToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdtLPToken",
          "type": "address"
        }
      ],
      "name": "StrategyDodoUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoMine",
      "outputs": [
        {
          "internalType": "contract IDODOMine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV1UsdcUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV2DodoUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dodoV1UsdcUsdtPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoV2DodoUsdtPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoMine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoV1Helper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoApprove",
          "type": "address"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcLPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtLPToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "a1ac49656a7e05fed44e7fc180ce06a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV1UsdcUsdtPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV2DodoUsdtPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoMine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV1Helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoApprove\",\"type\":\"address\"}],\"name\":\"StrategyDodoUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcLPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtLPToken\",\"type\":\"address\"}],\"name\":\"StrategyDodoUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoMine\",\"outputs\":[{\"internalType\":\"contract IDODOMine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV1UsdcUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV2DodoUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoV1UsdcUsdtPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoV2DodoUsdtPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoMine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoV1Helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoApprove\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtLPToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyDodoUsdc.sol\":\"StrategyDodoUsdc\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/StrategyDodoUsdc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./exchanges/DodoExchange.sol\\\";\\nimport \\\"./core/Strategy.sol\\\";\\nimport \\\"./connectors/dodo/interfaces/IDODOV1.sol\\\";\\nimport \\\"./connectors/dodo/interfaces/IDODOV2.sol\\\";\\nimport \\\"./connectors/dodo/interfaces/IDODOMine.sol\\\";\\n\\ncontract StrategyDodoUsdc is Strategy, DodoExchange {\\n\\n    IERC20 public usdcToken;\\n    IERC20 public usdtToken;\\n    IERC20 public dodoToken;\\n    IERC20 public usdcLPToken;\\n    IERC20 public usdtLPToken;\\n\\n    IDODOV1 public dodoV1UsdcUsdtPool;\\n    IDODOV2 public dodoV2DodoUsdtPool;\\n    IDODOMine public dodoMine;\\n\\n\\n    // --- events\\n\\n    event StrategyDodoUpdatedTokens(address usdcToken, address usdtToken, address dodoToken, address usdcLPToken,\\n        address usdtLPToken);\\n\\n    event StrategyDodoUpdatedParams(address dodoV1UsdcUsdtPool, address dodoV2DodoUsdtPool, address dodoMine,\\n        address dodoV1Helper, address dodoProxy, address dodoApprove);\\n\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n    // --- Setters\\n\\n    function setTokens(\\n        address _usdcToken,\\n        address _usdtToken,\\n        address _dodoToken,\\n        address _usdcLPToken,\\n        address _usdtLPToken\\n    ) external onlyAdmin {\\n\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdtToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcLPToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdtLPToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = IERC20(_usdcToken);\\n        usdtToken = IERC20(_usdtToken);\\n        dodoToken = IERC20(_dodoToken);\\n        usdcLPToken = IERC20(_usdcLPToken);\\n        usdtLPToken = IERC20(_usdtLPToken);\\n\\n        emit StrategyDodoUpdatedTokens(_usdcToken, _usdtToken, _dodoToken, _usdcLPToken, _usdtLPToken);\\n    }\\n\\n    function setParams(\\n        address _dodoV1UsdcUsdtPool,\\n        address _dodoV2DodoUsdtPool,\\n        address _dodoMine,\\n        address _dodoV1Helper,\\n        address _dodoProxy,\\n        address _dodoApprove\\n    ) external onlyAdmin {\\n\\n        require(_dodoV1UsdcUsdtPool != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoV2DodoUsdtPool != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoMine != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoV1Helper != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoProxy != address(0), \\\"Zero address not allowed\\\");\\n        require(_dodoApprove != address(0), \\\"Zero address not allowed\\\");\\n\\n        dodoV1UsdcUsdtPool = IDODOV1(_dodoV1UsdcUsdtPool);\\n        dodoV2DodoUsdtPool = IDODOV2(_dodoV2DodoUsdtPool);\\n        dodoMine = IDODOMine(_dodoMine);\\n\\n        setDodoParams(_dodoV1Helper, _dodoProxy, _dodoApprove);\\n\\n        emit StrategyDodoUpdatedParams(_dodoV1UsdcUsdtPool, _dodoV2DodoUsdtPool, _dodoMine, _dodoV1Helper, _dodoProxy, _dodoApprove);\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        // stake all usdc tokens\\n        uint256 usdcTokenAmount = usdcToken.balanceOf(address(this));\\n\\n        // add liquidity to pool\\n        usdcToken.approve(address(dodoV1UsdcUsdtPool), usdcTokenAmount);\\n        dodoV1UsdcUsdtPool.depositBaseTo(address(this), usdcTokenAmount);\\n\\n        // stake all lp tokens, because we unstake 0.01% tokens in _unstake() method\\n        uint256 usdcLPTokenBalance = usdcLPToken.balanceOf(address(this));\\n        usdcLPToken.approve(address(dodoMine), usdcLPTokenBalance);\\n        dodoMine.deposit(address(usdcLPToken), usdcLPTokenBalance);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        // don't count already unstaked usdc tokens and add 5 usdc for small values\\n        uint256 usdcTokenAmount = _amount - usdcToken.balanceOf(address(this)) + 5;\\n\\n        // get lp tokens\\n        uint256 baseLpTotalSupply = usdcLPToken.totalSupply();\\n        (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\n        uint256 baseLpBalance = usdcTokenAmount * baseLpTotalSupply / baseTarget;\\n        // add 1%\\n        baseLpBalance = baseLpBalance * 101 / 100;\\n\\n        // unstake lp tokens\\n        dodoMine.withdraw(address(usdcLPToken), baseLpBalance);\\n\\n        // remove liquidity from pool\\n        uint256 redeemedTokens = dodoV1UsdcUsdtPool.withdrawAllBase();\\n\\n        // return all usdc tokens\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        // unstake all lp tokens\\n        dodoMine.withdrawAll(address(usdcLPToken));\\n\\n        // remove liquidity from pool\\n        uint256 redeemedTokens = dodoV1UsdcUsdtPool.withdrawAllBase();\\n\\n        // return all usdc tokens\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external override view returns (uint256) {\\n        return _totalValue();\\n    }\\n\\n    function liquidationValue() external override view returns (uint256) {\\n        return _totalValue();\\n    }\\n\\n    function _totalValue() internal view returns (uint256) {\\n        uint256 baseLpBalance = dodoMine.getUserLpBalance(address(usdcLPToken), address(this));\\n        if (baseLpBalance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 baseLpTotalSupply = usdcLPToken.totalSupply();\\n        (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\n        uint256 amount = baseLpBalance * baseTarget / baseLpTotalSupply;\\n\\n        return usdcToken.balanceOf(address(this)) + amount;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards\\n        dodoMine.claimAll();\\n\\n        uint256 dodoBalance = dodoToken.balanceOf(address(this));\\n        if (dodoBalance == 0) {\\n            return 0;\\n        }\\n\\n        // swap v2 dodo -> usdt\\n        uint256 usdtTokenAmount = _useDodoSwapV2(address(dodoV2DodoUsdtPool), address(dodoToken), address(usdtToken), dodoBalance, 1, 0);\\n\\n        // swap v1 usdt -> usdc\\n        uint256 usdcTokenAmount = _useDodoSwapV1(address(dodoV1UsdcUsdtPool), address(usdtToken), address(usdcToken), usdtTokenAmount, 1, 1);\\n\\n        usdcToken.transfer(_to, usdcToken.balanceOf(address(this)));\\n\\n        return usdcTokenAmount;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0b800de42948ac2b5f281ae44f11b8b4cf26c3917f50cdd0cc040c849ae21042\",\"license\":\"MIT\"},\"contracts/connectors/dodo/interfaces/IDODOMine.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOMine {\\n\\n    // ============ Helper ============\\n\\n    function getUserLpBalance(address _lpToken, address _user) external view returns (uint256);\\n\\n    // ============ View Rewards ============\\n\\n    function getPendingReward(address _lpToken, address _user) external view returns (uint256);\\n\\n    function getAllPendingReward(address _user) external view returns (uint256);\\n\\n    function getRealizedReward(address _user) external view returns (uint256);\\n\\n    function getDlpMiningSpeed(address _lpToken) external view returns (uint256);\\n\\n    // ============ Deposit & Withdraw & Claim ============\\n    // Deposit & withdraw will also trigger claim\\n\\n    function deposit(address _lpToken, uint256 _amount) external;\\n\\n    function withdraw(address _lpToken, uint256 _amount) external;\\n\\n    function withdrawAll(address _lpToken) external;\\n\\n    function claim(address _lpToken) external;\\n\\n    function claimAll() external;\\n\\n}\\n\",\"keccak256\":\"0xc3d27fd6894204bc8ca6beb7e1b4c778efd9fac5f60bdc0bf4b1b7b6aee55123\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOProxy.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOProxy {\\n    function dodoSwapV1(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool,\\n        uint256 deadLine\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function dodoSwapV2TokenToToken(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external returns (uint256 returnAmount);\\n}\",\"keccak256\":\"0x6360277bac272439faf6a26471493ca933e1542f3b76b2ae12212b80e737b2bb\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOV1.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOV1 {\\n    function init(\\n        address owner,\\n        address supervisor,\\n        address maintainer,\\n        address baseToken,\\n        address quoteToken,\\n        address oracle,\\n        uint256 lpFeeRate,\\n        uint256 mtFeeRate,\\n        uint256 k,\\n        uint256 gasPriceLimit\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function claimOwnership() external;\\n\\n    function sellBaseToken(\\n        uint256 amount,\\n        uint256 minReceiveQuote,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function buyBaseToken(\\n        uint256 amount,\\n        uint256 maxPayQuote,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\\n\\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\\n\\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\\n\\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\\n\\n    function withdrawBase(uint256 amount) external returns (uint256);\\n\\n    function withdrawAllBase() external returns (uint256);\\n\\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\\n\\n    function withdrawQuote(uint256 amount) external returns (uint256);\\n\\n    function withdrawAllQuote() external returns (uint256);\\n\\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\\n\\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\\n\\n    function _BASE_TOKEN_() external returns (address);\\n\\n    function _QUOTE_TOKEN_() external returns (address);\\n}\\n\",\"keccak256\":\"0x02fca87973dd659b767edc123eaf062a6cbb90f8b6628bdee0089c793b3d5f3d\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOV1Helper.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOV1Helper {\\n    function querySellQuoteToken(\\n        address dodoV1Pool,\\n        uint256 quoteAmount\\n    ) external view returns (uint256 receivedBaseAmount);\\n\\n    function querySellBaseToken(\\n        address dodoV1Pool,\\n        uint256 baseAmount\\n    ) external view returns (uint256 receivedQuoteAmount);\\n}\\n\",\"keccak256\":\"0x70a7deedd64a71b9aacf4a20150b86d29a85d352605fbb062406cc96e8b00ed0\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/interfaces/IDODOV2.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDODOV2 {\\n    function querySellBase(\\n        address trader,\\n        uint256 payBaseAmount\\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\\n\\n    function querySellQuote(\\n        address trader,\\n        uint256 payQuoteAmount\\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\\n}\\n\",\"keccak256\":\"0x49940c4f58c5e93b581cd625ae7e163cc0e5df02aa19a208c59be71d8ac2d862\",\"license\":\"Apache-2.0\"},\"contracts/core/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x704853024cb4f4c92c33c999adbe18521136f4741e448096a8c08d5f0366d4d6\",\"license\":\"GPL-3.0\"},\"contracts/core/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyPortfolioManager {\\n        emit Stake(_amount);\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        uint256 balanceUSDC = IERC20(_asset).balanceOf(address(this));\\n        IERC20(_asset).transfer(_beneficiary, balanceUSDC);\\n        emit Unstake(_amount, balanceUSDC);\\n\\n        return balanceUSDC;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x830172b96e4661c45f5f8f12c0ad829628fa7db58bdf18bcff64ba4e34e44cd7\",\"license\":\"MIT\"},\"contracts/exchanges/DodoExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/dodo/interfaces/IDODOV1Helper.sol\\\";\\nimport \\\"../connectors/dodo/interfaces/IDODOProxy.sol\\\";\\nimport \\\"../connectors/dodo/interfaces/IDODOV2.sol\\\";\\n\\n\\n\\n/*\\n    There are six swap functions in DODOProxy. Which are executed for different sources or versions\\n\\n    - dodoSwapV1: Used for DODOV1 pools\\n    - dodoSwapV2ETHToToken: Used for DODOV2 pools and specify ETH as fromToken\\n    - dodoSwapV2TokenToETH: Used for DODOV2 pools and specify ETH as toToken\\n    - dodoSwapV2TokenToToken:  Used for DODOV2 pools and both fromToken and toToken are ERC20\\n    - externalSwap: Used for executing third-party protocols' aggregation algorithm\\n    - mixSwap: Used for executing DODO\\u2019s custom aggregation algorithm\\n\\n    Note: Best Trading path is calculated by off-chain program. DODOProxy's swap functions is only used for executing.\\n*/\\nabstract contract DodoExchange {\\n\\n    IDODOV1Helper private dodoV1Helper;\\n    IDODOProxy private dodoProxy;\\n    address private dodoApprove;\\n\\n    function setDodoParams(\\n        address _dodoV1Helper,\\n        address _dodoProxy,\\n        address _dodoApprove\\n    ) internal {\\n        dodoV1Helper = IDODOV1Helper(_dodoV1Helper);\\n        dodoProxy = IDODOProxy(_dodoProxy);\\n        dodoApprove = _dodoApprove;\\n    }\\n\\n    /*\\n        The code example assumes user wanting to use the specify DODOV1 pool for swapping\\n\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\n        combination to represent the multi-hop directions to save gas consumption\\n        For example:\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\n    */\\n    function _useDodoSwapV1(\\n        address dodoV1Pool,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 slippage,\\n        uint256 directions\\n    ) internal returns (uint256) {\\n\\n        uint256 minReturnAmount;\\n        if (directions == 0) {\\n            uint256 receivedQuoteAmount = dodoV1Helper.querySellBaseToken(dodoV1Pool, fromTokenAmount);\\n            minReturnAmount = receivedQuoteAmount * (100 - slippage) / 100;\\n        } else {\\n            uint256 receivedBaseAmount = dodoV1Helper.querySellQuoteToken(dodoV1Pool, fromTokenAmount);\\n            minReturnAmount = receivedBaseAmount * (100 - slippage) / 100;\\n        }\\n\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV1Pool;\\n\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\n\\n        return dodoProxy.dodoSwapV1(\\n            fromToken,\\n            toToken,\\n            fromTokenAmount,\\n            minReturnAmount,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    /*\\n        The code example assumes user wanting to use the specify DODOV2 pool for swapping\\n\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\n        combination to represent the multi-hop directions to save gas consumption\\n        For example:\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\n    */\\n    function _useDodoSwapV2(\\n        address dodoV2Pool,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 slippage,\\n        uint256 directions\\n    ) internal returns (uint256) {\\n\\n        uint256 minReturnAmount;\\n        if (directions == 0) {\\n            (uint256 receiveQuoteAmount,) = IDODOV2(dodoV2Pool).querySellBase(address(this), fromTokenAmount);\\n            minReturnAmount = receiveQuoteAmount * (100 - slippage) / 100;\\n        } else {\\n            (uint256 receiveBaseAmount,) = IDODOV2(dodoV2Pool).querySellQuote(address(this), fromTokenAmount);\\n            minReturnAmount = receiveBaseAmount * (100 - slippage) / 100;\\n        }\\n\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV2Pool;\\n\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\n\\n        return dodoProxy.dodoSwapV2TokenToToken(\\n            fromToken,\\n            toToken,\\n            fromTokenAmount,\\n            minReturnAmount,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x23543ced3e8ed36d6d616284d48f6ddeb12afabff3360aa039f299b777bef3e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16620000365760005460ff161562000040565b62000040620000e5565b620000a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000cb576000805461ffff19166101011790555b8015620000de576000805461ff00191690555b5062000112565b6000620000fd306200010360201b620011831760201c565b15905090565b6001600160a01b03163b151590565b60805160601c6133576200014d6000396000818161084201528181610882015281816109220152818161096201526109f101526133576000f3fe6080604052600436106101cd5760003560e01c806375123ff9116100f7578063a440b21a11610095578063d547741f11610064578063d547741f14610510578063ef5cfb8c14610530578063f6f6b88114610550578063f72c0d8b1461057057600080fd5b8063a440b21a1461048e578063a7a61d05146104ae578063a98ad46c146104cf578063adc9772e146104f057600080fd5b80638400150a116100d15780638400150a1461043857806391d1485414610459578063a217fddf14610479578063a3673b38146102e257600080fd5b806375123ff9146103e05780637d5f5802146104015780638129fc1c1461042357600080fd5b80632f2ff15d1161016f57806352d1902d1161013e57806352d1902d1461036a5780635ebb8dee1461037f5780635f5d905c1461039f578063620b75df146103c057600080fd5b80632f2ff15d146102f757806336568abe146103175780633659cfe6146103375780634f1ef2861461035757600080fd5b806311eac855116101ab57806311eac85514610262578063154e4f5814610283578063248a9ca3146102a45780632576e65a146102e257600080fd5b806301ffc9a7146101d257806307ab0a7e146102075780630fc55bfd14610240575b600080fd5b3480156101de57600080fd5b506101f26101ed366004612e48565b6105a4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061013654610228906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561024c57600080fd5b5061026061025b366004612bb9565b6105db565b005b34801561026e57600080fd5b5061013054610228906001600160a01b031681565b34801561028f57600080fd5b5061013554610228906001600160a01b031681565b3480156102b057600080fd5b506102d46102bf366004612dea565b60009081526065602052604090206001015490565b6040519081526020016101fe565b3480156102ee57600080fd5b506102d461077f565b34801561030357600080fd5b50610260610312366004612e1c565b61078e565b34801561032357600080fd5b50610260610332366004612e1c565b6107b9565b34801561034357600080fd5b50610260610352366004612b9e565b610837565b610260610365366004612c92565b610917565b34801561037657600080fd5b506102d46109e4565b34801561038b57600080fd5b5061026061039a366004612c1e565b610a97565b3480156103ab57600080fd5b5061013454610228906001600160a01b031681565b3480156103cc57600080fd5b5060fb54610228906001600160a01b031681565b3480156103ec57600080fd5b5061013254610228906001600160a01b031681565b34801561040d57600080fd5b506102d46000805160206132bb83398151915281565b34801561042f57600080fd5b50610260610c6f565b34801561044457600080fd5b5061013754610228906001600160a01b031681565b34801561046557600080fd5b506101f2610474366004612e1c565b610ce8565b34801561048557600080fd5b506102d4600081565b34801561049a57600080fd5b506102606104a9366004612b9e565b610d13565b3480156104ba57600080fd5b5061013354610228906001600160a01b031681565b3480156104db57600080fd5b5061013154610228906001600160a01b031681565b3480156104fc57600080fd5b5061026061050b366004612d54565b610df1565b34801561051c57600080fd5b5061026061052b366004612e1c565b610eda565b34801561053c57600080fd5b506102d461054b366004612b9e565b610f00565b34801561055c57600080fd5b506102d461056b366004612d7e565b610f84565b34801561057c57600080fd5b506102d47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806105d557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105e6600033610ce8565b61060b5760405162461bcd60e51b81526004016106029061311b565b60405180910390fd5b6001600160a01b0385166106315760405162461bcd60e51b815260040161060290613180565b6001600160a01b0384166106575760405162461bcd60e51b815260040161060290613180565b6001600160a01b03831661067d5760405162461bcd60e51b815260040161060290613180565b6001600160a01b0382166106a35760405162461bcd60e51b815260040161060290613180565b6001600160a01b0381166106c95760405162461bcd60e51b815260040161060290613180565b61013080546001600160a01b038781166001600160a01b03199283168117909355610131805488831690841681179091556101328054888416908516811790915561013380548885169086168117909155610134805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f1eb2ec66971c47166b02af35b989cec29a89ac6ca053121f2445e524658066dc9060a00160405180910390a15050505050565b6000610789611192565b905090565b6000828152606560205260409020600101546107aa81336113e2565b6107b48383611446565b505050565b6001600160a01b03811633146108295760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610602565b61083382826114cc565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108805760405162461bcd60e51b815260040161060290613035565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108c96000805160206132db833981519152546001600160a01b031690565b6001600160a01b0316146108ef5760405162461bcd60e51b815260040161060290613081565b6108f881611533565b604080516000808252602082019092526109149183919061155e565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109605760405162461bcd60e51b815260040161060290613035565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109a96000805160206132db833981519152546001600160a01b031690565b6001600160a01b0316146109cf5760405162461bcd60e51b815260040161060290613081565b6109d882611533565b6108338282600161155e565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a845760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610602565b506000805160206132db83398151915290565b610aa2600033610ce8565b610abe5760405162461bcd60e51b81526004016106029061311b565b6001600160a01b038616610ae45760405162461bcd60e51b815260040161060290613180565b6001600160a01b038516610b0a5760405162461bcd60e51b815260040161060290613180565b6001600160a01b038416610b305760405162461bcd60e51b815260040161060290613180565b6001600160a01b038316610b565760405162461bcd60e51b815260040161060290613180565b6001600160a01b038216610b7c5760405162461bcd60e51b815260040161060290613180565b6001600160a01b038116610ba25760405162461bcd60e51b815260040161060290613180565b61013580546001600160a01b038881166001600160a01b03199283168117909355610136805489831690841681179091556101378054898416908516811790915561012d8054898516908616811790915561012e8054898616908716811790915561012f8054958916959096168517909555604080519687526020870193909352858301919091526060850152608084019290925260a0830152517fbc987a95c487955e4fb493a3897aae49196bf1704fe15d64f858bc671ec8e77a9181900360c00190a1505050505050565b600054610100900460ff16610c8a5760005460ff1615610c8e565b303b155b610caa5760405162461bcd60e51b8152600401610602906130cd565b600054610100900460ff16158015610ccc576000805461ffff19166101011790555b610cd46116d8565b8015610914576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d1e600033610ce8565b610d3a5760405162461bcd60e51b81526004016106029061311b565b6001600160a01b038116610d605760405162461bcd60e51b815260040161060290613180565b60fb54610d85906000805160206132bb833981519152906001600160a01b0316610eda565b610d9d6000805160206132bb8339815191528261078e565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b610e096000805160206132bb83398151915233610ce8565b610e255760405162461bcd60e51b815260040161060290612ffe565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b81523060048201526108339083906001600160a01b038216906370a082319060240160206040518083038186803b158015610e9d57600080fd5b505afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612e03565b61177a565b600082815260656020526040902060010154610ef681336113e2565b6107b483836114cc565b6000610f1a6000805160206132bb83398151915233610ce8565b610f365760405162461bcd60e51b815260040161060290612ffe565b6000610f4183611ab2565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea13481604051610f7491815260200190565b60405180910390a190505b919050565b6000610f9e6000805160206132bb83398151915233610ce8565b610fba5760405162461bcd60e51b815260040161060290612ffe565b60008215610fd357610fcc8685611cfa565b9050611042565b610fde868686611e9e565b9050848110156110425760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610602565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190612e03565b60405163a9059cbb60e01b81529091506001600160a01b0388169063a9059cbb906110ed9088908590600401612fb2565b602060405180830381600087803b15801561110757600080fd5b505af115801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612dcd565b5060408051878152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19695505050505050565b6001600160a01b03163b151590565b61013754610133546040516319a78f5560e01b81526001600160a01b039182166004820152306024820152600092839216906319a78f559060440160206040518083038186803b1580156111e557600080fd5b505afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190612e03565b90508061122c57600091505090565b61013354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561127257600080fd5b505afa158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190612e03565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b1580156112fc57600080fd5b505afa158015611310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113349190612e72565b50905060008261134483866131f1565b61134e91906131cf565b610130546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561139757600080fd5b505afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190612e03565b6113d991906131b7565b94505050505090565b6113ec8282610ce8565b61083357611404816001600160a01b0316601461222c565b61140f83602061222c565b604051602001611420929190612eb2565b60408051601f198184030181529082905262461bcd60e51b825261060291600401612fcb565b6114508282610ce8565b6108335760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114883390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114d68282610ce8565b156108335760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361083381336113e2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611591576107b4836123c8565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ca57600080fd5b505afa9250505080156115fa575060408051601f3d908101601f191682019092526115f791810190612e03565b60015b61165d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610602565b6000805160206132db83398151915281146116cc5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610602565b506107b4838383612464565b600054610100900460ff166116f35760005460ff16156116f7565b303b155b6117135760405162461bcd60e51b8152600401610602906130cd565b600054610100900460ff16158015611735576000805461ffff19166101011790555b61173d61248f565b61174561248f565b611750600033611446565b610cd47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611446565b610130546001600160a01b038381169116146117a85760405162461bcd60e51b815260040161060290613149565b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117ed57600080fd5b505afa158015611801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118259190612e03565b610130546101355460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261185f9216908590600401612fb2565b602060405180830381600087803b15801561187957600080fd5b505af115801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b19190612dcd565b506101355460405163aa06ce9b60e01b81526001600160a01b039091169063aa06ce9b906118e59030908590600401612fb2565b602060405180830381600087803b1580156118ff57600080fd5b505af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190612e03565b50610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b59190612e03565b610133546101375460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926119ef9216908590600401612fb2565b602060405180830381600087803b158015611a0957600080fd5b505af1158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a419190612dcd565b5061013754610133546040516311f9fbc960e21b81526001600160a01b03928316926347e7ef2492611a7a929116908590600401612fb2565b600060405180830381600087803b158015611a9457600080fd5b505af1158015611aa8573d6000803e3d6000fd5b5050505050505050565b610137546040805163d1058e5960e01b815290516000926001600160a01b03169163d1058e59916004808301928692919082900301818387803b158015611af857600080fd5b505af1158015611b0c573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015611b5757600080fd5b505afa158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f9190612e03565b905080611b9f5750600092915050565b610136546101325461013154600092611bcc926001600160a01b03918216929082169116856001866124fc565b610135546101315461013054929350600092611bfb926001600160a01b039081169281169116856001806127c9565b610130546040516370a0823160e01b81523060048201529192506001600160a01b03169063a9059cbb90879083906370a082319060240160206040518083038186803b158015611c4a57600080fd5b505afa158015611c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c829190612e03565b6040518363ffffffff1660e01b8152600401611c9f929190612fb2565b602060405180830381600087803b158015611cb957600080fd5b505af1158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190612dcd565b50949350505050565b610130546000906001600160a01b03848116911614611d2b5760405162461bcd60e51b815260040161060290613149565b6101375461013354604051630fa09e6360e41b81526001600160a01b03918216600482015291169063fa09e63090602401600060405180830381600087803b158015611d7657600080fd5b505af1158015611d8a573d6000803e3d6000fd5b50505050600061013560009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611de157600080fd5b505af1158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190612e03565b610130546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b158015611e5e57600080fd5b505afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190612e03565b949350505050565b610130546000906001600160a01b03858116911614611ecf5760405162461bcd60e51b815260040161060290613149565b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611f1457600080fd5b505afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190612e03565b611f569085613210565b611f619060056131b7565b9050600061013360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190612e03565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612e72565b50905060008161208684866131f1565b61209091906131cf565b9050606461209f8260656131f1565b6120a991906131cf565b610137546101335460405163f3fef3a360e01b81529293506001600160a01b039182169263f3fef3a3926120e39216908590600401612fb2565b600060405180830381600087803b1580156120fd57600080fd5b505af1158015612111573d6000803e3d6000fd5b50505050600061013560009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561216857600080fd5b505af115801561217c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a09190612e03565b610130546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156121e557600080fd5b505afa1580156121f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221d9190612e03565b955050505050505b9392505050565b6060600061223b8360026131f1565b6122469060026131b7565b67ffffffffffffffff81111561225e5761225e613296565b6040519080825280601f01601f191660200182016040528015612288576020820181803683370190505b509050600360fc1b816000815181106122a3576122a3613280565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106122d2576122d2613280565b60200101906001600160f81b031916908160001a90535060006122f68460026131f1565b6123019060016131b7565b90505b6001811115612379576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061233557612335613280565b1a60f81b82828151811061234b5761234b613280565b60200101906001600160f81b031916908160001a90535060049490941c9361237281613253565b9050612304565b5083156122255760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610602565b6001600160a01b0381163b6124355760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610602565b6000805160206132db83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61246d83612a1a565b60008251118061247a5750805b156107b4576124898383612a5a565b50505050565b600054610100900460ff166124fa5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b565b600080826125af57604051633cd0243b60e11b81526000906001600160a01b038a16906379a04876906125359030908a90600401612fb2565b604080518083038186803b15801561254c57600080fd5b505afa158015612560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125849190612e72565b50905060646125938682613210565b61259d90836131f1565b6125a791906131cf565b915050612656565b6040516366410a2160e01b81526000906001600160a01b038a16906366410a21906125e09030908a90600401612fb2565b604080518083038186803b1580156125f757600080fd5b505afa15801561260b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262f9190612e72565b509050606461263e8682613210565b61264890836131f1565b61265291906131cf565b9150505b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061268c5761268c613280565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926126ce929116908a90600401612fb2565b602060405180830381600087803b1580156126e857600080fd5b505af11580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190612dcd565b5061012e546001600160a01b031663f87dc1b789898986868a6000612747426102586131b7565b6040518963ffffffff1660e01b815260040161276a989796959493929190612f27565b602060405180830381600087803b15801561278457600080fd5b505af1158015612798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bc9190612e03565b9998505050505050505050565b6000808261287f5761012d54604051631de9507f60e31b81526000916001600160a01b03169063ef4a83f890612805908c908a90600401612fb2565b60206040518083038186803b15801561281d57600080fd5b505afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190612e03565b905060646128638682613210565b61286d90836131f1565b61287791906131cf565b915050612929565b61012d5460405163ca19ebd960e01b81526000916001600160a01b03169063ca19ebd9906128b3908c908a90600401612fb2565b60206040518083038186803b1580156128cb57600080fd5b505afa1580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190612e03565b905060646129118682613210565b61291b90836131f1565b61292591906131cf565b9150505b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061295f5761295f613280565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926129a1929116908a90600401612fb2565b602060405180830381600087803b1580156129bb57600080fd5b505af11580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f39190612dcd565b5061012e546001600160a01b0316630dd4ebd989898986868a6000612747426102586131b7565b612a23816123c8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612ac25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610602565b600080846001600160a01b031684604051612add9190612e96565b600060405180830381855af49150503d8060008114612b18576040519150601f19603f3d011682016040523d82523d6000602084013e612b1d565b606091505b5091509150612b4582826040518060600160405280602781526020016132fb60279139612b4e565b95945050505050565b60608315612b5d575081612225565b825115612b6d5782518084602001fd5b8160405162461bcd60e51b81526004016106029190612fcb565b80356001600160a01b0381168114610f7f57600080fd5b600060208284031215612bb057600080fd5b61222582612b87565b600080600080600060a08688031215612bd157600080fd5b612bda86612b87565b9450612be860208701612b87565b9350612bf660408701612b87565b9250612c0460608701612b87565b9150612c1260808701612b87565b90509295509295909350565b60008060008060008060c08789031215612c3757600080fd5b612c4087612b87565b9550612c4e60208801612b87565b9450612c5c60408801612b87565b9350612c6a60608801612b87565b9250612c7860808801612b87565b9150612c8660a08801612b87565b90509295509295509295565b60008060408385031215612ca557600080fd5b612cae83612b87565b9150602083013567ffffffffffffffff80821115612ccb57600080fd5b818501915085601f830112612cdf57600080fd5b813581811115612cf157612cf1613296565b604051601f8201601f19908116603f01168101908382118183101715612d1957612d19613296565b81604052828152886020848701011115612d3257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612d6757600080fd5b612d7083612b87565b946020939093013593505050565b60008060008060808587031215612d9457600080fd5b612d9d85612b87565b935060208501359250612db260408601612b87565b91506060850135612dc2816132ac565b939692955090935050565b600060208284031215612ddf57600080fd5b8151612225816132ac565b600060208284031215612dfc57600080fd5b5035919050565b600060208284031215612e1557600080fd5b5051919050565b60008060408385031215612e2f57600080fd5b82359150612e3f60208401612b87565b90509250929050565b600060208284031215612e5a57600080fd5b81356001600160e01b03198116811461222557600080fd5b60008060408385031215612e8557600080fd5b505080516020909101519092909150565b60008251612ea8818460208701613227565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612eea816017850160208801613227565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f1b816028840160208801613227565b01602801949350505050565b6001600160a01b038981168252888116602080840191909152604083018990526060830188905261010060808401819052875190840181905260009261012085019289810192855b81811015612f8d578451841686529482019493820193600101612f6f565b505050505060a08301959095525091151560c083015260e09091015295945050505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612fea816040850160208701613227565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600082198211156131ca576131ca61326a565b500190565b6000826131ec57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561320b5761320b61326a565b500290565b6000828210156132225761322261326a565b500390565b60005b8381101561324257818101518382015260200161322a565b838111156124895750506000910152565b6000816132625761326261326a565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461091457600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122029a911d4d486b387152ecabf4dfd3e7baf31c1be72643773df2e89804300857d64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806375123ff9116100f7578063a440b21a11610095578063d547741f11610064578063d547741f14610510578063ef5cfb8c14610530578063f6f6b88114610550578063f72c0d8b1461057057600080fd5b8063a440b21a1461048e578063a7a61d05146104ae578063a98ad46c146104cf578063adc9772e146104f057600080fd5b80638400150a116100d15780638400150a1461043857806391d1485414610459578063a217fddf14610479578063a3673b38146102e257600080fd5b806375123ff9146103e05780637d5f5802146104015780638129fc1c1461042357600080fd5b80632f2ff15d1161016f57806352d1902d1161013e57806352d1902d1461036a5780635ebb8dee1461037f5780635f5d905c1461039f578063620b75df146103c057600080fd5b80632f2ff15d146102f757806336568abe146103175780633659cfe6146103375780634f1ef2861461035757600080fd5b806311eac855116101ab57806311eac85514610262578063154e4f5814610283578063248a9ca3146102a45780632576e65a146102e257600080fd5b806301ffc9a7146101d257806307ab0a7e146102075780630fc55bfd14610240575b600080fd5b3480156101de57600080fd5b506101f26101ed366004612e48565b6105a4565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061013654610228906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561024c57600080fd5b5061026061025b366004612bb9565b6105db565b005b34801561026e57600080fd5b5061013054610228906001600160a01b031681565b34801561028f57600080fd5b5061013554610228906001600160a01b031681565b3480156102b057600080fd5b506102d46102bf366004612dea565b60009081526065602052604090206001015490565b6040519081526020016101fe565b3480156102ee57600080fd5b506102d461077f565b34801561030357600080fd5b50610260610312366004612e1c565b61078e565b34801561032357600080fd5b50610260610332366004612e1c565b6107b9565b34801561034357600080fd5b50610260610352366004612b9e565b610837565b610260610365366004612c92565b610917565b34801561037657600080fd5b506102d46109e4565b34801561038b57600080fd5b5061026061039a366004612c1e565b610a97565b3480156103ab57600080fd5b5061013454610228906001600160a01b031681565b3480156103cc57600080fd5b5060fb54610228906001600160a01b031681565b3480156103ec57600080fd5b5061013254610228906001600160a01b031681565b34801561040d57600080fd5b506102d46000805160206132bb83398151915281565b34801561042f57600080fd5b50610260610c6f565b34801561044457600080fd5b5061013754610228906001600160a01b031681565b34801561046557600080fd5b506101f2610474366004612e1c565b610ce8565b34801561048557600080fd5b506102d4600081565b34801561049a57600080fd5b506102606104a9366004612b9e565b610d13565b3480156104ba57600080fd5b5061013354610228906001600160a01b031681565b3480156104db57600080fd5b5061013154610228906001600160a01b031681565b3480156104fc57600080fd5b5061026061050b366004612d54565b610df1565b34801561051c57600080fd5b5061026061052b366004612e1c565b610eda565b34801561053c57600080fd5b506102d461054b366004612b9e565b610f00565b34801561055c57600080fd5b506102d461056b366004612d7e565b610f84565b34801561057c57600080fd5b506102d47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806105d557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105e6600033610ce8565b61060b5760405162461bcd60e51b81526004016106029061311b565b60405180910390fd5b6001600160a01b0385166106315760405162461bcd60e51b815260040161060290613180565b6001600160a01b0384166106575760405162461bcd60e51b815260040161060290613180565b6001600160a01b03831661067d5760405162461bcd60e51b815260040161060290613180565b6001600160a01b0382166106a35760405162461bcd60e51b815260040161060290613180565b6001600160a01b0381166106c95760405162461bcd60e51b815260040161060290613180565b61013080546001600160a01b038781166001600160a01b03199283168117909355610131805488831690841681179091556101328054888416908516811790915561013380548885169086168117909155610134805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f1eb2ec66971c47166b02af35b989cec29a89ac6ca053121f2445e524658066dc9060a00160405180910390a15050505050565b6000610789611192565b905090565b6000828152606560205260409020600101546107aa81336113e2565b6107b48383611446565b505050565b6001600160a01b03811633146108295760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610602565b61083382826114cc565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108805760405162461bcd60e51b815260040161060290613035565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108c96000805160206132db833981519152546001600160a01b031690565b6001600160a01b0316146108ef5760405162461bcd60e51b815260040161060290613081565b6108f881611533565b604080516000808252602082019092526109149183919061155e565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109605760405162461bcd60e51b815260040161060290613035565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109a96000805160206132db833981519152546001600160a01b031690565b6001600160a01b0316146109cf5760405162461bcd60e51b815260040161060290613081565b6109d882611533565b6108338282600161155e565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a845760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610602565b506000805160206132db83398151915290565b610aa2600033610ce8565b610abe5760405162461bcd60e51b81526004016106029061311b565b6001600160a01b038616610ae45760405162461bcd60e51b815260040161060290613180565b6001600160a01b038516610b0a5760405162461bcd60e51b815260040161060290613180565b6001600160a01b038416610b305760405162461bcd60e51b815260040161060290613180565b6001600160a01b038316610b565760405162461bcd60e51b815260040161060290613180565b6001600160a01b038216610b7c5760405162461bcd60e51b815260040161060290613180565b6001600160a01b038116610ba25760405162461bcd60e51b815260040161060290613180565b61013580546001600160a01b038881166001600160a01b03199283168117909355610136805489831690841681179091556101378054898416908516811790915561012d8054898516908616811790915561012e8054898616908716811790915561012f8054958916959096168517909555604080519687526020870193909352858301919091526060850152608084019290925260a0830152517fbc987a95c487955e4fb493a3897aae49196bf1704fe15d64f858bc671ec8e77a9181900360c00190a1505050505050565b600054610100900460ff16610c8a5760005460ff1615610c8e565b303b155b610caa5760405162461bcd60e51b8152600401610602906130cd565b600054610100900460ff16158015610ccc576000805461ffff19166101011790555b610cd46116d8565b8015610914576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d1e600033610ce8565b610d3a5760405162461bcd60e51b81526004016106029061311b565b6001600160a01b038116610d605760405162461bcd60e51b815260040161060290613180565b60fb54610d85906000805160206132bb833981519152906001600160a01b0316610eda565b610d9d6000805160206132bb8339815191528261078e565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b610e096000805160206132bb83398151915233610ce8565b610e255760405162461bcd60e51b815260040161060290612ffe565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b81523060048201526108339083906001600160a01b038216906370a082319060240160206040518083038186803b158015610e9d57600080fd5b505afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612e03565b61177a565b600082815260656020526040902060010154610ef681336113e2565b6107b483836114cc565b6000610f1a6000805160206132bb83398151915233610ce8565b610f365760405162461bcd60e51b815260040161060290612ffe565b6000610f4183611ab2565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea13481604051610f7491815260200190565b60405180910390a190505b919050565b6000610f9e6000805160206132bb83398151915233610ce8565b610fba5760405162461bcd60e51b815260040161060290612ffe565b60008215610fd357610fcc8685611cfa565b9050611042565b610fde868686611e9e565b9050848110156110425760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610602565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190612e03565b60405163a9059cbb60e01b81529091506001600160a01b0388169063a9059cbb906110ed9088908590600401612fb2565b602060405180830381600087803b15801561110757600080fd5b505af115801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612dcd565b5060408051878152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19695505050505050565b6001600160a01b03163b151590565b61013754610133546040516319a78f5560e01b81526001600160a01b039182166004820152306024820152600092839216906319a78f559060440160206040518083038186803b1580156111e557600080fd5b505afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190612e03565b90508061122c57600091505090565b61013354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561127257600080fd5b505afa158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190612e03565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b1580156112fc57600080fd5b505afa158015611310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113349190612e72565b50905060008261134483866131f1565b61134e91906131cf565b610130546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561139757600080fd5b505afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190612e03565b6113d991906131b7565b94505050505090565b6113ec8282610ce8565b61083357611404816001600160a01b0316601461222c565b61140f83602061222c565b604051602001611420929190612eb2565b60408051601f198184030181529082905262461bcd60e51b825261060291600401612fcb565b6114508282610ce8565b6108335760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114883390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114d68282610ce8565b156108335760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361083381336113e2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611591576107b4836123c8565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ca57600080fd5b505afa9250505080156115fa575060408051601f3d908101601f191682019092526115f791810190612e03565b60015b61165d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610602565b6000805160206132db83398151915281146116cc5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610602565b506107b4838383612464565b600054610100900460ff166116f35760005460ff16156116f7565b303b155b6117135760405162461bcd60e51b8152600401610602906130cd565b600054610100900460ff16158015611735576000805461ffff19166101011790555b61173d61248f565b61174561248f565b611750600033611446565b610cd47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611446565b610130546001600160a01b038381169116146117a85760405162461bcd60e51b815260040161060290613149565b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117ed57600080fd5b505afa158015611801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118259190612e03565b610130546101355460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261185f9216908590600401612fb2565b602060405180830381600087803b15801561187957600080fd5b505af115801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b19190612dcd565b506101355460405163aa06ce9b60e01b81526001600160a01b039091169063aa06ce9b906118e59030908590600401612fb2565b602060405180830381600087803b1580156118ff57600080fd5b505af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190612e03565b50610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b59190612e03565b610133546101375460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926119ef9216908590600401612fb2565b602060405180830381600087803b158015611a0957600080fd5b505af1158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a419190612dcd565b5061013754610133546040516311f9fbc960e21b81526001600160a01b03928316926347e7ef2492611a7a929116908590600401612fb2565b600060405180830381600087803b158015611a9457600080fd5b505af1158015611aa8573d6000803e3d6000fd5b5050505050505050565b610137546040805163d1058e5960e01b815290516000926001600160a01b03169163d1058e59916004808301928692919082900301818387803b158015611af857600080fd5b505af1158015611b0c573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015611b5757600080fd5b505afa158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f9190612e03565b905080611b9f5750600092915050565b610136546101325461013154600092611bcc926001600160a01b03918216929082169116856001866124fc565b610135546101315461013054929350600092611bfb926001600160a01b039081169281169116856001806127c9565b610130546040516370a0823160e01b81523060048201529192506001600160a01b03169063a9059cbb90879083906370a082319060240160206040518083038186803b158015611c4a57600080fd5b505afa158015611c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c829190612e03565b6040518363ffffffff1660e01b8152600401611c9f929190612fb2565b602060405180830381600087803b158015611cb957600080fd5b505af1158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190612dcd565b50949350505050565b610130546000906001600160a01b03848116911614611d2b5760405162461bcd60e51b815260040161060290613149565b6101375461013354604051630fa09e6360e41b81526001600160a01b03918216600482015291169063fa09e63090602401600060405180830381600087803b158015611d7657600080fd5b505af1158015611d8a573d6000803e3d6000fd5b50505050600061013560009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611de157600080fd5b505af1158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190612e03565b610130546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b158015611e5e57600080fd5b505afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190612e03565b949350505050565b610130546000906001600160a01b03858116911614611ecf5760405162461bcd60e51b815260040161060290613149565b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611f1457600080fd5b505afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190612e03565b611f569085613210565b611f619060056131b7565b9050600061013360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190612e03565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612e72565b50905060008161208684866131f1565b61209091906131cf565b9050606461209f8260656131f1565b6120a991906131cf565b610137546101335460405163f3fef3a360e01b81529293506001600160a01b039182169263f3fef3a3926120e39216908590600401612fb2565b600060405180830381600087803b1580156120fd57600080fd5b505af1158015612111573d6000803e3d6000fd5b50505050600061013560009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561216857600080fd5b505af115801561217c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a09190612e03565b610130546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156121e557600080fd5b505afa1580156121f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221d9190612e03565b955050505050505b9392505050565b6060600061223b8360026131f1565b6122469060026131b7565b67ffffffffffffffff81111561225e5761225e613296565b6040519080825280601f01601f191660200182016040528015612288576020820181803683370190505b509050600360fc1b816000815181106122a3576122a3613280565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106122d2576122d2613280565b60200101906001600160f81b031916908160001a90535060006122f68460026131f1565b6123019060016131b7565b90505b6001811115612379576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061233557612335613280565b1a60f81b82828151811061234b5761234b613280565b60200101906001600160f81b031916908160001a90535060049490941c9361237281613253565b9050612304565b5083156122255760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610602565b6001600160a01b0381163b6124355760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610602565b6000805160206132db83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61246d83612a1a565b60008251118061247a5750805b156107b4576124898383612a5a565b50505050565b600054610100900460ff166124fa5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b565b600080826125af57604051633cd0243b60e11b81526000906001600160a01b038a16906379a04876906125359030908a90600401612fb2565b604080518083038186803b15801561254c57600080fd5b505afa158015612560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125849190612e72565b50905060646125938682613210565b61259d90836131f1565b6125a791906131cf565b915050612656565b6040516366410a2160e01b81526000906001600160a01b038a16906366410a21906125e09030908a90600401612fb2565b604080518083038186803b1580156125f757600080fd5b505afa15801561260b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262f9190612e72565b509050606461263e8682613210565b61264890836131f1565b61265291906131cf565b9150505b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061268c5761268c613280565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926126ce929116908a90600401612fb2565b602060405180830381600087803b1580156126e857600080fd5b505af11580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190612dcd565b5061012e546001600160a01b031663f87dc1b789898986868a6000612747426102586131b7565b6040518963ffffffff1660e01b815260040161276a989796959493929190612f27565b602060405180830381600087803b15801561278457600080fd5b505af1158015612798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bc9190612e03565b9998505050505050505050565b6000808261287f5761012d54604051631de9507f60e31b81526000916001600160a01b03169063ef4a83f890612805908c908a90600401612fb2565b60206040518083038186803b15801561281d57600080fd5b505afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190612e03565b905060646128638682613210565b61286d90836131f1565b61287791906131cf565b915050612929565b61012d5460405163ca19ebd960e01b81526000916001600160a01b03169063ca19ebd9906128b3908c908a90600401612fb2565b60206040518083038186803b1580156128cb57600080fd5b505afa1580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190612e03565b905060646129118682613210565b61291b90836131f1565b61292591906131cf565b9150505b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061295f5761295f613280565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926129a1929116908a90600401612fb2565b602060405180830381600087803b1580156129bb57600080fd5b505af11580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f39190612dcd565b5061012e546001600160a01b0316630dd4ebd989898986868a6000612747426102586131b7565b612a23816123c8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612ac25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610602565b600080846001600160a01b031684604051612add9190612e96565b600060405180830381855af49150503d8060008114612b18576040519150601f19603f3d011682016040523d82523d6000602084013e612b1d565b606091505b5091509150612b4582826040518060600160405280602781526020016132fb60279139612b4e565b95945050505050565b60608315612b5d575081612225565b825115612b6d5782518084602001fd5b8160405162461bcd60e51b81526004016106029190612fcb565b80356001600160a01b0381168114610f7f57600080fd5b600060208284031215612bb057600080fd5b61222582612b87565b600080600080600060a08688031215612bd157600080fd5b612bda86612b87565b9450612be860208701612b87565b9350612bf660408701612b87565b9250612c0460608701612b87565b9150612c1260808701612b87565b90509295509295909350565b60008060008060008060c08789031215612c3757600080fd5b612c4087612b87565b9550612c4e60208801612b87565b9450612c5c60408801612b87565b9350612c6a60608801612b87565b9250612c7860808801612b87565b9150612c8660a08801612b87565b90509295509295509295565b60008060408385031215612ca557600080fd5b612cae83612b87565b9150602083013567ffffffffffffffff80821115612ccb57600080fd5b818501915085601f830112612cdf57600080fd5b813581811115612cf157612cf1613296565b604051601f8201601f19908116603f01168101908382118183101715612d1957612d19613296565b81604052828152886020848701011115612d3257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612d6757600080fd5b612d7083612b87565b946020939093013593505050565b60008060008060808587031215612d9457600080fd5b612d9d85612b87565b935060208501359250612db260408601612b87565b91506060850135612dc2816132ac565b939692955090935050565b600060208284031215612ddf57600080fd5b8151612225816132ac565b600060208284031215612dfc57600080fd5b5035919050565b600060208284031215612e1557600080fd5b5051919050565b60008060408385031215612e2f57600080fd5b82359150612e3f60208401612b87565b90509250929050565b600060208284031215612e5a57600080fd5b81356001600160e01b03198116811461222557600080fd5b60008060408385031215612e8557600080fd5b505080516020909101519092909150565b60008251612ea8818460208701613227565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612eea816017850160208801613227565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f1b816028840160208801613227565b01602801949350505050565b6001600160a01b038981168252888116602080840191909152604083018990526060830188905261010060808401819052875190840181905260009261012085019289810192855b81811015612f8d578451841686529482019493820193600101612f6f565b505050505060a08301959095525091151560c083015260e09091015295945050505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612fea816040850160208701613227565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600082198211156131ca576131ca61326a565b500190565b6000826131ec57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561320b5761320b61326a565b500290565b6000828210156132225761322261326a565b500390565b60005b8381101561324257818101518382015260200161322a565b838111156124895750506000910152565b6000816132625761326261326a565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461091457600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122029a911d4d486b387152ecabf4dfd3e7baf31c1be72643773df2e89804300857d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 797,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 800,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1284,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1591,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 999,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18498,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 18776,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19588,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV1Helper",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IDODOV1Helper)15357"
      },
      {
        "astId": 19591,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoProxy",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IDODOProxy)15197"
      },
      {
        "astId": 19593,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoApprove",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 6463,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdcToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)1744"
      },
      {
        "astId": 6466,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdtToken",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IERC20)1744"
      },
      {
        "astId": 6469,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoToken",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IERC20)1744"
      },
      {
        "astId": 6472,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdcLPToken",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IERC20)1744"
      },
      {
        "astId": 6475,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdtLPToken",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IERC20)1744"
      },
      {
        "astId": 6478,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV1UsdcUsdtPool",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IDODOV1)15336"
      },
      {
        "astId": 6481,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV2DodoUsdtPool",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IDODOV2)15382"
      },
      {
        "astId": 6484,
        "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoMine",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IDODOMine)15150"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDODOMine)15150": {
        "encoding": "inplace",
        "label": "contract IDODOMine",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOProxy)15197": {
        "encoding": "inplace",
        "label": "contract IDODOProxy",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1)15336": {
        "encoding": "inplace",
        "label": "contract IDODOV1",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1Helper)15357": {
        "encoding": "inplace",
        "label": "contract IDODOV1Helper",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV2)15382": {
        "encoding": "inplace",
        "label": "contract IDODOV2",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1744": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyDodoUsdc.sol:StrategyDodoUsdc",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}