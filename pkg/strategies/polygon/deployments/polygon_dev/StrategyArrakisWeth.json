{
  "address": "0x34a525B2D55584D9974aECD6A6C53928bF953Dec",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "aavePoolAddressesProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleChainlinkUsdc",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleChainlinkToken0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eModeCategoryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balancingDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "StrategyUpdatedAaveParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "StrategyUpdatedHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "arrakisRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "arrakisRewards",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "arrakisVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "balancerVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "balancerPoolIdToken",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "balancerPoolIdWmatic",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcTokenInversion",
          "type": "uint256"
        }
      ],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wmaticToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "aUsdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token0Denominator",
          "type": "uint256"
        }
      ],
      "name": "StrategyUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUsdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePoolAddressesProvider",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arrakisRewards",
      "outputs": [
        {
          "internalType": "contract IArrakisRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arrakisRouter",
      "outputs": [
        {
          "internalType": "contract IArrakisV1RouterStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arrakisVault",
      "outputs": [
        {
          "internalType": "contract IArrakisVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolIdToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolIdWmatic",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancingDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eModeCategoryId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grepRealHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateMode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleChainlinkToken0",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleChainlinkUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralCode",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolAddressesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleChainlinkUsdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleChainlinkToken0",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_eModeCategoryId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_healthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balancingDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_referralCode",
          "type": "uint16"
        }
      ],
      "name": "setAaveParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arrakisRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arrakisRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arrakisVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolIdToken",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolIdWmatic",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_usdcTokenInversion",
          "type": "uint8"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmaticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aUsdcToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0Denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenInversion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "2239dc4bd5944caf8677681fa2a5672a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aavePoolAddressesProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleChainlinkUsdc\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleChainlinkToken0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eModeCategoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balancingDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"StrategyUpdatedAaveParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"StrategyUpdatedHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arrakisRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arrakisRewards\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arrakisVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balancerPoolIdToken\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balancerPoolIdWmatic\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcTokenInversion\",\"type\":\"uint256\"}],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wmaticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aUsdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Denominator\",\"type\":\"uint256\"}],\"name\":\"StrategyUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUsdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePoolAddressesProvider\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arrakisRewards\",\"outputs\":[{\"internalType\":\"contract IArrakisRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arrakisRouter\",\"outputs\":[{\"internalType\":\"contract IArrakisV1RouterStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arrakisVault\",\"outputs\":[{\"internalType\":\"contract IArrakisVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolIdToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolIdWmatic\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancingDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eModeCategoryId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grepRealHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleChainlinkToken0\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleChainlinkUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCode\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleChainlinkUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleChainlinkToken0\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_eModeCategoryId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balancingDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_referralCode\",\"type\":\"uint16\"}],\"name\":\"setAaveParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arrakisRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arrakisRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arrakisVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolIdToken\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolIdWmatic\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_usdcTokenInversion\",\"type\":\"uint8\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aUsdcToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenInversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyArrakisWeth.sol\":\"StrategyArrakisWeth\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/StrategyArrakisWeth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./core/Strategy.sol\\\";\\nimport \\\"./connectors/uniswap/v3/libraries/TickMath.sol\\\";\\nimport \\\"./connectors/arrakis/IArrakisV1RouterStaking.sol\\\";\\nimport \\\"./connectors/arrakis/IArrakisRewards.sol\\\";\\nimport \\\"./connectors/arrakis/IArrakisVault.sol\\\";\\nimport \\\"./connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPool.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\nimport \\\"./exchanges/BalancerExchange.sol\\\";\\nimport \\\"./libraries/OvnMath.sol\\\";\\n\\nimport {AaveBorrowLibrary} from \\\"./libraries/AaveBorrowLibrary.sol\\\";\\nimport {BalancerLibrary} from \\\"./libraries/BalancerLibrary.sol\\\";\\nimport {StrategyArrakisWethLibrary} from \\\"./libraries/StrategyArrakisWethLibrary.sol\\\";\\n\\n\\ncontract StrategyArrakisWeth is Strategy {\\n    using StrategyArrakisWethLibrary for StrategyArrakisWeth;\\n\\n    uint256 constant BASIS_POINTS_FOR_SLIPPAGE = 4; // 0.04%\\n    uint256 constant BASIS_POINTS_FOR_STORAGE = 100; // 1%\\n    uint256 constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    IERC20 public usdcToken;\\n    IERC20 public aUsdcToken;\\n    IERC20 public token0;\\n    IERC20 public wmaticToken;\\n    uint256 public usdcTokenDenominator;\\n    uint256 public token0Denominator;\\n\\n    IArrakisV1RouterStaking public arrakisRouter;\\n    IArrakisRewards public arrakisRewards;\\n    IArrakisVault public arrakisVault;\\n\\n    IPoolAddressesProvider public aavePoolAddressesProvider;\\n    IPriceFeed public oracleChainlinkUsdc;\\n    IPriceFeed public oracleChainlinkToken0;\\n    uint8 public eModeCategoryId;\\n\\n    bytes32 public balancerPoolIdWmatic;\\n    bytes32 public balancerPoolIdToken;\\n    IVault  public balancerVault;\\n\\n    uint256 public liquidationThreshold;\\n    uint256 public healthFactor;\\n    uint256 public usdcTokenInversion;\\n    uint256 public balancingDelta;\\n    uint256 public interestRateMode;\\n    uint16 public referralCode;\\n    uint256 public usdcStorage;\\n    uint256 public realHealthFactor;\\n\\n    // --- events\\n\\n    event StrategyUpdatedTokens(address usdcToken, address token0, address wmaticToken, address aUsdcToken, uint256 usdcTokenDenominator, uint256 token0Denominator);\\n\\n    event StrategyUpdatedParams(address arrakisRouter, address arrakisRewards, address arrakisVault, address balancerVault, bytes32 balancerPoolIdToken, bytes32 balancerPoolIdWmatic, uint256 usdcTokenInversion);\\n\\n    event StrategyUpdatedAaveParams(address aavePoolAddressesProvider, address oracleChainlinkUsdc, address oracleChainlinkToken0,\\n        uint256 eModeCategoryId, uint256 liquidationThreshold, uint256 healthFactor, uint256 balancingDelta, uint256 interestRateMode, uint16 referralCode);\\n\\n    event StrategyUpdatedHealthFactor(uint256 healthFactor);\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n    // --- Setters\\n\\n    function setTokens(\\n        address _usdcToken,\\n        address _token0,\\n        address _wmaticToken,\\n        address _aUsdcToken\\n    ) external onlyAdmin {\\n\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_token0 != address(0), \\\"Zero address not allowed\\\");\\n        require(_wmaticToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_aUsdcToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = IERC20(_usdcToken);\\n        token0 = IERC20(_token0);\\n        wmaticToken = IERC20(_wmaticToken);\\n        aUsdcToken = IERC20(_aUsdcToken);\\n        usdcTokenDenominator = 10 ** IERC20Metadata(_usdcToken).decimals();\\n        token0Denominator = 10 ** IERC20Metadata(_token0).decimals();\\n\\n        emit StrategyUpdatedTokens(_usdcToken, _token0, _wmaticToken, _aUsdcToken, usdcTokenDenominator, token0Denominator);\\n    }\\n\\n    function setParams(\\n        address _arrakisRouter,\\n        address _arrakisRewards,\\n        address _arrakisVault,\\n        address _balancerVault,\\n        bytes32 _balancerPoolIdToken,\\n        bytes32 _balancerPoolIdWmatic,\\n        uint8 _usdcTokenInversion\\n    ) external onlyAdmin {\\n\\n        require(_arrakisRouter != address(0), \\\"Zero address not allowed\\\");\\n        require(_arrakisRewards != address(0), \\\"Zero address not allowed\\\");\\n        require(_arrakisVault != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerPoolIdToken != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n        require(_balancerPoolIdWmatic != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n\\n        arrakisRouter = IArrakisV1RouterStaking(_arrakisRouter);\\n        arrakisRewards = IArrakisRewards(_arrakisRewards);\\n        arrakisVault = IArrakisVault(_arrakisVault);\\n\\n        balancerPoolIdToken = _balancerPoolIdToken;\\n        balancerPoolIdWmatic = _balancerPoolIdWmatic;\\n        balancerVault = IVault(_balancerVault);\\n\\n        usdcTokenInversion = _usdcTokenInversion;\\n\\n        emit StrategyUpdatedParams(_arrakisRouter, _arrakisRewards, _arrakisVault, _balancerVault, balancerPoolIdToken, balancerPoolIdWmatic, usdcTokenInversion);\\n    }\\n\\n    function setAaveParams(\\n        address _aavePoolAddressesProvider,\\n        address _oracleChainlinkUsdc,\\n        address _oracleChainlinkToken0,\\n        uint8 _eModeCategoryId,\\n        uint256 _liquidationThreshold,\\n        uint256 _healthFactor,\\n        uint256 _balancingDelta,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode\\n    ) external onlyAdmin {\\n\\n        require(_aavePoolAddressesProvider != address(0), \\\"Zero address not allowed\\\");\\n        require(_oracleChainlinkUsdc != address(0), \\\"Zero address not allowed\\\");\\n        require(_oracleChainlinkToken0 != address(0), \\\"Zero address not allowed\\\");\\n\\n        aavePoolAddressesProvider = IPoolAddressesProvider(_aavePoolAddressesProvider);\\n        oracleChainlinkUsdc = IPriceFeed(_oracleChainlinkUsdc);\\n        oracleChainlinkToken0 = IPriceFeed(_oracleChainlinkToken0);\\n        eModeCategoryId = _eModeCategoryId;\\n\\n        liquidationThreshold = _liquidationThreshold * 10 ** 15;\\n        healthFactor = _healthFactor * 10 ** 15;\\n        realHealthFactor = 0;\\n        balancingDelta = _balancingDelta * 10 ** 15;\\n        interestRateMode = _interestRateMode;\\n        referralCode = _referralCode;\\n\\n        emit StrategyUpdatedAaveParams(_aavePoolAddressesProvider, _oracleChainlinkUsdc, _oracleChainlinkToken0,\\n            _eModeCategoryId, _liquidationThreshold, _healthFactor, _balancingDelta, _interestRateMode, _referralCode);\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        // 1. Recalculate target amount and increese usdcStorage proportionately.\\n        uint256 amount = OvnMath.subBasisPoints(usdcToken.balanceOf(address(this)) - usdcStorage, BASIS_POINTS_FOR_STORAGE);\\n        usdcStorage = usdcToken.balanceOf(address(this)) - amount;\\n\\n\\n        // 2. Calculate needed collateral and borrow values for aave.\\n        (uint256 amount0Current, uint256 amount1Current) = this._getUnderlyingBalances();\\n        (uint256 usdcCollateral, uint256 token0Borrow) = AaveBorrowLibrary.getCollateralAndBorrowForSupplyAndBorrow(\\n            amount,\\n            amount0Current,\\n            amount1Current,\\n            liquidationThreshold,\\n            healthFactor,\\n            usdcTokenDenominator,\\n            token0Denominator,\\n            uint256(oracleChainlinkUsdc.latestAnswer()),\\n            uint256(oracleChainlinkToken0.latestAnswer())\\n        );\\n\\n\\n        // 3. Borrowing asset from aave.\\n        IPool aavePool = _aavePoolEm();\\n        usdcToken.approve(address(aavePool), usdcCollateral);\\n        aavePool.supply(address(usdcToken), usdcCollateral, address(this), referralCode);\\n        aavePool.borrow(address(token0), token0Borrow, interestRateMode, referralCode, address(this));\\n\\n\\n        // 4. Add liquidity to pool.\\n        uint256 usdcAmount = usdcToken.balanceOf(address(this)) - usdcStorage;\\n        uint256 token0Amount = token0.balanceOf(address(this));\\n        this._addLiquidityAndStakeWithSlippage(usdcAmount, token0Amount);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n\\n        // 1. Recalculate target amount and decreese usdcStorage proportionately.\\n        uint256 amount = OvnMath.subBasisPoints(_amount, BASIS_POINTS_FOR_STORAGE);\\n        usdcStorage = usdcStorage - (_amount - amount);\\n        amount += 10;\\n\\n\\n        // 2. Calculate needed borrow value from aave.\\n        (uint256 amount0Current, uint256 amount1Current) = StrategyArrakisWethLibrary._getUnderlyingBalances(this);\\n        uint256 token0Borrow = AaveBorrowLibrary.getBorrowForWithdraw(\\n            amount,\\n            amount0Current,\\n            amount1Current,\\n            liquidationThreshold,\\n            healthFactor,\\n            usdcTokenDenominator,\\n            token0Denominator,\\n            uint256(oracleChainlinkUsdc.latestAnswer()),\\n            uint256(oracleChainlinkToken0.latestAnswer())\\n        );\\n\\n\\n        // 3. Removing liquidity for aave calculation\\n        IPool aavePool = _aavePoolEm();\\n        (, uint256 borrow,,,,) = aavePool.getUserAccountData(address(this));\\n        uint256 totalBorrowUsd1 = AaveBorrowLibrary.convertUsdToTokenAmount(borrow, token0Denominator, uint256(oracleChainlinkToken0.latestAnswer()));\\n\\n        if (token0Borrow > totalBorrowUsd1) {\\n            uint256 amountLp = this._getLiquidityForToken(totalBorrowUsd1);\\n            arrakisRewards.approve(address(arrakisRouter), amountLp);\\n            this._removeLiquidityAndUnstakeWithSlippage(amountLp);\\n            token0.approve(address(aavePool), token0.balanceOf(address(this)));\\n            aavePool.repay(address(token0), MAX_UINT_VALUE, interestRateMode, address(this));\\n            aavePool.withdraw(address(usdcToken), MAX_UINT_VALUE, address(this));\\n        } else {\\n            uint256 amountLp = this._getLiquidityForToken(token0Borrow);\\n            arrakisRewards.approve(address(arrakisRouter), amountLp);\\n            this._removeLiquidityAndUnstakeWithSlippage(amountLp);\\n            token0.approve(address(aavePool), token0.balanceOf(address(this)));\\n            aavePool.repay(address(token0), token0.balanceOf(address(this)), interestRateMode, address(this));\\n            uint256 getusdc = amount - (token0Borrow * amount0Current) / amount1Current;\\n            aavePool.withdraw(address(usdcToken), getusdc, address(this));\\n        }\\n\\n\\n        // 4. If after aave manipulations we have already needed amount of usdc then return it.\\n        if (usdcToken.balanceOf(address(this)) - usdcStorage >= _amount) {\\n            return usdcToken.balanceOf(address(this)) - usdcStorage;\\n        }\\n\\n\\n        // 5. If don't, remove liquidity and swap all token0 to usdc.\\n        uint256 neededUsdc = _amount - (usdcToken.balanceOf(address(this)) - usdcStorage);\\n        (amount0Current, amount1Current) = this._getUnderlyingBalances();\\n        uint256 amountLp = arrakisRewards.balanceOf(address(this));\\n        uint256 lpTokensToWithdraw = BalancerLibrary._getAmountLpTokensToWithdraw(\\n            balancerVault,\\n            OvnMath.addBasisPoints(neededUsdc, BASIS_POINTS_FOR_SLIPPAGE),\\n            amount0Current,\\n            amount1Current,\\n            amountLp,\\n            usdcTokenDenominator,\\n            token0Denominator,\\n            balancerPoolIdToken,\\n            usdcToken,\\n            token0\\n        );\\n        arrakisRewards.approve(address(arrakisRouter), lpTokensToWithdraw);\\n        this._removeLiquidityAndUnstakeWithSlippage(lpTokensToWithdraw);\\n        BalancerLibrary.swap(balancerVault, balancerPoolIdToken, IVault.SwapKind.GIVEN_IN, IAsset(address(token0)), IAsset(address(usdcToken)),\\n            address(this), address(this), token0.balanceOf(address(this)), 0);\\n\\n        return usdcToken.balanceOf(address(this)) - usdcStorage;\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n\\n        // 1. Calculate total amount of LP tokens and remove liquidity from the pool.\\n        uint256 amountLp = arrakisRewards.balanceOf(address(this));\\n        arrakisRewards.approve(address(arrakisRouter), amountLp);\\n        this._removeLiquidityAndUnstakeWithSlippage(amountLp);\\n\\n\\n        // 2. Convert all storage assets to token0.\\n        BalancerLibrary.swap(balancerVault, balancerPoolIdToken, IVault.SwapKind.GIVEN_IN, IAsset(address(usdcToken)),\\n            IAsset(address(token0)), address(this), address(this), usdcStorage, 0);\\n\\n\\n        // 3. Full exit from aave.\\n        IPool aavePool = _aavePoolEm();\\n        token0.approve(address(aavePool), token0.balanceOf(address(this)));\\n        aavePool.repay(address(token0), MAX_UINT_VALUE, interestRateMode, address(this));\\n        aavePool.withdraw(address(usdcToken), MAX_UINT_VALUE, address(this));\\n\\n\\n        // 4. Swap remaining token0 to usdc\\n        if (token0.balanceOf(address(this)) > 0) {\\n            BalancerLibrary.swap(balancerVault, balancerPoolIdToken, IVault.SwapKind.GIVEN_IN, IAsset(address(token0)),\\n                IAsset(address(usdcToken)), address(this), address(this), token0.balanceOf(address(this)), 0);\\n        }\\n\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external override view returns (uint256) {\\n        return _getTotal(true);\\n    }\\n\\n    function liquidationValue() external override view returns (uint256) {\\n        return _getTotal(false);\\n    }\\n\\n    function _getTotal(bool nav) internal view returns (uint256){\\n\\n        uint256 balanceLp = arrakisRewards.balanceOf(address(this));\\n\\n        if (balanceLp == 0)\\n            return 0;\\n\\n        (uint256 poolUsdc, uint256 poolToken0) = this._getTokensForLiquidity(balanceLp);\\n        uint256 aaveUsdc = aUsdcToken.balanceOf(address(this));\\n        IPool aavePool = IPool(AaveBorrowLibrary.getAavePool(address(aavePoolAddressesProvider)));\\n        (, uint256 aaveToken0,,,,) = aavePool.getUserAccountData(address(this));\\n        aaveToken0 = AaveBorrowLibrary.convertUsdToTokenAmount(aaveToken0, token0Denominator, uint256(oracleChainlinkToken0.latestAnswer()));\\n        uint256 result = usdcToken.balanceOf(address(this)) + poolUsdc + aaveUsdc;\\n\\n        if (aaveToken0 < poolToken0) {\\n            uint256 delta = poolToken0 - aaveToken0;\\n            if (nav) {\\n                return result + AaveBorrowLibrary.convertTokenAmountToTokenAmount(\\n                    delta, \\n                    token0Denominator, \\n                    usdcTokenDenominator, \\n                    uint256(oracleChainlinkToken0.latestAnswer()), \\n                    uint256(oracleChainlinkUsdc.latestAnswer())\\n                );\\n            }\\n            if (delta > poolToken0 / 100) {\\n                delta = BalancerLibrary.onSwap(\\n                    balancerVault,\\n                    balancerPoolIdToken,\\n                    IVault.SwapKind.GIVEN_IN,\\n                    token0,\\n                    usdcToken,\\n                    delta\\n                );\\n                result = result + delta;\\n            }\\n        } else {\\n            uint256 delta = aaveToken0 - poolToken0;\\n            if (nav) {\\n                return result - AaveBorrowLibrary.convertTokenAmountToTokenAmount(\\n                    delta, \\n                    token0Denominator, \\n                    usdcTokenDenominator, \\n                    uint256(oracleChainlinkToken0.latestAnswer()), \\n                    uint256(oracleChainlinkUsdc.latestAnswer())\\n                );\\n            }\\n            if (delta > poolToken0 / 100) {\\n                delta = BalancerLibrary.onSwap(\\n                    balancerVault,\\n                    balancerPoolIdToken,\\n                    IVault.SwapKind.GIVEN_OUT,\\n                    usdcToken,\\n                    token0,\\n                    delta\\n                );\\n                result = result - delta;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // 1. Claiming all existing rewards.\\n        if (arrakisRewards.balanceOf(address(this)) != 0) {\\n            arrakisRewards.claim_rewards(address(this));\\n        }\\n\\n\\n        // 2. Convert all assets to usdc.\\n        uint256 wmaticBalance = wmaticToken.balanceOf(address(this));\\n        if (wmaticBalance > 0) {\\n            uint256 usdcAmount = BalancerLibrary.swap(balancerVault, balancerPoolIdWmatic, IVault.SwapKind.GIVEN_IN, IAsset(address(wmaticToken)),\\n                IAsset(address(usdcToken)), address(this), address(this), wmaticBalance, 0);\\n            usdcToken.transfer(_to, usdcAmount);\\n            return usdcAmount;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n\\n    function _setHealthFactor(\\n        uint256 _healthFactor\\n    ) internal override {\\n        healthFactor = _healthFactor * 10 ** 15;\\n\\n        emit StrategyUpdatedHealthFactor(_healthFactor);\\n    }\\n\\n    function grepRealHealthFactor() external {\\n        IPool aavePool = IPool(AaveBorrowLibrary.getAavePool(address(aavePoolAddressesProvider), eModeCategoryId));\\n        (,,,,, realHealthFactor) = aavePool.getUserAccountData(address(this));\\n    }\\n\\n    function _healthFactorBalance() internal override returns (uint256) {\\n        return this._healthFactorBalanceI();\\n    }\\n\\n    function _aavePoolEm() internal returns (IPool aavePool){\\n        aavePool = IPool(AaveBorrowLibrary.getAavePool(address(aavePoolAddressesProvider), eModeCategoryId));\\n    }\\n}\\n\",\"keccak256\":\"0xdfae277b11a7362ec5d9abca88c4d7bc716385bf68cc9e1fd1edc29e75102068\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n  external\\n  view\\n  returns (\\n    uint256 totalCollateralBase,\\n    uint256 totalDebtBase,\\n    uint256 availableBorrowsBase,\\n    uint256 currentLiquidationThreshold,\\n    uint256 ltv,\\n    uint256 healthFactor\\n  );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n  external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n  external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n  external\\n  view\\n  returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n  external\\n  view\\n  returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\",\"keccak256\":\"0xdbc4714cbdcc3c2ecf8b02da22c9944d8ff428a54a1f9b06b32c75b23832e06b\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\",\"keccak256\":\"0xe6854802245d8dd7765db265dd5045242fea39705bebf0de658852bfbe61e002\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n  function latestAnswer() external view returns (int256);\\n}\",\"keccak256\":\"0x0a5dde10cc0d68100059c9ccdb230552bd085a41cc296d2e1fd37431cef24c52\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/protocol/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\",\"keccak256\":\"0x2385594db59af5c2e15a906f936b3e29fd5bca450a4832b1985377e311e6aeb6\",\"license\":\"BUSL-1.1\"},\"contracts/connectors/arrakis/IArrakisRewards.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IArrakisRewards {\\n\\n    function claim_rewards(address to) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4ac420277ba3759452fafbecb4262f6efe9f57a3c806fd3c6c63ceabc15c9a7b\"},\"contracts/connectors/arrakis/IArrakisV1RouterStaking.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IArrakisV1RouterStaking {\\n\\n    function addLiquidityAndStake(\\n        address gauge,\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        uint256 amount0Min,\\n        uint256 amount1Min,\\n        address receiver\\n    )\\n    external\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 mintAmount\\n    );\\n\\n\\n    function removeLiquidityAndUnstake(\\n        address gauge,\\n        uint256 burnAmount,\\n        uint256 amount0Min,\\n        uint256 amount1Min,\\n        address receiver\\n    )\\n    external\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint128 liquidityBurned\\n    );\\n\\n\\n}\\n\",\"keccak256\":\"0x2448458c99416e38fc7d298a7a85353c28543deac2bec94db5e3d4a55c045bd6\"},\"contracts/connectors/arrakis/IArrakisVault.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IArrakisVault {\\n\\n    /// @notice compute total underlying holdings of the G-UNI token supply\\n    /// includes current liquidity invested in uniswap position, current fees earned\\n    /// and any uninvested leftover (but does not include manager or gelato fees accrued)\\n    /// @return amount0Current current total underlying balance of token0\\n    /// @return amount1Current current total underlying balance of token1\\n    function getUnderlyingBalances() external view returns (uint256 amount0Current, uint256 amount1Current);\\n\\n    function getUnderlyingBalancesAtPrice(uint160 sqrtRatioX96) external view returns (uint256 amount0Current, uint256 amount1Current);\\n\\n    function getPositionID() external view returns (bytes32 positionID);\\n\\n    function token0() external view returns (address token);\\n\\n    function token1() external view returns (address token);\\n\\n    function upperTick() external view returns (int24);\\n\\n    function lowerTick() external view returns (int24);\\n\\n    function pool() external view returns (address pool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function getMintAmounts(uint256 amount0Max, uint256 amount1Max)\\n    external\\n    view\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 mintAmount\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe3954b385ab95459d7df0602344abe90c9ce8f2678c83914a7a948b73e5fd279\"},\"contracts/connectors/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b2d22bff80c423dcd8b10442e1ee1782100321f6bd3c00649e38d8b1f40c91b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5a4963a182807f12235071151cb535109a8f3066ba1af6fef80c0c829ddd7722\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0614fa16712fbf61015568ad06ede003075147da1dd773d78bbf52e1925b7b59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xe1424191e0efbf544f52f2510ec3b1ae451f4af9345dae9b25a370a7c496c219\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00522f13583cc1876568fd1c57c8afbce4baf1fe89dcea4a9b60a8a988f4df25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/uniswap/v3/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa9d8894cfc7826e4d1abacb026b022ef4ff07569037b8796474d43257fb1f19\",\"license\":\"MIT\"},\"contracts/connectors/uniswap/v3/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\n// TODO Updated -> see below TODO breakpoints\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n//        require(absTick <= uint256(MAX_TICK), 'T'); //TODO Need convert int24 to uint256\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xcff9c785d7960a7513af4a9d65f13492eeb763aa116389e68b3ad0ffd122a215\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n    function healthFactorBalance() external; // Balancing aave health factor\\n\\n    function setHealthFactor(uint256 healthFactor) external; // Aave healthFactor setter\\n}\\n\",\"keccak256\":\"0x25b0bffd26c9e171cacfc505c07a34cee978992aab68d0fdfe8c133deb255c4e\",\"license\":\"GPL-3.0\"},\"contracts/core/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyPortfolioManager {\\n        emit Stake(_amount);\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            emit Reward(_claimRewards(_beneficiary));\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function healthFactorBalance() external override onlyPortfolioManager {\\n        uint256 healthFactor = _healthFactorBalance();\\n        if (healthFactor > 0) {\\n            emit BalanceHealthFactor(healthFactor);\\n        }\\n    }\\n\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\n        _setHealthFactor(healthFactor);\\n\\n        emit SetHealthFactor(healthFactor);\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\n        \\n    }\\n\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\n\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ff7993f57cc0fd74c813187822650bd4722aa65e6a5aaf4bca4cb821ad2fe2c\",\"license\":\"MIT\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IGeneralPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IPoolSwapStructs.sol\\\";\\n\\n\\nabstract contract BalancerExchange {\\n\\n    int256 public constant MAX_VALUE = 10 ** 27;\\n\\n    IVault private balancerVault;\\n\\n    function setBalancerVault(address _balancerVault) internal {\\n        balancerVault = IVault(_balancerVault);\\n    }\\n\\n    function swap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 limit\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\n    }\\n\\n    function swap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\n    }\\n\\n    function batchSwap(\\n        bytes32 poolId1,\\n        bytes32 poolId2,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenMid,\\n        IAsset tokenOut,\\n        address sender,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\n\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\n\\n        IVault.BatchSwapStep memory batchSwap1;\\n        batchSwap1.poolId = poolId1;\\n        batchSwap1.assetInIndex = 0;\\n        batchSwap1.assetOutIndex = 1;\\n        batchSwap1.amount = amount;\\n        swaps[0] = batchSwap1;\\n\\n        IVault.BatchSwapStep memory batchSwap2;\\n        batchSwap2.poolId = poolId2;\\n        batchSwap2.assetInIndex = 1;\\n        batchSwap2.assetOutIndex = 2;\\n        batchSwap2.amount = 0;\\n        swaps[1] = batchSwap2;\\n\\n        IAsset[] memory assets = new IAsset[](3);\\n        assets[0] = tokenIn;\\n        assets[1] = tokenMid;\\n        assets[2] = tokenOut;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = recipient;\\n        fundManagement.toInternalBalance = false;\\n\\n        int256[] memory limits = new int256[](3);\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\n            limits[0] = MAX_VALUE;\\n            limits[1] = MAX_VALUE;\\n            limits[2] = MAX_VALUE;\\n        } else {\\n            limits[0] = 0;\\n            limits[1] = 0;\\n            limits[2] = 0;\\n        }\\n\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\n    }\\n\\n    function onSwap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 balance\\n    ) internal view returns (uint256) {\\n\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\n        swapRequest.kind = kind;\\n        swapRequest.tokenIn = tokenIn;\\n        swapRequest.tokenOut = tokenOut;\\n        swapRequest.amount = balance;\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(poolId);\\n\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\n\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\n\\n            uint256 indexIn;\\n            uint256 indexOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    indexIn = i;\\n                } else if (tokens[i] == tokenOut) {\\n                    indexOut = i;\\n                }\\n            }\\n\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\n\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n\\n        } else {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n        }\\n    }\\n\\n    /**\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountToSwap(\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision,\\n        bytes32 poolId,\\n        IERC20 token0,\\n        IERC20 token1\\n    ) internal view returns (uint256) {\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\n        }\\n\\n        return amount0ToSwap;\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountLpTokensToWithdraw(\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalLpBalance,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        bytes32 poolId,\\n        IERC20 token0,\\n        IERC20 token1\\n    ) internal view returns (uint256) {\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\n        for (uint i = 0; i < 1; i++) {\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\n            uint256 amount0 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\n        }\\n        return lpBalance;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd8818122d67890893a599b6b3d78bda105881b00ec1a674bd3ad916437be7996\",\"license\":\"MIT\"},\"contracts/libraries/AaveBorrowLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPool.sol\\\";\\nimport '../connectors/uniswap/v3/libraries/FullMath.sol';\\n\\n\\nlibrary AaveBorrowLibrary {\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider,\\n        uint8 eModeCategoryId\\n    ) internal returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n        IPool(aavePool).setUserEMode(eModeCategoryId);\\n    }\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider\\n    ) internal view returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n    }\\n\\n    function getCollateralAndBorrowForSupplyAndBorrow(\\n        uint256 amount0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 collateral0, uint256 borrow1) {\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        collateral0 = amount0 * HF / (HF + LT * reserve0 / reserve1InToken0);\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        borrow1 = collateral1 * LT / HF;\\n    }\\n\\n    function getBorrowForWithdraw(\\n        uint256 collateral0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 borrow1) {\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        //usdc to usdt\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        //usdt to usdc\\n        borrow1 = (collateral1 * LT * reserve1InToken0) / (HF * reserve1InToken0 + LT * reserve0);\\n    }\\n\\n    // function getBorrowForWithdraw(\\n    //     uint256 collateral0,\\n    //     uint256 totalCollateralUsd,\\n    //     uint256 totalBorrowUsd,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 LT,\\n    //     uint256 HF,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 borrow1) {\\n    //     uint256 totalBorrowUsd1 = convertUsdToTokenAmount(totalBorrowUsd, token1Denominator, price1);   //usd to usdt\\n    //     uint256 totalCollateralUsd1 = convertUsdToTokenAmount(totalCollateralUsd, token1Denominator, price1); //usd to usdt\\n    //     uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1); //usdc to usdt\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0); //usdt to usdc\\n    //     borrow1 = (totalBorrowUsd1 * HF + collateral1 * LT - totalCollateralUsd1 * LT) / (HF + LT * reserve0 / reserve1InToken0);\\n    // }\\n\\n    function getLpTokensForWithdraw(\\n        uint256 totalLpBalance,\\n        uint256 borrow1,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 lpTokensToWithdraw) {\\n        uint256 borrow0 = convertTokenAmountToTokenAmount(borrow1, token1Denominator, token0Denominator, price1, price0);\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        lpTokensToWithdraw = totalLpBalance * (borrow0 + borrow1 * reserve0 / reserve1) / (reserve0 + reserve1InToken0);\\n    }\\n\\n    struct GetWithdrawAmountForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n    }\\n\\n    function getWithdrawAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        withdrawAmount = FullMath.mulDivRoundingUp(\\n            params.reserve0, \\n            params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF, \\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function getBorrowIfZeroAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        withdrawAmount = (params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF) / (params.HF);\\n        withdrawAmount = convertUsdToTokenAmount(withdrawAmount, params.token1Denominator, params.price1);\\n    }\\n\\n    struct GetSupplyAmountForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n    }\\n\\n    function getSupplyAmountForBalance(\\n        GetSupplyAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 supplyAmount) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        supplyAmount = params.reserve1 * (params.totalBorrowUsd * params.HF - params.totalCollateralUsd * params.LT) / (reserve1InUsd * params.HF + reserve0InUsd * params.LT);\\n    }\\n\\n    function convertTokenAmountToTokenAmount(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenAmountToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToTokenAmount(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb55f1375a3369cae3caeb2d50511156fe893759e98eef04f72020adcde08016e\",\"license\":\"MIT\"},\"contracts/libraries/BalancerLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IGeneralPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IPoolSwapStructs.sol\\\";\\n\\n\\nlibrary BalancerLibrary {\\n\\n    int256 public constant MAX_VALUE = 10 ** 27;\\n\\n    function swap(\\n        IVault vault,\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 limit\\n    ) public returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(vault), IERC20(address(tokenIn)).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return vault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\n    }\\n\\n    function swap(\\n        IVault vault,\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(vault), IERC20(address(tokenIn)).balanceOf(address(this)));\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return vault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\n    }\\n\\n\\n    function onSwap(\\n        IVault vault,\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 balance\\n    ) public view returns (uint256) {\\n\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\n        swapRequest.kind = kind;\\n        swapRequest.tokenIn = tokenIn;\\n        swapRequest.tokenOut = tokenOut;\\n        swapRequest.amount = balance;\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = vault.getPoolTokens(poolId);\\n\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = vault.getPool(poolId);\\n\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\n\\n            uint256 indexIn;\\n            uint256 indexOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    indexIn = i;\\n                } else if (tokens[i] == tokenOut) {\\n                    indexOut = i;\\n                }\\n            }\\n\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\n\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n\\n        } else {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n        }\\n    }\\n\\n    /**\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountToSwap(\\n        IVault vault,\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision,\\n        bytes32 poolId,\\n        IERC20 token0,\\n        IERC20 token1\\n    ) public view returns (uint256) {\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = onSwap(vault, poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\n        }\\n\\n        return amount0ToSwap;\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountLpTokensToWithdraw(\\n        IVault vault,\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalLpBalance,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        bytes32 poolId,\\n        IERC20 token0,\\n        IERC20 token1\\n    ) public view returns (uint256) {\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\n        for (uint i = 0; i < 1; i++) {\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\n            uint256 amount0 = onSwap(vault, poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\n        }\\n        return lpBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1ce76c06ddb43188f9d392c77718d657e4a64710d270519f0188c1ed543a16c6\",\"license\":\"MIT\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/libraries/StrategyArrakisWethLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPool.sol\\\";\\nimport \\\"../connectors/arrakis/IArrakisVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../StrategyArrakisWeth.sol\\\";\\nimport \\\"./OvnMath.sol\\\";\\nimport \\\"./AaveBorrowLibrary.sol\\\";\\n\\nlibrary StrategyArrakisWethLibrary {\\n\\n    uint256 constant BASIS_POINTS_FOR_SLIPPAGE = 4; // 0.04%\\n    uint256 constant BASIS_POINTS_FOR_STORAGE = 100; // 1%\\n\\n    function _getLiquidityForToken(StrategyArrakisWeth self, uint256 token0Borrow) public view returns (uint256) {\\n        (, uint256 amount1Current) = _getUnderlyingBalances(self);\\n        uint256 amountLp = token0Borrow * self.arrakisVault().totalSupply() / amount1Current;\\n        return amountLp;\\n    }\\n\\n    function _getTokensForLiquidity(StrategyArrakisWeth self, uint256 balanceLp) public view returns (uint256, uint256) {\\n        (uint256 amount0Current, uint256 amount1Current) = _getUnderlyingBalances(self);\\n\\n        uint256 amountLiq0 = amount0Current * balanceLp / self.arrakisVault().totalSupply();\\n        uint256 amountLiq1 = amount1Current * balanceLp / self.arrakisVault().totalSupply();\\n        return (self.usdcTokenInversion() == 0) ? (amountLiq0, amountLiq1) : (amountLiq0, amountLiq1);\\n    }\\n\\n    function _getUnderlyingBalances(StrategyArrakisWeth self) public view returns (uint256, uint256) {\\n        (uint256 amount0, uint256 amount1) = self.arrakisVault().getUnderlyingBalances();\\n        return (self.usdcTokenInversion() == 0) ? (amount0, amount1) : (amount1, amount0);\\n    }\\n\\n\\n\\n\\n    function _addLiquidityAndStakeWithSlippage(StrategyArrakisWeth self, uint256 usdcAmount, uint256 token0Amount) public {\\n        if (usdcAmount != 0) {\\n            self.usdcToken().approve(address(self.arrakisRouter()), usdcAmount);\\n        }\\n        if (token0Amount != 0) {\\n            self.token0().approve(address(self.arrakisRouter()), token0Amount);\\n        }\\n        if (self.usdcTokenInversion() == 0) {\\n            self.arrakisRouter().addLiquidityAndStake(\\n                address(self.arrakisRewards()),\\n                usdcAmount,\\n                token0Amount,\\n                (usdcAmount == 0) ? 0 : OvnMath.subBasisPoints(usdcAmount, BASIS_POINTS_FOR_SLIPPAGE),\\n                (token0Amount == 0) ? 0 : OvnMath.subBasisPoints(token0Amount, BASIS_POINTS_FOR_SLIPPAGE),\\n                address(self)\\n            );\\n        } else {\\n            self.arrakisRouter().addLiquidityAndStake(\\n                address(self.arrakisRewards()),\\n                token0Amount,\\n                usdcAmount,\\n                (token0Amount == 0) ? 0 : OvnMath.subBasisPoints(token0Amount, BASIS_POINTS_FOR_SLIPPAGE),\\n                (usdcAmount == 0) ? 0 : OvnMath.subBasisPoints(usdcAmount, BASIS_POINTS_FOR_SLIPPAGE),\\n                address(self)\\n            );\\n        }\\n    }\\n\\n    function _removeLiquidityAndUnstakeWithSlippage(StrategyArrakisWeth self, uint256 amountLp) public returns (uint256, uint256) {\\n        (uint256 amountLiq0, uint256 amountLiq1) = _getTokensForLiquidity(self, amountLp);\\n        (uint256 amount0, uint256 amount1,) = self.arrakisRouter().removeLiquidityAndUnstake(\\n            address(self.arrakisRewards()),\\n            amountLp,\\n            (amountLiq0 == 0) ? 0 : OvnMath.subBasisPoints(amountLiq0, BASIS_POINTS_FOR_SLIPPAGE),\\n            (amountLiq1 == 0) ? 0 : OvnMath.subBasisPoints(amountLiq1, BASIS_POINTS_FOR_SLIPPAGE),\\n            address(self)\\n        );\\n\\n        return (self.usdcTokenInversion() == 0) ? (amount0, amount1) : (amount1, amount0);\\n    }\\n\\n\\n    function _healthFactorBalanceI(StrategyArrakisWeth self) public returns (uint256) {\\n\\n        IPool aavePool = _aavePoolEm(self);\\n        (,,,,,uint256 healthFactorCurrent) = aavePool.getUserAccountData(address(self));\\n\\n        if (healthFactorCurrent > 10 ** 20 || OvnMath.abs(healthFactorCurrent, self.healthFactor()) < self.balancingDelta()) {\\n            return healthFactorCurrent;\\n        }\\n\\n        if (healthFactorCurrent > self.healthFactor()) {\\n            _healthFactorBalanceILt(self);\\n        } else {\\n            _healthFactorBalanceIGt(self);\\n        }\\n\\n        (,,,,, healthFactorCurrent) = aavePool.getUserAccountData(address(self));\\n        return healthFactorCurrent;\\n    }\\n\\n    function _healthFactorBalanceILt(StrategyArrakisWeth self) internal {\\n        IPool aavePool = _aavePoolEm(self);\\n\\n        (uint256 collateral, uint256 borrow,,,,) = aavePool.getUserAccountData(address(self));\\n        (uint256 amount0Current, uint256 amount1Current) = _getUnderlyingBalances(self);\\n\\n        AaveBorrowLibrary.GetWithdrawAmountForBalanceParams memory params = AaveBorrowLibrary.GetWithdrawAmountForBalanceParams(\\n            collateral,\\n            borrow,\\n            amount0Current,\\n            amount1Current,\\n            self.liquidationThreshold(),\\n            self.healthFactor(),\\n            self.usdcTokenDenominator(),\\n            self.token0Denominator(),\\n            uint256(self.oracleChainlinkUsdc().latestAnswer()),\\n            uint256(self.oracleChainlinkToken0().latestAnswer())\\n        );\\n\\n        if (amount0Current == 0) {\\n            uint256 neededToken0 = AaveBorrowLibrary.getBorrowIfZeroAmountForBalance(params);\\n            aavePool.borrow(address(self.token0()), neededToken0, self.interestRateMode(), self.referralCode(), address(self));\\n            _addLiquidityAndStakeWithSlippage(self, 0, neededToken0);\\n            return;\\n        }\\n\\n        uint256 neededUsdc = AaveBorrowLibrary.getWithdrawAmountForBalance(\\n            params\\n        );\\n        aavePool.withdraw(address(self.usdcToken()), neededUsdc, address(self));\\n        (params.totalCollateralUsd, params.totalBorrowUsd,,,,) = aavePool.getUserAccountData(address(self));\\n        uint256 neededToken0 = AaveBorrowLibrary.getBorrowIfZeroAmountForBalance(params);\\n        aavePool.borrow(address(self.token0()), neededToken0, self.interestRateMode(), self.referralCode(), address(self));\\n        _addLiquidityAndStakeWithSlippage(self, neededUsdc, neededToken0);\\n    }\\n\\n    function _healthFactorBalanceIGt(StrategyArrakisWeth self) internal {\\n        IPool aavePool = _aavePoolEm(self);\\n        (uint256 collateral, uint256 borrow,,,,) = aavePool.getUserAccountData(address(self));\\n\\n        (uint256 amount0Current, uint256 amount1Current) = _getUnderlyingBalances(self);\\n\\n        AaveBorrowLibrary.GetSupplyAmountForBalanceParams memory params = AaveBorrowLibrary.GetSupplyAmountForBalanceParams(\\n            collateral,\\n            borrow,\\n            amount0Current,\\n            amount1Current,\\n            self.liquidationThreshold(),\\n            self.healthFactor(),\\n            self.usdcTokenDenominator(),\\n            self.token0Denominator(),\\n            uint256(self.oracleChainlinkUsdc().latestAnswer()),\\n            uint256(self.oracleChainlinkToken0().latestAnswer())\\n        );\\n\\n\\n        uint256 neededToken0 = AaveBorrowLibrary.getSupplyAmountForBalance(\\n            params\\n        );\\n        uint256 amountLp = _getLiquidityForToken(self, neededToken0);\\n        self.arrakisRewards().approve(address(self.arrakisRouter()), amountLp);\\n\\n        (uint256 amount0, uint256 amount1) = _removeLiquidityAndUnstakeWithSlippage(self, amountLp);\\n\\n        if (amount0 > 0) {\\n            self.usdcToken().approve(address(aavePool), amount0);\\n            aavePool.supply(address(self.usdcToken()), amount0, address(self), self.referralCode());\\n        }\\n\\n        self.token0().approve(address(aavePool), amount1);\\n        aavePool.repay(address(self.token0()), amount1, self.interestRateMode(), address(self));\\n    }\\n\\n    function _aavePoolEm(StrategyArrakisWeth self) internal returns (IPool aavePool){\\n        aavePool = IPool(AaveBorrowLibrary.getAavePool(address(self.aavePoolAddressesProvider()), self.eModeCategoryId()));\\n    }\\n}\\n\",\"keccak256\":\"0x95e37e38a81d1ca8ed912e9aa2f532581c8aaa688b93a5ce654c380ebcd659f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b5060006200002760016200008e565b9050801562000040576000805461ff0019166101001790555b801562000087576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50620001af565b60008054610100900460ff161562000127578160ff166001148015620000c75750620000c530620001a060201b620019091760201c565b155b6200011f5760405162461bcd60e51b815260206004820152602e6024820152600080516020620059ed83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001865760405162461bcd60e51b815260206004820152602e6024820152600080516020620059ed83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000116565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b60805160601c615803620001ea60003960008181610b0a01528181610b4a01528181610fdb0152818161101b01526110aa01526158036000f3fe6080604052600436106102c95760003560e01c806369e4e00511610175578063cc3d6cf7116100dc578063e8ced75c11610095578063f52d4a651161006f578063f52d4a6514610843578063f6f6b8811461085a578063f72c0d8b1461087a578063f7e99e40146108ae57600080fd5b8063e8ced75c146107eb578063eafb460114610802578063ef5cfb8c1461082357600080fd5b8063cc3d6cf71461072c578063d1b6137f1461074d578063d547741f1461076e578063d8b6d2521461078e578063ddd6014e146107bd578063e856df4c146107d457600080fd5b8063a217fddf1161012e578063a217fddf1461068a578063a3673b381461069f578063a440b21a146106b4578063abf4be01146106d4578063adc9772e146106f5578063cba6253c1461071557600080fd5b806369e4e005146105dc5780637b73aa4e146105fd5780637d5f5802146106125780638129fc1c1461063457806391d14854146106495780639b39d6451461066957600080fd5b80632f2ff15d116102345780634031234c116101ed57806352d1902d116101c757806352d1902d14610566578063537820bf1461057b578063620b75df1461059b57806365b12297146105bb57600080fd5b80634031234c1461051c5780634e049de4146105335780634f1ef2861461055357600080fd5b80632f2ff15d1461046557806331111708146104855780633476372a146104a557806336568abe146104bc5780633659cfe6146104dc578063367da89a146104fc57600080fd5b80631f304df0116102865780631f304df0146103c457806322841f01146103db578063248a9ca3146103f25780632576e65a146104225780632a8b096f146104375780632c63c2bd1461044e57600080fd5b806301ffc9a7146102ce57806306da3f2e146103035780630dfe1681146103285780630eee4d2b1461036157806311eac85514610382578063158274a5146103a3575b600080fd5b3480156102da57600080fd5b506102ee6102e9366004615113565b6108e2565b60405190151581526020015b60405180910390f35b34801561030f57600080fd5b5061031a6101315481565b6040519081526020016102fa565b34801561033457600080fd5b5061012f54610349906001600160a01b031681565b6040516001600160a01b0390911681526020016102fa565b34801561036d57600080fd5b5061013354610349906001600160a01b031681565b34801561038e57600080fd5b5061012d54610349906001600160a01b031681565b3480156103af57600080fd5b5061013b54610349906001600160a01b031681565b3480156103d057600080fd5b5061031a6101405481565b3480156103e757600080fd5b5061031a61013d5481565b3480156103fe57600080fd5b5061031a61040d3660046150b1565b60009081526065602052604090206001015490565b34801561042e57600080fd5b5061031a610919565b34801561044357600080fd5b5061031a6101435481565b34801561045a57600080fd5b5061046361092a565b005b34801561047157600080fd5b506104636104803660046150e3565b6109da565b34801561049157600080fd5b506104636104a03660046150b1565b610a04565b3480156104b157600080fd5b5061031a6101395481565b3480156104c857600080fd5b506104636104d73660046150e3565b610a81565b3480156104e857600080fd5b506104636104f7366004614da3565b610aff565b34801561050857600080fd5b50610463610517366004614ebd565b610bdf565b34801561052857600080fd5b5061031a61013c5481565b34801561053f57600080fd5b5061046361054e366004614e39565b610db3565b610463610561366004614f5c565b610fd0565b34801561057257600080fd5b5061031a61109d565b34801561058757600080fd5b50610463610596366004614ddd565b611150565b3480156105a757600080fd5b5060fb54610349906001600160a01b031681565b3480156105c757600080fd5b5061013854610349906001600160a01b031681565b3480156105e857600080fd5b5061013654610349906001600160a01b031681565b34801561060957600080fd5b506104636113ca565b34801561061e57600080fd5b5061031a60008051602061576783398151915281565b34801561064057600080fd5b50610463611440565b34801561065557600080fd5b506102ee6106643660046150e3565b6114ae565b34801561067557600080fd5b5061013754610349906001600160a01b031681565b34801561069657600080fd5b5061031a600081565b3480156106ab57600080fd5b5061031a6114d9565b3480156106c057600080fd5b506104636106cf366004614da3565b6114e5565b3480156106e057600080fd5b5061013054610349906001600160a01b031681565b34801561070157600080fd5b50610463610710366004615020565b6115bd565b34801561072157600080fd5b5061031a6101325481565b34801561073857600080fd5b5061012e54610349906001600160a01b031681565b34801561075957600080fd5b5061013554610349906001600160a01b031681565b34801561077a57600080fd5b506104636107893660046150e3565b6116a6565b34801561079a57600080fd5b50610141546107aa9061ffff1681565b60405161ffff90911681526020016102fa565b3480156107c957600080fd5b5061031a61013a5481565b3480156107e057600080fd5b5061031a61013e5481565b3480156107f757600080fd5b5061031a6101425481565b34801561080e57600080fd5b5061013454610349906001600160a01b031681565b34801561082f57600080fd5b5061031a61083e366004614da3565b6116cb565b34801561084f57600080fd5b5061031a61013f5481565b34801561086657600080fd5b5061031a61087536600461504c565b61174d565b34801561088657600080fd5b5061031a7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b3480156108ba57600080fd5b50610138546108d090600160a01b900460ff1681565b60405160ff90911681526020016102fa565b60006001600160e01b03198216637965db0b60e01b148061091357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109256000611918565b905090565b6101365461013854600091610954916001600160a01b0390911690600160a01b900460ff1661200d565b604051632fe4a15f60e21b81523060048201529091506001600160a01b0382169063bf92857c9060240160c06040518083038186803b15801561099657600080fd5b505afa1580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce9190615161565b61014355505050505050565b6000828152606560205260409020600101546109f5816120e5565b6109ff83836120ef565b505050565b610a1c600080516020615767833981519152336114ae565b610a415760405162461bcd60e51b8152600401610a3890615398565b60405180910390fd5b610a4a81612175565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b0381163314610af15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a38565b610afb82826121ba565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b485760405162461bcd60e51b8152600401610a38906153cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b91600080516020615787833981519152546001600160a01b031690565b6001600160a01b031614610bb75760405162461bcd60e51b8152600401610a389061541b565b610bc081612221565b60408051600080825260208201909252610bdc9183919061224b565b50565b610bea6000336114ae565b610c065760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b038916610c2c5760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038816610c525760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038716610c785760405162461bcd60e51b8152600401610a389061551a565b61013680546001600160a01b03199081166001600160a01b038c81169190911790925561013780549091168a831617905561013880549189166001600160a81b031990921691909117600160a01b60ff891602179055610cdf8566038d7ea4c68000615679565b61013c55610cf48466038d7ea4c68000615679565b61013d55600061014355610d0f8366038d7ea4c68000615679565b61013f55610140829055610141805461ffff831661ffff199091168117909155604080516001600160a01b038c811682528b811660208301528a168183015260ff891660608201526080810188905260a0810187905260c0810186905260e08101859052610100810192909252517fb9fb9d01d389f7689b3b029b07afec4777cd2fc5a8af452cb999dd59c317d6bf918190036101200190a1505050505050505050565b610dbe6000336114ae565b610dda5760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b038716610e005760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038616610e265760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038516610e4c5760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038416610e725760405162461bcd60e51b8152600401610a389061551a565b82610ebb5760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610a38565b81610f045760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610a38565b61013380546001600160a01b038981166001600160a01b0319928316811790935561013480548a8316908416811790915561013580548a8416908516811790915561013a88905561013987905561013b8054938a1693909416831790935560ff851661013e8190556040805195865260208601929092529084019290925260608301526080820185905260a0820184905260c08201527ff9264c058f820ac6d38fd3a5e95f28250a6dfb959747092354e6ab70d85647d29060e00160405180910390a150505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110195760405162461bcd60e51b8152600401610a38906153cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611062600080516020615787833981519152546001600160a01b031690565b6001600160a01b0316146110885760405162461bcd60e51b8152600401610a389061541b565b61109182612221565b610afb8282600161224b565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461113d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a38565b5060008051602061578783398151915290565b61115b6000336114ae565b6111775760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b03841661119d5760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b0383166111c35760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b0382166111e95760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b03811661120f5760405162461bcd60e51b8152600401610a389061551a565b61012d80546001600160a01b038087166001600160a01b0319928316811790935561012f8054878316908416179055610130805486831690841617905561012e8054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c991906151ab565b6112d490600a6155ce565b61013181905550826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906151ab565b61135790600a6155ce565b61013281905561013154604080516001600160a01b03888116825287811660208301528681168284015285166060820152608081019290925260a082019290925290517fe12a84f7b6db0cbb46792bc40aa14a947aee2e97a7ef410627b718480f7d97989181900360c00190a150505050565b6113e2600080516020615767833981519152336114ae565b6113fe5760405162461bcd60e51b8152600401610a3890615398565b60006114086123c5565b90508015610bdc576040518181527fb1f3b41173d84c689f57264393ff456e5e65ab9a90e99a584416db69c90c56c690602001610a76565b600061144c600161244a565b90508015611464576000805461ff0019166101001790555b61146c6124d2565b8015610bdc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610a76565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006109256001611918565b6114f06000336114ae565b61150c5760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b0381166115325760405162461bcd60e51b8152600401610a389061551a565b60fb5461155790600080516020615767833981519152906001600160a01b03166116a6565b61156f600080516020615767833981519152826109da565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610a76565b6115d5600080516020615767833981519152336114ae565b6115f15760405162461bcd60e51b8152600401610a3890615398565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b8152306004820152610afb9083906001600160a01b038216906370a082319060240160206040518083038186803b15801561166957600080fd5b505afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a191906150ca565b61253b565b6000828152606560205260409020600101546116c1816120e5565b6109ff83836121ba565b60006116e5600080516020615767833981519152336114ae565b6117015760405162461bcd60e51b8152600401610a3890615398565b600061170c83612b6d565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161173f91815260200190565b60405180910390a192915050565b6000611767600080516020615767833981519152336114ae565b6117835760405162461bcd60e51b8152600401610a3890615398565b600082156117d7577f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1346117b585612b6d565b60405190815260200160405180910390a16117d08685612e21565b9050611846565b6117e28686866134f8565b9050848110156118465760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610a38565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90611874908790859060040161527b565b602060405180830381600087803b15801561188e57600080fd5b505af11580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c69190615094565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b610134546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199991906150ca565b9050806119a95750600092915050565b60405163d1e9a12960e01b8152600090819073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063d1e9a129906119e7903090879060040161527b565b604080518083038186803b1580156119fe57600080fd5b505af4158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a36919061513d565b61012e546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611a8357600080fd5b505afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb91906150ca565b61013654909150600090611ad7906001600160a01b03166146fc565b604051632fe4a15f60e21b81523060048201529091506000906001600160a01b0383169063bf92857c9060240160c06040518083038186803b158015611b1c57600080fd5b505afa158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190615161565b50505050915050611bef816101325461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb257600080fd5b505afa158015611bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bea91906150ca565b61476f565b61012d546040516370a0823160e01b8152306004820152919250600091859188916001600160a01b03909116906370a082319060240160206040518083038186803b158015611c3d57600080fd5b505afa158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906150ca565b611c7f9190615551565b611c899190615551565b905084821015611eb5576000611c9f8387615698565b90508915611dde57611dc681610132546101315461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0257600080fd5b505afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a91906150ca565b61013760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc191906150ca565b61478e565b611dd09083615551565b9a9950505050505050505050565b611de9606487615569565b811115611eaf5761013b5461013a5461012f5461012d546040516322f1931960e01b815273__$1cda2f075113616c80b83d9f14c91856f4$__946322f1931994611e50946001600160a01b039283169491936000939182169290911690899060040161531e565b60206040518083038186803b158015611e6857600080fd5b505af4158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea091906150ca565b9050611eac8183615551565b91505b50612001565b6000611ec18684615698565b90508915611f2e57611f2481610132546101315461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0257600080fd5b611dd09083615698565b611f39606487615569565b811115611fff5761013b5461013a5461012d5461012f546040516322f1931960e01b815273__$1cda2f075113616c80b83d9f14c91856f4$__946322f1931994611fa0946001600160a01b039283169491936001939182169290911690899060040161531e565b60206040518083038186803b158015611fb857600080fd5b505af4158015611fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff091906150ca565b9050611ffc8183615698565b91505b505b98975050505050505050565b6000826001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561204857600080fd5b505afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190614dc0565b6040516328530a4760e01b815260ff841660048201529091506001600160a01b038216906328530a4790602401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b5050505092915050565b610bdc81336147c3565b6120f982826114ae565b610afb5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121313390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121868166038d7ea4c68000615679565b61013d556040518181527fd7e43bb830d464c21e0c166505e938f87ce38c05d007cc91fc36a040a2aa37bb90602001610a76565b6121c482826114ae565b15610afb5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610afb816120e5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561227e576109ff83614827565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122b757600080fd5b505afa9250505080156122e7575060408051601f3d908101601f191682019092526122e4918101906150ca565b60015b61234a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a38565b60008051602061578783398151915281146123b95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a38565b506109ff8383836148c3565b6040516339d8c57f60e11b815230600482015260009073__$53b940f9b993023f8625ce1e4d811b0a1f$__906373b18afe9060240160206040518083038186803b15801561241257600080fd5b505af4158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906150ca565b60008054610100900460ff1615612491578160ff16600114801561246d5750303b155b6124895760405162461bcd60e51b8152600401610a3890615467565b506000919050565b60005460ff8084169116106124b85760405162461bcd60e51b8152600401610a3890615467565b506000805460ff191660ff92909216919091179055600190565b60006124de600161244a565b905080156124f6576000805461ff0019166101001790555b6124fe6148ee565b6125066148ee565b6125116000336120ef565b61146c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336120ef565b61012d546001600160a01b038381169116146125695760405162461bcd60e51b8152600401610a38906154e3565b6101425461012d546040516370a0823160e01b81523060048201526000926126039290916001600160a01b03909116906370a082319060240160206040518083038186803b1580156125ba57600080fd5b505afa1580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f291906150ca565b6125fc9190615698565b606461495b565b61012d546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561264c57600080fd5b505afa158015612660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268491906150ca565b61268e9190615698565b610142556040516376da7d4360e11b8152306004820152600090819073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063edb4fa8690602401604080518083038186803b1580156126e057600080fd5b505af41580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612718919061513d565b9150915060008061284885858561013c5461013d54610131546101325461013760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561278457600080fd5b505afa158015612798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bc91906150ca565b61013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561280b57600080fd5b505afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284391906150ca565b61497e565b9150915060006128566149ff565b61012d5460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b39061288a908490879060040161527b565b602060405180830381600087803b1580156128a457600080fd5b505af11580156128b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128dc9190615094565b5061012d546101415460405163617ba03760e01b81526001600160a01b0392831660048201526024810186905230604482015261ffff90911660648201529082169063617ba03790608401600060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505061012f54610140546101415460405163a415bcad60e01b81526001600160a01b03938416600482015260248101889052604481019290925261ffff166064820152306084820152908416925063a415bcad915060a401600060405180830381600087803b1580156129c757600080fd5b505af11580156129db573d6000803e3d6000fd5b50506101425461012d546040516370a0823160e01b8152306004820152600094509192506001600160a01b0316906370a082319060240160206040518083038186803b158015612a2a57600080fd5b505afa158015612a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6291906150ca565b612a6c9190615698565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612ab657600080fd5b505afa158015612aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aee91906150ca565b60405163d451c46160e01b8152306004820152602481018490526044810182905290915073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063d451c4619060640160006040518083038186803b158015612b4957600080fd5b505af4158015612b5d573d6000803e3d6000fd5b5050505050505050505050505050565b610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612bb257600080fd5b505afa158015612bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bea91906150ca565b15612c4e5761013454604051634274debf60e11b81523060048201526001600160a01b03909116906384e9bd7e90602401600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612c9357600080fd5b505afa158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb91906150ca565b90508015612e185761013b54610139546101305461012d54604051632e4def3f60e11b815260009473__$1cda2f075113616c80b83d9f14c91856f4$__94635c9bde7e94612d3a946001600160a01b03938416949293899392811692911690309081908c9086906004016152bf565b60206040518083038186803b158015612d5257600080fd5b505af4158015612d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8a91906150ca565b61012d5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90612dbe908790859060040161527b565b602060405180830381600087803b158015612dd857600080fd5b505af1158015612dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e109190615094565b509392505050565b50600092915050565b61012d546000906001600160a01b03848116911614612e525760405162461bcd60e51b8152600401610a38906154e3565b610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612e9757600080fd5b505afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf91906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392612f09921690859060040161527b565b602060405180830381600087803b158015612f2357600080fd5b505af1158015612f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5b9190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c190612f95903090859060040161527b565b604080518083038186803b158015612fac57600080fd5b505af4158015612fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe4919061513d565b505061013b5461013a5461012d5461012f5461014254604051632e4def3f60e11b815273__$1cda2f075113616c80b83d9f14c91856f4$__95635c9bde7e9561304f956001600160a01b039283169591946000949184169390921691309182919086906004016152bf565b60206040518083038186803b15801561306757600080fd5b505af415801561307b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309f91906150ca565b5060006130aa6149ff565b61012f546040516370a0823160e01b81523060048201529192506001600160a01b03169063095ea7b390839083906370a082319060240160206040518083038186803b1580156130f957600080fd5b505afa15801561310d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313191906150ca565b6040518363ffffffff1660e01b815260040161314e92919061527b565b602060405180830381600087803b15801561316857600080fd5b505af115801561317c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a09190615094565b5061012f546101405460405163573ade8160e01b81526001600160a01b038085169363573ade81936131df939190921691600019913090600401615294565b602060405180830381600087803b1580156131f957600080fd5b505af115801561320d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323191906150ca565b5061012d54604051631a4ca37b60e21b81526001600160a01b0391821660048201526000196024820152306044820152908216906369328dec90606401602060405180830381600087803b15801561328857600080fd5b505af115801561329c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c091906150ca565b5061012f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561330657600080fd5b505afa15801561331a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333e91906150ca565b11156134735761013b5461013a5461012f5461012d546040516370a0823160e01b8152306004820181905273__$1cda2f075113616c80b83d9f14c91856f4$__95635c9bde7e956001600160a01b039182169590946000949183169392169190819084906370a082319060240160206040518083038186803b1580156133c357600080fd5b505afa1580156133d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fb91906150ca565b60006040518a63ffffffff1660e01b8152600401613421999897969594939291906152bf565b60206040518083038186803b15801561343957600080fd5b505af415801561344d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347191906150ca565b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156134b757600080fd5b505afa1580156134cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ef91906150ca565b95945050505050565b61012d546000906001600160a01b038581169116146135295760405162461bcd60e51b8152600401610a38906154e3565b600061353684606461495b565b90506135428185615698565b610142546135509190615698565b6101425561355f600a82615551565b6040516376da7d4360e11b8152306004820152909150600090819073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063edb4fa8690602401604080518083038186803b1580156135b057600080fd5b505af41580156135c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e8919061513d565b91509150600061371784848461013c5461013d54610131546101325461013760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561365357600080fd5b505afa158015613667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368b91906150ca565b61013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136da57600080fd5b505afa1580156136ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371291906150ca565b614a29565b905060006137236149ff565b604051632fe4a15f60e21b81523060048201529091506000906001600160a01b0383169063bf92857c9060240160c06040518083038186803b15801561376857600080fd5b505afa15801561377c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a09190615161565b505050509150506000613800826101325461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb257600080fd5b905080841115613bc9576040516305543f8560e31b815260009073__$53b940f9b993023f8625ce1e4d811b0a1f$__90632aa1fc2890613846903090869060040161527b565b60206040518083038186803b15801561385e57600080fd5b505af4158015613872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389691906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926138d0921690859060040161527b565b602060405180830381600087803b1580156138ea57600080fd5b505af11580156138fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139229190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c19061395c903090859060040161527b565b604080518083038186803b15801561397357600080fd5b505af4158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab919061513d565b505061012f546040516370a0823160e01b81523060048201526001600160a01b039091169063095ea7b390869083906370a082319060240160206040518083038186803b1580156139fb57600080fd5b505afa158015613a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3391906150ca565b6040518363ffffffff1660e01b8152600401613a5092919061527b565b602060405180830381600087803b158015613a6a57600080fd5b505af1158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa29190615094565b5061012f546101405460405163573ade8160e01b81526001600160a01b038088169363573ade8193613ae1939190921691600019913090600401615294565b602060405180830381600087803b158015613afb57600080fd5b505af1158015613b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3391906150ca565b5061012d54604051631a4ca37b60e21b81526001600160a01b0391821660048201526000196024820152306044820152908516906369328dec90606401602060405180830381600087803b158015613b8a57600080fd5b505af1158015613b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc291906150ca565b5050614014565b6040516305543f8560e31b815260009073__$53b940f9b993023f8625ce1e4d811b0a1f$__90632aa1fc2890613c05903090899060040161527b565b60206040518083038186803b158015613c1d57600080fd5b505af4158015613c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5591906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392613c8f921690859060040161527b565b602060405180830381600087803b158015613ca957600080fd5b505af1158015613cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce19190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c190613d1b903090859060040161527b565b604080518083038186803b158015613d3257600080fd5b505af4158015613d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6a919061513d565b505061012f546040516370a0823160e01b81523060048201526001600160a01b039091169063095ea7b390869083906370a082319060240160206040518083038186803b158015613dba57600080fd5b505afa158015613dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df291906150ca565b6040518363ffffffff1660e01b8152600401613e0f92919061527b565b602060405180830381600087803b158015613e2957600080fd5b505af1158015613e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e619190615094565b5061012f546040516370a0823160e01b81523060048201526001600160a01b038681169263573ade819291169081906370a082319060240160206040518083038186803b158015613eb157600080fd5b505afa158015613ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ee991906150ca565b61014054306040518563ffffffff1660e01b8152600401613f0d9493929190615294565b602060405180830381600087803b158015613f2757600080fd5b505af1158015613f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5f91906150ca565b50600086613f6d8988615679565b613f779190615569565b613f81908a615698565b61012d54604051631a4ca37b60e21b81526001600160a01b039182166004820152602481018390523060448201529192508616906369328dec90606401602060405180830381600087803b158015613fd857600080fd5b505af1158015613fec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401091906150ca565b5050505b6101425461012d546040516370a0823160e01b81523060048201528c92916001600160a01b0316906370a082319060240160206040518083038186803b15801561405d57600080fd5b505afa158015614071573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409591906150ca565b61409f9190615698565b1061413c576101425461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156140ec57600080fd5b505afa158015614100573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412491906150ca565b61412e9190615698565b9750505050505050506146f5565b6101425461012d546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561418657600080fd5b505afa15801561419a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141be91906150ca565b6141c89190615698565b6141d2908c615698565b6040516376da7d4360e11b815230600482015290915073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063edb4fa8690602401604080518083038186803b15801561421e57600080fd5b505af4158015614232573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614256919061513d565b610134546040516370a0823160e01b81523060048201529299509097506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156142a357600080fd5b505afa1580156142b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142db91906150ca565b61013b5490915060009073__$1cda2f075113616c80b83d9f14c91856f4$__90639241cd16906001600160a01b0316614315866004614a99565b8c8c87610131546101325461013a5461012d60009054906101000a90046001600160a01b031661012f60009054906101000a90046001600160a01b03166040518b63ffffffff1660e01b81526004016143c99a999897969594939291906001600160a01b039a8b168152602081019990995260408901979097526060880195909552608087019390935260a086019190915260c085015260e084015283166101008301529091166101208201526101400190565b60206040518083038186803b1580156143e157600080fd5b505af41580156143f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441991906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392614453921690859060040161527b565b602060405180830381600087803b15801561446d57600080fd5b505af1158015614481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a59190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c1906144df903090859060040161527b565b604080518083038186803b1580156144f657600080fd5b505af415801561450a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452e919061513d565b505061013b5461013a5461012f5461012d546040516370a0823160e01b8152306004820181905273__$1cda2f075113616c80b83d9f14c91856f4$__95635c9bde7e956001600160a01b039182169590946000949183169392169190819084906370a082319060240160206040518083038186803b1580156145af57600080fd5b505afa1580156145c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e791906150ca565b60006040518a63ffffffff1660e01b815260040161460d999897969594939291906152bf565b60206040518083038186803b15801561462557600080fd5b505af4158015614639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465d91906150ca565b506101425461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156146a657600080fd5b505afa1580156146ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146de91906150ca565b6146e89190615698565b9a50505050505050505050505b9392505050565b6000816001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561473757600080fd5b505afa15801561474b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190614dc0565b60008161477c8486615679565b6147869190615569565b949350505050565b600061479a8286615679565b836147a58689615679565b6147af9190615679565b6147b99190615569565b9695505050505050565b6147cd82826114ae565b610afb576147e5816001600160a01b03166014614aa8565b6147f0836020614aa8565b604051602001614801929190615206565b60408051601f198184030181529082905262461bcd60e51b8252610a3891600401615365565b6001600160a01b0381163b6148945760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a38565b60008051602061578783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6148cc83614c44565b6000825111806148d95750805b156109ff576148e88383614c84565b50505050565b600054610100900460ff166149595760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a38565b565b600061271061496a8382615698565b6149749085615679565b6146f59190615569565b60008060006149908a8789878961478e565b90508061499d8c8b615679565b6149a79190615569565b6149b19089615551565b6149bb898e615679565b6149c59190615569565b925060006149d6848989898961478e565b9050886149e38b83615679565b6149ed9190615569565b92505050995099975050505050505050565b6101365461013854600091610925916001600160a01b0390911690600160a01b900460ff1661200d565b600080614a398b8787878761478e565b90506000614a4a8a8789878961478e565b9050614a568b8a615679565b614a60828a615679565b614a6a9190615551565b81614a758b85615679565b614a7f9190615679565b614a899190615569565b9c9b505050505050505050505050565b600061271061496a8382615551565b60606000614ab7836002615679565b614ac2906002615551565b67ffffffffffffffff811115614ada57614ada61571e565b6040519080825280601f01601f191660200182016040528015614b04576020820181803683370190505b509050600360fc1b81600081518110614b1f57614b1f615708565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614b4e57614b4e615708565b60200101906001600160f81b031916908160001a9053506000614b72846002615679565b614b7d906001615551565b90505b6001811115614bf5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614bb157614bb1615708565b1a60f81b828281518110614bc757614bc7615708565b60200101906001600160f81b031916908160001a90535060049490941c93614bee816156db565b9050614b80565b5083156146f55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a38565b614c4d81614827565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614cec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a38565b600080846001600160a01b031684604051614d0791906151ea565b600060405180830381855af49150503d8060008114614d42576040519150601f19603f3d011682016040523d82523d6000602084013e614d47565b606091505b50915091506134ef82826040518060600160405280602781526020016157a76027913960608315614d795750816146f5565b825115614d895782518084602001fd5b8160405162461bcd60e51b8152600401610a389190615365565b600060208284031215614db557600080fd5b81356146f581615734565b600060208284031215614dd257600080fd5b81516146f581615734565b60008060008060808587031215614df357600080fd5b8435614dfe81615734565b93506020850135614e0e81615734565b92506040850135614e1e81615734565b91506060850135614e2e81615734565b939692955090935050565b600080600080600080600060e0888a031215614e5457600080fd5b8735614e5f81615734565b96506020880135614e6f81615734565b95506040880135614e7f81615734565b94506060880135614e8f81615734565b93506080880135925060a0880135915060c0880135614ead81615757565b8091505092959891949750929550565b60008060008060008060008060006101208a8c031215614edc57600080fd5b8935614ee781615734565b985060208a0135614ef781615734565b975060408a0135614f0781615734565b965060608a0135614f1781615757565b955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a013561ffff81168114614f4b57600080fd5b809150509295985092959850929598565b60008060408385031215614f6f57600080fd5b8235614f7a81615734565b9150602083013567ffffffffffffffff80821115614f9757600080fd5b818501915085601f830112614fab57600080fd5b813581811115614fbd57614fbd61571e565b604051601f8201601f19908116603f01168101908382118183101715614fe557614fe561571e565b81604052828152886020848701011115614ffe57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561503357600080fd5b823561503e81615734565b946020939093013593505050565b6000806000806080858703121561506257600080fd5b843561506d81615734565b935060208501359250604085013561508481615734565b91506060850135614e2e81615749565b6000602082840312156150a657600080fd5b81516146f581615749565b6000602082840312156150c357600080fd5b5035919050565b6000602082840312156150dc57600080fd5b5051919050565b600080604083850312156150f657600080fd5b82359150602083013561510881615734565b809150509250929050565b60006020828403121561512557600080fd5b81356001600160e01b0319811681146146f557600080fd5b6000806040838503121561515057600080fd5b505080516020909101519092909150565b60008060008060008060c0878903121561517a57600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000602082840312156151bd57600080fd5b81516146f581615757565b600281106151e657634e487b7160e01b600052602160045260246000fd5b9052565b600082516151fc8184602087016156af565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161523e8160178501602088016156af565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161526f8160288401602088016156af565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b6001600160a01b038a81168252602082018a90526101208201906152e6604084018b6151c8565b9788166060830152958716608082015293861660a08501529190941660c083015260e082019390935261010001919091529392505050565b6001600160a01b0387811682526020820187905260c082019061534460408401886151c8565b948516606083015292909316608084015260a0909201919091529392505050565b60208152600082518060208401526153848160408501602087016156af565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60008219821115615564576155646156f2565b500190565b60008261558657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156155c65781600019048211156155ac576155ac6156f2565b808516156155b957918102915b93841c9390800290615590565b509250929050565b60006146f560ff8416836000826155e757506001610913565b816155f457506000610913565b816001811461560a576002811461561457615630565b6001915050610913565b60ff841115615625576156256156f2565b50506001821b610913565b5060208310610133831016604e8410600b8410161715615653575081810a610913565b61565d838361558b565b8060001904821115615671576156716156f2565b029392505050565b6000816000190483118215151615615693576156936156f2565b500290565b6000828210156156aa576156aa6156f2565b500390565b60005b838110156156ca5781810151838201526020016156b2565b838111156148e85750506000910152565b6000816156ea576156ea6156f2565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bdc57600080fd5b8015158114610bdc57600080fd5b60ff81168114610bdc57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206a45f7a9db838271b366ec370bebab67a3b1876b01a4cc0bb47f2b74c54c79a364736f6c63430008060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106102c95760003560e01c806369e4e00511610175578063cc3d6cf7116100dc578063e8ced75c11610095578063f52d4a651161006f578063f52d4a6514610843578063f6f6b8811461085a578063f72c0d8b1461087a578063f7e99e40146108ae57600080fd5b8063e8ced75c146107eb578063eafb460114610802578063ef5cfb8c1461082357600080fd5b8063cc3d6cf71461072c578063d1b6137f1461074d578063d547741f1461076e578063d8b6d2521461078e578063ddd6014e146107bd578063e856df4c146107d457600080fd5b8063a217fddf1161012e578063a217fddf1461068a578063a3673b381461069f578063a440b21a146106b4578063abf4be01146106d4578063adc9772e146106f5578063cba6253c1461071557600080fd5b806369e4e005146105dc5780637b73aa4e146105fd5780637d5f5802146106125780638129fc1c1461063457806391d14854146106495780639b39d6451461066957600080fd5b80632f2ff15d116102345780634031234c116101ed57806352d1902d116101c757806352d1902d14610566578063537820bf1461057b578063620b75df1461059b57806365b12297146105bb57600080fd5b80634031234c1461051c5780634e049de4146105335780634f1ef2861461055357600080fd5b80632f2ff15d1461046557806331111708146104855780633476372a146104a557806336568abe146104bc5780633659cfe6146104dc578063367da89a146104fc57600080fd5b80631f304df0116102865780631f304df0146103c457806322841f01146103db578063248a9ca3146103f25780632576e65a146104225780632a8b096f146104375780632c63c2bd1461044e57600080fd5b806301ffc9a7146102ce57806306da3f2e146103035780630dfe1681146103285780630eee4d2b1461036157806311eac85514610382578063158274a5146103a3575b600080fd5b3480156102da57600080fd5b506102ee6102e9366004615113565b6108e2565b60405190151581526020015b60405180910390f35b34801561030f57600080fd5b5061031a6101315481565b6040519081526020016102fa565b34801561033457600080fd5b5061012f54610349906001600160a01b031681565b6040516001600160a01b0390911681526020016102fa565b34801561036d57600080fd5b5061013354610349906001600160a01b031681565b34801561038e57600080fd5b5061012d54610349906001600160a01b031681565b3480156103af57600080fd5b5061013b54610349906001600160a01b031681565b3480156103d057600080fd5b5061031a6101405481565b3480156103e757600080fd5b5061031a61013d5481565b3480156103fe57600080fd5b5061031a61040d3660046150b1565b60009081526065602052604090206001015490565b34801561042e57600080fd5b5061031a610919565b34801561044357600080fd5b5061031a6101435481565b34801561045a57600080fd5b5061046361092a565b005b34801561047157600080fd5b506104636104803660046150e3565b6109da565b34801561049157600080fd5b506104636104a03660046150b1565b610a04565b3480156104b157600080fd5b5061031a6101395481565b3480156104c857600080fd5b506104636104d73660046150e3565b610a81565b3480156104e857600080fd5b506104636104f7366004614da3565b610aff565b34801561050857600080fd5b50610463610517366004614ebd565b610bdf565b34801561052857600080fd5b5061031a61013c5481565b34801561053f57600080fd5b5061046361054e366004614e39565b610db3565b610463610561366004614f5c565b610fd0565b34801561057257600080fd5b5061031a61109d565b34801561058757600080fd5b50610463610596366004614ddd565b611150565b3480156105a757600080fd5b5060fb54610349906001600160a01b031681565b3480156105c757600080fd5b5061013854610349906001600160a01b031681565b3480156105e857600080fd5b5061013654610349906001600160a01b031681565b34801561060957600080fd5b506104636113ca565b34801561061e57600080fd5b5061031a60008051602061576783398151915281565b34801561064057600080fd5b50610463611440565b34801561065557600080fd5b506102ee6106643660046150e3565b6114ae565b34801561067557600080fd5b5061013754610349906001600160a01b031681565b34801561069657600080fd5b5061031a600081565b3480156106ab57600080fd5b5061031a6114d9565b3480156106c057600080fd5b506104636106cf366004614da3565b6114e5565b3480156106e057600080fd5b5061013054610349906001600160a01b031681565b34801561070157600080fd5b50610463610710366004615020565b6115bd565b34801561072157600080fd5b5061031a6101325481565b34801561073857600080fd5b5061012e54610349906001600160a01b031681565b34801561075957600080fd5b5061013554610349906001600160a01b031681565b34801561077a57600080fd5b506104636107893660046150e3565b6116a6565b34801561079a57600080fd5b50610141546107aa9061ffff1681565b60405161ffff90911681526020016102fa565b3480156107c957600080fd5b5061031a61013a5481565b3480156107e057600080fd5b5061031a61013e5481565b3480156107f757600080fd5b5061031a6101425481565b34801561080e57600080fd5b5061013454610349906001600160a01b031681565b34801561082f57600080fd5b5061031a61083e366004614da3565b6116cb565b34801561084f57600080fd5b5061031a61013f5481565b34801561086657600080fd5b5061031a61087536600461504c565b61174d565b34801561088657600080fd5b5061031a7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b3480156108ba57600080fd5b50610138546108d090600160a01b900460ff1681565b60405160ff90911681526020016102fa565b60006001600160e01b03198216637965db0b60e01b148061091357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109256000611918565b905090565b6101365461013854600091610954916001600160a01b0390911690600160a01b900460ff1661200d565b604051632fe4a15f60e21b81523060048201529091506001600160a01b0382169063bf92857c9060240160c06040518083038186803b15801561099657600080fd5b505afa1580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce9190615161565b61014355505050505050565b6000828152606560205260409020600101546109f5816120e5565b6109ff83836120ef565b505050565b610a1c600080516020615767833981519152336114ae565b610a415760405162461bcd60e51b8152600401610a3890615398565b60405180910390fd5b610a4a81612175565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b0381163314610af15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a38565b610afb82826121ba565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b485760405162461bcd60e51b8152600401610a38906153cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b91600080516020615787833981519152546001600160a01b031690565b6001600160a01b031614610bb75760405162461bcd60e51b8152600401610a389061541b565b610bc081612221565b60408051600080825260208201909252610bdc9183919061224b565b50565b610bea6000336114ae565b610c065760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b038916610c2c5760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038816610c525760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038716610c785760405162461bcd60e51b8152600401610a389061551a565b61013680546001600160a01b03199081166001600160a01b038c81169190911790925561013780549091168a831617905561013880549189166001600160a81b031990921691909117600160a01b60ff891602179055610cdf8566038d7ea4c68000615679565b61013c55610cf48466038d7ea4c68000615679565b61013d55600061014355610d0f8366038d7ea4c68000615679565b61013f55610140829055610141805461ffff831661ffff199091168117909155604080516001600160a01b038c811682528b811660208301528a168183015260ff891660608201526080810188905260a0810187905260c0810186905260e08101859052610100810192909252517fb9fb9d01d389f7689b3b029b07afec4777cd2fc5a8af452cb999dd59c317d6bf918190036101200190a1505050505050505050565b610dbe6000336114ae565b610dda5760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b038716610e005760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038616610e265760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038516610e4c5760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b038416610e725760405162461bcd60e51b8152600401610a389061551a565b82610ebb5760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610a38565b81610f045760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610a38565b61013380546001600160a01b038981166001600160a01b0319928316811790935561013480548a8316908416811790915561013580548a8416908516811790915561013a88905561013987905561013b8054938a1693909416831790935560ff851661013e8190556040805195865260208601929092529084019290925260608301526080820185905260a0820184905260c08201527ff9264c058f820ac6d38fd3a5e95f28250a6dfb959747092354e6ab70d85647d29060e00160405180910390a150505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110195760405162461bcd60e51b8152600401610a38906153cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611062600080516020615787833981519152546001600160a01b031690565b6001600160a01b0316146110885760405162461bcd60e51b8152600401610a389061541b565b61109182612221565b610afb8282600161224b565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461113d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a38565b5060008051602061578783398151915290565b61115b6000336114ae565b6111775760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b03841661119d5760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b0383166111c35760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b0382166111e95760405162461bcd60e51b8152600401610a389061551a565b6001600160a01b03811661120f5760405162461bcd60e51b8152600401610a389061551a565b61012d80546001600160a01b038087166001600160a01b0319928316811790935561012f8054878316908416179055610130805486831690841617905561012e8054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c991906151ab565b6112d490600a6155ce565b61013181905550826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906151ab565b61135790600a6155ce565b61013281905561013154604080516001600160a01b03888116825287811660208301528681168284015285166060820152608081019290925260a082019290925290517fe12a84f7b6db0cbb46792bc40aa14a947aee2e97a7ef410627b718480f7d97989181900360c00190a150505050565b6113e2600080516020615767833981519152336114ae565b6113fe5760405162461bcd60e51b8152600401610a3890615398565b60006114086123c5565b90508015610bdc576040518181527fb1f3b41173d84c689f57264393ff456e5e65ab9a90e99a584416db69c90c56c690602001610a76565b600061144c600161244a565b90508015611464576000805461ff0019166101001790555b61146c6124d2565b8015610bdc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610a76565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006109256001611918565b6114f06000336114ae565b61150c5760405162461bcd60e51b8152600401610a38906154b5565b6001600160a01b0381166115325760405162461bcd60e51b8152600401610a389061551a565b60fb5461155790600080516020615767833981519152906001600160a01b03166116a6565b61156f600080516020615767833981519152826109da565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610a76565b6115d5600080516020615767833981519152336114ae565b6115f15760405162461bcd60e51b8152600401610a3890615398565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b8152306004820152610afb9083906001600160a01b038216906370a082319060240160206040518083038186803b15801561166957600080fd5b505afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a191906150ca565b61253b565b6000828152606560205260409020600101546116c1816120e5565b6109ff83836121ba565b60006116e5600080516020615767833981519152336114ae565b6117015760405162461bcd60e51b8152600401610a3890615398565b600061170c83612b6d565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161173f91815260200190565b60405180910390a192915050565b6000611767600080516020615767833981519152336114ae565b6117835760405162461bcd60e51b8152600401610a3890615398565b600082156117d7577f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1346117b585612b6d565b60405190815260200160405180910390a16117d08685612e21565b9050611846565b6117e28686866134f8565b9050848110156118465760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610a38565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90611874908790859060040161527b565b602060405180830381600087803b15801561188e57600080fd5b505af11580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c69190615094565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b610134546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199991906150ca565b9050806119a95750600092915050565b60405163d1e9a12960e01b8152600090819073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063d1e9a129906119e7903090879060040161527b565b604080518083038186803b1580156119fe57600080fd5b505af4158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a36919061513d565b61012e546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611a8357600080fd5b505afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb91906150ca565b61013654909150600090611ad7906001600160a01b03166146fc565b604051632fe4a15f60e21b81523060048201529091506000906001600160a01b0383169063bf92857c9060240160c06040518083038186803b158015611b1c57600080fd5b505afa158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190615161565b50505050915050611bef816101325461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb257600080fd5b505afa158015611bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bea91906150ca565b61476f565b61012d546040516370a0823160e01b8152306004820152919250600091859188916001600160a01b03909116906370a082319060240160206040518083038186803b158015611c3d57600080fd5b505afa158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906150ca565b611c7f9190615551565b611c899190615551565b905084821015611eb5576000611c9f8387615698565b90508915611dde57611dc681610132546101315461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0257600080fd5b505afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a91906150ca565b61013760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc191906150ca565b61478e565b611dd09083615551565b9a9950505050505050505050565b611de9606487615569565b811115611eaf5761013b5461013a5461012f5461012d546040516322f1931960e01b815273__$1cda2f075113616c80b83d9f14c91856f4$__946322f1931994611e50946001600160a01b039283169491936000939182169290911690899060040161531e565b60206040518083038186803b158015611e6857600080fd5b505af4158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea091906150ca565b9050611eac8183615551565b91505b50612001565b6000611ec18684615698565b90508915611f2e57611f2481610132546101315461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0257600080fd5b611dd09083615698565b611f39606487615569565b811115611fff5761013b5461013a5461012d5461012f546040516322f1931960e01b815273__$1cda2f075113616c80b83d9f14c91856f4$__946322f1931994611fa0946001600160a01b039283169491936001939182169290911690899060040161531e565b60206040518083038186803b158015611fb857600080fd5b505af4158015611fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff091906150ca565b9050611ffc8183615698565b91505b505b98975050505050505050565b6000826001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561204857600080fd5b505afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190614dc0565b6040516328530a4760e01b815260ff841660048201529091506001600160a01b038216906328530a4790602401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b5050505092915050565b610bdc81336147c3565b6120f982826114ae565b610afb5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121313390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121868166038d7ea4c68000615679565b61013d556040518181527fd7e43bb830d464c21e0c166505e938f87ce38c05d007cc91fc36a040a2aa37bb90602001610a76565b6121c482826114ae565b15610afb5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610afb816120e5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561227e576109ff83614827565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122b757600080fd5b505afa9250505080156122e7575060408051601f3d908101601f191682019092526122e4918101906150ca565b60015b61234a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a38565b60008051602061578783398151915281146123b95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a38565b506109ff8383836148c3565b6040516339d8c57f60e11b815230600482015260009073__$53b940f9b993023f8625ce1e4d811b0a1f$__906373b18afe9060240160206040518083038186803b15801561241257600080fd5b505af4158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906150ca565b60008054610100900460ff1615612491578160ff16600114801561246d5750303b155b6124895760405162461bcd60e51b8152600401610a3890615467565b506000919050565b60005460ff8084169116106124b85760405162461bcd60e51b8152600401610a3890615467565b506000805460ff191660ff92909216919091179055600190565b60006124de600161244a565b905080156124f6576000805461ff0019166101001790555b6124fe6148ee565b6125066148ee565b6125116000336120ef565b61146c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336120ef565b61012d546001600160a01b038381169116146125695760405162461bcd60e51b8152600401610a38906154e3565b6101425461012d546040516370a0823160e01b81523060048201526000926126039290916001600160a01b03909116906370a082319060240160206040518083038186803b1580156125ba57600080fd5b505afa1580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f291906150ca565b6125fc9190615698565b606461495b565b61012d546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561264c57600080fd5b505afa158015612660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268491906150ca565b61268e9190615698565b610142556040516376da7d4360e11b8152306004820152600090819073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063edb4fa8690602401604080518083038186803b1580156126e057600080fd5b505af41580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612718919061513d565b9150915060008061284885858561013c5461013d54610131546101325461013760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561278457600080fd5b505afa158015612798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bc91906150ca565b61013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561280b57600080fd5b505afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284391906150ca565b61497e565b9150915060006128566149ff565b61012d5460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b39061288a908490879060040161527b565b602060405180830381600087803b1580156128a457600080fd5b505af11580156128b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128dc9190615094565b5061012d546101415460405163617ba03760e01b81526001600160a01b0392831660048201526024810186905230604482015261ffff90911660648201529082169063617ba03790608401600060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505061012f54610140546101415460405163a415bcad60e01b81526001600160a01b03938416600482015260248101889052604481019290925261ffff166064820152306084820152908416925063a415bcad915060a401600060405180830381600087803b1580156129c757600080fd5b505af11580156129db573d6000803e3d6000fd5b50506101425461012d546040516370a0823160e01b8152306004820152600094509192506001600160a01b0316906370a082319060240160206040518083038186803b158015612a2a57600080fd5b505afa158015612a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6291906150ca565b612a6c9190615698565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612ab657600080fd5b505afa158015612aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aee91906150ca565b60405163d451c46160e01b8152306004820152602481018490526044810182905290915073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063d451c4619060640160006040518083038186803b158015612b4957600080fd5b505af4158015612b5d573d6000803e3d6000fd5b5050505050505050505050505050565b610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612bb257600080fd5b505afa158015612bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bea91906150ca565b15612c4e5761013454604051634274debf60e11b81523060048201526001600160a01b03909116906384e9bd7e90602401600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612c9357600080fd5b505afa158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb91906150ca565b90508015612e185761013b54610139546101305461012d54604051632e4def3f60e11b815260009473__$1cda2f075113616c80b83d9f14c91856f4$__94635c9bde7e94612d3a946001600160a01b03938416949293899392811692911690309081908c9086906004016152bf565b60206040518083038186803b158015612d5257600080fd5b505af4158015612d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8a91906150ca565b61012d5460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90612dbe908790859060040161527b565b602060405180830381600087803b158015612dd857600080fd5b505af1158015612dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e109190615094565b509392505050565b50600092915050565b61012d546000906001600160a01b03848116911614612e525760405162461bcd60e51b8152600401610a38906154e3565b610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612e9757600080fd5b505afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf91906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392612f09921690859060040161527b565b602060405180830381600087803b158015612f2357600080fd5b505af1158015612f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5b9190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c190612f95903090859060040161527b565b604080518083038186803b158015612fac57600080fd5b505af4158015612fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe4919061513d565b505061013b5461013a5461012d5461012f5461014254604051632e4def3f60e11b815273__$1cda2f075113616c80b83d9f14c91856f4$__95635c9bde7e9561304f956001600160a01b039283169591946000949184169390921691309182919086906004016152bf565b60206040518083038186803b15801561306757600080fd5b505af415801561307b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309f91906150ca565b5060006130aa6149ff565b61012f546040516370a0823160e01b81523060048201529192506001600160a01b03169063095ea7b390839083906370a082319060240160206040518083038186803b1580156130f957600080fd5b505afa15801561310d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313191906150ca565b6040518363ffffffff1660e01b815260040161314e92919061527b565b602060405180830381600087803b15801561316857600080fd5b505af115801561317c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a09190615094565b5061012f546101405460405163573ade8160e01b81526001600160a01b038085169363573ade81936131df939190921691600019913090600401615294565b602060405180830381600087803b1580156131f957600080fd5b505af115801561320d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323191906150ca565b5061012d54604051631a4ca37b60e21b81526001600160a01b0391821660048201526000196024820152306044820152908216906369328dec90606401602060405180830381600087803b15801561328857600080fd5b505af115801561329c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c091906150ca565b5061012f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561330657600080fd5b505afa15801561331a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333e91906150ca565b11156134735761013b5461013a5461012f5461012d546040516370a0823160e01b8152306004820181905273__$1cda2f075113616c80b83d9f14c91856f4$__95635c9bde7e956001600160a01b039182169590946000949183169392169190819084906370a082319060240160206040518083038186803b1580156133c357600080fd5b505afa1580156133d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fb91906150ca565b60006040518a63ffffffff1660e01b8152600401613421999897969594939291906152bf565b60206040518083038186803b15801561343957600080fd5b505af415801561344d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347191906150ca565b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156134b757600080fd5b505afa1580156134cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ef91906150ca565b95945050505050565b61012d546000906001600160a01b038581169116146135295760405162461bcd60e51b8152600401610a38906154e3565b600061353684606461495b565b90506135428185615698565b610142546135509190615698565b6101425561355f600a82615551565b6040516376da7d4360e11b8152306004820152909150600090819073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063edb4fa8690602401604080518083038186803b1580156135b057600080fd5b505af41580156135c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e8919061513d565b91509150600061371784848461013c5461013d54610131546101325461013760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561365357600080fd5b505afa158015613667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368b91906150ca565b61013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136da57600080fd5b505afa1580156136ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371291906150ca565b614a29565b905060006137236149ff565b604051632fe4a15f60e21b81523060048201529091506000906001600160a01b0383169063bf92857c9060240160c06040518083038186803b15801561376857600080fd5b505afa15801561377c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a09190615161565b505050509150506000613800826101325461013860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb257600080fd5b905080841115613bc9576040516305543f8560e31b815260009073__$53b940f9b993023f8625ce1e4d811b0a1f$__90632aa1fc2890613846903090869060040161527b565b60206040518083038186803b15801561385e57600080fd5b505af4158015613872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389691906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926138d0921690859060040161527b565b602060405180830381600087803b1580156138ea57600080fd5b505af11580156138fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139229190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c19061395c903090859060040161527b565b604080518083038186803b15801561397357600080fd5b505af4158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab919061513d565b505061012f546040516370a0823160e01b81523060048201526001600160a01b039091169063095ea7b390869083906370a082319060240160206040518083038186803b1580156139fb57600080fd5b505afa158015613a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3391906150ca565b6040518363ffffffff1660e01b8152600401613a5092919061527b565b602060405180830381600087803b158015613a6a57600080fd5b505af1158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa29190615094565b5061012f546101405460405163573ade8160e01b81526001600160a01b038088169363573ade8193613ae1939190921691600019913090600401615294565b602060405180830381600087803b158015613afb57600080fd5b505af1158015613b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3391906150ca565b5061012d54604051631a4ca37b60e21b81526001600160a01b0391821660048201526000196024820152306044820152908516906369328dec90606401602060405180830381600087803b158015613b8a57600080fd5b505af1158015613b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc291906150ca565b5050614014565b6040516305543f8560e31b815260009073__$53b940f9b993023f8625ce1e4d811b0a1f$__90632aa1fc2890613c05903090899060040161527b565b60206040518083038186803b158015613c1d57600080fd5b505af4158015613c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5591906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392613c8f921690859060040161527b565b602060405180830381600087803b158015613ca957600080fd5b505af1158015613cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce19190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c190613d1b903090859060040161527b565b604080518083038186803b158015613d3257600080fd5b505af4158015613d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6a919061513d565b505061012f546040516370a0823160e01b81523060048201526001600160a01b039091169063095ea7b390869083906370a082319060240160206040518083038186803b158015613dba57600080fd5b505afa158015613dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df291906150ca565b6040518363ffffffff1660e01b8152600401613e0f92919061527b565b602060405180830381600087803b158015613e2957600080fd5b505af1158015613e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e619190615094565b5061012f546040516370a0823160e01b81523060048201526001600160a01b038681169263573ade819291169081906370a082319060240160206040518083038186803b158015613eb157600080fd5b505afa158015613ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ee991906150ca565b61014054306040518563ffffffff1660e01b8152600401613f0d9493929190615294565b602060405180830381600087803b158015613f2757600080fd5b505af1158015613f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5f91906150ca565b50600086613f6d8988615679565b613f779190615569565b613f81908a615698565b61012d54604051631a4ca37b60e21b81526001600160a01b039182166004820152602481018390523060448201529192508616906369328dec90606401602060405180830381600087803b158015613fd857600080fd5b505af1158015613fec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401091906150ca565b5050505b6101425461012d546040516370a0823160e01b81523060048201528c92916001600160a01b0316906370a082319060240160206040518083038186803b15801561405d57600080fd5b505afa158015614071573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409591906150ca565b61409f9190615698565b1061413c576101425461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156140ec57600080fd5b505afa158015614100573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412491906150ca565b61412e9190615698565b9750505050505050506146f5565b6101425461012d546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561418657600080fd5b505afa15801561419a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141be91906150ca565b6141c89190615698565b6141d2908c615698565b6040516376da7d4360e11b815230600482015290915073__$53b940f9b993023f8625ce1e4d811b0a1f$__9063edb4fa8690602401604080518083038186803b15801561421e57600080fd5b505af4158015614232573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614256919061513d565b610134546040516370a0823160e01b81523060048201529299509097506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156142a357600080fd5b505afa1580156142b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142db91906150ca565b61013b5490915060009073__$1cda2f075113616c80b83d9f14c91856f4$__90639241cd16906001600160a01b0316614315866004614a99565b8c8c87610131546101325461013a5461012d60009054906101000a90046001600160a01b031661012f60009054906101000a90046001600160a01b03166040518b63ffffffff1660e01b81526004016143c99a999897969594939291906001600160a01b039a8b168152602081019990995260408901979097526060880195909552608087019390935260a086019190915260c085015260e084015283166101008301529091166101208201526101400190565b60206040518083038186803b1580156143e157600080fd5b505af41580156143f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441991906150ca565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392614453921690859060040161527b565b602060405180830381600087803b15801561446d57600080fd5b505af1158015614481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a59190615094565b506040516316a761c160e01b815273__$53b940f9b993023f8625ce1e4d811b0a1f$__906316a761c1906144df903090859060040161527b565b604080518083038186803b1580156144f657600080fd5b505af415801561450a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452e919061513d565b505061013b5461013a5461012f5461012d546040516370a0823160e01b8152306004820181905273__$1cda2f075113616c80b83d9f14c91856f4$__95635c9bde7e956001600160a01b039182169590946000949183169392169190819084906370a082319060240160206040518083038186803b1580156145af57600080fd5b505afa1580156145c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e791906150ca565b60006040518a63ffffffff1660e01b815260040161460d999897969594939291906152bf565b60206040518083038186803b15801561462557600080fd5b505af4158015614639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465d91906150ca565b506101425461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156146a657600080fd5b505afa1580156146ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146de91906150ca565b6146e89190615698565b9a50505050505050505050505b9392505050565b6000816001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561473757600080fd5b505afa15801561474b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190614dc0565b60008161477c8486615679565b6147869190615569565b949350505050565b600061479a8286615679565b836147a58689615679565b6147af9190615679565b6147b99190615569565b9695505050505050565b6147cd82826114ae565b610afb576147e5816001600160a01b03166014614aa8565b6147f0836020614aa8565b604051602001614801929190615206565b60408051601f198184030181529082905262461bcd60e51b8252610a3891600401615365565b6001600160a01b0381163b6148945760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a38565b60008051602061578783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6148cc83614c44565b6000825111806148d95750805b156109ff576148e88383614c84565b50505050565b600054610100900460ff166149595760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a38565b565b600061271061496a8382615698565b6149749085615679565b6146f59190615569565b60008060006149908a8789878961478e565b90508061499d8c8b615679565b6149a79190615569565b6149b19089615551565b6149bb898e615679565b6149c59190615569565b925060006149d6848989898961478e565b9050886149e38b83615679565b6149ed9190615569565b92505050995099975050505050505050565b6101365461013854600091610925916001600160a01b0390911690600160a01b900460ff1661200d565b600080614a398b8787878761478e565b90506000614a4a8a8789878961478e565b9050614a568b8a615679565b614a60828a615679565b614a6a9190615551565b81614a758b85615679565b614a7f9190615679565b614a899190615569565b9c9b505050505050505050505050565b600061271061496a8382615551565b60606000614ab7836002615679565b614ac2906002615551565b67ffffffffffffffff811115614ada57614ada61571e565b6040519080825280601f01601f191660200182016040528015614b04576020820181803683370190505b509050600360fc1b81600081518110614b1f57614b1f615708565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614b4e57614b4e615708565b60200101906001600160f81b031916908160001a9053506000614b72846002615679565b614b7d906001615551565b90505b6001811115614bf5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614bb157614bb1615708565b1a60f81b828281518110614bc757614bc7615708565b60200101906001600160f81b031916908160001a90535060049490941c93614bee816156db565b9050614b80565b5083156146f55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a38565b614c4d81614827565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614cec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a38565b600080846001600160a01b031684604051614d0791906151ea565b600060405180830381855af49150503d8060008114614d42576040519150601f19603f3d011682016040523d82523d6000602084013e614d47565b606091505b50915091506134ef82826040518060600160405280602781526020016157a76027913960608315614d795750816146f5565b825115614d895782518084602001fd5b8160405162461bcd60e51b8152600401610a389190615365565b600060208284031215614db557600080fd5b81356146f581615734565b600060208284031215614dd257600080fd5b81516146f581615734565b60008060008060808587031215614df357600080fd5b8435614dfe81615734565b93506020850135614e0e81615734565b92506040850135614e1e81615734565b91506060850135614e2e81615734565b939692955090935050565b600080600080600080600060e0888a031215614e5457600080fd5b8735614e5f81615734565b96506020880135614e6f81615734565b95506040880135614e7f81615734565b94506060880135614e8f81615734565b93506080880135925060a0880135915060c0880135614ead81615757565b8091505092959891949750929550565b60008060008060008060008060006101208a8c031215614edc57600080fd5b8935614ee781615734565b985060208a0135614ef781615734565b975060408a0135614f0781615734565b965060608a0135614f1781615757565b955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a013561ffff81168114614f4b57600080fd5b809150509295985092959850929598565b60008060408385031215614f6f57600080fd5b8235614f7a81615734565b9150602083013567ffffffffffffffff80821115614f9757600080fd5b818501915085601f830112614fab57600080fd5b813581811115614fbd57614fbd61571e565b604051601f8201601f19908116603f01168101908382118183101715614fe557614fe561571e565b81604052828152886020848701011115614ffe57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561503357600080fd5b823561503e81615734565b946020939093013593505050565b6000806000806080858703121561506257600080fd5b843561506d81615734565b935060208501359250604085013561508481615734565b91506060850135614e2e81615749565b6000602082840312156150a657600080fd5b81516146f581615749565b6000602082840312156150c357600080fd5b5035919050565b6000602082840312156150dc57600080fd5b5051919050565b600080604083850312156150f657600080fd5b82359150602083013561510881615734565b809150509250929050565b60006020828403121561512557600080fd5b81356001600160e01b0319811681146146f557600080fd5b6000806040838503121561515057600080fd5b505080516020909101519092909150565b60008060008060008060c0878903121561517a57600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000602082840312156151bd57600080fd5b81516146f581615757565b600281106151e657634e487b7160e01b600052602160045260246000fd5b9052565b600082516151fc8184602087016156af565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161523e8160178501602088016156af565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161526f8160288401602088016156af565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b6001600160a01b038a81168252602082018a90526101208201906152e6604084018b6151c8565b9788166060830152958716608082015293861660a08501529190941660c083015260e082019390935261010001919091529392505050565b6001600160a01b0387811682526020820187905260c082019061534460408401886151c8565b948516606083015292909316608084015260a0909201919091529392505050565b60208152600082518060208401526153848160408501602087016156af565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60008219821115615564576155646156f2565b500190565b60008261558657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156155c65781600019048211156155ac576155ac6156f2565b808516156155b957918102915b93841c9390800290615590565b509250929050565b60006146f560ff8416836000826155e757506001610913565b816155f457506000610913565b816001811461560a576002811461561457615630565b6001915050610913565b60ff841115615625576156256156f2565b50506001821b610913565b5060208310610133831016604e8410600b8410161715615653575081810a610913565b61565d838361558b565b8060001904821115615671576156716156f2565b029392505050565b6000816000190483118215151615615693576156936156f2565b500290565b6000828210156156aa576156aa6156f2565b500390565b60005b838110156156ca5781810151838201526020016156b2565b838111156148e85750506000910152565b6000816156ea576156ea6156f2565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bdc57600080fd5b8015158114610bdc57600080fd5b60ff81168114610bdc57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206a45f7a9db838271b366ec370bebab67a3b1876b01a4cc0bb47f2b74c54c79a364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1363,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1670,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30388,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 30710,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6135,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "usdcToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 6138,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "aUsdcToken",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 6141,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "token0",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 6144,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)1823"
      },
      {
        "astId": 6146,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "usdcTokenDenominator",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 6148,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "token0Denominator",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 6151,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "arrakisRouter",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IArrakisV1RouterStaking)24238"
      },
      {
        "astId": 6154,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "arrakisRewards",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IArrakisRewards)24195"
      },
      {
        "astId": 6157,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "arrakisVault",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IArrakisVault)24313"
      },
      {
        "astId": 6160,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "aavePoolAddressesProvider",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IPoolAddressesProvider)23243"
      },
      {
        "astId": 6163,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "oracleChainlinkUsdc",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPriceFeed)23251"
      },
      {
        "astId": 6166,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "oracleChainlinkToken0",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IPriceFeed)23251"
      },
      {
        "astId": 6168,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "eModeCategoryId",
        "offset": 20,
        "slot": "312",
        "type": "t_uint8"
      },
      {
        "astId": 6170,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "balancerPoolIdWmatic",
        "offset": 0,
        "slot": "313",
        "type": "t_bytes32"
      },
      {
        "astId": 6172,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "balancerPoolIdToken",
        "offset": 0,
        "slot": "314",
        "type": "t_bytes32"
      },
      {
        "astId": 6175,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "balancerVault",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IVault)25691"
      },
      {
        "astId": 6177,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "liquidationThreshold",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 6179,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "healthFactor",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      },
      {
        "astId": 6181,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "usdcTokenInversion",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      },
      {
        "astId": 6183,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "balancingDelta",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 6185,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "interestRateMode",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 6187,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "referralCode",
        "offset": 0,
        "slot": "321",
        "type": "t_uint16"
      },
      {
        "astId": 6189,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "usdcStorage",
        "offset": 0,
        "slot": "322",
        "type": "t_uint256"
      },
      {
        "astId": 6191,
        "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
        "label": "realHealthFactor",
        "offset": 0,
        "slot": "323",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IArrakisRewards)24195": {
        "encoding": "inplace",
        "label": "contract IArrakisRewards",
        "numberOfBytes": "20"
      },
      "t_contract(IArrakisV1RouterStaking)24238": {
        "encoding": "inplace",
        "label": "contract IArrakisV1RouterStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IArrakisVault)24313": {
        "encoding": "inplace",
        "label": "contract IArrakisVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1823": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)23243": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)23251": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)25691": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyArrakisWeth.sol:StrategyArrakisWeth",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}