{
  "address": "0xfb45117c7F894A97575f5D8a466c8F07C49Ed460",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dystPair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dystRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleUsdc",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleTusd",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "penLens",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        }
      ],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dystToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wmaticToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "penToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tusdTokenDenominator",
          "type": "uint256"
        }
      ],
      "name": "StrategyUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE_EIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystPair",
      "outputs": [
        {
          "internalType": "contract IDystopiaLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract IDystopiaLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleTusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penLens",
      "outputs": [
        {
          "internalType": "contract IPenLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dystPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dystRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleUsdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleTusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penLens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tusdToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dystToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmaticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tusdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tusdTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userProxy",
      "outputs": [
        {
          "internalType": "contract IUserProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "6bd583e1cbf32b6cafae340a567d83fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dystPair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dystRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleTusd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"penLens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dystToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wmaticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"penToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tusdTokenDenominator\",\"type\":\"uint256\"}],\"name\":\"StrategyUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE_EIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystPair\",\"outputs\":[{\"internalType\":\"contract IDystopiaLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract IDystopiaLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleTusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penLens\",\"outputs\":[{\"internalType\":\"contract IPenLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dystPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dystRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleTusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penLens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tusdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dystToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusdTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProxy\",\"outputs\":[{\"internalType\":\"contract IUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyDystopiaUsdcTusd.sol\":\"StrategyDystopiaUsdcTusd\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/StrategyDystopiaUsdcTusd.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./core/Strategy.sol\\\";\\nimport \\\"./exchanges/DystopiaExchange.sol\\\";\\nimport \\\"./connectors/dystopia/interfaces/IDystopiaLP.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"./connectors/penrose/interface/IUserProxy.sol\\\";\\nimport \\\"./connectors/penrose/interface/IPenLens.sol\\\";\\nimport \\\"./libraries/AaveBorrowLibrary.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\n\\ncontract StrategyDystopiaUsdcTusd is Strategy, DystopiaExchange {\\n\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE_EIGHT = 8;\\n\\n    IERC20 public usdcToken;\\n    IERC20 public tusdToken;\\n    IERC20 public dystToken;\\n    IERC20 public wmaticToken;\\n\\n    uint256 public usdcTokenDenominator;\\n    uint256 public tusdTokenDenominator;\\n\\n    IDystopiaLP public gauge;\\n    IDystopiaLP public dystPair;\\n\\n    IPriceFeed public oracleUsdc;\\n    IPriceFeed public oracleTusd;\\n\\n    IERC20 public penToken;\\n    IUserProxy public userProxy;\\n    IPenLens public penLens;\\n\\n    ISwapper public swapper;\\n\\n\\n    // --- events\\n\\n    event StrategyUpdatedTokens(address usdcToken, address usdtToken, address dystToken, address wmaticToken, address penToken,\\n        uint256 usdcTokenDenominator, uint256 tusdTokenDenominator);\\n\\n    event StrategyUpdatedParams(address gauge, address dystPair, address dystRouter,\\n        address oracleUsdc, address oracleTusd, address userProxy, address penLens, address swapper);\\n\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n    // --- Setters\\n\\n    function setTokens(\\n        address _usdcToken,\\n        address _tusdToken,\\n        address _dystToken,\\n        address _wmaticToken,\\n        address _penToken\\n    ) external onlyAdmin {\\n\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_tusdToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_dystToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_wmaticToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_penToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = IERC20(_usdcToken);\\n        tusdToken = IERC20(_tusdToken);\\n        dystToken = IERC20(_dystToken);\\n        wmaticToken = IERC20(_wmaticToken);\\n        penToken = IERC20(_penToken);\\n        usdcTokenDenominator = 10 ** IERC20Metadata(_usdcToken).decimals();\\n        tusdTokenDenominator = 10 ** IERC20Metadata(_tusdToken).decimals();\\n\\n        emit StrategyUpdatedTokens(_usdcToken, _tusdToken, _dystToken, _wmaticToken, _penToken, usdcTokenDenominator, tusdTokenDenominator);\\n    }\\n\\n    function setParams(\\n        address _gauge,\\n        address _dystPair,\\n        address _dystRouter,\\n        address _oracleUsdc,\\n        address _oracleTusd,\\n        address _userProxy,\\n        address _penLens,\\n        address _swapper\\n    ) external onlyAdmin {\\n\\n        require(_gauge != address(0), \\\"Zero address not allowed\\\");\\n        require(_dystPair != address(0), \\\"Zero address not allowed\\\");\\n        require(_dystRouter != address(0), \\\"Zero address not allowed\\\");\\n        require(_oracleUsdc != address(0), \\\"Zero address not allowed\\\");\\n        require(_oracleTusd != address(0), \\\"Zero address not allowed\\\");\\n        require(_userProxy != address(0), \\\"Zero address not allowed\\\");\\n        require(_penLens != address(0), \\\"Zero address not allowed\\\");\\n        require(_swapper != address(0), \\\"Zero address not allowed\\\");\\n\\n        gauge = IDystopiaLP(_gauge);\\n        dystPair = IDystopiaLP(_dystPair);\\n        _setDystopiaRouter(_dystRouter);\\n        oracleUsdc = IPriceFeed(_oracleUsdc);\\n        oracleTusd = IPriceFeed(_oracleTusd);\\n        userProxy = IUserProxy(_userProxy);\\n        penLens = IPenLens(_penLens);\\n        swapper = ISwapper(_swapper);\\n\\n        emit StrategyUpdatedParams(_gauge, _dystPair, _dystRouter, _oracleUsdc, _oracleTusd, _userProxy, _penLens, _swapper);\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveUsdc, uint256 reserveTusd,) = dystPair.getReserves();\\n        require(reserveUsdc > 10 ** 3 && reserveTusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n        uint256 amountUsdcToSwap = _getAmountToken0(\\n            usdcBalance,\\n            reserveUsdc,\\n            reserveTusd,\\n            usdcTokenDenominator,\\n            tusdTokenDenominator,\\n            1,\\n            address(usdcToken),\\n            address(tusdToken)\\n        );\\n\\n        // swap usdc to usdt\\n        ISwapper.SwapParams memory swapParams = ISwapper.SwapParams(\\n            address(usdcToken),\\n            address(tusdToken),\\n            amountUsdcToSwap,\\n            OvnMath.subBasisPoints(amountUsdcToSwap*(10**12), BASIS_POINTS_FOR_SLIPPAGE_EIGHT),\\n            1\\n        );\\n        IERC20(swapParams.tokenIn).approve(address(swapper), swapParams.amountIn);\\n        swapper.swap(swapParams);\\n\\n        // add liquidity\\n        usdcBalance = usdcToken.balanceOf(address(this));\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n\\n        _addLiquidity(\\n            address(usdcToken),\\n            address(tusdToken),\\n            usdcBalance,\\n            tusdBalance,\\n            OvnMath.subBasisPoints(usdcBalance, BASIS_POINTS_FOR_SLIPPAGE),\\n            OvnMath.subBasisPoints(tusdBalance, BASIS_POINTS_FOR_SLIPPAGE),\\n            address(this)\\n        );\\n\\n        uint256 lpTokenBalance = dystPair.balanceOf(address(this));\\n        dystPair.approve(address(userProxy), lpTokenBalance);\\n        userProxy.depositLpAndStake(address(dystPair), lpTokenBalance);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveUsdc, uint256 reserveTusd,) = dystPair.getReserves();\\n        require(reserveUsdc > 10 ** 3 && reserveTusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        // Fetch amount of penPool LP currently staked\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\n\\n        if (lpTokenBalance > 0) {\\n            // count amount to unstake\\n            uint256 totalLpBalance = dystPair.totalSupply();\\n            uint256 lpTokensToWithdraw = _getAmountLpTokens(\\n                OvnMath.addBasisPoints(_amount, BASIS_POINTS_FOR_SLIPPAGE) + 10,\\n                reserveUsdc,\\n                reserveTusd,\\n                totalLpBalance\\n            );\\n\\n            if (lpTokensToWithdraw > lpTokenBalance) {\\n                lpTokensToWithdraw = lpTokenBalance;\\n            }\\n\\n            userProxy.unstakeLpAndWithdraw(address(dystPair), lpTokensToWithdraw);\\n\\n            uint256 unstakedLPTokenBalance = dystPair.balanceOf(address(this));\\n\\n            uint256 amountOutUsdcMin = reserveUsdc * unstakedLPTokenBalance / totalLpBalance;\\n            uint256 amountOutTusdMin = reserveTusd * unstakedLPTokenBalance / totalLpBalance;\\n\\n            // remove liquidity\\n            _removeLiquidity(\\n                address(usdcToken),\\n                address(tusdToken),\\n                address(dystPair),\\n                unstakedLPTokenBalance,\\n                OvnMath.subBasisPoints(amountOutUsdcMin, BASIS_POINTS_FOR_SLIPPAGE),\\n                OvnMath.subBasisPoints(amountOutTusdMin, BASIS_POINTS_FOR_SLIPPAGE),\\n                address(this)\\n            );\\n        }\\n\\n        // swap tusd to usdc\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n        ISwapper.SwapParams memory swapParams = ISwapper.SwapParams(\\n            address(tusdToken),\\n            address(usdcToken),\\n            tusdBalance,\\n            OvnMath.subBasisPoints(tusdBalance/(10**12), BASIS_POINTS_FOR_SLIPPAGE_EIGHT),\\n            1\\n        );\\n\\n        IERC20(swapParams.tokenIn).approve(address(swapper), swapParams.amountIn);\\n        swapper.swap(swapParams);\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveUsdc, uint256 reserveTusd,) = dystPair.getReserves();\\n        require(reserveUsdc > 10 ** 3 && reserveTusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        // Fetch amount of penPool LP currently staked\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\n        if (lpTokenBalance == 0) {\\n            return usdcToken.balanceOf(address(this));\\n        }\\n\\n        userProxy.unstakeLpAndWithdraw(address(dystPair), lpTokenBalance);\\n\\n        uint256 unstakedLPTokenBalance = dystPair.balanceOf(address(this));\\n        if (unstakedLPTokenBalance > 0) {\\n            uint256 totalLpBalance = dystPair.totalSupply();\\n            uint256 amountOutUsdcMin = reserveUsdc * unstakedLPTokenBalance / totalLpBalance;\\n            uint256 amountOutTusdMin = reserveTusd * unstakedLPTokenBalance / totalLpBalance;\\n\\n            // remove liquidity\\n            _removeLiquidity(\\n                address(usdcToken),\\n                address(tusdToken),\\n                address(dystPair),\\n                unstakedLPTokenBalance,\\n                OvnMath.subBasisPoints(amountOutUsdcMin, BASIS_POINTS_FOR_SLIPPAGE),\\n                OvnMath.subBasisPoints(amountOutTusdMin, BASIS_POINTS_FOR_SLIPPAGE),\\n                address(this)\\n            );\\n        }\\n\\n        // swap tusd to usdc\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n        ISwapper.SwapParams memory swapParams = ISwapper.SwapParams(\\n            address(tusdToken),\\n            address(usdcToken),\\n            tusdBalance,\\n            OvnMath.subBasisPoints(tusdBalance/(10**12), BASIS_POINTS_FOR_SLIPPAGE_EIGHT),\\n            1\\n        );\\n        IERC20(swapParams.tokenIn).approve(address(swapper), swapParams.amountIn);\\n        swapper.swap(swapParams);\\n\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n\\n        // Fetch amount of penPool LP currently staked\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\n        if (lpTokenBalance > 0) {\\n            uint256 totalLpBalance = dystPair.totalSupply();\\n            (uint256 reserveUsdc, uint256 reserveTusd,) = dystPair.getReserves();\\n            usdcBalance += reserveUsdc * lpTokenBalance / totalLpBalance;\\n            tusdBalance += reserveTusd * lpTokenBalance / totalLpBalance;\\n        }\\n\\n        uint256 usdcBalanceFromTusd;\\n        if (tusdBalance > 0) {\\n            if (nav) {\\n                uint256 priceUsdc = uint256(oracleUsdc.latestAnswer());\\n                uint256 priceTusd = uint256(oracleTusd.latestAnswer());\\n                usdcBalanceFromTusd = AaveBorrowLibrary.convertTokenAmountToTokenAmount(tusdBalance, tusdTokenDenominator, usdcTokenDenominator, priceTusd, priceUsdc);\\n            } else {\\n                ISwapper.SwapParams memory swapParams = ISwapper.SwapParams(\\n                    address(tusdToken),\\n                    address(usdcToken),\\n                    tusdBalance,\\n                    0,\\n                    1\\n                );\\n                usdcBalanceFromTusd = swapper.getAmountOut(swapParams);\\n            }\\n        }\\n\\n        return usdcBalance + usdcBalanceFromTusd;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\n        if (lpTokenBalance > 0) {\\n            userProxy.claimStakingRewards();\\n        }\\n\\n        // sell rewards\\n        uint256 totalUsdc;\\n\\n        uint256 dystBalance = dystToken.balanceOf(address(this));\\n        if (dystBalance > 0) {\\n            uint256 dystUsdc = _swapExactTokensForTokens(\\n                address(dystToken),\\n                address(wmaticToken),\\n                address(usdcToken),\\n                false,\\n                false,\\n                dystBalance,\\n                address(this)\\n            );\\n            totalUsdc += dystUsdc;\\n        }\\n\\n        uint256 penBalance = penToken.balanceOf(address(this));\\n        if (penBalance > 0) {\\n            uint256 penUsdc = _swapExactTokensForTokens(\\n                address(penToken),\\n                address(wmaticToken),\\n                address(usdcToken),\\n                false,\\n                false,\\n                penBalance,\\n                address(this)\\n            );\\n            totalUsdc += penUsdc;\\n        }\\n\\n        usdcToken.transfer(_to, totalUsdc);\\n\\n        return totalUsdc;\\n    }\\n\\n    /**\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountToken0(\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision,\\n        address token0,\\n        address token1\\n    ) internal view returns (uint256) {\\n        uint256 amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            ISwapper.SwapParams memory swapParams = ISwapper.SwapParams(\\n                token0,\\n                token1,\\n                amount0,\\n                OvnMath.subBasisPoints(amount0*(10**12), BASIS_POINTS_FOR_SLIPPAGE_EIGHT),\\n                1\\n            );\\n            uint256 amount1 = swapper.getAmountOut(swapParams);\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\n        }\\n\\n        return amount0;\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function _getAmountLpTokens(\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalLpBalance\\n    ) internal view returns (uint256) {\\n        uint256 lpBalance = (totalLpBalance * amount0Total * tusdTokenDenominator) / (reserve0 * tusdTokenDenominator + reserve1 * usdcTokenDenominator);\\n\\n        uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\n        ISwapper.SwapParams memory swapParams = ISwapper.SwapParams(\\n            address(tusdToken),\\n            address(usdcToken),\\n            amount1,\\n            OvnMath.subBasisPoints(amount1/(10**12), BASIS_POINTS_FOR_SLIPPAGE_EIGHT),\\n            1\\n        );\\n        uint256 amount0 = swapper.getAmountOut(swapParams);\\n        lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\n\\n        return lpBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x95b7688998005c7f30275a03e519846eaff5d47aaab12d20b7bdbb942bedb09e\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n  external\\n  view\\n  returns (\\n    uint256 totalCollateralBase,\\n    uint256 totalDebtBase,\\n    uint256 availableBorrowsBase,\\n    uint256 currentLiquidationThreshold,\\n    uint256 ltv,\\n    uint256 healthFactor\\n  );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n  external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n  external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n  external\\n  view\\n  returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n  external\\n  view\\n  returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\",\"keccak256\":\"0xdbc4714cbdcc3c2ecf8b02da22c9944d8ff428a54a1f9b06b32c75b23832e06b\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\",\"keccak256\":\"0xe6854802245d8dd7765db265dd5045242fea39705bebf0de658852bfbe61e002\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n  function latestAnswer() external view returns (int256);\\n}\",\"keccak256\":\"0x0a5dde10cc0d68100059c9ccdb230552bd085a41cc296d2e1fd37431cef24c52\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/protocol/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\",\"keccak256\":\"0x2385594db59af5c2e15a906f936b3e29fd5bca450a4832b1985377e311e6aeb6\",\"license\":\"BUSL-1.1\"},\"contracts/connectors/dystopia/interfaces/IDystopiaLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5 <0.9.0;\\n\\nimport \\\"../../uniswap/v2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nabstract contract IDystopiaLP is IUniswapV2Pair {\\n\\n    function deposit(uint amount, uint tokenId) external virtual;\\n\\n    function withdraw(uint amount) external virtual;\\n\\n    function withdrawAll() external virtual;\\n\\n    function getReward(address account, address[] memory tokens) external virtual;\\n\\n}\\n\",\"keccak256\":\"0xab02cb9f53b038708bd8cb507ea125bfb303183da63bae3c50614bb77bcd93e4\",\"license\":\"MIT\"},\"contracts/connectors/dystopia/interfaces/IDystopiaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IDystopiaRouter {\\n    \\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n}\",\"keccak256\":\"0x87a434ab9664b57c728fada91322e54df37524e213a617ed10f4113c2a4dd34f\",\"license\":\"MIT\"},\"contracts/connectors/penrose/interface/IPenLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPenLens {\\n\\n    /* ========== PUBLIC VARS ========== */\\n\\n    function penPoolFactoryAddress() external view returns (address);\\n\\n    function rewardsDistributorAddress() external view returns (address);\\n\\n    function userProxyFactoryAddress() external view returns (address);\\n\\n    function dystopiaLensAddress() external view returns (address);\\n\\n    function penAddress() external view returns (address);\\n\\n    function vlPenAddress() external view returns (address);\\n\\n    function penDystAddress() external view returns (address);\\n\\n    function voterProxyAddress() external view returns (address);\\n\\n    function veAddress() external view returns (address);\\n\\n    function dystAddress() external view returns (address);\\n\\n    function penDystRewardsPoolAddress() external view returns (address);\\n\\n    function partnersRewardsPoolAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function cvlPenAddress() external view returns (address);\\n\\n    function penV1RewardsAddress() external view returns (address);\\n\\n    function penV1RedeemAddress() external view returns (address);\\n\\n    function penV1Address() external view returns (address);\\n\\n    function tokensAllowlistAddress() external view returns (address);\\n\\n    /* ========== PUBLIC VIEW FUNCTIONS ========== */\\n\\n    function voterAddress() external view returns (address);\\n\\n    function poolsFactoryAddress() external view returns (address);\\n\\n    function gaugesFactoryAddress() external view returns (address);\\n\\n    function minterAddress() external view returns (address);\\n\\n    function penPoolsLength() external view returns (uint256);\\n\\n    function userProxiesLength() external view returns (uint256);\\n\\n    function userProxyByAccount(address accountAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function userProxyByIndex(uint256 index) external view returns (address);\\n\\n    function gaugeByDystPool(address) external view returns (address);\\n\\n    function dystPoolByPenPool(address penPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function penPoolByDystPool(address dystPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByDystPool(address dystPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByPenPool(address dystPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function isPenPool(address penPoolAddress) external view returns (bool);\\n\\n    function penPoolsAddresses() external view returns (address[] memory);\\n\\n    function isPartner(address userProxyAddress) external view returns (bool);\\n\\n    function stakedPenDystBalanceOf(address accountAddress)\\n    external\\n    view\\n    returns (uint256 stakedBalance);\\n\\n    function dystInflationSinceInception() external view returns (uint256);\\n}\",\"keccak256\":\"0x1c54499bf3980bf46f6f64bfc6a756a9f2757b0d50bd77152d7cb64ce741ce98\",\"license\":\"MIT\"},\"contracts/connectors/penrose/interface/IUserProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IUserProxy {\\n    struct PositionStakingPool {\\n        address stakingPoolAddress;\\n        address penPoolAddress;\\n        address dystPoolAddress;\\n        uint256 balanceOf;\\n        RewardToken[] rewardTokens;\\n    }\\n\\n    struct RewardToken {\\n        address rewardTokenAddress;\\n        uint256 rewardRate;\\n        uint256 rewardPerToken;\\n        uint256 getRewardForDuration;\\n        uint256 earned;\\n    }\\n\\n    struct Vote {\\n        address poolAddress;\\n        int256 weight;\\n    }\\n\\n    function convertNftToPenDyst(uint256) external;\\n\\n    function convertDystToPenDyst(uint256) external;\\n\\n    function depositLpAndStake(address, uint256) external;\\n\\n    function depositLp(address, uint256) external;\\n\\n    function stakingAddresses() external view returns (address[] memory);\\n\\n    function initialize(address, address) external;\\n\\n    function stakingPoolsLength() external view returns (uint256);\\n\\n    function unstakeLpAndWithdraw(\\n        address,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function unstakeLpAndWithdraw(address, uint256) external;\\n\\n    function unstakeLpWithdrawAndClaim(address) external;\\n\\n    function unstakeLpWithdrawAndClaim(address, uint256) external;\\n\\n    function withdrawLp(address, uint256) external;\\n\\n    function stakePenLp(address, uint256) external;\\n\\n    function unstakePenLp(address, uint256) external;\\n\\n    function ownerAddress() external view returns (address);\\n\\n    function stakingPoolsPositions()\\n    external\\n    view\\n    returns (PositionStakingPool[] memory);\\n\\n    function stakePenDyst(uint256) external;\\n\\n    function unstakePenDyst(uint256) external;\\n\\n    function unstakePenDyst(address, uint256) external;\\n\\n    function convertDystToPenDystAndStake(uint256) external;\\n\\n    function convertNftToPenDystAndStake(uint256) external;\\n\\n    function claimPenDystStakingRewards() external;\\n\\n    function claimPartnerStakingRewards() external;\\n\\n    function claimStakingRewards(address) external;\\n\\n    function claimStakingRewards(address[] memory) external;\\n\\n    function claimStakingRewards() external;\\n\\n    function claimVlPenRewards() external;\\n\\n    function depositPen(uint256, uint256) external;\\n\\n    function withdrawPen(bool, uint256) external;\\n\\n    function voteLockPen(uint256, uint256) external;\\n\\n    function withdrawVoteLockedPen(uint256, bool) external;\\n\\n    function relockVoteLockedPen(uint256) external;\\n\\n    function removeVote(address) external;\\n\\n    function registerStake(address) external;\\n\\n    function registerUnstake(address) external;\\n\\n    function resetVotes() external;\\n\\n    function setVoteDelegate(address) external;\\n\\n    function clearVoteDelegate() external;\\n\\n    function vote(address, int256) external;\\n\\n    function vote(Vote[] memory) external;\\n\\n    function votesByAccount(address) external view returns (Vote[] memory);\\n\\n    function migratePenDystToPartner() external;\\n\\n    function stakePenDystInPenV1(uint256) external;\\n\\n    function unstakePenDystInPenV1(uint256) external;\\n\\n    function redeemPenV1(uint256) external;\\n\\n    function redeemAndStakePenV1(uint256) external;\\n\\n    function whitelist(address) external;\\n\\n    function implementationsAddresses()\\n    external\\n    view\\n    returns (address[] memory);\\n}\",\"keccak256\":\"0x1a02c16a2616bd7e7ee4d8137ea5b57daf1a1ec75a875fcb551b3fa14a55d6cf\",\"license\":\"MIT\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x5046381702b4601ffc562ffbbe0d55cc982ddc32028b3ba2ae023b69fa2aca50\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v3/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa9d8894cfc7826e4d1abacb026b022ef4ff07569037b8796474d43257fb1f19\",\"license\":\"MIT\"},\"contracts/core/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n    function healthFactorBalance() external; // Balancing aave health factor\\n\\n    function setHealthFactor(uint256 healthFactor) external; // Aave healthFactor setter\\n}\\n\",\"keccak256\":\"0x25b0bffd26c9e171cacfc505c07a34cee978992aab68d0fdfe8c133deb255c4e\",\"license\":\"GPL-3.0\"},\"contracts/core/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyPortfolioManager {\\n        emit Stake(_amount);\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            emit Reward(_claimRewards(_beneficiary));\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function healthFactorBalance() external override onlyPortfolioManager {\\n        uint256 healthFactor = _healthFactorBalance();\\n        if (healthFactor > 0) {\\n            emit BalanceHealthFactor(healthFactor);\\n        }\\n    }\\n\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\n        _setHealthFactor(healthFactor);\\n\\n        emit SetHealthFactor(healthFactor);\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\n        \\n    }\\n\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\n\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ff7993f57cc0fd74c813187822650bd4722aa65e6a5aaf4bca4cb821ad2fe2c\",\"license\":\"MIT\"},\"contracts/exchanges/DystopiaExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/dystopia/interfaces/IDystopiaRouter.sol\\\";\\nimport \\\"../libraries/OvnMath.sol\\\";\\n\\nabstract contract DystopiaExchange {\\n\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 4;\\n\\n    IDystopiaRouter private dystRouter;\\n\\n    function _setDystopiaRouter(address _dystRouter) internal {\\n        dystRouter = IDystopiaRouter(_dystRouter);\\n    }\\n\\n    function _getAmountsOut(\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair0;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[1];\\n    }\\n\\n    function _getAmountsOut(\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function _swapExactTokensForTokens(\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        uint256 amountInput,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountsOut(address(inputToken), address(outputToken), isStablePair0, amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair0;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            0,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function _swapExactTokensForTokens(\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountsOut(address(inputToken), address(middleToken), address(outputToken), isStablePair0, isStablePair1, amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            0,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n    \\n        return amounts[2];\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(dystRouter), amountADesired);\\n        IERC20(tokenB).approve(address(dystRouter), amountBDesired);\\n\\n        return dystRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n\\n    }\\n\\n    function _removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(dystRouter), liquidity);\\n\\n        return dystRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc3a8764773fe431e18691ff1dd2be2d5680d69287e9cfb3fac80d7b47c3dd856\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\ninterface ISwapper {\\n\\n    // ---  fields\\n\\n    // ---  modifiers\\n\\n    // ---  constructor\\n\\n    // ---  setters\\n\\n    // ---  structures\\n\\n    struct SwapRoute {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address swapPlace;\\n        address pool;\\n        //        string swapPlaceType;\\n    }\\n\\n    struct SwapParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        uint256 partsAmount;\\n    }\\n\\n\\n    // ---  logic\\n\\n    function swap(SwapParams calldata params) external returns (uint256);\\n\\n    function getAmountOut(SwapParams calldata params) external view returns (uint256);\\n\\n    function swapPath(SwapParams calldata params) external view returns (SwapRoute[] memory);\\n\\n}\\n\",\"keccak256\":\"0xe2ac4d6f0a314f1a9217548e65113bbf9ea4cf0c0f4c241d3a3521db78d64c5e\",\"license\":\"MIT\"},\"contracts/libraries/AaveBorrowLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPool.sol\\\";\\nimport '../connectors/uniswap/v3/libraries/FullMath.sol';\\n\\n\\nlibrary AaveBorrowLibrary {\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider,\\n        uint8 eModeCategoryId\\n    ) internal returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n        IPool(aavePool).setUserEMode(eModeCategoryId);\\n    }\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider\\n    ) internal view returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n    }\\n\\n    function getCollateralAndBorrowForSupplyAndBorrow(\\n        uint256 amount0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 collateral0, uint256 borrow1) {\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        collateral0 = amount0 * HF / (HF + LT * reserve0 / reserve1InToken0);\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        borrow1 = collateral1 * LT / HF;\\n    }\\n\\n    function getBorrowForWithdraw(\\n        uint256 collateral0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 borrow1) {\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        //usdc to usdt\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        //usdt to usdc\\n        borrow1 = (collateral1 * LT * reserve1InToken0) / (HF * reserve1InToken0 + LT * reserve0);\\n    }\\n\\n    // function getBorrowForWithdraw(\\n    //     uint256 collateral0,\\n    //     uint256 totalCollateralUsd,\\n    //     uint256 totalBorrowUsd,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 LT,\\n    //     uint256 HF,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 borrow1) {\\n    //     uint256 totalBorrowUsd1 = convertUsdToTokenAmount(totalBorrowUsd, token1Denominator, price1);   //usd to usdt\\n    //     uint256 totalCollateralUsd1 = convertUsdToTokenAmount(totalCollateralUsd, token1Denominator, price1); //usd to usdt\\n    //     uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1); //usdc to usdt\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0); //usdt to usdc\\n    //     borrow1 = (totalBorrowUsd1 * HF + collateral1 * LT - totalCollateralUsd1 * LT) / (HF + LT * reserve0 / reserve1InToken0);\\n    // }\\n\\n    // function getLpTokensForWithdraw(\\n    //     uint256 totalLpBalance,\\n    //     uint256 borrow1,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 lpTokensToWithdraw) {\\n    //     uint256 borrow0 = convertTokenAmountToTokenAmount(borrow1, token1Denominator, token0Denominator, price1, price0);\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n    //     lpTokensToWithdraw = totalLpBalance * (borrow0 + borrow1 * reserve0 / reserve1) / (reserve0 + reserve1InToken0);\\n    // }\\n\\n    struct GetWithdrawAmountForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n    }\\n\\n    function getWithdrawAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        withdrawAmount = FullMath.mulDivRoundingUp(\\n            params.reserve0, \\n            params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF, \\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function getBorrowIfZeroAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        withdrawAmount = (params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF) / (params.HF);\\n        withdrawAmount = convertUsdToTokenAmount(withdrawAmount, params.token1Denominator, params.price1);\\n    }\\n\\n    struct GetLpTokensForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n        uint256 totalSuply;\\n    }\\n\\n    function getLpTokensForBalance(\\n        GetLpTokensForBalanceParams memory params\\n    ) internal pure returns (uint256 lpTokens) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        lpTokens = FullMath.mulDivRoundingUp(\\n            params.totalSuply, \\n            params.totalBorrowUsd * params.HF - params.totalCollateralUsd * params.LT, \\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function convertTokenAmountToTokenAmount(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenAmountToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToTokenAmount(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7978106c150a54a787d2fa85cf9dffbfd69181172a0179155d777dab150ed45f\",\"license\":\"MIT\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b5060006200002760016200008e565b9050801562000040576000805461ff0019166101001790555b801562000087576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50620001af565b60008054610100900460ff161562000127578160ff166001148015620000c75750620000c530620001a060201b6200151c1760201c565b155b6200011f5760405162461bcd60e51b815260206004820152602e6024820152600080516020620054f683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001865760405162461bcd60e51b815260206004820152602e6024820152600080516020620054f683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000116565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b60805160601c61530c620001ea60003960008181610dc601528181610e0601528181610ea601528181610ee60152610f75015261530c6000f3fe60806040526004361061023b5760003560e01c80637b73aa4e1161012e578063a6f19c84116100ab578063e54bef751161006f578063e54bef751461068e578063ef5cfb8c146106af578063f664b3d9146106cf578063f6f6b881146106e4578063f72c0d8b1461070457600080fd5b8063a6f19c84146105eb578063abf4be011461060c578063adc9772e1461062d578063b0492aa51461064d578063d547741f1461066e57600080fd5b806391d14854116100f257806391d1485414610560578063a217fddf14610580578063a3673b3814610595578063a440b21a146105aa578063a69dc7f8146105ca57600080fd5b80637b73aa4e146104dc5780637d5f5802146104f15780638129fc1c146105135780638a5693cd146105285780638b2ddd141461053f57600080fd5b806333d153d0116101bc57806352d1902d1161018057806352d1902d146104505780635f8cddfe146104655780635fea9cbb14610486578063620b75df146104a75780637a573c0e146104c757600080fd5b806333d153d0146103bb57806336568abe146103dc5780633659cfe6146103fc5780633ec632161461041c5780634f1ef2861461043d57600080fd5b80632576e65a116102035780632576e65a146103255780632a7e19c31461033a5780632b3297f91461035a5780632f2ff15d1461037b578063311117081461039b57600080fd5b806301ffc9a71461024057806306da3f2e146102755780630fc55bfd1461029a57806311eac855146102bc578063248a9ca3146102f5575b600080fd5b34801561024c57600080fd5b5061026061025b366004614b57565b610738565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028c6101635481565b60405190815260200161026c565b3480156102a657600080fd5b506102ba6102b53660046147ea565b61076f565b005b3480156102c857600080fd5b5061015f546102dd906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b34801561030157600080fd5b5061028c610310366004614af5565b60009081526065602052604090206001015490565b34801561033157600080fd5b5061028c610a2f565b34801561034657600080fd5b506102ba61035536600461485b565b610a40565b34801561036657600080fd5b5061016c546102dd906001600160a01b031681565b34801561038757600080fd5b506102ba610396366004614b27565b610ca8565b3480156103a757600080fd5b506102ba6103b6366004614af5565b610cd2565b3480156103c757600080fd5b50610168546102dd906001600160a01b031681565b3480156103e857600080fd5b506102ba6103f7366004614b27565b610d3d565b34801561040857600080fd5b506102ba6104173660046147b0565b610dbb565b34801561042857600080fd5b5061016a546102dd906001600160a01b031681565b6102ba61044b366004614904565b610e9b565b34801561045c57600080fd5b5061028c610f68565b34801561047157600080fd5b50610166546102dd906001600160a01b031681565b34801561049257600080fd5b50610167546102dd906001600160a01b031681565b3480156104b357600080fd5b5060fb546102dd906001600160a01b031681565b3480156104d357600080fd5b5061028c600881565b3480156104e857600080fd5b506102ba61101b565b3480156104fd57600080fd5b5061028c60008051602061527083398151915281565b34801561051f57600080fd5b506102ba611051565b34801561053457600080fd5b5061028c6101645481565b34801561054b57600080fd5b5061016b546102dd906001600160a01b031681565b34801561056c57600080fd5b5061026061057b366004614b27565b6110bf565b34801561058c57600080fd5b5061028c600081565b3480156105a157600080fd5b5061028c6110ea565b3480156105b657600080fd5b506102ba6105c53660046147b0565b6110f6565b3480156105d657600080fd5b50610160546102dd906001600160a01b031681565b3480156105f757600080fd5b50610165546102dd906001600160a01b031681565b34801561061857600080fd5b50610162546102dd906001600160a01b031681565b34801561063957600080fd5b506102ba6106483660046149ac565b6111ce565b34801561065957600080fd5b50610161546102dd906001600160a01b031681565b34801561067a57600080fd5b506102ba610689366004614b27565b6112b7565b34801561069a57600080fd5b50610169546102dd906001600160a01b031681565b3480156106bb57600080fd5b5061028c6106ca3660046147b0565b6112dc565b3480156106db57600080fd5b5061028c600481565b3480156106f057600080fd5b5061028c6106ff3660046149d8565b611360565b34801561071057600080fd5b5061028c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061076957506301ffc9a760e01b6001600160e01b03198316145b92915050565b61077a6000336110bf565b61079f5760405162461bcd60e51b815260040161079690614ee1565b60405180910390fd5b6001600160a01b0385166107c55760405162461bcd60e51b815260040161079690614f46565b6001600160a01b0384166107eb5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b0383166108115760405162461bcd60e51b815260040161079690614f46565b6001600160a01b0382166108375760405162461bcd60e51b815260040161079690614f46565b6001600160a01b03811661085d5760405162461bcd60e51b815260040161079690614f46565b61015f80546001600160a01b038088166001600160a01b031992831681179093556101608054888316908416179055610161805487831690841617905561016280548683169084161790556101698054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190614c23565b61093090600a6150cb565b61016381905550836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561097057600080fd5b505afa158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a89190614c23565b6109b390600a6150cb565b61016481905561016354604080516001600160a01b03898116825288811660208301528781168284015286811660608301528516608082015260a081019290925260c082019290925290517fd85af1c2b3b2d15866efd9ddd867dab396e992b9a435fe9f17f3ccda3e3a1af69181900360e00190a15050505050565b6000610a3b600061152b565b905090565b610a4b6000336110bf565b610a675760405162461bcd60e51b815260040161079690614ee1565b6001600160a01b038816610a8d5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038716610ab35760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038616610ad95760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038516610aff5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038416610b255760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038316610b4b5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038216610b715760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038116610b975760405162461bcd60e51b815260040161079690614f46565b61016580546001600160a01b038a81166001600160a01b03199283161790925561016680548a841690831617905561012d80549289169290911691909117905561016780546001600160a01b038781166001600160a01b031992831681179093556101688054888316908416811790915561016a8054888416908516811790915561016b8054888516908616811790915561016c8054888616961686179055604080518f861681528e86166020820152948d16908501526060840195909552608083019190915260a082015260c081019290925260e08201527f6f06e8aac3e6c77593e857c6d17a08e702d2399dd4abfb1b8db20a640e3d1b44906101000160405180910390a15050505050505050565b600082815260656020526040902060010154610cc381611b20565b610ccd8383611b2a565b505050565b610cea600080516020615270833981519152336110bf565b610d065760405162461bcd60e51b815260040161079690614d82565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b0381163314610dad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610796565b610db78282611bb0565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e045760405162461bcd60e51b815260040161079690614db9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e4d600080516020615290833981519152546001600160a01b031690565b6001600160a01b031614610e735760405162461bcd60e51b815260040161079690614e47565b610e7c81611c17565b60408051600080825260208201909252610e9891839190611c41565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ee45760405162461bcd60e51b815260040161079690614db9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f2d600080516020615290833981519152546001600160a01b031690565b6001600160a01b031614610f535760405162461bcd60e51b815260040161079690614e47565b610f5c82611c17565b610db782826001611c41565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610796565b5060008051602061529083398151915290565b611033600080516020615270833981519152336110bf565b61104f5760405162461bcd60e51b815260040161079690614d82565b565b600061105d6001611dbb565b90508015611075576000805461ff0019166101001790555b61107d611e43565b8015610e98576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610d32565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610a3b600161152b565b6111016000336110bf565b61111d5760405162461bcd60e51b815260040161079690614ee1565b6001600160a01b0381166111435760405162461bcd60e51b815260040161079690614f46565b60fb5461116890600080516020615270833981519152906001600160a01b03166112b7565b61118060008051602061527083398151915282610ca8565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610d32565b6111e6600080516020615270833981519152336110bf565b6112025760405162461bcd60e51b815260040161079690614d82565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b8152306004820152610db79083906001600160a01b038216906370a082319060240160206040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190614b0e565b611eac565b6000828152606560205260409020600101546112d281611b20565b610ccd8383611bb0565b60006112f6600080516020615270833981519152336110bf565b6113125760405162461bcd60e51b815260040161079690614d82565b600061131d83612487565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161135091815260200190565b60405180910390a190505b919050565b600061137a600080516020615270833981519152336110bf565b6113965760405162461bcd60e51b815260040161079690614d82565b600082156113ea577f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1346113c885612487565b60405190815260200160405180910390a16113e3868561289a565b9050611459565b6113f5868686613005565b9050848110156114595760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610796565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906114879087908590600401614d36565b602060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190614ad8565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b61015f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561157457600080fd5b505afa158015611588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ac9190614b0e565b610160546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190614b0e565b61016b54604051636f4ba70b60e11b81523060048201529192506000916001600160a01b039091169063de974e169060240160206040518083038186803b15801561167857600080fd5b505afa15801561168c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b091906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b1580156116ff57600080fd5b505afa158015611713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173791906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561177e57600080fd5b505afa158015611792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b69190614b0e565b9050801561191f5761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561180457600080fd5b505afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190614b0e565b905060008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561189057600080fd5b505afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c89190614b81565b506001600160701b039182169350169050826118e48584615176565b6118ee9190615066565b6118f8908961504e565b9750826119058583615176565b61190f9190615066565b611919908861504e565b96505050505b60008415611b0a578715611a545761016754604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561197357600080fd5b505afa158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab9190614b0e565b9050600061016860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a369190614b0e565b9050611a4b8761016454610163548486613706565b92505050611b0a565b6040805160a081018252610160546001600160a01b03908116825261015f5481166020830152818301889052600060608301526001608083015261016c54925163d718a27160e01b81529192169063d718a27190611ab6908490600401614f7d565b60206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190614b0e565b9150505b611b14818761504e565b98975050505050505050565b610e98813361373b565b611b3482826110bf565b610db75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b6c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bba82826110bf565b15610db75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610db781611b20565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c7457610ccd8361379f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cad57600080fd5b505afa925050508015611cdd575060408051601f3d908101601f19168201909252611cda91810190614b0e565b60015b611d405760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610796565b6000805160206152908339815191528114611daf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610796565b50610ccd83838361383b565b60008054610100900460ff1615611e02578160ff166001148015611dde5750303b155b611dfa5760405162461bcd60e51b815260040161079690614e93565b506000919050565b60005460ff808416911610611e295760405162461bcd60e51b815260040161079690614e93565b506000805460ff191660ff92909216919091179055600190565b6000611e4f6001611dbb565b90508015611e67576000805461ff0019166101001790555b611e6f613866565b611e77613866565b611e82600033611b2a565b61107d7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611b2a565b61015f546001600160a01b03838116911614611eda5760405162461bcd60e51b815260040161079690614f0f565b60008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190614b81565b506001600160701b031691506001600160701b031691506103e882118015611f92575066038d7ea4c6800081115b611fae5760405162461bcd60e51b815260040161079690614e05565b61015f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ff357600080fd5b505afa158015612007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202b9190614b0e565b610163546101645461015f5461016054939450600093612060938693899389936001916001600160a01b0390811691166138d1565b6040805160a08101825261015f546001600160a01b03908116825261016054166020820152908101829052909150600090606081016120ae6120a78564e8d4a51000615176565b6008613a46565b81526001602090910152805161016c54604080840151905163095ea7b360e01b81529394506001600160a01b039283169363095ea7b3936120f493169190600401614d36565b602060405180830381600087803b15801561210e57600080fd5b505af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190614ad8565b5061016c5460405163c37d710760e01b81526001600160a01b039091169063c37d710790612178908490600401614f7d565b602060405180830381600087803b15801561219257600080fd5b505af11580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190614b0e565b5061015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561220f57600080fd5b505afa158015612223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122479190614b0e565b610160546040516370a0823160e01b81523060048201529194506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561229157600080fd5b505afa1580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190614b0e565b61015f5461016054919250612303916001600160a01b03918216911686846122f2826004613a46565b6122fd876004613a46565b30613a69565b5050610166546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b15801561234d57600080fd5b505afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123859190614b0e565b6101665461016a5460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926123bf9216908590600401614d36565b602060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190614ad8565b5061016a54610166546040516351b3839960e11b81526001600160a01b039283169263a36707329261244a929116908590600401614d36565b600060405180830381600087803b15801561246457600080fd5b505af1158015612478573d6000803e3d6000fd5b50505050505050505050505050565b61016b54604051636f4ba70b60e11b815230600482015260009182916001600160a01b039091169063de974e169060240160206040518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250891906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f91906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b1580156125d657600080fd5b505afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e9190614b0e565b905080156126805761016a60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561266757600080fd5b505af115801561267b573d6000803e3d6000fd5b505050505b610161546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156126c957600080fd5b505afa1580156126dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127019190614b0e565b9050801561274657610161546101625461015f54600092612736926001600160a01b0391821692908216911684808730613c6d565b9050612742818461504e565b9250505b610169546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561278b57600080fd5b505afa15801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c39190614b0e565b9050801561280857610169546101625461015f546000926127f8926001600160a01b0391821692908216911684808730613c6d565b9050612804818561504e565b9350505b61015f5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061283b908b908790600401614d36565b602060405180830381600087803b15801561285557600080fd5b505af1158015612869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288d9190614ad8565b5091979650505050505050565b61015f546000906001600160a01b038481169116146128cb5760405162461bcd60e51b815260040161079690614f0f565b60008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561291d57600080fd5b505afa158015612931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129559190614b81565b506001600160701b031691506001600160701b031691506103e882118015612983575066038d7ea4c6800081115b61299f5760405162461bcd60e51b815260040161079690614e05565b61016b54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b1580156129e457600080fd5b505afa1580156129f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1c91906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b158015612a6b57600080fd5b505afa158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa391906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b158015612aea57600080fd5b505afa158015612afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b229190614b0e565b905080612bb15761015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612b6d57600080fd5b505afa158015612b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba59190614b0e565b95505050505050610769565b61016a546101665460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992612be9929116908590600401614d36565b600060405180830381600087803b158015612c0357600080fd5b505af1158015612c17573d6000803e3d6000fd5b5050610166546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612c6257600080fd5b505afa158015612c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9a9190614b0e565b90508015612d995761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d209190614b0e565b9050600081612d2f848a615176565b612d399190615066565b9050600082612d48858a615176565b612d529190615066565b61015f546101605461016654929350612d93926001600160a01b0392831692918216911687612d82876004613a46565b612d8d876004613a46565b30613f59565b50505050505b610160546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612dde57600080fd5b505afa158015612df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e169190614b0e565b6040805160a081018252610160546001600160a01b03908116825261015f5416602082015290810182905290915060009060608101612e5d6120a764e8d4a5100086615066565b81526001602090910152805161016c54604080840151905163095ea7b360e01b81529394506001600160a01b039283169363095ea7b393612ea393169190600401614d36565b602060405180830381600087803b158015612ebd57600080fd5b505af1158015612ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef59190614ad8565b5061016c5460405163c37d710760e01b81526001600160a01b039091169063c37d710790612f27908490600401614f7d565b602060405180830381600087803b158015612f4157600080fd5b505af1158015612f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f799190614b0e565b5061015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612fbe57600080fd5b505afa158015612fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff69190614b0e565b9b9a5050505050505050505050565b61015f546000906001600160a01b038581169116146130365760405162461bcd60e51b815260040161079690614f0f565b60008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561308857600080fd5b505afa15801561309c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c09190614b81565b506001600160701b031691506001600160701b031691506103e8821180156130ee575066038d7ea4c6800081115b61310a5760405162461bcd60e51b815260040161079690614e05565b61016b54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b15801561314f57600080fd5b505afa158015613163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318791906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b1580156131d657600080fd5b505afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e91906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561325557600080fd5b505afa158015613269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328d9190614b0e565b905080156134985761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156132db57600080fd5b505afa1580156132ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133139190614b0e565b905060006133386133258b60046140ca565b61333090600a61504e565b8888856140d9565b9050828111156133455750815b61016a546101665460405163fce07e8960e01b81526001600160a01b039283169263fce07e899261337d929116908590600401614d36565b600060405180830381600087803b15801561339757600080fd5b505af11580156133ab573d6000803e3d6000fd5b5050610166546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156133f657600080fd5b505afa15801561340a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342e9190614b0e565b905060008361343d838b615176565b6134479190615066565b9050600084613456848b615176565b6134609190615066565b61015f546101605461016654929350613490926001600160a01b0392831692918216911686612d82876004613a46565b505050505050505b610160546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156134dd57600080fd5b505afa1580156134f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135159190614b0e565b6040805160a081018252610160546001600160a01b03908116825261015f541660208201529081018290529091506000906060810161355c6120a764e8d4a5100086615066565b81526001602090910152805161016c54604080840151905163095ea7b360e01b81529394506001600160a01b039283169363095ea7b3936135a293169190600401614d36565b602060405180830381600087803b1580156135bc57600080fd5b505af11580156135d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f49190614ad8565b5061016c5460405163c37d710760e01b81526001600160a01b039091169063c37d710790613626908490600401614f7d565b602060405180830381600087803b15801561364057600080fd5b505af1158015613654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136789190614b0e565b5061015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156136bd57600080fd5b505afa1580156136d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f59190614b0e565b9750505050505050505b9392505050565b60006137128286615176565b8361371d8689615176565b6137279190615176565b6137319190615066565b9695505050505050565b61374582826110bf565b610db75761375d816001600160a01b03166014614262565b613768836020614262565b604051602001613779929190614cc1565b60408051601f198184030181529082905262461bcd60e51b825261079691600401614d4f565b6001600160a01b0381163b61380c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610796565b60008051602061529083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613844836143fe565b6000825111806138515750805b15610ccd57613860838361443e565b50505050565b600054610100900460ff1661104f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610796565b60008087876138e0888c615176565b6138ea9190615066565b6138f4919061504e565b6138fe898c615176565b6139089190615066565b905060005b85811015613a385760006040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200184815260200161395a8564e8d4a510006120a79190615176565b8152600160209091015261016c5460405163d718a27160e01b81529192506000916001600160a01b039091169063d718a2719061399b908590600401614f7d565b60206040518083038186803b1580156139b357600080fd5b505afa1580156139c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139eb9190614b0e565b90508a846139f9838f615176565b613a039190615066565b613a0d919061504e565b613a178c8f615176565b613a219190615066565b935050508080613a30906151ef565b91505061390d565b509998505050505050505050565b6000612710613a558382615195565b613a5f9085615176565b6136ff9190615066565b61012d5460405163095ea7b360e01b8152600091829182916001600160a01b03808d169263095ea7b392613aa39216908c90600401614d36565b602060405180830381600087803b158015613abd57600080fd5b505af1158015613ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af59190614ad8565b5061012d5460405163095ea7b360e01b81526001600160a01b038b81169263095ea7b392613b2b92909116908b90600401614d36565b602060405180830381600087803b158015613b4557600080fd5b505af1158015613b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7d9190614ad8565b5061012d546001600160a01b0316635a47ddc38b8b60018c8c8c8c8c613ba54261025861504e565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b158015613c2257600080fd5b505af1158015613c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5a9190614bf5565b9250925092509750975097945050505050565b61012d5460405163095ea7b360e01b81526000916001600160a01b03808b169263095ea7b392613ca39216908790600401614d36565b602060405180830381600087803b158015613cbd57600080fd5b505af1158015613cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf59190614ad8565b506000613d06898989898989614532565b905080613d17576000915050613f4e565b60408051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613d2f5790505090508981600081518110613d7257613d72615220565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110613daa57613daa615220565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508681600081518110613de257613de2615220565b602002602001015160400190151590811515815250508881600181518110613e0c57613e0c615220565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508781600181518110613e4457613e44615220565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600181518110613e7c57613e7c615220565b602090810291909101015190151560409091015261012d546000906001600160a01b031663f41766d887838589613eb54261025861504e565b6040518663ffffffff1660e01b8152600401613ed5959493929190614fe1565b600060405180830381600087803b158015613eef57600080fd5b505af1158015613f03573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f2b9190810190614a2b565b905080600281518110613f4057613f40615220565b602002602001015193505050505b979650505050505050565b61012d5460405163095ea7b360e01b815260009182916001600160a01b038981169263095ea7b392613f9392909116908a90600401614d36565b602060405180830381600087803b158015613fad57600080fd5b505af1158015613fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe59190614ad8565b5061012d546001600160a01b0316630dede6c48a8a60018a8a8a8a61400c4261025861504e565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b15801561408257600080fd5b505af1158015614096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ba9190614bd1565b9150915097509795505050505050565b6000612710613a55838261504e565b60008061016354846140eb9190615176565b610164546140f99087615176565b614103919061504e565b610164546141118886615176565b61411b9190615176565b6141259190615066565b90506000836141348387615176565b61413e9190615066565b6040805160a081018252610160546001600160a01b03908116825261015f54166020820152908101829052909150600090606081016141856120a764e8d4a5100086615066565b8152600160209091015261016c5460405163d718a27160e01b81529192506000916001600160a01b039091169063d718a271906141c6908590600401614f7d565b60206040518083038186803b1580156141de57600080fd5b505afa1580156141f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142169190614b0e565b90506142228188615176565b61422c848a615176565b614236919061504e565b836142418b89615176565b61424b9190615176565b6142559190615066565b9998505050505050505050565b60606000614271836002615176565b61427c90600261504e565b67ffffffffffffffff81111561429457614294615236565b6040519080825280601f01601f1916602001820160405280156142be576020820181803683370190505b509050600360fc1b816000815181106142d9576142d9615220565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061430857614308615220565b60200101906001600160f81b031916908160001a905350600061432c846002615176565b61433790600161504e565b90505b60018111156143af576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061436b5761436b615220565b1a60f81b82828151811061438157614381615220565b60200101906001600160f81b031916908160001a90535060049490941c936143a8816151d8565b905061433a565b5083156136ff5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610796565b6144078161379f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6144a65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610796565b600080846001600160a01b0316846040516144c19190614ca5565b600060405180830381855af49150503d80600081146144fc576040519150601f19603f3d011682016040523d82523d6000602084013e614501565b606091505b509150915061452982826040518060600160405280602781526020016152b060279139614760565b95945050505050565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161454d579050509050878160008151811061459057614590615220565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106145c8576145c8615220565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050848160008151811061460057614600615220565b60200260200101516040019015159081151581525050868160018151811061462a5761462a615220565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061466257614662615220565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160018151811061469a5761469a615220565b602090810291909101015190151560409182015261012d5490516326207f2d60e21b81526000916001600160a01b031690639881fcb4906146e19087908690600401614fc0565b60006040518083038186803b1580156146f957600080fd5b505afa15801561470d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147359190810190614a2b565b90508060028151811061474a5761474a615220565b6020026020010151925050509695505050505050565b6060831561476f5750816136ff565b82511561477f5782518084602001fd5b8160405162461bcd60e51b81526004016107969190614d4f565b80516001600160701b038116811461135b57600080fd5b6000602082840312156147c257600080fd5b81356136ff8161524c565b6000602082840312156147df57600080fd5b81516136ff8161524c565b600080600080600060a0868803121561480257600080fd5b853561480d8161524c565b9450602086013561481d8161524c565b9350604086013561482d8161524c565b9250606086013561483d8161524c565b9150608086013561484d8161524c565b809150509295509295909350565b600080600080600080600080610100898b03121561487857600080fd5b88356148838161524c565b975060208901356148938161524c565b965060408901356148a38161524c565b955060608901356148b38161524c565b945060808901356148c38161524c565b935060a08901356148d38161524c565b925060c08901356148e38161524c565b915060e08901356148f38161524c565b809150509295985092959890939650565b6000806040838503121561491757600080fd5b82356149228161524c565b915060208381013567ffffffffffffffff8082111561494057600080fd5b818601915086601f83011261495457600080fd5b81358181111561496657614966615236565b614978601f8201601f1916850161501d565b9150808252878482850101111561498e57600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156149bf57600080fd5b82356149ca8161524c565b946020939093013593505050565b600080600080608085870312156149ee57600080fd5b84356149f98161524c565b9350602085013592506040850135614a108161524c565b91506060850135614a2081615261565b939692955090935050565b60006020808385031215614a3e57600080fd5b825167ffffffffffffffff80821115614a5657600080fd5b818501915085601f830112614a6a57600080fd5b815181811115614a7c57614a7c615236565b8060051b9150614a8d84830161501d565b8181528481019084860184860187018a1015614aa857600080fd5b600095505b83861015614acb578051835260019590950194918601918601614aad565b5098975050505050505050565b600060208284031215614aea57600080fd5b81516136ff81615261565b600060208284031215614b0757600080fd5b5035919050565b600060208284031215614b2057600080fd5b5051919050565b60008060408385031215614b3a57600080fd5b823591506020830135614b4c8161524c565b809150509250929050565b600060208284031215614b6957600080fd5b81356001600160e01b0319811681146136ff57600080fd5b600080600060608486031215614b9657600080fd5b614b9f84614799565b9250614bad60208501614799565b9150604084015163ffffffff81168114614bc657600080fd5b809150509250925092565b60008060408385031215614be457600080fd5b505080516020909101519092909150565b600080600060608486031215614c0a57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614c3557600080fd5b815160ff811681146136ff57600080fd5b600081518084526020808501945080840160005b83811015614c9a57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614c5a565b509495945050505050565b60008251614cb78184602087016151ac565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614cf98160178501602088016151ac565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614d2a8160288401602088016151ac565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152614d6e8160408501602087016151ac565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526022908201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6040820152616f7760f01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b81516001600160a01b0390811682526020808401519091169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b828152604060208201526000614fd96040830184614c46565b949350505050565b85815284602082015260a06040820152600061500060a0830186614c46565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561504657615046615236565b604052919050565b600082198211156150615761506161520a565b500190565b60008261508357634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156150c35781600019048211156150a9576150a961520a565b808516156150b657918102915b93841c939080029061508d565b509250929050565b60006136ff60ff8416836000826150e457506001610769565b816150f157506000610769565b816001811461510757600281146151115761512d565b6001915050610769565b60ff8411156151225761512261520a565b50506001821b610769565b5060208310610133831016604e8410600b8410161715615150575081810a610769565b61515a8383615088565b806000190482111561516e5761516e61520a565b029392505050565b60008160001904831182151516156151905761519061520a565b500290565b6000828210156151a7576151a761520a565b500390565b60005b838110156151c75781810151838201526020016151af565b838111156138605750506000910152565b6000816151e7576151e761520a565b506000190190565b60006000198214156152035761520361520a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e9857600080fd5b8015158114610e9857600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bf6cb009f4ce3859073907b16a9ec57dc4dfb8a8df6158f9b47cc7258e60c76f64736f6c63430008060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80637b73aa4e1161012e578063a6f19c84116100ab578063e54bef751161006f578063e54bef751461068e578063ef5cfb8c146106af578063f664b3d9146106cf578063f6f6b881146106e4578063f72c0d8b1461070457600080fd5b8063a6f19c84146105eb578063abf4be011461060c578063adc9772e1461062d578063b0492aa51461064d578063d547741f1461066e57600080fd5b806391d14854116100f257806391d1485414610560578063a217fddf14610580578063a3673b3814610595578063a440b21a146105aa578063a69dc7f8146105ca57600080fd5b80637b73aa4e146104dc5780637d5f5802146104f15780638129fc1c146105135780638a5693cd146105285780638b2ddd141461053f57600080fd5b806333d153d0116101bc57806352d1902d1161018057806352d1902d146104505780635f8cddfe146104655780635fea9cbb14610486578063620b75df146104a75780637a573c0e146104c757600080fd5b806333d153d0146103bb57806336568abe146103dc5780633659cfe6146103fc5780633ec632161461041c5780634f1ef2861461043d57600080fd5b80632576e65a116102035780632576e65a146103255780632a7e19c31461033a5780632b3297f91461035a5780632f2ff15d1461037b578063311117081461039b57600080fd5b806301ffc9a71461024057806306da3f2e146102755780630fc55bfd1461029a57806311eac855146102bc578063248a9ca3146102f5575b600080fd5b34801561024c57600080fd5b5061026061025b366004614b57565b610738565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028c6101635481565b60405190815260200161026c565b3480156102a657600080fd5b506102ba6102b53660046147ea565b61076f565b005b3480156102c857600080fd5b5061015f546102dd906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b34801561030157600080fd5b5061028c610310366004614af5565b60009081526065602052604090206001015490565b34801561033157600080fd5b5061028c610a2f565b34801561034657600080fd5b506102ba61035536600461485b565b610a40565b34801561036657600080fd5b5061016c546102dd906001600160a01b031681565b34801561038757600080fd5b506102ba610396366004614b27565b610ca8565b3480156103a757600080fd5b506102ba6103b6366004614af5565b610cd2565b3480156103c757600080fd5b50610168546102dd906001600160a01b031681565b3480156103e857600080fd5b506102ba6103f7366004614b27565b610d3d565b34801561040857600080fd5b506102ba6104173660046147b0565b610dbb565b34801561042857600080fd5b5061016a546102dd906001600160a01b031681565b6102ba61044b366004614904565b610e9b565b34801561045c57600080fd5b5061028c610f68565b34801561047157600080fd5b50610166546102dd906001600160a01b031681565b34801561049257600080fd5b50610167546102dd906001600160a01b031681565b3480156104b357600080fd5b5060fb546102dd906001600160a01b031681565b3480156104d357600080fd5b5061028c600881565b3480156104e857600080fd5b506102ba61101b565b3480156104fd57600080fd5b5061028c60008051602061527083398151915281565b34801561051f57600080fd5b506102ba611051565b34801561053457600080fd5b5061028c6101645481565b34801561054b57600080fd5b5061016b546102dd906001600160a01b031681565b34801561056c57600080fd5b5061026061057b366004614b27565b6110bf565b34801561058c57600080fd5b5061028c600081565b3480156105a157600080fd5b5061028c6110ea565b3480156105b657600080fd5b506102ba6105c53660046147b0565b6110f6565b3480156105d657600080fd5b50610160546102dd906001600160a01b031681565b3480156105f757600080fd5b50610165546102dd906001600160a01b031681565b34801561061857600080fd5b50610162546102dd906001600160a01b031681565b34801561063957600080fd5b506102ba6106483660046149ac565b6111ce565b34801561065957600080fd5b50610161546102dd906001600160a01b031681565b34801561067a57600080fd5b506102ba610689366004614b27565b6112b7565b34801561069a57600080fd5b50610169546102dd906001600160a01b031681565b3480156106bb57600080fd5b5061028c6106ca3660046147b0565b6112dc565b3480156106db57600080fd5b5061028c600481565b3480156106f057600080fd5b5061028c6106ff3660046149d8565b611360565b34801561071057600080fd5b5061028c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061076957506301ffc9a760e01b6001600160e01b03198316145b92915050565b61077a6000336110bf565b61079f5760405162461bcd60e51b815260040161079690614ee1565b60405180910390fd5b6001600160a01b0385166107c55760405162461bcd60e51b815260040161079690614f46565b6001600160a01b0384166107eb5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b0383166108115760405162461bcd60e51b815260040161079690614f46565b6001600160a01b0382166108375760405162461bcd60e51b815260040161079690614f46565b6001600160a01b03811661085d5760405162461bcd60e51b815260040161079690614f46565b61015f80546001600160a01b038088166001600160a01b031992831681179093556101608054888316908416179055610161805487831690841617905561016280548683169084161790556101698054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190614c23565b61093090600a6150cb565b61016381905550836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561097057600080fd5b505afa158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a89190614c23565b6109b390600a6150cb565b61016481905561016354604080516001600160a01b03898116825288811660208301528781168284015286811660608301528516608082015260a081019290925260c082019290925290517fd85af1c2b3b2d15866efd9ddd867dab396e992b9a435fe9f17f3ccda3e3a1af69181900360e00190a15050505050565b6000610a3b600061152b565b905090565b610a4b6000336110bf565b610a675760405162461bcd60e51b815260040161079690614ee1565b6001600160a01b038816610a8d5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038716610ab35760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038616610ad95760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038516610aff5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038416610b255760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038316610b4b5760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038216610b715760405162461bcd60e51b815260040161079690614f46565b6001600160a01b038116610b975760405162461bcd60e51b815260040161079690614f46565b61016580546001600160a01b038a81166001600160a01b03199283161790925561016680548a841690831617905561012d80549289169290911691909117905561016780546001600160a01b038781166001600160a01b031992831681179093556101688054888316908416811790915561016a8054888416908516811790915561016b8054888516908616811790915561016c8054888616961686179055604080518f861681528e86166020820152948d16908501526060840195909552608083019190915260a082015260c081019290925260e08201527f6f06e8aac3e6c77593e857c6d17a08e702d2399dd4abfb1b8db20a640e3d1b44906101000160405180910390a15050505050505050565b600082815260656020526040902060010154610cc381611b20565b610ccd8383611b2a565b505050565b610cea600080516020615270833981519152336110bf565b610d065760405162461bcd60e51b815260040161079690614d82565b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b0381163314610dad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610796565b610db78282611bb0565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e045760405162461bcd60e51b815260040161079690614db9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e4d600080516020615290833981519152546001600160a01b031690565b6001600160a01b031614610e735760405162461bcd60e51b815260040161079690614e47565b610e7c81611c17565b60408051600080825260208201909252610e9891839190611c41565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ee45760405162461bcd60e51b815260040161079690614db9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f2d600080516020615290833981519152546001600160a01b031690565b6001600160a01b031614610f535760405162461bcd60e51b815260040161079690614e47565b610f5c82611c17565b610db782826001611c41565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110085760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610796565b5060008051602061529083398151915290565b611033600080516020615270833981519152336110bf565b61104f5760405162461bcd60e51b815260040161079690614d82565b565b600061105d6001611dbb565b90508015611075576000805461ff0019166101001790555b61107d611e43565b8015610e98576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610d32565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610a3b600161152b565b6111016000336110bf565b61111d5760405162461bcd60e51b815260040161079690614ee1565b6001600160a01b0381166111435760405162461bcd60e51b815260040161079690614f46565b60fb5461116890600080516020615270833981519152906001600160a01b03166112b7565b61118060008051602061527083398151915282610ca8565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610d32565b6111e6600080516020615270833981519152336110bf565b6112025760405162461bcd60e51b815260040161079690614d82565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b8152306004820152610db79083906001600160a01b038216906370a082319060240160206040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190614b0e565b611eac565b6000828152606560205260409020600101546112d281611b20565b610ccd8383611bb0565b60006112f6600080516020615270833981519152336110bf565b6113125760405162461bcd60e51b815260040161079690614d82565b600061131d83612487565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161135091815260200190565b60405180910390a190505b919050565b600061137a600080516020615270833981519152336110bf565b6113965760405162461bcd60e51b815260040161079690614d82565b600082156113ea577f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1346113c885612487565b60405190815260200160405180910390a16113e3868561289a565b9050611459565b6113f5868686613005565b9050848110156114595760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610796565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906114879087908590600401614d36565b602060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190614ad8565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b61015f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561157457600080fd5b505afa158015611588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ac9190614b0e565b610160546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190614b0e565b61016b54604051636f4ba70b60e11b81523060048201529192506000916001600160a01b039091169063de974e169060240160206040518083038186803b15801561167857600080fd5b505afa15801561168c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b091906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b1580156116ff57600080fd5b505afa158015611713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173791906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561177e57600080fd5b505afa158015611792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b69190614b0e565b9050801561191f5761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561180457600080fd5b505afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190614b0e565b905060008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561189057600080fd5b505afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c89190614b81565b506001600160701b039182169350169050826118e48584615176565b6118ee9190615066565b6118f8908961504e565b9750826119058583615176565b61190f9190615066565b611919908861504e565b96505050505b60008415611b0a578715611a545761016754604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b15801561197357600080fd5b505afa158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab9190614b0e565b9050600061016860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a369190614b0e565b9050611a4b8761016454610163548486613706565b92505050611b0a565b6040805160a081018252610160546001600160a01b03908116825261015f5481166020830152818301889052600060608301526001608083015261016c54925163d718a27160e01b81529192169063d718a27190611ab6908490600401614f7d565b60206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190614b0e565b9150505b611b14818761504e565b98975050505050505050565b610e98813361373b565b611b3482826110bf565b610db75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b6c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bba82826110bf565b15610db75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610db781611b20565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c7457610ccd8361379f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cad57600080fd5b505afa925050508015611cdd575060408051601f3d908101601f19168201909252611cda91810190614b0e565b60015b611d405760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610796565b6000805160206152908339815191528114611daf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610796565b50610ccd83838361383b565b60008054610100900460ff1615611e02578160ff166001148015611dde5750303b155b611dfa5760405162461bcd60e51b815260040161079690614e93565b506000919050565b60005460ff808416911610611e295760405162461bcd60e51b815260040161079690614e93565b506000805460ff191660ff92909216919091179055600190565b6000611e4f6001611dbb565b90508015611e67576000805461ff0019166101001790555b611e6f613866565b611e77613866565b611e82600033611b2a565b61107d7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611b2a565b61015f546001600160a01b03838116911614611eda5760405162461bcd60e51b815260040161079690614f0f565b60008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190614b81565b506001600160701b031691506001600160701b031691506103e882118015611f92575066038d7ea4c6800081115b611fae5760405162461bcd60e51b815260040161079690614e05565b61015f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ff357600080fd5b505afa158015612007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202b9190614b0e565b610163546101645461015f5461016054939450600093612060938693899389936001916001600160a01b0390811691166138d1565b6040805160a08101825261015f546001600160a01b03908116825261016054166020820152908101829052909150600090606081016120ae6120a78564e8d4a51000615176565b6008613a46565b81526001602090910152805161016c54604080840151905163095ea7b360e01b81529394506001600160a01b039283169363095ea7b3936120f493169190600401614d36565b602060405180830381600087803b15801561210e57600080fd5b505af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190614ad8565b5061016c5460405163c37d710760e01b81526001600160a01b039091169063c37d710790612178908490600401614f7d565b602060405180830381600087803b15801561219257600080fd5b505af11580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190614b0e565b5061015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561220f57600080fd5b505afa158015612223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122479190614b0e565b610160546040516370a0823160e01b81523060048201529194506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561229157600080fd5b505afa1580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190614b0e565b61015f5461016054919250612303916001600160a01b03918216911686846122f2826004613a46565b6122fd876004613a46565b30613a69565b5050610166546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b15801561234d57600080fd5b505afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123859190614b0e565b6101665461016a5460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926123bf9216908590600401614d36565b602060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190614ad8565b5061016a54610166546040516351b3839960e11b81526001600160a01b039283169263a36707329261244a929116908590600401614d36565b600060405180830381600087803b15801561246457600080fd5b505af1158015612478573d6000803e3d6000fd5b50505050505050505050505050565b61016b54604051636f4ba70b60e11b815230600482015260009182916001600160a01b039091169063de974e169060240160206040518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250891906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f91906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b1580156125d657600080fd5b505afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e9190614b0e565b905080156126805761016a60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561266757600080fd5b505af115801561267b573d6000803e3d6000fd5b505050505b610161546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156126c957600080fd5b505afa1580156126dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127019190614b0e565b9050801561274657610161546101625461015f54600092612736926001600160a01b0391821692908216911684808730613c6d565b9050612742818461504e565b9250505b610169546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561278b57600080fd5b505afa15801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c39190614b0e565b9050801561280857610169546101625461015f546000926127f8926001600160a01b0391821692908216911684808730613c6d565b9050612804818561504e565b9350505b61015f5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061283b908b908790600401614d36565b602060405180830381600087803b15801561285557600080fd5b505af1158015612869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288d9190614ad8565b5091979650505050505050565b61015f546000906001600160a01b038481169116146128cb5760405162461bcd60e51b815260040161079690614f0f565b60008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561291d57600080fd5b505afa158015612931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129559190614b81565b506001600160701b031691506001600160701b031691506103e882118015612983575066038d7ea4c6800081115b61299f5760405162461bcd60e51b815260040161079690614e05565b61016b54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b1580156129e457600080fd5b505afa1580156129f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1c91906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b158015612a6b57600080fd5b505afa158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa391906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b158015612aea57600080fd5b505afa158015612afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b229190614b0e565b905080612bb15761015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612b6d57600080fd5b505afa158015612b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba59190614b0e565b95505050505050610769565b61016a546101665460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992612be9929116908590600401614d36565b600060405180830381600087803b158015612c0357600080fd5b505af1158015612c17573d6000803e3d6000fd5b5050610166546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612c6257600080fd5b505afa158015612c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9a9190614b0e565b90508015612d995761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d209190614b0e565b9050600081612d2f848a615176565b612d399190615066565b9050600082612d48858a615176565b612d529190615066565b61015f546101605461016654929350612d93926001600160a01b0392831692918216911687612d82876004613a46565b612d8d876004613a46565b30613f59565b50505050505b610160546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612dde57600080fd5b505afa158015612df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e169190614b0e565b6040805160a081018252610160546001600160a01b03908116825261015f5416602082015290810182905290915060009060608101612e5d6120a764e8d4a5100086615066565b81526001602090910152805161016c54604080840151905163095ea7b360e01b81529394506001600160a01b039283169363095ea7b393612ea393169190600401614d36565b602060405180830381600087803b158015612ebd57600080fd5b505af1158015612ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef59190614ad8565b5061016c5460405163c37d710760e01b81526001600160a01b039091169063c37d710790612f27908490600401614f7d565b602060405180830381600087803b158015612f4157600080fd5b505af1158015612f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f799190614b0e565b5061015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612fbe57600080fd5b505afa158015612fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff69190614b0e565b9b9a5050505050505050505050565b61015f546000906001600160a01b038581169116146130365760405162461bcd60e51b815260040161079690614f0f565b60008061016660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561308857600080fd5b505afa15801561309c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c09190614b81565b506001600160701b031691506001600160701b031691506103e8821180156130ee575066038d7ea4c6800081115b61310a5760405162461bcd60e51b815260040161079690614e05565b61016b54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b15801561314f57600080fd5b505afa158015613163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318791906147cd565b61016b546101665460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b1580156131d657600080fd5b505afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e91906147cd565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561325557600080fd5b505afa158015613269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328d9190614b0e565b905080156134985761016654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156132db57600080fd5b505afa1580156132ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133139190614b0e565b905060006133386133258b60046140ca565b61333090600a61504e565b8888856140d9565b9050828111156133455750815b61016a546101665460405163fce07e8960e01b81526001600160a01b039283169263fce07e899261337d929116908590600401614d36565b600060405180830381600087803b15801561339757600080fd5b505af11580156133ab573d6000803e3d6000fd5b5050610166546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156133f657600080fd5b505afa15801561340a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342e9190614b0e565b905060008361343d838b615176565b6134479190615066565b9050600084613456848b615176565b6134609190615066565b61015f546101605461016654929350613490926001600160a01b0392831692918216911686612d82876004613a46565b505050505050505b610160546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156134dd57600080fd5b505afa1580156134f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135159190614b0e565b6040805160a081018252610160546001600160a01b03908116825261015f541660208201529081018290529091506000906060810161355c6120a764e8d4a5100086615066565b81526001602090910152805161016c54604080840151905163095ea7b360e01b81529394506001600160a01b039283169363095ea7b3936135a293169190600401614d36565b602060405180830381600087803b1580156135bc57600080fd5b505af11580156135d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f49190614ad8565b5061016c5460405163c37d710760e01b81526001600160a01b039091169063c37d710790613626908490600401614f7d565b602060405180830381600087803b15801561364057600080fd5b505af1158015613654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136789190614b0e565b5061015f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156136bd57600080fd5b505afa1580156136d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f59190614b0e565b9750505050505050505b9392505050565b60006137128286615176565b8361371d8689615176565b6137279190615176565b6137319190615066565b9695505050505050565b61374582826110bf565b610db75761375d816001600160a01b03166014614262565b613768836020614262565b604051602001613779929190614cc1565b60408051601f198184030181529082905262461bcd60e51b825261079691600401614d4f565b6001600160a01b0381163b61380c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610796565b60008051602061529083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613844836143fe565b6000825111806138515750805b15610ccd57613860838361443e565b50505050565b600054610100900460ff1661104f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610796565b60008087876138e0888c615176565b6138ea9190615066565b6138f4919061504e565b6138fe898c615176565b6139089190615066565b905060005b85811015613a385760006040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200184815260200161395a8564e8d4a510006120a79190615176565b8152600160209091015261016c5460405163d718a27160e01b81529192506000916001600160a01b039091169063d718a2719061399b908590600401614f7d565b60206040518083038186803b1580156139b357600080fd5b505afa1580156139c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139eb9190614b0e565b90508a846139f9838f615176565b613a039190615066565b613a0d919061504e565b613a178c8f615176565b613a219190615066565b935050508080613a30906151ef565b91505061390d565b509998505050505050505050565b6000612710613a558382615195565b613a5f9085615176565b6136ff9190615066565b61012d5460405163095ea7b360e01b8152600091829182916001600160a01b03808d169263095ea7b392613aa39216908c90600401614d36565b602060405180830381600087803b158015613abd57600080fd5b505af1158015613ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af59190614ad8565b5061012d5460405163095ea7b360e01b81526001600160a01b038b81169263095ea7b392613b2b92909116908b90600401614d36565b602060405180830381600087803b158015613b4557600080fd5b505af1158015613b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7d9190614ad8565b5061012d546001600160a01b0316635a47ddc38b8b60018c8c8c8c8c613ba54261025861504e565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b158015613c2257600080fd5b505af1158015613c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5a9190614bf5565b9250925092509750975097945050505050565b61012d5460405163095ea7b360e01b81526000916001600160a01b03808b169263095ea7b392613ca39216908790600401614d36565b602060405180830381600087803b158015613cbd57600080fd5b505af1158015613cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf59190614ad8565b506000613d06898989898989614532565b905080613d17576000915050613f4e565b60408051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613d2f5790505090508981600081518110613d7257613d72615220565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110613daa57613daa615220565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508681600081518110613de257613de2615220565b602002602001015160400190151590811515815250508881600181518110613e0c57613e0c615220565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508781600181518110613e4457613e44615220565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600181518110613e7c57613e7c615220565b602090810291909101015190151560409091015261012d546000906001600160a01b031663f41766d887838589613eb54261025861504e565b6040518663ffffffff1660e01b8152600401613ed5959493929190614fe1565b600060405180830381600087803b158015613eef57600080fd5b505af1158015613f03573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f2b9190810190614a2b565b905080600281518110613f4057613f40615220565b602002602001015193505050505b979650505050505050565b61012d5460405163095ea7b360e01b815260009182916001600160a01b038981169263095ea7b392613f9392909116908a90600401614d36565b602060405180830381600087803b158015613fad57600080fd5b505af1158015613fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe59190614ad8565b5061012d546001600160a01b0316630dede6c48a8a60018a8a8a8a61400c4261025861504e565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b15801561408257600080fd5b505af1158015614096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ba9190614bd1565b9150915097509795505050505050565b6000612710613a55838261504e565b60008061016354846140eb9190615176565b610164546140f99087615176565b614103919061504e565b610164546141118886615176565b61411b9190615176565b6141259190615066565b90506000836141348387615176565b61413e9190615066565b6040805160a081018252610160546001600160a01b03908116825261015f54166020820152908101829052909150600090606081016141856120a764e8d4a5100086615066565b8152600160209091015261016c5460405163d718a27160e01b81529192506000916001600160a01b039091169063d718a271906141c6908590600401614f7d565b60206040518083038186803b1580156141de57600080fd5b505afa1580156141f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142169190614b0e565b90506142228188615176565b61422c848a615176565b614236919061504e565b836142418b89615176565b61424b9190615176565b6142559190615066565b9998505050505050505050565b60606000614271836002615176565b61427c90600261504e565b67ffffffffffffffff81111561429457614294615236565b6040519080825280601f01601f1916602001820160405280156142be576020820181803683370190505b509050600360fc1b816000815181106142d9576142d9615220565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061430857614308615220565b60200101906001600160f81b031916908160001a905350600061432c846002615176565b61433790600161504e565b90505b60018111156143af576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061436b5761436b615220565b1a60f81b82828151811061438157614381615220565b60200101906001600160f81b031916908160001a90535060049490941c936143a8816151d8565b905061433a565b5083156136ff5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610796565b6144078161379f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6144a65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610796565b600080846001600160a01b0316846040516144c19190614ca5565b600060405180830381855af49150503d80600081146144fc576040519150601f19603f3d011682016040523d82523d6000602084013e614501565b606091505b509150915061452982826040518060600160405280602781526020016152b060279139614760565b95945050505050565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161454d579050509050878160008151811061459057614590615220565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106145c8576145c8615220565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050848160008151811061460057614600615220565b60200260200101516040019015159081151581525050868160018151811061462a5761462a615220565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061466257614662615220565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160018151811061469a5761469a615220565b602090810291909101015190151560409182015261012d5490516326207f2d60e21b81526000916001600160a01b031690639881fcb4906146e19087908690600401614fc0565b60006040518083038186803b1580156146f957600080fd5b505afa15801561470d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147359190810190614a2b565b90508060028151811061474a5761474a615220565b6020026020010151925050509695505050505050565b6060831561476f5750816136ff565b82511561477f5782518084602001fd5b8160405162461bcd60e51b81526004016107969190614d4f565b80516001600160701b038116811461135b57600080fd5b6000602082840312156147c257600080fd5b81356136ff8161524c565b6000602082840312156147df57600080fd5b81516136ff8161524c565b600080600080600060a0868803121561480257600080fd5b853561480d8161524c565b9450602086013561481d8161524c565b9350604086013561482d8161524c565b9250606086013561483d8161524c565b9150608086013561484d8161524c565b809150509295509295909350565b600080600080600080600080610100898b03121561487857600080fd5b88356148838161524c565b975060208901356148938161524c565b965060408901356148a38161524c565b955060608901356148b38161524c565b945060808901356148c38161524c565b935060a08901356148d38161524c565b925060c08901356148e38161524c565b915060e08901356148f38161524c565b809150509295985092959890939650565b6000806040838503121561491757600080fd5b82356149228161524c565b915060208381013567ffffffffffffffff8082111561494057600080fd5b818601915086601f83011261495457600080fd5b81358181111561496657614966615236565b614978601f8201601f1916850161501d565b9150808252878482850101111561498e57600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156149bf57600080fd5b82356149ca8161524c565b946020939093013593505050565b600080600080608085870312156149ee57600080fd5b84356149f98161524c565b9350602085013592506040850135614a108161524c565b91506060850135614a2081615261565b939692955090935050565b60006020808385031215614a3e57600080fd5b825167ffffffffffffffff80821115614a5657600080fd5b818501915085601f830112614a6a57600080fd5b815181811115614a7c57614a7c615236565b8060051b9150614a8d84830161501d565b8181528481019084860184860187018a1015614aa857600080fd5b600095505b83861015614acb578051835260019590950194918601918601614aad565b5098975050505050505050565b600060208284031215614aea57600080fd5b81516136ff81615261565b600060208284031215614b0757600080fd5b5035919050565b600060208284031215614b2057600080fd5b5051919050565b60008060408385031215614b3a57600080fd5b823591506020830135614b4c8161524c565b809150509250929050565b600060208284031215614b6957600080fd5b81356001600160e01b0319811681146136ff57600080fd5b600080600060608486031215614b9657600080fd5b614b9f84614799565b9250614bad60208501614799565b9150604084015163ffffffff81168114614bc657600080fd5b809150509250925092565b60008060408385031215614be457600080fd5b505080516020909101519092909150565b600080600060608486031215614c0a57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614c3557600080fd5b815160ff811681146136ff57600080fd5b600081518084526020808501945080840160005b83811015614c9a57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614c5a565b509495945050505050565b60008251614cb78184602087016151ac565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614cf98160178501602088016151ac565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614d2a8160288401602088016151ac565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152614d6e8160408501602087016151ac565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526022908201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6040820152616f7760f01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b81516001600160a01b0390811682526020808401519091169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b828152604060208201526000614fd96040830184614c46565b949350505050565b85815284602082015260a06040820152600061500060a0830186614c46565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561504657615046615236565b604052919050565b600082198211156150615761506161520a565b500190565b60008261508357634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156150c35781600019048211156150a9576150a961520a565b808516156150b657918102915b93841c939080029061508d565b509250929050565b60006136ff60ff8416836000826150e457506001610769565b816150f157506000610769565b816001811461510757600281146151115761512d565b6001915050610769565b60ff8411156151225761512261520a565b50506001821b610769565b5060208310610133831016604e8410600b8410161715615150575081810a610769565b61515a8383615088565b806000190482111561516e5761516e61520a565b029392505050565b60008160001904831182151516156151905761519061520a565b500290565b6000828210156151a7576151a761520a565b500390565b60005b838110156151c75781810151838201526020016151af565b838111156138605750506000910152565b6000816151e7576151e761520a565b506000190190565b60006000198214156152035761520361520a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e9857600080fd5b8015158114610e9857600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bf6cb009f4ce3859073907b16a9ec57dc4dfb8a8df6158f9b47cc7258e60c76f64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1466,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1773,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 38680,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 39002,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 40273,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "dystRouter",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IDystopiaRouter)33925"
      },
      {
        "astId": 40788,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18397,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "usdcToken",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(IERC20)2512"
      },
      {
        "astId": 18400,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "tusdToken",
        "offset": 0,
        "slot": "352",
        "type": "t_contract(IERC20)2512"
      },
      {
        "astId": 18403,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "dystToken",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IERC20)2512"
      },
      {
        "astId": 18406,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IERC20)2512"
      },
      {
        "astId": 18408,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "usdcTokenDenominator",
        "offset": 0,
        "slot": "355",
        "type": "t_uint256"
      },
      {
        "astId": 18410,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "tusdTokenDenominator",
        "offset": 0,
        "slot": "356",
        "type": "t_uint256"
      },
      {
        "astId": 18413,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "gauge",
        "offset": 0,
        "slot": "357",
        "type": "t_contract(IDystopiaLP)33809"
      },
      {
        "astId": 18416,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "dystPair",
        "offset": 0,
        "slot": "358",
        "type": "t_contract(IDystopiaLP)33809"
      },
      {
        "astId": 18419,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "359",
        "type": "t_contract(IPriceFeed)30770"
      },
      {
        "astId": 18422,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "oracleTusd",
        "offset": 0,
        "slot": "360",
        "type": "t_contract(IPriceFeed)30770"
      },
      {
        "astId": 18425,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "penToken",
        "offset": 0,
        "slot": "361",
        "type": "t_contract(IERC20)2512"
      },
      {
        "astId": 18428,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "userProxy",
        "offset": 0,
        "slot": "362",
        "type": "t_contract(IUserProxy)35361"
      },
      {
        "astId": 18431,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "penLens",
        "offset": 0,
        "slot": "363",
        "type": "t_contract(IPenLens)35060"
      },
      {
        "astId": 18434,
        "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
        "label": "swapper",
        "offset": 0,
        "slot": "364",
        "type": "t_contract(ISwapper)44459"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDystopiaLP)33809": {
        "encoding": "inplace",
        "label": "contract IDystopiaLP",
        "numberOfBytes": "20"
      },
      "t_contract(IDystopiaRouter)33925": {
        "encoding": "inplace",
        "label": "contract IDystopiaRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2512": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPenLens)35060": {
        "encoding": "inplace",
        "label": "contract IPenLens",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)30770": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapper)44459": {
        "encoding": "inplace",
        "label": "contract ISwapper",
        "numberOfBytes": "20"
      },
      "t_contract(IUserProxy)35361": {
        "encoding": "inplace",
        "label": "contract IUserProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyDystopiaUsdcTusd.sol:StrategyDystopiaUsdcTusd",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}