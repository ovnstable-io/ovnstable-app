{
  "address": "0x3E018a972ed429B01d11BdA4d19E6902680104c8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aerodromeRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cDai",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolSonneUsdbc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolUsdbcDai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdbc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sonne",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cDai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unitroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aerodromeRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolSonneUsdbc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolUsdbcDai",
              "type": "address"
            }
          ],
          "internalType": "struct StrategySonneDai.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sonne",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unitroller",
      "outputs": [
        {
          "internalType": "contract Unitroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdbc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "0865e1f56ec31e8b38ea2e8525443dfd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aerodromeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDai\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSonneUsdbc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUsdbcDai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdbc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sonne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unitroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aerodromeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolSonneUsdbc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolUsdbcDai\",\"type\":\"address\"}],\"internalType\":\"struct StrategySonneDai.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sonne\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitroller\",\"outputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdbc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dai/StrategySonneDai.sol\":\"StrategySonneDai\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Aerodrome.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\ninterface IRouter {\\r\\n    struct Route {\\r\\n        address from;\\r\\n        address to;\\r\\n        bool stable;\\r\\n        address factory;\\r\\n    }\\r\\n\\r\\n    error ETHTransferFailed();\\r\\n    error Expired();\\r\\n    error InsufficientAmount();\\r\\n    error InsufficientAmountA();\\r\\n    error InsufficientAmountB();\\r\\n    error InsufficientAmountADesired();\\r\\n    error InsufficientAmountBDesired();\\r\\n    error InsufficientAmountAOptimal();\\r\\n    error InsufficientLiquidity();\\r\\n    error InsufficientOutputAmount();\\r\\n    error InvalidAmountInForETHDeposit();\\r\\n    error InvalidTokenInForETHDeposit();\\r\\n    error InvalidPath();\\r\\n    error InvalidRouteA();\\r\\n    error InvalidRouteB();\\r\\n    error OnlyWETH();\\r\\n    error PoolDoesNotExist();\\r\\n    error PoolFactoryDoesNotExist();\\r\\n    error SameAddresses();\\r\\n    error ZeroAddress();\\r\\n\\r\\n    /// @notice Address of FactoryRegistry.sol\\r\\n    function factoryRegistry() external view returns (address);\\r\\n\\r\\n    /// @notice Address of Protocol PoolFactory.sol\\r\\n    function defaultFactory() external view returns (address);\\r\\n\\r\\n    /// @notice Address of Voter.sol\\r\\n    function voter() external view returns (address);\\r\\n\\r\\n    /// @notice Interface of WETH contract used for WETH => ETH wrapping/unwrapping\\r\\n    function weth() external view returns (IWETH);\\r\\n\\r\\n    /// @dev Represents Ether. Used by zapper to determine whether to return assets as ETH/WETH.\\r\\n    function ETHER() external view returns (address);\\r\\n\\r\\n    /// @dev Struct containing information necessary to zap in and out of pools\\r\\n    /// @param tokenA           .\\r\\n    /// @param tokenB           .\\r\\n    /// @param stable           Stable or volatile pool\\r\\n    /// @param factory          factory of pool\\r\\n    /// @param amountOutMinA    Minimum amount expected from swap leg of zap via routesA\\r\\n    /// @param amountOutMinB    Minimum amount expected from swap leg of zap via routesB\\r\\n    /// @param amountAMin       Minimum amount of tokenA expected from liquidity leg of zap\\r\\n    /// @param amountBMin       Minimum amount of tokenB expected from liquidity leg of zap\\r\\n    struct Zap {\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        bool stable;\\r\\n        address factory;\\r\\n        uint256 amountOutMinA;\\r\\n        uint256 amountOutMinB;\\r\\n        uint256 amountAMin;\\r\\n        uint256 amountBMin;\\r\\n    }\\r\\n\\r\\n    /// @notice Sort two tokens by which address value is less than the other\\r\\n    /// @param tokenA   Address of token to sort\\r\\n    /// @param tokenB   Address of token to sort\\r\\n    /// @return token0  Lower address value between tokenA and tokenB\\r\\n    /// @return token1  Higher address value between tokenA and tokenB\\r\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\r\\n\\r\\n    /// @notice Calculate the address of a pool by its' factory.\\r\\n    ///         Used by all Router functions containing a `Route[]` or `_factory` argument.\\r\\n    ///         Reverts if _factory is not approved by the FactoryRegistry\\r\\n    /// @dev Returns a randomly generated address for a nonexistent pool\\r\\n    /// @param tokenA   Address of token to query\\r\\n    /// @param tokenB   Address of token to query\\r\\n    /// @param stable   True if pool is stable, false if volatile\\r\\n    /// @param _factory Address of factory which created the pool\\r\\n    function poolFor(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        address _factory\\r\\n    ) external view returns (address pool);\\r\\n\\r\\n    /// @notice Fetch and sort the reserves for a pool\\r\\n    /// @param tokenA       .\\r\\n    /// @param tokenB       .\\r\\n    /// @param stable       True if pool is stable, false if volatile\\r\\n    /// @param _factory     Address of PoolFactory for tokenA and tokenB\\r\\n    /// @return reserveA    Amount of reserves of the sorted token A\\r\\n    /// @return reserveB    Amount of reserves of the sorted token B\\r\\n    function getReserves(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        address _factory\\r\\n    ) external view returns (uint256 reserveA, uint256 reserveB);\\r\\n\\r\\n    /// @notice Perform chained getAmountOut calculations on any number of pools\\r\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n\\r\\n    /// @notice Quote the amount deposited into a Pool\\r\\n    /// @param tokenA           .\\r\\n    /// @param tokenB           .\\r\\n    /// @param stable           True if pool is stable, false if volatile\\r\\n    /// @param _factory         Address of PoolFactory for tokenA and tokenB\\r\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\r\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\r\\n    /// @return amountA         Amount of tokenA to actually deposit\\r\\n    /// @return amountB         Amount of tokenB to actually deposit\\r\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\r\\n    function quoteAddLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        address _factory,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired\\r\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    /// @notice Quote the amount of liquidity removed from a Pool\\r\\n    /// @param tokenA       .\\r\\n    /// @param tokenB       .\\r\\n    /// @param stable       True if pool is stable, false if volatile\\r\\n    /// @param _factory     Address of PoolFactory for tokenA and tokenB\\r\\n    /// @param liquidity    Amount of liquidity to remove\\r\\n    /// @return amountA     Amount of tokenA received\\r\\n    /// @return amountB     Amount of tokenB received\\r\\n    function quoteRemoveLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        address _factory,\\r\\n        uint256 liquidity\\r\\n    ) external view returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /// @notice Add liquidity of two tokens to a Pool\\r\\n    /// @param tokenA           .\\r\\n    /// @param tokenB           .\\r\\n    /// @param stable           True if pool is stable, false if volatile\\r\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\r\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\r\\n    /// @param amountAMin       Minimum amount of tokenA to deposit\\r\\n    /// @param amountBMin       Minimum amount of tokenB to deposit\\r\\n    /// @param to               Recipient of liquidity token\\r\\n    /// @param deadline         Deadline to receive liquidity\\r\\n    /// @return amountA         Amount of tokenA to actually deposit\\r\\n    /// @return amountB         Amount of tokenB to actually deposit\\r\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\\r\\n    /// @param token                .\\r\\n    /// @param stable               True if pool is stable, false if volatile\\r\\n    /// @param amountTokenDesired   Amount of token desired to deposit\\r\\n    /// @param amountTokenMin       Minimum amount of token to deposit\\r\\n    /// @param amountETHMin         Minimum amount of ETH to deposit\\r\\n    /// @param to                   Recipient of liquidity token\\r\\n    /// @param deadline             Deadline to add liquidity\\r\\n    /// @return amountToken         Amount of token to actually deposit\\r\\n    /// @return amountETH           Amount of tokenETH to actually deposit\\r\\n    /// @return liquidity           Amount of liquidity token returned from deposit\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    // **** REMOVE LIQUIDITY ****\\r\\n\\r\\n    /// @notice Remove liquidity of two tokens from a Pool\\r\\n    /// @param tokenA       .\\r\\n    /// @param tokenB       .\\r\\n    /// @param stable       True if pool is stable, false if volatile\\r\\n    /// @param liquidity    Amount of liquidity to remove\\r\\n    /// @param amountAMin   Minimum amount of tokenA to receive\\r\\n    /// @param amountBMin   Minimum amount of tokenB to receive\\r\\n    /// @param to           Recipient of tokens received\\r\\n    /// @param deadline     Deadline to remove liquidity\\r\\n    /// @return amountA     Amount of tokenA received\\r\\n    /// @return amountB     Amount of tokenB received\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\\r\\n    /// @param token            .\\r\\n    /// @param stable           True if pool is stable, false if volatile\\r\\n    /// @param liquidity        Amount of liquidity to remove\\r\\n    /// @param amountTokenMin   Minimum amount of token to receive\\r\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\r\\n    /// @param to               Recipient of liquidity token\\r\\n    /// @param deadline         Deadline to receive liquidity\\r\\n    /// @return amountToken     Amount of token received\\r\\n    /// @return amountETH       Amount of ETH received\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\\r\\n    /// @param token            .\\r\\n    /// @param stable           True if pool is stable, false if volatile\\r\\n    /// @param liquidity        Amount of liquidity to remove\\r\\n    /// @param amountTokenMin   Minimum amount of token to receive\\r\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\r\\n    /// @param to               Recipient of liquidity token\\r\\n    /// @param deadline         Deadline to receive liquidity\\r\\n    /// @return amountETH       Amount of ETH received\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    // **** SWAP ****\\r\\n\\r\\n    /// @notice Swap one token for another\\r\\n    /// @param amountIn     Amount of token in\\r\\n    /// @param amountOutMin Minimum amount of desired token received\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    /// @return amounts     Array of amounts returned per route\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    /// @notice Swap ETH for a token\\r\\n    /// @param amountOutMin Minimum amount of desired token received\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    /// @return amounts     Array of amounts returned per route\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    /// @notice Swap a token for WETH (returned as ETH)\\r\\n    /// @param amountIn     Amount of token in\\r\\n    /// @param amountOutMin Minimum amount of desired ETH\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    /// @return amounts     Array of amounts returned per route\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    /// @notice Swap one token for another without slippage protection\\r\\n    /// @return amounts     Array of amounts to swap  per route\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    function UNSAFE_swapExactTokensForTokens(\\r\\n        uint256[] memory amounts,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\r\\n\\r\\n    /// @notice Swap one token for another supporting fee-on-transfer tokens\\r\\n    /// @param amountIn     Amount of token in\\r\\n    /// @param amountOutMin Minimum amount of desired token received\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Swap ETH for a token supporting fee-on-transfer tokens\\r\\n    /// @param amountOutMin Minimum amount of desired token received\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Swap a token for WETH (returned as ETH) supporting fee-on-transfer tokens\\r\\n    /// @param amountIn     Amount of token in\\r\\n    /// @param amountOutMin Minimum amount of desired ETH\\r\\n    /// @param routes       Array of trade routes used in the swap\\r\\n    /// @param to           Recipient of the tokens received\\r\\n    /// @param deadline     Deadline to receive tokens\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Zap a token A into a pool (B, C). (A can be equal to B or C).\\r\\n    ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\r\\n    ///         Slippage is required for the initial swap.\\r\\n    ///         Additional slippage may be required when adding liquidity as the\\r\\n    ///         price of the token may have changed.\\r\\n    /// @param tokenIn      Token you are zapping in from (i.e. input token).\\r\\n    /// @param amountInA    Amount of input token you wish to send down routesA\\r\\n    /// @param amountInB    Amount of input token you wish to send down routesB\\r\\n    /// @param zapInPool    Contains zap struct information. See Zap struct.\\r\\n    /// @param routesA      Route used to convert input token to tokenA\\r\\n    /// @param routesB      Route used to convert input token to tokenB\\r\\n    /// @param to           Address you wish to mint liquidity to.\\r\\n    /// @param stake        Auto-stake liquidity in corresponding gauge.\\r\\n    /// @return liquidity   Amount of LP tokens created from zapping in.\\r\\n    function zapIn(\\r\\n        address tokenIn,\\r\\n        uint256 amountInA,\\r\\n        uint256 amountInB,\\r\\n        Zap calldata zapInPool,\\r\\n        Route[] calldata routesA,\\r\\n        Route[] calldata routesB,\\r\\n        address to,\\r\\n        bool stake\\r\\n    ) external payable returns (uint256 liquidity);\\r\\n\\r\\n    /// @notice Zap out a pool (B, C) into A.\\r\\n    ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\r\\n    ///         Slippage is required for the removal of liquidity.\\r\\n    ///         Additional slippage may be required on the swap as the\\r\\n    ///         price of the token may have changed.\\r\\n    /// @param tokenOut     Token you are zapping out to (i.e. output token).\\r\\n    /// @param liquidity    Amount of liquidity you wish to remove.\\r\\n    /// @param zapOutPool   Contains zap struct information. See Zap struct.\\r\\n    /// @param routesA      Route used to convert tokenA into output token.\\r\\n    /// @param routesB      Route used to convert tokenB into output token.\\r\\n    function zapOut(\\r\\n        address tokenOut,\\r\\n        uint256 liquidity,\\r\\n        Zap calldata zapOutPool,\\r\\n        Route[] calldata routesA,\\r\\n        Route[] calldata routesB\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Used to generate params required for zapping in.\\r\\n    ///         Zap in => remove liquidity then swap.\\r\\n    ///         Apply slippage to expected swap values to account for changes in reserves in between.\\r\\n    /// @dev Output token refers to the token you want to zap in from.\\r\\n    /// @param tokenA           .\\r\\n    /// @param tokenB           .\\r\\n    /// @param stable           .\\r\\n    /// @param _factory         .\\r\\n    /// @param amountInA        Amount of input token you wish to send down routesA\\r\\n    /// @param amountInB        Amount of input token you wish to send down routesB\\r\\n    /// @param routesA          Route used to convert input token to tokenA\\r\\n    /// @param routesB          Route used to convert input token to tokenB\\r\\n    /// @return amountOutMinA   Minimum output expected from swapping input token to tokenA.\\r\\n    /// @return amountOutMinB   Minimum output expected from swapping input token to tokenB.\\r\\n    /// @return amountAMin      Minimum amount of tokenA expected from depositing liquidity.\\r\\n    /// @return amountBMin      Minimum amount of tokenB expected from depositing liquidity.\\r\\n    function generateZapInParams(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        address _factory,\\r\\n        uint256 amountInA,\\r\\n        uint256 amountInB,\\r\\n        Route[] calldata routesA,\\r\\n        Route[] calldata routesB\\r\\n    ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\r\\n\\r\\n    /// @notice Used to generate params required for zapping out.\\r\\n    ///         Zap out => swap then add liquidity.\\r\\n    ///         Apply slippage to expected liquidity values to account for changes in reserves in between.\\r\\n    /// @dev Output token refers to the token you want to zap out of.\\r\\n    /// @param tokenA           .\\r\\n    /// @param tokenB           .\\r\\n    /// @param stable           .\\r\\n    /// @param _factory         .\\r\\n    /// @param liquidity        Amount of liquidity being zapped out of into a given output token.\\r\\n    /// @param routesA          Route used to convert tokenA into output token.\\r\\n    /// @param routesB          Route used to convert tokenB into output token.\\r\\n    /// @return amountOutMinA   Minimum output expected from swapping tokenA into output token.\\r\\n    /// @return amountOutMinB   Minimum output expected from swapping tokenB into output token.\\r\\n    /// @return amountAMin      Minimum amount of tokenA expected from withdrawing liquidity.\\r\\n    /// @return amountBMin      Minimum amount of tokenB expected from withdrawing liquidity.\\r\\n    function generateZapOutParams(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        address _factory,\\r\\n        uint256 liquidity,\\r\\n        Route[] calldata routesA,\\r\\n        Route[] calldata routesB\\r\\n    ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\r\\n\\r\\n    /// @notice Used by zapper to determine appropriate ratio of A to B to deposit liquidity. Assumes stable pool.\\r\\n    /// @dev Returns stable liquidity ratio of B to (A + B).\\r\\n    ///      E.g. if ratio is 0.4, it means there is more of A than there is of B.\\r\\n    ///      Therefore you should deposit more of token A than B.\\r\\n    /// @param tokenA   tokenA of stable pool you are zapping into.\\r\\n    /// @param tokenB   tokenB of stable pool you are zapping into.\\r\\n    /// @param factory  Factory that created stable pool.\\r\\n    /// @return ratio   Ratio of token0 to token1 required to deposit into zap.\\r\\n    function quoteStableLiquidityRatio(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address factory\\r\\n    ) external view returns (uint256 ratio);\\r\\n}\\r\\n\\r\\ninterface IPool is IERC20Metadata {\\r\\n    error DepositsNotEqual();\\r\\n    error BelowMinimumK();\\r\\n    error FactoryAlreadySet();\\r\\n    error InsufficientLiquidity();\\r\\n    error InsufficientLiquidityMinted();\\r\\n    error InsufficientLiquidityBurned();\\r\\n    error InsufficientOutputAmount();\\r\\n    error InsufficientInputAmount();\\r\\n    error IsPaused();\\r\\n    error InvalidTo();\\r\\n    error K();\\r\\n    error NotEmergencyCouncil();\\r\\n\\r\\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        address indexed to,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out\\r\\n    );\\r\\n    event Sync(uint256 reserve0, uint256 reserve1);\\r\\n    event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    // Struct to capture time period obervations every 30 minutes, used for local oracles\\r\\n    struct Observation {\\r\\n        uint256 timestamp;\\r\\n        uint256 reserve0Cumulative;\\r\\n        uint256 reserve1Cumulative;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the decimal (dec), reserves (r), stable (st), and tokens (t) of token0 and token1\\r\\n    function metadata()\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1);\\r\\n\\r\\n    /// @notice Claim accumulated but unclaimed fees (claimable0 and claimable1)\\r\\n    function claimFees() external returns (uint256, uint256);\\r\\n\\r\\n    /// @notice Returns [token0, token1]\\r\\n    function tokens() external view returns (address, address);\\r\\n\\r\\n    /// @notice Address of token in the pool with the lower address value\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice Address of token in the poool with the higher address value\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice Address of linked PoolFees.sol\\r\\n    function poolFees() external view returns (address);\\r\\n\\r\\n    /// @notice Address of PoolFactory that created this contract\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice Capture oracle reading every 30 minutes (1800 seconds)\\r\\n    function periodSize() external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of token0 in pool\\r\\n    function reserve0() external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of token1 in pool\\r\\n    function reserve1() external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp of last update to pool\\r\\n    function blockTimestampLast() external view returns (uint256);\\r\\n\\r\\n    /// @notice Cumulative of reserve0 factoring in time elapsed\\r\\n    function reserve0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    /// @notice Cumulative of reserve1 factoring in time elapsed\\r\\n    function reserve1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    /// @notice Accumulated fees of token0 (global)\\r\\n    function index0() external view returns (uint256);\\r\\n\\r\\n    /// @notice Accumulated fees of token1 (global)\\r\\n    function index1() external view returns (uint256);\\r\\n\\r\\n    /// @notice Get an LP's relative index0 to index0\\r\\n    function supplyIndex0(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Get an LP's relative index1 to index1\\r\\n    function supplyIndex1(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token0 for an LP\\r\\n    function claimable0(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token1 for an LP\\r\\n    function claimable1(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns the value of K in the Pool, based on its reserves.\\r\\n    function getK() external returns (uint256);\\r\\n\\r\\n    /// @notice Set pool name\\r\\n    ///         Only callable by Voter.emergencyCouncil()\\r\\n    /// @param __name String of new name\\r\\n    function setName(string calldata __name) external;\\r\\n\\r\\n    /// @notice Set pool symbol\\r\\n    ///         Only callable by Voter.emergencyCouncil()\\r\\n    /// @param __symbol String of new symbol\\r\\n    function setSymbol(string calldata __symbol) external;\\r\\n\\r\\n    /// @notice Get the number of observations recorded\\r\\n    function observationLength() external view returns (uint256);\\r\\n\\r\\n    /// @notice Get the value of the most recent observation\\r\\n    function lastObservation() external view returns (Observation memory);\\r\\n\\r\\n    /// @notice True if pool is stable, false if volatile\\r\\n    function stable() external view returns (bool);\\r\\n\\r\\n    /// @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices()\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp);\\r\\n\\r\\n    /// @notice Provides twap price with user configured granularity, up to the full window size\\r\\n    /// @param tokenIn .\\r\\n    /// @param amountIn .\\r\\n    /// @param granularity .\\r\\n    /// @return amountOut .\\r\\n    function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Returns a memory set of TWAP prices\\r\\n    ///         Same as calling sample(tokenIn, amountIn, points, 1)\\r\\n    /// @param tokenIn .\\r\\n    /// @param amountIn .\\r\\n    /// @param points Number of points to return\\r\\n    /// @return Array of TWAP prices\\r\\n    function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory);\\r\\n\\r\\n    /// @notice Same as prices with with an additional window argument.\\r\\n    ///         Window = 2 means 2 * 30min (or 1 hr) between observations\\r\\n    /// @param tokenIn .\\r\\n    /// @param amountIn .\\r\\n    /// @param points .\\r\\n    /// @param window .\\r\\n    /// @return Array of TWAP prices\\r\\n    function sample(\\r\\n        address tokenIn,\\r\\n        uint256 amountIn,\\r\\n        uint256 points,\\r\\n        uint256 window\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /// @notice This low-level function should be called from a contract which performs important safety checks\\r\\n    /// @param amount0Out   Amount of token0 to send to `to`\\r\\n    /// @param amount1Out   Amount of token1 to send to `to`\\r\\n    /// @param to           Address to recieve the swapped output\\r\\n    /// @param data         Additional calldata for flashloans\\r\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    /// @notice This low-level function should be called from a contract which performs important safety checks\\r\\n    ///         standard uniswap v2 implementation\\r\\n    /// @param to Address to receive token0 and token1 from burning the pool token\\r\\n    /// @return amount0 Amount of token0 returned\\r\\n    /// @return amount1 Amount of token1 returned\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice This low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\\r\\n    ///         standard uniswap v2 implementation\\r\\n    /// @param to           Address to receive the minted LP token\\r\\n    /// @return liquidity   Amount of LP token minted\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    /// @notice Update reserves and, on the first call per block, price accumulators\\r\\n    /// @return _reserve0 .\\r\\n    /// @return _reserve1 .\\r\\n    /// @return _blockTimestampLast .\\r\\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast);\\r\\n\\r\\n    /// @notice Get the amount of tokenOut given the amount of tokenIn\\r\\n    /// @param amountIn Amount of token in\\r\\n    /// @param tokenIn  Address of token\\r\\n    /// @return Amount out\\r\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\r\\n\\r\\n    /// @notice Force balances to match reserves\\r\\n    /// @param to Address to receive any skimmed rewards\\r\\n    function skim(address to) external;\\r\\n\\r\\n    /// @notice Force reserves to match balances\\r\\n    function sync() external;\\r\\n\\r\\n    /// @notice Called on pool creation by PoolFactory\\r\\n    /// @param _token0 Address of token0\\r\\n    /// @param _token1 Address of token1\\r\\n    /// @param _stable True if stable, false if volatile\\r\\n    function initialize(address _token0, address _token1, bool _stable) external;\\r\\n}\\r\\n\\r\\ninterface IGauge {\\r\\n    error NotAlive();\\r\\n    error NotAuthorized();\\r\\n    error NotVoter();\\r\\n    error NotTeam();\\r\\n    error RewardRateTooHigh();\\r\\n    error ZeroAmount();\\r\\n    error ZeroRewardRate();\\r\\n\\r\\n    event Deposit(address indexed from, address indexed to, uint256 amount);\\r\\n    event Withdraw(address indexed from, uint256 amount);\\r\\n    event NotifyReward(address indexed from, uint256 amount);\\r\\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\\r\\n    event ClaimRewards(address indexed from, uint256 amount);\\r\\n\\r\\n    /// @notice Address of the pool LP token which is deposited (staked) for rewards\\r\\n    function stakingToken() external view returns (address);\\r\\n\\r\\n    /// @notice Address of the token (AERO) rewarded to stakers\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    /// @notice Address of the FeesVotingReward contract linked to the gauge\\r\\n    function feesVotingReward() external view returns (address);\\r\\n\\r\\n    /// @notice Address of Protocol Voter\\r\\n    function voter() external view returns (address);\\r\\n\\r\\n    /// @notice Address of Protocol Voting Escrow\\r\\n    function ve() external view returns (address);\\r\\n\\r\\n    /// @notice Returns if gauge is linked to a legitimate Protocol pool\\r\\n    function isPool() external view returns (bool);\\r\\n\\r\\n    /// @notice Timestamp end of current rewards period\\r\\n    function periodFinish() external view returns (uint256);\\r\\n\\r\\n    /// @notice Current reward rate of rewardToken to distribute per second\\r\\n    function rewardRate() external view returns (uint256);\\r\\n\\r\\n    /// @notice Most recent timestamp contract has updated state\\r\\n    function lastUpdateTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Most recent stored value of rewardPerToken\\r\\n    function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of stakingToken deposited for rewards\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Get the amount of stakingToken deposited by an account\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Cached rewardPerTokenStored for an account based on their most recent action\\r\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice Cached amount of rewardToken earned for an account\\r\\n    function rewards(address) external view returns (uint256);\\r\\n\\r\\n    /// @notice View to see the rewardRate given the timestamp of the start of the epoch\\r\\n    function rewardRateByEpoch(uint256) external view returns (uint256);\\r\\n\\r\\n    /// @notice Cached amount of fees generated from the Pool linked to the Gauge of token0\\r\\n    function fees0() external view returns (uint256);\\r\\n\\r\\n    /// @notice Cached amount of fees generated from the Pool linked to the Gauge of token1\\r\\n    function fees1() external view returns (uint256);\\r\\n\\r\\n    /// @notice Get the current reward rate per unit of stakingToken deposited\\r\\n    function rewardPerToken() external view returns (uint256 _rewardPerToken);\\r\\n\\r\\n    /// @notice Returns the last time the reward was modified or periodFinish if the reward has ended\\r\\n    function lastTimeRewardApplicable() external view returns (uint256 _time);\\r\\n\\r\\n    /// @notice Returns accrued balance to date from last claim / first deposit.\\r\\n    function earned(address _account) external view returns (uint256 _earned);\\r\\n\\r\\n    /// @notice Total amount of rewardToken to distribute for the current rewards period\\r\\n    function left() external view returns (uint256 _left);\\r\\n\\r\\n    /// @notice Retrieve rewards for an address.\\r\\n    /// @dev Throws if not called by same address or voter.\\r\\n    /// @param _account .\\r\\n    function getReward(address _account) external;\\r\\n\\r\\n    /// @notice Deposit LP tokens into gauge for msg.sender\\r\\n    /// @param _amount .\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    /// @notice Deposit LP tokens into gauge for any user\\r\\n    /// @param _amount .\\r\\n    /// @param _recipient Recipient to give balance to\\r\\n    function deposit(uint256 _amount, address _recipient) external;\\r\\n\\r\\n    /// @notice Withdraw LP tokens for user\\r\\n    /// @param _amount .\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    /// @dev Notifies gauge of gauge rewards. Assumes gauge reward tokens is 18 decimals.\\r\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\r\\n    function notifyRewardAmount(uint256 amount) external;\\r\\n\\r\\n    /// @dev Notifies gauge of gauge rewards without distributing its fees.\\r\\n    ///      Assumes gauge reward tokens is 18 decimals.\\r\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\r\\n    function notifyRewardWithoutClaim(uint256 amount) external;\\r\\n}\\r\\n\\r\\nlibrary AerodromeLibrary {\\r\\n\\r\\n    function getAmountsOut(\\r\\n        address router,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        address pool0,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IRouter.Route[] memory routes = new IRouter.Route[](1);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = outputToken;\\r\\n        routes[0].stable = IPool(pool0).stable();\\r\\n        routes[0].factory = IPool(pool0).factory();\\r\\n\\r\\n        uint256[] memory amounts = IRouter(router).getAmountsOut(amountInput, routes);\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(\\r\\n        address router,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        address pool0,\\r\\n        address pool1,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IRouter.Route[] memory routes = new IRouter.Route[](2);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = middleToken;\\r\\n        routes[0].stable = IPool(pool0).stable();\\r\\n        routes[0].factory = IPool(pool0).factory();\\r\\n        routes[1].from = middleToken;\\r\\n        routes[1].to = outputToken;\\r\\n        routes[1].stable = IPool(pool1).stable();\\r\\n        routes[1].factory = IPool(pool1).factory();\\r\\n\\r\\n        uint256[] memory amounts = IRouter(router).getAmountsOut(amountInput, routes);\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function singleSwap(\\r\\n        address router,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        address pool0,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(router, amountInput);\\r\\n\\r\\n        IRouter.Route[] memory routes = new IRouter.Route[](1);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = outputToken;\\r\\n        routes[0].stable = IPool(pool0).stable();\\r\\n        routes[0].factory = IPool(pool0).factory();\\r\\n\\r\\n        uint256[] memory amounts = IRouter(router).swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            routes,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        address router,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        address pool0,\\r\\n        address pool1,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(router, amountInput);\\r\\n\\r\\n        IRouter.Route[] memory routes = new IRouter.Route[](2);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = middleToken;\\r\\n        routes[0].stable = IPool(pool0).stable();\\r\\n        routes[0].factory = IPool(pool0).factory();\\r\\n        routes[1].from = middleToken;\\r\\n        routes[1].to = outputToken;\\r\\n        routes[1].stable = IPool(pool1).stable();\\r\\n        routes[1].factory = IPool(pool1).factory();\\r\\n\\r\\n        uint256[] memory amounts = IRouter(router).swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            routes,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x591b7feba3353652b1f7583155505cc93c9c3e56866e172e68e72550fe3e63b4\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Sonne.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface Unitroller {\\r\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) external returns (uint);\\r\\n    function claimComp(address holder, CToken[] memory cTokens) external;\\r\\n    function markets(address ctoken) external view returns ( bool, uint256, bool );\\r\\n    function getAccountLiquidity(address account) external view returns (uint, uint256, uint);\\r\\n}\\r\\n\\r\\ninterface CToken {\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function comptroller() external view returns (address);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint,uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function balanceOfUnderlying(address account) external view returns (uint);\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function borrow(uint borrowAmount) external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x5bf9ad594c8cd01e89e0c7570e175f9c593fc2c0f034337dbb99779612e196dd\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IControlRole.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n    uint256 public swapSlippageBP;\\r\\n    uint256 public navSlippageBP;\\r\\n    uint256 public stakeSlippageBP;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        swapSlippageBP = 20;\\r\\n        navSlippageBP = 20;\\r\\n        stakeSlippageBP = 4;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortfolioAgent() {\\r\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\r\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setSlippages(\\r\\n        uint256 _swapSlippageBP,\\r\\n        uint256 _navSlippageBP,\\r\\n        uint256 _stakeSlippageBP\\r\\n    ) public onlyPortfolioAgent {\\r\\n        swapSlippageBP = _swapSlippageBP;\\r\\n        navSlippageBP = _navSlippageBP;\\r\\n        stakeSlippageBP = _stakeSlippageBP;\\r\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        uint256 withdrawAmount;\\r\\n        uint256 rewardAmount;\\r\\n        if (_targetIsZero) {\\r\\n            rewardAmount = _claimRewards(_beneficiary);\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 rewardAmount = _claimRewards(_to);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xdad1bb1765b23745141b982d10052842e49f7c0e2b81077bf4a15fa09896a425\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IControlRole {\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf45e3261bc0e319aeffb0f00b6843bb6398a044dd710794a5f8088a426ca84c\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf24a033c2df4207da5f2cdcf30ae65632f0063483573ddaeb92a766f8d6556d0\",\"license\":\"GPL-3.0\"},\"contracts/dai/StrategySonneDai.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Sonne.sol\\\";\\r\\nimport {AerodromeLibrary} from \\\"@overnight-contracts/connectors/contracts/stuff/Aerodrome.sol\\\";\\r\\n\\r\\ncontract StrategySonneDai is Strategy {\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address dai;\\r\\n        address usdbc;\\r\\n        address sonne;\\r\\n        address cDai;\\r\\n        address unitroller;\\r\\n        address aerodromeRouter;\\r\\n        address poolSonneUsdbc;\\r\\n        address poolUsdbcDai;\\r\\n    }\\r\\n\\r\\n    // --- params\\r\\n\\r\\n    IERC20 public dai;\\r\\n    IERC20 public usdbc;\\r\\n    IERC20 public sonne;\\r\\n    CToken public cDai;\\r\\n    Unitroller public unitroller;\\r\\n    address public aerodromeRouter;\\r\\n    address public poolSonneUsdbc;\\r\\n    address public poolUsdbcDai;\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n    // --- Setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        require(params.dai != address(0), 'dai is empty');\\r\\n        require(params.usdbc != address(0), 'usdbc is empty');\\r\\n        require(params.sonne != address(0), 'sonne is empty');\\r\\n        require(params.cDai != address(0), 'cDai is empty');\\r\\n        require(params.unitroller != address(0), 'unitroller is empty');\\r\\n        require(params.aerodromeRouter != address(0), 'aerodromeRouter is empty');\\r\\n        require(params.poolSonneUsdbc != address(0), 'poolSonneUsdbc is empty');\\r\\n        require(params.poolUsdbcDai != address(0), 'poolUsdbcDai is empty');\\r\\n\\r\\n        dai = IERC20(params.dai);\\r\\n        usdbc = IERC20(params.usdbc);\\r\\n        sonne = IERC20(params.sonne);\\r\\n        cDai = CToken(params.cDai);\\r\\n        unitroller = Unitroller(params.unitroller);\\r\\n        aerodromeRouter = params.aerodromeRouter;\\r\\n        poolSonneUsdbc = params.poolSonneUsdbc;\\r\\n        poolUsdbcDai = params.poolUsdbcDai;\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        uint256 daiBalance = dai.balanceOf(address(this));\\r\\n        dai.approve(address(cDai), daiBalance);\\r\\n        cDai.mint(daiBalance);\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n        cDai.redeemUnderlying(_amount);\\r\\n        return dai.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n        cDai.redeem(cDai.balanceOf(address(this)));\\r\\n        return dai.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function _totalValue() internal view returns (uint256) {\\r\\n        return dai.balanceOf(address(this)) + cDai.balanceOf(address(this)) * cDai.exchangeRateStored() / 1e18;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        // claim rewards\\r\\n        if (cDai.balanceOf(address(this)) > 0) {\\r\\n            CToken[] memory cTokens = new CToken[](1);\\r\\n            cTokens[0] = cDai;\\r\\n            unitroller.claimComp(address(this), cTokens);\\r\\n        }\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 totalDai;\\r\\n\\r\\n        uint256 sonneBalance = sonne.balanceOf(address(this));\\r\\n        if (sonneBalance > 0) {\\r\\n            uint256 sonneSellAmount = AerodromeLibrary.getAmountsOut(\\r\\n                aerodromeRouter,\\r\\n                address(sonne),\\r\\n                address(usdbc),\\r\\n                poolSonneUsdbc,\\r\\n                sonneBalance\\r\\n            );\\r\\n            if (sonneSellAmount > 0) {\\r\\n                totalDai += AerodromeLibrary.multiSwap(\\r\\n                    aerodromeRouter,\\r\\n                    address(sonne),\\r\\n                    address(usdbc),\\r\\n                    address(dai),\\r\\n                    poolSonneUsdbc,\\r\\n                    poolUsdbcDai,\\r\\n                    sonneBalance,\\r\\n                    sonneSellAmount * 1e12 * 99 / 100,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (totalDai > 0) {\\r\\n            dai.transfer(_to, totalDai);\\r\\n        }\\r\\n\\r\\n        return totalDai;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x80bff6a3095591e79971060eefdcb5941f7286f6e851af248aba0458fc5f0f6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b6200178a1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6137e46200018e6000396000818161070501528181610745015281816107e50152818161082501526108b401526137e46000f3fe6080604052600436106101ee5760003560e01c80638129fc1c1161010d578063ae30c110116100a0578063d547741f1161006f578063d547741f14610565578063e18e3a6814610585578063ef5cfb8c146105a6578063f4b9fa75146105c6578063f6f6b881146105e757600080fd5b8063ae30c110146104ed578063bad1d3da1461050d578063bf52e0801461052e578063c0c2ae501461054457600080fd5b8063a217fddf116100dc578063a217fddf14610498578063a3673b38146102d6578063a440b21a146104ad578063adc9772e146104cd57600080fd5b80638129fc1c1461042157806391d148541461043657806398a460aa146104565780639b089d551461047757600080fd5b80633659cfe6116101855780635ca558f8116101545780635ca558f8146103955780635dbd733a146103ab578063620b75df146103df5780637d5f5802146103ff57600080fd5b80633659cfe61461032d5780634f1ef2861461034d57806352d1902d14610360578063561f07731461037557600080fd5b80632506e531116101c15780632506e531146102b55780632576e65a146102d65780632f2ff15d146102eb57806336568abe1461030d57600080fd5b806301ffc9a7146101f35780630bc798d214610228578063119cd87914610261578063248a9ca314610285575b600080fd5b3480156101ff57600080fd5b5061021361020e366004613292565b610607565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061012e54610249906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561026d57600080fd5b5061027760fd5481565b60405190815260200161021f565b34801561029157600080fd5b506102776102a0366004613230565b60009081526065602052604090206001015490565b3480156102c157600080fd5b5061013354610249906001600160a01b031681565b3480156102e257600080fd5b5061027761063e565b3480156102f757600080fd5b5061030b610306366004613262565b61064d565b005b34801561031957600080fd5b5061030b610328366004613262565b610677565b34801561033957600080fd5b5061030b610348366004613005565b6106fa565b61030b61035b36600461303f565b6107da565b34801561036c57600080fd5b506102776108a7565b34801561038157600080fd5b5061030b6103903660046132bc565b61095a565b3480156103a157600080fd5b5061027760fe5481565b3480156103b757600080fd5b506102777fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156103eb57600080fd5b5060fb54610249906001600160a01b031681565b34801561040b57600080fd5b5061027760008051602061374883398151915281565b34801561042d57600080fd5b5061030b610e4f565b34801561044257600080fd5b50610213610451366004613262565b610f19565b34801561046257600080fd5b5061013454610249906001600160a01b031681565b34801561048357600080fd5b5061013054610249906001600160a01b031681565b3480156104a457600080fd5b50610277600081565b3480156104b957600080fd5b5061030b6104c8366004613005565b610f44565b3480156104d957600080fd5b5061030b6104e83660046130e7565b611073565b3480156104f957600080fd5b5061030b6105083660046132d5565b6112a3565b34801561051957600080fd5b5061013154610249906001600160a01b031681565b34801561053a57600080fd5b5061027760fc5481565b34801561055057600080fd5b5061012f54610249906001600160a01b031681565b34801561057157600080fd5b5061030b610580366004613262565b611418565b34801561059157600080fd5b5061013254610249906001600160a01b031681565b3480156105b257600080fd5b506102776105c1366004613005565b61143d565b3480156105d257600080fd5b5061012d54610249906001600160a01b031681565b3480156105f357600080fd5b50610277610602366004613113565b6114bf565b60006001600160e01b03198216637965db0b60e01b148061063857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610648611799565b905090565b60008281526065602052604090206001015461066881611941565b610672838361194b565b505050565b6001600160a01b03811633146106ec5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f682826119d1565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107435760405162461bcd60e51b81526004016106e3906134c3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661078c600080516020613768833981519152546001600160a01b031690565b6001600160a01b0316146107b25760405162461bcd60e51b81526004016106e39061350f565b6107bb81611a38565b604080516000808252602082019092526107d791839190611a43565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108235760405162461bcd60e51b81526004016106e3906134c3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661086c600080516020613768833981519152546001600160a01b031690565b6001600160a01b0316146108925760405162461bcd60e51b81526004016106e39061350f565b61089b82611a38565b6106f682826001611a43565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109475760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106e3565b5060008051602061376883398151915290565b610965600033610f19565b6109a85760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b60006109b76020830183613005565b6001600160a01b031614156109fd5760405162461bcd60e51b815260206004820152600c60248201526b64616920697320656d70747960a01b60448201526064016106e3565b6000610a0f6040830160208401613005565b6001600160a01b03161415610a575760405162461bcd60e51b815260206004820152600e60248201526d757364626320697320656d70747960901b60448201526064016106e3565b6000610a696060830160408401613005565b6001600160a01b03161415610ab15760405162461bcd60e51b815260206004820152600e60248201526d736f6e6e6520697320656d70747960901b60448201526064016106e3565b6000610ac36080830160608401613005565b6001600160a01b03161415610b0a5760405162461bcd60e51b815260206004820152600d60248201526c6344616920697320656d70747960981b60448201526064016106e3565b6000610b1c60a0830160808401613005565b6001600160a01b03161415610b695760405162461bcd60e51b8152602060048201526013602482015272756e6974726f6c6c657220697320656d70747960681b60448201526064016106e3565b6000610b7b60c0830160a08401613005565b6001600160a01b03161415610bd25760405162461bcd60e51b815260206004820152601860248201527f6165726f64726f6d65526f7574657220697320656d707479000000000000000060448201526064016106e3565b6000610be460e0830160c08401613005565b6001600160a01b03161415610c3b5760405162461bcd60e51b815260206004820152601760248201527f706f6f6c536f6e6e65557364626320697320656d70747900000000000000000060448201526064016106e3565b6000610c4e610100830160e08401613005565b6001600160a01b03161415610c9d5760405162461bcd60e51b8152602060048201526015602482015274706f6f6c557364626344616920697320656d70747960581b60448201526064016106e3565b610caa6020820182613005565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610cdb6040820160208301613005565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610d0c6060820160408301613005565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610d3d6080820160608301613005565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610d6e60a0820160808301613005565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610d9f60c0820160a08301613005565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610dd060e0820160c08301613005565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610e02610100820160e08301613005565b61013480546001600160a01b0319166001600160a01b03929092169190911790556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b600054610100900460ff1615808015610e6f5750600054600160ff909116105b80610e895750303b158015610e89575060005460ff166001145b610ea55760405162461bcd60e51b81526004016106e39061355b565b6000805460ff191660011790558015610ec8576000805461ff0019166101001790555b610ed0611bbd565b80156107d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f4f600033610f19565b610f925760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b6001600160a01b038116610fe85760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016106e3565b60fb5461100d90600080516020613748833981519152906001600160a01b0316611418565b6110256000805160206137488339815191528261064d565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610f0e565b61108b60008051602061374883398151915233610f19565b6110a75760405162461bcd60e51b81526004016106e39061348c565b6000611125306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e557600080fd5b505afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d9190613249565b60fd54611ca2565b6040516370a0823160e01b81523060048201529091506111aa9084906001600160a01b038216906370a082319060240160206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190613249565b611ccc565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e457600080fd5b505afa1580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c9190613249565b101561126a5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6112cd7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f19565b80611374575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190613213565b6113cb5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b60648201526084016106e3565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a90606001611296565b60008281526065602052604090206001015461143381611941565b61067283836119d1565b600061145760008051602061374883398151915233610f19565b6114735760405162461bcd60e51b81526004016106e39061348c565b600061147e83611e5b565b90508015610638576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a192915050565b60006114d960008051602061374883398151915233610f19565b6114f55760405162461bcd60e51b81526004016106e39061348c565b6000611533306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e557600080fd5b9050600080841561155a5761154786611e5b565b90506115538887612162565b91506115c9565b6115658888886122d4565b9150868210156115c95760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106e3565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561160357600080fd5b505afa158015611617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163b9190613249565b10156116895760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb90604401602060405180830381600087803b1580156116d357600080fd5b505af11580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190613213565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a1801561177f576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b6000670de0b6b3a764000061013060009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f357600080fd5b505afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190613249565b610130546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561186f57600080fd5b505afa158015611883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a79190613249565b6118b19190613669565b6118bb9190613647565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156118ff57600080fd5b505afa158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190613249565b610648919061362f565b6107d781336123d9565b6119558282610f19565b6106f65760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561198d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119db8282610f19565b156106f65760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106f681611941565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a765761067283612432565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aaf57600080fd5b505afa925050508015611adf575060408051601f3d908101601f19168201909252611adc91810190613249565b60015b611b425760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106e3565b6000805160206137688339815191528114611bb15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106e3565b506106728383836124ce565b600054610100900460ff1615808015611bdd5750600054600160ff909116105b80611bf75750303b158015611bf7575060005460ff166001145b611c135760405162461bcd60e51b81526004016106e39061355b565b6000805460ff191660011790558015611c36576000805461ff0019166101001790555b611c3e6124f3565b611c466124f3565b611c5160003361194b565b601460fc81905560fd55600460fe5580156107d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f0e565b6000612710611cb18382613688565b611cbb9085613669565b611cc59190613647565b9392505050565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190613249565b61012d546101305460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd59190613213565b506101305460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015611e1d57600080fd5b505af1158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190613249565b50505050565b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ea457600080fd5b505afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190613249565b1115611f98576040805160018082528183019092526000916020808301908036833750506101305482519293506001600160a01b031691839150600090611f2557611f256136f8565b6001600160a01b0392831660209182029290920101526101315460405162e1ed9760e51b8152911690631c3db2e090611f6490309085906004016133fd565b600060405180830381600087803b158015611f7e57600080fd5b505af1158015611f92573d6000803e3d6000fd5b50505050505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611fe157600080fd5b505afa158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120199190613249565b905080156120cc576101325461012f5461012e5461013354600093612053936001600160a01b039182169390821692908216911686612560565b905080156120ca576101325461012f5461012e5461012d5461013354610134546120bd956001600160a01b0390811695811694811693811692811691168860646120a28a64e8d4a51000613669565b6120ad906063613669565b6120b79190613647565b30612801565b6120c7908461362f565b92505b505b811561215b5761012d5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561212157600080fd5b505af1158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190613213565b505b5092915050565b610130546040516370a0823160e01b81523060048201526000916001600160a01b03169063db006a759082906370a082319060240160206040518083038186803b1580156121af57600080fd5b505afa1580156121c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e79190613249565b6040518263ffffffff1660e01b815260040161220591815260200190565b602060405180830381600087803b15801561221f57600080fd5b505af1158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190613249565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561229c57600080fd5b505afa1580156122b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190613249565b6101305460405163852a12e360e01b8152600481018490526000916001600160a01b03169063852a12e390602401602060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123549190613249565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d19190613249565b949350505050565b6123e38282610f19565b6106f6576123f081612ce5565b6123fb836020612cf7565b60405160200161240c929190613388565b60408051601f198184030181529082905262461bcd60e51b82526106e391600401613459565b6001600160a01b0381163b61249f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106e3565b60008051602061376883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6124d783612e93565b6000825111806124e45750805b1561067257611e558383612ed3565b600054610100900460ff1661255e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106e3565b565b604080516001808252818301909252600091829190816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161257a57905050905085816000815181106125c4576125c46136f8565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505084816000815181106125fc576125fc6136f8565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050836001600160a01b03166322be3de16040518163ffffffff1660e01b815260040160206040518083038186803b15801561265957600080fd5b505afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126919190613213565b816000815181106126a4576126a46136f8565b60200260200101516040019015159081151581525050836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f357600080fd5b505afa158015612707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272b9190613022565b8160008151811061273e5761273e6136f8565b60209081029190910101516001600160a01b03918216606090910152604051631542686b60e21b8152600091891690635509a1ac9061278390879086906004016135a9565b60006040518083038186803b15801561279b57600080fd5b505afa1580156127af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d79190810190613166565b9050806001815181106127ec576127ec6136f8565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526001600160a01b038a8116600483015260248201859052600091908a169063095ea7b390604401602060405180830381600087803b15801561284f57600080fd5b505af1158015612863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128879190613213565b5060408051600280825260608201909252600091816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816128a057905050905089816000815181106128ea576128ea6136f8565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110612922576129226136f8565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050866001600160a01b03166322be3de16040518163ffffffff1660e01b815260040160206040518083038186803b15801561297f57600080fd5b505afa158015612993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b79190613213565b816000815181106129ca576129ca6136f8565b60200260200101516040019015159081151581525050866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612a1957600080fd5b505afa158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a519190613022565b81600081518110612a6457612a646136f8565b6020026020010151606001906001600160a01b031690816001600160a01b0316815250508881600181518110612a9c57612a9c6136f8565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508781600181518110612ad457612ad46136f8565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050856001600160a01b03166322be3de16040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3157600080fd5b505afa158015612b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b699190613213565b81600181518110612b7c57612b7c6136f8565b60200260200101516040019015159081151581525050856001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612bcb57600080fd5b505afa158015612bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c039190613022565b81600181518110612c1657612c166136f8565b60209081029190910101516001600160a01b0391821660609091015260405163cac88ea960e01b81526000918d169063cac88ea990612c61908990899087908a9042906004016135c2565b600060405180830381600087803b158015612c7b57600080fd5b505af1158015612c8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cb79190810190613166565b905080600281518110612ccc57612ccc6136f8565b6020026020010151925050509998505050505050505050565b60606106386001600160a01b03831660145b60606000612d06836002613669565b612d1190600261362f565b67ffffffffffffffff811115612d2957612d2961370e565b6040519080825280601f01601f191660200182016040528015612d53576020820181803683370190505b509050600360fc1b81600081518110612d6e57612d6e6136f8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d9d57612d9d6136f8565b60200101906001600160f81b031916908160001a9053506000612dc1846002613669565b612dcc90600161362f565b90505b6001811115612e44576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612e0057612e006136f8565b1a60f81b828281518110612e1657612e166136f8565b60200101906001600160f81b031916908160001a90535060049490941c93612e3d816136cb565b9050612dcf565b508315611cc55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e3565b612e9c81612432565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612f3b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106e3565b600080846001600160a01b031684604051612f56919061336c565b600060405180830381855af49150503d8060008114612f91576040519150601f19603f3d011682016040523d82523d6000602084013e612f96565b606091505b5091509150612fbe828260405180606001604052806027815260200161378860279139612fc7565b95945050505050565b60608315612fd6575081611cc5565b611cc58383815115612feb5781518083602001fd5b8060405162461bcd60e51b81526004016106e39190613459565b60006020828403121561301757600080fd5b8135611cc581613724565b60006020828403121561303457600080fd5b8151611cc581613724565b6000806040838503121561305257600080fd5b823561305d81613724565b915060208381013567ffffffffffffffff8082111561307b57600080fd5b818601915086601f83011261308f57600080fd5b8135818111156130a1576130a161370e565b6130b3601f8201601f191685016135fe565b915080825287848285010111156130c957600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156130fa57600080fd5b823561310581613724565b946020939093013593505050565b6000806000806080858703121561312957600080fd5b843561313481613724565b935060208501359250604085013561314b81613724565b9150606085013561315b81613739565b939692955090935050565b6000602080838503121561317957600080fd5b825167ffffffffffffffff8082111561319157600080fd5b818501915085601f8301126131a557600080fd5b8151818111156131b7576131b761370e565b8060051b91506131c88483016135fe565b8181528481019084860184860187018a10156131e357600080fd5b600095505b838610156132065780518352600195909501949186019186016131e8565b5098975050505050505050565b60006020828403121561322557600080fd5b8151611cc581613739565b60006020828403121561324257600080fd5b5035919050565b60006020828403121561325b57600080fd5b5051919050565b6000806040838503121561327557600080fd5b82359150602083013561328781613724565b809150509250929050565b6000602082840312156132a457600080fd5b81356001600160e01b031981168114611cc557600080fd5b600061010082840312156132cf57600080fd5b50919050565b6000806000606084860312156132ea57600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b8381101561336157815180516001600160a01b039081168952848201518116858a01526040808301511515908a0152606091820151169088015260809096019590820190600101613315565b509495945050505050565b6000825161337e81846020870161369f565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133c081601785016020880161369f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133f181602884016020880161369f565b01602801949350505050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561344b57855185168352948301949183019160010161342d565b509098975050505050505050565b602081526000825180602084015261347881604085016020870161369f565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8281526040602082015260006123d16040830184613301565b85815284602082015260a0604082015260006135e160a0830186613301565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156136275761362761370e565b604052919050565b60008219821115613642576136426136e2565b500190565b60008261366457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613683576136836136e2565b500290565b60008282101561369a5761369a6136e2565b500390565b60005b838110156136ba5781810151838201526020016136a2565b83811115611e555750506000910152565b6000816136da576136da6136e2565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107d757600080fd5b80151581146107d757600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122033936c7dd7741f55ad8801b38649470eb96422cd65709cb00b5c1b749537631964736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80638129fc1c1161010d578063ae30c110116100a0578063d547741f1161006f578063d547741f14610565578063e18e3a6814610585578063ef5cfb8c146105a6578063f4b9fa75146105c6578063f6f6b881146105e757600080fd5b8063ae30c110146104ed578063bad1d3da1461050d578063bf52e0801461052e578063c0c2ae501461054457600080fd5b8063a217fddf116100dc578063a217fddf14610498578063a3673b38146102d6578063a440b21a146104ad578063adc9772e146104cd57600080fd5b80638129fc1c1461042157806391d148541461043657806398a460aa146104565780639b089d551461047757600080fd5b80633659cfe6116101855780635ca558f8116101545780635ca558f8146103955780635dbd733a146103ab578063620b75df146103df5780637d5f5802146103ff57600080fd5b80633659cfe61461032d5780634f1ef2861461034d57806352d1902d14610360578063561f07731461037557600080fd5b80632506e531116101c15780632506e531146102b55780632576e65a146102d65780632f2ff15d146102eb57806336568abe1461030d57600080fd5b806301ffc9a7146101f35780630bc798d214610228578063119cd87914610261578063248a9ca314610285575b600080fd5b3480156101ff57600080fd5b5061021361020e366004613292565b610607565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061012e54610249906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561026d57600080fd5b5061027760fd5481565b60405190815260200161021f565b34801561029157600080fd5b506102776102a0366004613230565b60009081526065602052604090206001015490565b3480156102c157600080fd5b5061013354610249906001600160a01b031681565b3480156102e257600080fd5b5061027761063e565b3480156102f757600080fd5b5061030b610306366004613262565b61064d565b005b34801561031957600080fd5b5061030b610328366004613262565b610677565b34801561033957600080fd5b5061030b610348366004613005565b6106fa565b61030b61035b36600461303f565b6107da565b34801561036c57600080fd5b506102776108a7565b34801561038157600080fd5b5061030b6103903660046132bc565b61095a565b3480156103a157600080fd5b5061027760fe5481565b3480156103b757600080fd5b506102777fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156103eb57600080fd5b5060fb54610249906001600160a01b031681565b34801561040b57600080fd5b5061027760008051602061374883398151915281565b34801561042d57600080fd5b5061030b610e4f565b34801561044257600080fd5b50610213610451366004613262565b610f19565b34801561046257600080fd5b5061013454610249906001600160a01b031681565b34801561048357600080fd5b5061013054610249906001600160a01b031681565b3480156104a457600080fd5b50610277600081565b3480156104b957600080fd5b5061030b6104c8366004613005565b610f44565b3480156104d957600080fd5b5061030b6104e83660046130e7565b611073565b3480156104f957600080fd5b5061030b6105083660046132d5565b6112a3565b34801561051957600080fd5b5061013154610249906001600160a01b031681565b34801561053a57600080fd5b5061027760fc5481565b34801561055057600080fd5b5061012f54610249906001600160a01b031681565b34801561057157600080fd5b5061030b610580366004613262565b611418565b34801561059157600080fd5b5061013254610249906001600160a01b031681565b3480156105b257600080fd5b506102776105c1366004613005565b61143d565b3480156105d257600080fd5b5061012d54610249906001600160a01b031681565b3480156105f357600080fd5b50610277610602366004613113565b6114bf565b60006001600160e01b03198216637965db0b60e01b148061063857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610648611799565b905090565b60008281526065602052604090206001015461066881611941565b610672838361194b565b505050565b6001600160a01b03811633146106ec5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f682826119d1565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107435760405162461bcd60e51b81526004016106e3906134c3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661078c600080516020613768833981519152546001600160a01b031690565b6001600160a01b0316146107b25760405162461bcd60e51b81526004016106e39061350f565b6107bb81611a38565b604080516000808252602082019092526107d791839190611a43565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108235760405162461bcd60e51b81526004016106e3906134c3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661086c600080516020613768833981519152546001600160a01b031690565b6001600160a01b0316146108925760405162461bcd60e51b81526004016106e39061350f565b61089b82611a38565b6106f682826001611a43565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109475760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106e3565b5060008051602061376883398151915290565b610965600033610f19565b6109a85760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b60006109b76020830183613005565b6001600160a01b031614156109fd5760405162461bcd60e51b815260206004820152600c60248201526b64616920697320656d70747960a01b60448201526064016106e3565b6000610a0f6040830160208401613005565b6001600160a01b03161415610a575760405162461bcd60e51b815260206004820152600e60248201526d757364626320697320656d70747960901b60448201526064016106e3565b6000610a696060830160408401613005565b6001600160a01b03161415610ab15760405162461bcd60e51b815260206004820152600e60248201526d736f6e6e6520697320656d70747960901b60448201526064016106e3565b6000610ac36080830160608401613005565b6001600160a01b03161415610b0a5760405162461bcd60e51b815260206004820152600d60248201526c6344616920697320656d70747960981b60448201526064016106e3565b6000610b1c60a0830160808401613005565b6001600160a01b03161415610b695760405162461bcd60e51b8152602060048201526013602482015272756e6974726f6c6c657220697320656d70747960681b60448201526064016106e3565b6000610b7b60c0830160a08401613005565b6001600160a01b03161415610bd25760405162461bcd60e51b815260206004820152601860248201527f6165726f64726f6d65526f7574657220697320656d707479000000000000000060448201526064016106e3565b6000610be460e0830160c08401613005565b6001600160a01b03161415610c3b5760405162461bcd60e51b815260206004820152601760248201527f706f6f6c536f6e6e65557364626320697320656d70747900000000000000000060448201526064016106e3565b6000610c4e610100830160e08401613005565b6001600160a01b03161415610c9d5760405162461bcd60e51b8152602060048201526015602482015274706f6f6c557364626344616920697320656d70747960581b60448201526064016106e3565b610caa6020820182613005565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610cdb6040820160208301613005565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610d0c6060820160408301613005565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610d3d6080820160608301613005565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610d6e60a0820160808301613005565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610d9f60c0820160a08301613005565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610dd060e0820160c08301613005565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610e02610100820160e08301613005565b61013480546001600160a01b0319166001600160a01b03929092169190911790556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b600054610100900460ff1615808015610e6f5750600054600160ff909116105b80610e895750303b158015610e89575060005460ff166001145b610ea55760405162461bcd60e51b81526004016106e39061355b565b6000805460ff191660011790558015610ec8576000805461ff0019166101001790555b610ed0611bbd565b80156107d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f4f600033610f19565b610f925760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016106e3565b6001600160a01b038116610fe85760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016106e3565b60fb5461100d90600080516020613748833981519152906001600160a01b0316611418565b6110256000805160206137488339815191528261064d565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610f0e565b61108b60008051602061374883398151915233610f19565b6110a75760405162461bcd60e51b81526004016106e39061348c565b6000611125306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e557600080fd5b505afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d9190613249565b60fd54611ca2565b6040516370a0823160e01b81523060048201529091506111aa9084906001600160a01b038216906370a082319060240160206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190613249565b611ccc565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e457600080fd5b505afa1580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c9190613249565b101561126a5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6112cd7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f19565b80611374575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190613213565b6113cb5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b60648201526084016106e3565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a90606001611296565b60008281526065602052604090206001015461143381611941565b61067283836119d1565b600061145760008051602061374883398151915233610f19565b6114735760405162461bcd60e51b81526004016106e39061348c565b600061147e83611e5b565b90508015610638576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a192915050565b60006114d960008051602061374883398151915233610f19565b6114f55760405162461bcd60e51b81526004016106e39061348c565b6000611533306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e557600080fd5b9050600080841561155a5761154786611e5b565b90506115538887612162565b91506115c9565b6115658888886122d4565b9150868210156115c95760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106e3565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561160357600080fd5b505afa158015611617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163b9190613249565b10156116895760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e2065787065637465640060448201526064016106e3565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb90604401602060405180830381600087803b1580156116d357600080fd5b505af11580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190613213565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a1801561177f576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b6000670de0b6b3a764000061013060009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f357600080fd5b505afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190613249565b610130546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561186f57600080fd5b505afa158015611883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a79190613249565b6118b19190613669565b6118bb9190613647565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156118ff57600080fd5b505afa158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190613249565b610648919061362f565b6107d781336123d9565b6119558282610f19565b6106f65760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561198d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119db8282610f19565b156106f65760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106f681611941565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a765761067283612432565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aaf57600080fd5b505afa925050508015611adf575060408051601f3d908101601f19168201909252611adc91810190613249565b60015b611b425760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106e3565b6000805160206137688339815191528114611bb15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106e3565b506106728383836124ce565b600054610100900460ff1615808015611bdd5750600054600160ff909116105b80611bf75750303b158015611bf7575060005460ff166001145b611c135760405162461bcd60e51b81526004016106e39061355b565b6000805460ff191660011790558015611c36576000805461ff0019166101001790555b611c3e6124f3565b611c466124f3565b611c5160003361194b565b601460fc81905560fd55600460fe5580156107d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f0e565b6000612710611cb18382613688565b611cbb9085613669565b611cc59190613647565b9392505050565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190613249565b61012d546101305460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd59190613213565b506101305460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015611e1d57600080fd5b505af1158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190613249565b50505050565b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ea457600080fd5b505afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190613249565b1115611f98576040805160018082528183019092526000916020808301908036833750506101305482519293506001600160a01b031691839150600090611f2557611f256136f8565b6001600160a01b0392831660209182029290920101526101315460405162e1ed9760e51b8152911690631c3db2e090611f6490309085906004016133fd565b600060405180830381600087803b158015611f7e57600080fd5b505af1158015611f92573d6000803e3d6000fd5b50505050505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611fe157600080fd5b505afa158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120199190613249565b905080156120cc576101325461012f5461012e5461013354600093612053936001600160a01b039182169390821692908216911686612560565b905080156120ca576101325461012f5461012e5461012d5461013354610134546120bd956001600160a01b0390811695811694811693811692811691168860646120a28a64e8d4a51000613669565b6120ad906063613669565b6120b79190613647565b30612801565b6120c7908461362f565b92505b505b811561215b5761012d5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561212157600080fd5b505af1158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190613213565b505b5092915050565b610130546040516370a0823160e01b81523060048201526000916001600160a01b03169063db006a759082906370a082319060240160206040518083038186803b1580156121af57600080fd5b505afa1580156121c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e79190613249565b6040518263ffffffff1660e01b815260040161220591815260200190565b602060405180830381600087803b15801561221f57600080fd5b505af1158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190613249565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561229c57600080fd5b505afa1580156122b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190613249565b6101305460405163852a12e360e01b8152600481018490526000916001600160a01b03169063852a12e390602401602060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123549190613249565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d19190613249565b949350505050565b6123e38282610f19565b6106f6576123f081612ce5565b6123fb836020612cf7565b60405160200161240c929190613388565b60408051601f198184030181529082905262461bcd60e51b82526106e391600401613459565b6001600160a01b0381163b61249f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106e3565b60008051602061376883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6124d783612e93565b6000825111806124e45750805b1561067257611e558383612ed3565b600054610100900460ff1661255e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106e3565b565b604080516001808252818301909252600091829190816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161257a57905050905085816000815181106125c4576125c46136f8565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505084816000815181106125fc576125fc6136f8565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050836001600160a01b03166322be3de16040518163ffffffff1660e01b815260040160206040518083038186803b15801561265957600080fd5b505afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126919190613213565b816000815181106126a4576126a46136f8565b60200260200101516040019015159081151581525050836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f357600080fd5b505afa158015612707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272b9190613022565b8160008151811061273e5761273e6136f8565b60209081029190910101516001600160a01b03918216606090910152604051631542686b60e21b8152600091891690635509a1ac9061278390879086906004016135a9565b60006040518083038186803b15801561279b57600080fd5b505afa1580156127af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d79190810190613166565b9050806001815181106127ec576127ec6136f8565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526001600160a01b038a8116600483015260248201859052600091908a169063095ea7b390604401602060405180830381600087803b15801561284f57600080fd5b505af1158015612863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128879190613213565b5060408051600280825260608201909252600091816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816128a057905050905089816000815181106128ea576128ea6136f8565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110612922576129226136f8565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050866001600160a01b03166322be3de16040518163ffffffff1660e01b815260040160206040518083038186803b15801561297f57600080fd5b505afa158015612993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b79190613213565b816000815181106129ca576129ca6136f8565b60200260200101516040019015159081151581525050866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612a1957600080fd5b505afa158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a519190613022565b81600081518110612a6457612a646136f8565b6020026020010151606001906001600160a01b031690816001600160a01b0316815250508881600181518110612a9c57612a9c6136f8565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508781600181518110612ad457612ad46136f8565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050856001600160a01b03166322be3de16040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3157600080fd5b505afa158015612b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b699190613213565b81600181518110612b7c57612b7c6136f8565b60200260200101516040019015159081151581525050856001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612bcb57600080fd5b505afa158015612bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c039190613022565b81600181518110612c1657612c166136f8565b60209081029190910101516001600160a01b0391821660609091015260405163cac88ea960e01b81526000918d169063cac88ea990612c61908990899087908a9042906004016135c2565b600060405180830381600087803b158015612c7b57600080fd5b505af1158015612c8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cb79190810190613166565b905080600281518110612ccc57612ccc6136f8565b6020026020010151925050509998505050505050505050565b60606106386001600160a01b03831660145b60606000612d06836002613669565b612d1190600261362f565b67ffffffffffffffff811115612d2957612d2961370e565b6040519080825280601f01601f191660200182016040528015612d53576020820181803683370190505b509050600360fc1b81600081518110612d6e57612d6e6136f8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d9d57612d9d6136f8565b60200101906001600160f81b031916908160001a9053506000612dc1846002613669565b612dcc90600161362f565b90505b6001811115612e44576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612e0057612e006136f8565b1a60f81b828281518110612e1657612e166136f8565b60200101906001600160f81b031916908160001a90535060049490941c93612e3d816136cb565b9050612dcf565b508315611cc55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e3565b612e9c81612432565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612f3b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106e3565b600080846001600160a01b031684604051612f56919061336c565b600060405180830381855af49150503d8060008114612f91576040519150601f19603f3d011682016040523d82523d6000602084013e612f96565b606091505b5091509150612fbe828260405180606001604052806027815260200161378860279139612fc7565b95945050505050565b60608315612fd6575081611cc5565b611cc58383815115612feb5781518083602001fd5b8060405162461bcd60e51b81526004016106e39190613459565b60006020828403121561301757600080fd5b8135611cc581613724565b60006020828403121561303457600080fd5b8151611cc581613724565b6000806040838503121561305257600080fd5b823561305d81613724565b915060208381013567ffffffffffffffff8082111561307b57600080fd5b818601915086601f83011261308f57600080fd5b8135818111156130a1576130a161370e565b6130b3601f8201601f191685016135fe565b915080825287848285010111156130c957600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156130fa57600080fd5b823561310581613724565b946020939093013593505050565b6000806000806080858703121561312957600080fd5b843561313481613724565b935060208501359250604085013561314b81613724565b9150606085013561315b81613739565b939692955090935050565b6000602080838503121561317957600080fd5b825167ffffffffffffffff8082111561319157600080fd5b818501915085601f8301126131a557600080fd5b8151818111156131b7576131b761370e565b8060051b91506131c88483016135fe565b8181528481019084860184860187018a10156131e357600080fd5b600095505b838610156132065780518352600195909501949186019186016131e8565b5098975050505050505050565b60006020828403121561322557600080fd5b8151611cc581613739565b60006020828403121561324257600080fd5b5035919050565b60006020828403121561325b57600080fd5b5051919050565b6000806040838503121561327557600080fd5b82359150602083013561328781613724565b809150509250929050565b6000602082840312156132a457600080fd5b81356001600160e01b031981168114611cc557600080fd5b600061010082840312156132cf57600080fd5b50919050565b6000806000606084860312156132ea57600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b8381101561336157815180516001600160a01b039081168952848201518116858a01526040808301511515908a0152606091820151169088015260809096019590820190600101613315565b509495945050505050565b6000825161337e81846020870161369f565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133c081601785016020880161369f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133f181602884016020880161369f565b01602801949350505050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561344b57855185168352948301949183019160010161342d565b509098975050505050505050565b602081526000825180602084015261347881604085016020870161369f565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8281526040602082015260006123d16040830184613301565b85815284602082015260a0604082015260006135e160a0830186613301565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156136275761362761370e565b604052919050565b60008219821115613642576136426136e2565b500190565b60008261366457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613683576136836136e2565b500290565b60008282101561369a5761369a6136e2565b500390565b60005b838110156136ba5781810151838201526020016136a2565b83811115611e555750506000910152565b6000816136da576136da6136e2565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107d757600080fd5b80151581146107d757600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122033936c7dd7741f55ad8801b38649470eb96422cd65709cb00b5c1b749537631964736f6c63430008060033",
  "implementation": "0x58a63A8ceDc0fb21A8eece9dE7798073Aa1e59c7",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4581,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 4583,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 4585,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 4587,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 4972,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 5521,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "dai",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 5524,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "usdbc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 5527,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "sonne",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 5530,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "cDai",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(CToken)4552"
      },
      {
        "astId": 5533,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "unitroller",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(Unitroller)4458"
      },
      {
        "astId": 5535,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "aerodromeRouter",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 5537,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "poolSonneUsdbc",
        "offset": 0,
        "slot": "307",
        "type": "t_address"
      },
      {
        "astId": 5539,
        "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
        "label": "poolUsdbcDai",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)4552": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2662": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Unitroller)4458": {
        "encoding": "inplace",
        "label": "contract Unitroller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/dai/StrategySonneDai.sol:StrategySonneDai",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}