{
  "address": "0x621409Ad21B486eA8688c5608abc904Cd8DB8e9b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "initSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpUsdc",
      "outputs": [
        {
          "internalType": "contract IAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpUsdcDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleBusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolDepositor",
      "outputs": [
        {
          "internalType": "contract IPoolDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "busd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wmx",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wmxLpUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolDepositor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pancakeRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wombatRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleBusd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdc",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyWombexUsdc.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmxLpUsdc",
      "outputs": [
        {
          "internalType": "contract IBaseRewardPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wom",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatRouter",
      "outputs": [
        {
          "internalType": "contract IWombatRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "2b608f1f31d08a41eb473417b9e7d552",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"}],\"name\":\"initSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUsdc\",\"outputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUsdcDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleBusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDepositor\",\"outputs\":[{\"internalType\":\"contract IPoolDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wmxLpUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wombatRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleBusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"}],\"internalType\":\"struct StrategyWombexUsdc.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmxLpUsdc\",\"outputs\":[{\"internalType\":\"contract IBaseRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatRouter\",\"outputs\":[{\"internalType\":\"contract IWombatRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/busd/StrategyWombexUsdc.sol\":\"StrategyWombexUsdc\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\\n\\nlibrary ChainlinkLibrary {\\n\\n    function convertTokenToToken(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToToken(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n\\n    function convertTokenToToken(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        IPriceFeed oracle0,\\n        IPriceFeed oracle1\\n    ) internal view returns (uint256 amount1) {\\n        uint256 price0 = uint256(oracle0.latestAnswer());\\n        uint256 price1 = uint256(oracle1.latestAnswer());\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        IPriceFeed oracle\\n    ) internal view returns (uint256 amountUsd) {\\n        uint256 price = uint256(oracle.latestAnswer());\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToToken(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        IPriceFeed oracle\\n    ) internal view returns (uint256 amount) {\\n        uint256 price = uint256(oracle.latestAnswer());\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n}\\n\",\"keccak256\":\"0x44da680eba8239f31137edc64bd07e987ef82db8ea0be5585a3ead2cecd24433\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/PancakeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary PancakeSwapLibrary {\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[2];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function addLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(pancakeRouter), amountADesired);\\n        IERC20(tokenB).approve(address(pancakeRouter), amountBDesired);\\n\\n        return pancakeRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(pancakeRouter), liquidity);\\n\\n        return pancakeRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n}\\n\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\n\",\"keccak256\":\"0x4122b8db2402c37c030df8b59936a31bc5adc9bf6cf189df06689b98785b70f1\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Wombat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount)\\n    external\\n    view\\n    returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n    external\\n    view\\n    returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\n\\ninterface IMasterWombatV2 {\\n    function userInfo(uint256 _pid, address account) external view returns(uint128 amount, uint128 factor, uint128 rewardDebt, uint128 pendingWom);\\n\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (\\n        uint256 pendingRewards,\\n        IERC20[] memory bonusTokenAddresses,\\n        string[] memory bonusTokenSymbols,\\n        uint256[] memory pendingBonusRewards\\n    );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n    external\\n    view\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(uint256[] memory _pids)\\n    external\\n    returns (\\n        uint256 transfered,\\n        uint256[] memory rewards,\\n        uint256[][] memory additionalRewards\\n    );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\\n\\nlibrary WombatLibrary {\\n\\n    function getAmountOut(\\n        IWombatRouter wombatRouter,\\n        address token0,\\n        address token1,\\n        address pool0,\\n        uint256 amountIn\\n    ) internal view returns (uint256) {\\n\\n        address[] memory tokenPath = new address[](2);\\n        tokenPath[0] = token0;\\n        tokenPath[1] = token1;\\n\\n        address[] memory poolPath = new address[](1);\\n        poolPath[0] = pool0;\\n\\n        (uint256 amountOut,) = wombatRouter.getAmountOut(\\n            tokenPath,\\n            poolPath,\\n            int256(amountIn)\\n        );\\n\\n        return amountOut;\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IWombatRouter wombatRouter,\\n        address token0,\\n        address token1,\\n        address pool0,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to\\n    ) internal returns (uint256) {\\n\\n        IERC20(token0).approve(address(wombatRouter), fromAmount);\\n\\n        address[] memory tokenPath = new address[](2);\\n        tokenPath[0] = token0;\\n        tokenPath[1] = token1;\\n\\n        address[] memory poolPath = new address[](1);\\n        poolPath[0] = pool0;\\n\\n        return wombatRouter.swapExactTokensForTokens(\\n            tokenPath,\\n            poolPath,\\n            fromAmount,\\n            minimumToAmount,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0xdd03618edb60b32b87b17d8c4d3b31b0e2201ffc5e788849cc379a301f549c24\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Wombex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\n\\ninterface IBaseRewardPool is IERC20 {\\n\\n    /**\\n     * @notice Total amount of the underlying asset that is \\\"managed\\\" by Vault.\\n     */\\n    function totalAssets() external view returns(uint256);\\n\\n    /**\\n     * @notice Mints `shares` Vault shares to `receiver`.\\n     * @dev Because `asset` is not actually what is collected here, first wrap to required token in the booster.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n    /**\\n     * @notice Mints exactly `shares` Vault shares to `receiver`\\n     * by depositing `assets` of underlying tokens.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256);\\n\\n    /**\\n     * @notice Redeems `shares` from `owner` and sends `assets`\\n     * of underlying tokens to `receiver`.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Redeems `shares` from `owner` and sends `assets`\\n     * of underlying tokens to `receiver`.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares that the vault would\\n     * exchange for the amount of assets provided, in an\\n     * ideal scenario where all the conditions are met.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of assets that the vault would\\n     * exchange for the amount of shares provided, in an\\n     * ideal scenario where all the conditions are met.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    /**\\n     * @notice Total number of underlying assets that can\\n     * be deposited by `owner` into the Vault, where `owner`\\n     * corresponds to the input parameter `receiver` of a\\n     * `deposit` call.\\n     */\\n    function maxDeposit(address /* owner */) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     */\\n    function previewDeposit(uint256 assets) external view returns(uint256);\\n\\n    /**\\n     * @notice Total number of underlying shares that can be minted\\n     * for `owner`, where `owner` corresponds to the input\\n     * parameter `receiver` of a `mint` call.\\n     */\\n    function maxMint(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     */\\n    function previewMint(uint256 shares) external view returns(uint256);\\n\\n    /**\\n     * @notice Total number of underlying assets that can be\\n     * withdrawn from the Vault by `owner`, where `owner`\\n     * corresponds to the input parameter of a `withdraw` call.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns(uint256 shares);\\n\\n    /**\\n     * @notice Total number of underlying shares that can be\\n     * redeemed from the Vault by `owner`, where `owner` corresponds\\n     * to the input parameter of a `redeem` call.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     */\\n    function previewRedeem(uint256 shares) external view returns(uint256);\\n\\n    function lastTimeRewardApplicable(address _token) external view returns (uint256);\\n\\n    function rewardPerToken(address _token) external view returns (uint256);\\n\\n    function earned(address _token, address _account) external view returns (uint256);\\n\\n    function claimableRewards(address _account) external view returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function stake(uint256 _amount)\\n    external\\n    returns(bool);\\n\\n    function stakeAll() external returns(bool);\\n\\n    function stakeFor(address _for, uint256 _amount)\\n    external\\n    returns(bool);\\n\\n    function withdraw(uint256 amount, bool claim)\\n    external\\n    returns(bool);\\n\\n    function withdrawAll(bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    /**\\n     * @dev Gives a staker their rewards, with the option of claiming extra rewards\\n     * @param _account     Account for which to claim\\n     * @param _lockCvx     Get the child rewards too?\\n     */\\n    function getReward(address _account, bool _lockCvx) external returns(bool);\\n\\n    /**\\n     * @dev Called by a staker to get their allocated rewards\\n     */\\n    function getReward() external returns(bool);\\n\\n    /**\\n     * @dev Donate some extra rewards to this contract\\n     */\\n    function donate(address _token, uint256 _amount) external returns(bool);\\n\\n    /**\\n     * @dev Processes queued rewards in isolation, providing the period has finished.\\n     *      This allows a cheaper way to trigger rewards on low value pools.\\n     */\\n    function processIdleRewards() external;\\n\\n    function rewardTokensLen() external view returns (uint256);\\n\\n    function rewardTokensList() external view returns (address[] memory);\\n}\\n\\n\\ninterface IPoolDepositor {\\n\\n    function deposit(address _lptoken, uint256 _amount, uint256 _minLiquidity, bool _stake) external;\\n\\n    function withdraw(address _lptoken, uint256 _amount, uint256 _minOut, address _recipient) external;\\n\\n    function getDepositAmountOut(address _lptoken, uint256 _amount) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function getWithdrawAmountOut(address _lptoken, uint256 _amount) external view returns (uint256 amount, uint256 fee);\\n}\\n\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount)\\n    external\\n    view\\n    returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n    external\\n    view\\n    returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\",\"keccak256\":\"0xd9060ffcd9571c66b77c136d31bcce0afa56ff6a5a6edd62cb04897309033b99\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IControlRole.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n\\n    address public portfolioManager;\\n\\n    uint256 public swapSlippageBP;\\n    uint256 public navSlippageBP;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        swapSlippageBP = 20;\\n        navSlippageBP = 20;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n    function initSlippages(\\n        uint256 _swapSlippageBP,\\n        uint256 _navSlippageBP\\n    ) public onlyAdmin {\\n        swapSlippageBP = _swapSlippageBP;\\n        navSlippageBP = _navSlippageBP;\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP);\\n    }\\n\\n    function setSlippages(\\n        uint256 _swapSlippageBP,\\n        uint256 _navSlippageBP\\n    ) public onlyPortfolioAgent {\\n        swapSlippageBP = _swapSlippageBP;\\n        navSlippageBP = _navSlippageBP;\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP);\\n    }\\n\\n\\n    // --- logic\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyPortfolioManager {\\n\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\n\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\n\\n        emit Stake(_amount);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\n\\n        uint256 withdrawAmount;\\n        uint256 rewardAmount;\\n        if (_targetIsZero) {\\n            rewardAmount = _claimRewards(_beneficiary);\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n\\n        emit Unstake(_amount, withdrawAmount);\\n        if (rewardAmount > 0) {\\n            emit Reward(rewardAmount);\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 rewardAmount = _claimRewards(_to);\\n        if (rewardAmount > 0) {\\n            emit Reward(rewardAmount);\\n        }\\n        return rewardAmount;\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xb26898ad6985db46cf179e20748c4e7c4f22cf9acaa24d307daa7bcf98396c41\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IControlRole {\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x56462b7ec495babaced741ff66e35afc5e720c0aca7378ae19d68032130a0399\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x4c7a5882d3e669ea7e8228354c40ec0092d3d0b11b1215e4582fc1a64fb2f9fd\",\"license\":\"GPL-3.0\"},\"contracts/busd/StrategyWombexUsdc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Wombex.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/PancakeV2.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\nimport {IWombatRouter, WombatLibrary} from '@overnight-contracts/connectors/contracts/stuff/Wombat.sol';\\n\\n\\ncontract StrategyWombexUsdc is Strategy {\\n\\n    // --- structs\\n\\n    struct StrategyParams {\\n        address busd;\\n        address usdc;\\n        address wom;\\n        address wmx;\\n        address lpUsdc;\\n        address wmxLpUsdc;\\n        address poolDepositor;\\n        address pool;\\n        address pancakeRouter;\\n        address wombatRouter;\\n        address oracleBusd;\\n        address oracleUsdc;\\n    }\\n\\n    // --- params\\n\\n    IERC20 public busd;\\n    IERC20 public usdc;\\n    IERC20 public wom;\\n    IERC20 public wmx;\\n\\n    IAsset public lpUsdc;\\n    IBaseRewardPool public wmxLpUsdc;\\n    IPoolDepositor public poolDepositor;\\n    IPool public pool;\\n\\n    IPancakeRouter02 public pancakeRouter;\\n    IWombatRouter public wombatRouter;\\n\\n    IPriceFeed public oracleBusd;\\n    IPriceFeed public oracleUsdc;\\n\\n    uint256 public busdDm;\\n    uint256 public usdcDm;\\n    uint256 public lpUsdcDm;\\n\\n    // --- events\\n\\n    event StrategyUpdatedParams();\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n    // --- Setters\\n\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\n        busd = IERC20(params.busd);\\n        usdc = IERC20(params.usdc);\\n        wom = IERC20(params.wom);\\n        wmx = IERC20(params.wmx);\\n\\n        lpUsdc = IAsset(params.lpUsdc);\\n        wmxLpUsdc = IBaseRewardPool(params.wmxLpUsdc);\\n        poolDepositor = IPoolDepositor(params.poolDepositor);\\n        pool = IPool(lpUsdc.pool());\\n\\n        pancakeRouter = IPancakeRouter02(params.pancakeRouter);\\n        wombatRouter = IWombatRouter(params.wombatRouter);\\n\\n        oracleBusd = IPriceFeed(params.oracleBusd);\\n        oracleUsdc = IPriceFeed(params.oracleUsdc);\\n\\n        busdDm = 10 ** IERC20Metadata(params.busd).decimals();\\n        usdcDm = 10 ** IERC20Metadata(params.usdc).decimals();\\n        lpUsdcDm = 10 ** IERC20Metadata(params.lpUsdc).decimals();\\n\\n        usdc.approve(address(poolDepositor), type(uint256).max);\\n        wmxLpUsdc.approve(address(poolDepositor), type(uint256).max);\\n\\n        emit StrategyUpdatedParams();\\n    }\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(busd), \\\"Some token not compatible\\\");\\n\\n        // swap busd to usdc\\n        uint256 busdBalance = busd.balanceOf(address(this));\\n        uint256 usdcBalanceOut = WombatLibrary.getAmountOut(\\n            wombatRouter,\\n            address(busd),\\n            address(usdc),\\n            address(pool),\\n            busdBalance\\n        );\\n        if (usdcBalanceOut > 0) {\\n            uint256 usdcBalanceOracle = ChainlinkLibrary.convertTokenToToken(\\n                busdBalance,\\n                busdDm,\\n                usdcDm,\\n                oracleBusd,\\n                oracleUsdc\\n            );\\n            WombatLibrary.swapExactTokensForTokens(\\n                wombatRouter,\\n                address(busd),\\n                address(usdc),\\n                address(pool),\\n                busdBalance,\\n                OvnMath.subBasisPoints(usdcBalanceOracle, swapSlippageBP),\\n                address(this)\\n            );\\n        }\\n\\n        // get potential deposit amount\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n        (uint256 lpUsdcAmount,) = poolDepositor.getDepositAmountOut(address(lpUsdc), usdcBalance);\\n        // deposit\\n        poolDepositor.deposit(address(lpUsdc), usdcBalance, OvnMath.subBasisPoints(lpUsdcAmount, 1), true);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(busd), \\\"Some token not compatible\\\");\\n\\n        // calculate swap _amount usdc to busd\\n        uint256 busdAmountForUsdcAmount = WombatLibrary.getAmountOut(\\n            wombatRouter,\\n            address(usdc),\\n            address(busd),\\n            address(pool),\\n            _amount\\n        );\\n        // get usdcAmount for _amount in busd\\n        uint256 usdcAmount = _amount * _amount / busdAmountForUsdcAmount;\\n        // get withdraw amount for 1 LP\\n        (uint256 usdcAmountOneAsset,) = poolDepositor.getWithdrawAmountOut(address(lpUsdc), lpUsdcDm);\\n        // add 1bp for smooth withdraw\\n        uint256 lpUsdcAmount = OvnMath.addBasisPoints(usdcAmount, 1) * lpUsdcDm / usdcAmountOneAsset;\\n\\n        // withdraw\\n        poolDepositor.withdraw(address(lpUsdc), lpUsdcAmount, usdcAmount, address(this));\\n\\n        // swap usdc to busd\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n        uint256 busdBalanceOut = WombatLibrary.getAmountOut(\\n            wombatRouter,\\n            address(usdc),\\n            address(busd),\\n            address(pool),\\n            usdcBalance\\n        );\\n        if (busdBalanceOut > 0) {\\n            uint256 busdBalanceOracle = ChainlinkLibrary.convertTokenToToken(\\n                usdcBalance,\\n                usdcDm,\\n                busdDm,\\n                oracleUsdc,\\n                oracleBusd\\n            );\\n            WombatLibrary.swapExactTokensForTokens(\\n                wombatRouter,\\n                address(usdc),\\n                address(busd),\\n                address(pool),\\n                usdcBalance,\\n                OvnMath.subBasisPoints(busdBalanceOracle, swapSlippageBP),\\n                address(this)\\n            );\\n        }\\n\\n        return busd.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(busd), \\\"Some token not compatible\\\");\\n\\n        uint256 lpUsdcBalance = wmxLpUsdc.balanceOf(address(this));\\n        if (lpUsdcBalance > 0) {\\n            // get withdraw amount\\n            (uint256 usdcAmount,) = poolDepositor.getWithdrawAmountOut(address(lpUsdc), lpUsdcBalance);\\n            // withdraw\\n            poolDepositor.withdraw(address(lpUsdc), lpUsdcBalance, OvnMath.subBasisPoints(usdcAmount, 1), address(this));\\n        }\\n\\n        // swap usdc to busd\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n        uint256 busdBalanceOut = WombatLibrary.getAmountOut(\\n            wombatRouter,\\n            address(usdc),\\n            address(busd),\\n            address(pool),\\n            usdcBalance\\n        );\\n        if (busdBalanceOut > 0) {\\n            uint256 busdBalanceOracle = ChainlinkLibrary.convertTokenToToken(\\n                usdcBalance,\\n                usdcDm,\\n                busdDm,\\n                oracleUsdc,\\n                oracleBusd\\n            );\\n            WombatLibrary.swapExactTokensForTokens(\\n                wombatRouter,\\n                address(usdc),\\n                address(busd),\\n                address(pool),\\n                usdcBalance,\\n                OvnMath.subBasisPoints(busdBalanceOracle, swapSlippageBP),\\n                address(this)\\n            );\\n        }\\n\\n        return busd.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 busdBalance = busd.balanceOf(address(this));\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n\\n        uint256 lpUsdcBalance = wmxLpUsdc.balanceOf(address(this));\\n        if (lpUsdcBalance > 0) {\\n            (uint256 usdcAmount,) = poolDepositor.getWithdrawAmountOut(address(lpUsdc), lpUsdcBalance);\\n            usdcBalance += usdcAmount;\\n        }\\n\\n        if (usdcBalance > 0) {\\n            if (nav) {\\n                busdBalance += ChainlinkLibrary.convertTokenToToken(\\n                    usdcBalance,\\n                    usdcDm,\\n                    busdDm,\\n                    oracleUsdc,\\n                    oracleBusd\\n                );\\n            } else {\\n                busdBalance += WombatLibrary.getAmountOut(\\n                    wombatRouter,\\n                    address(usdc),\\n                    address(busd),\\n                    address(pool),\\n                    usdcBalance\\n                );\\n            }\\n        }\\n\\n        return busdBalance;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards\\n        uint256 lpUsdcBalance = wmxLpUsdc.balanceOf(address(this));\\n        if (lpUsdcBalance > 0) {\\n            wmxLpUsdc.getReward(address(this), false);\\n        }\\n\\n        // sell rewards\\n        uint256 totalBusd;\\n\\n        uint256 womBalance = wom.balanceOf(address(this));\\n        if (womBalance > 0) {\\n            uint256 amountOut = PancakeSwapLibrary.getAmountsOut(\\n                pancakeRouter,\\n                address(wom),\\n                address(busd),\\n                womBalance\\n            );\\n\\n            if (amountOut > 0) {\\n                uint256 womBusd = PancakeSwapLibrary.swapExactTokensForTokens(\\n                    pancakeRouter,\\n                    address(wom),\\n                    address(busd),\\n                    womBalance,\\n                    amountOut * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalBusd += womBusd;\\n            }\\n        }\\n\\n        uint256 wmxBalance = wmx.balanceOf(address(this));\\n        if (wmxBalance > 0) {\\n            uint256 amountOut = PancakeSwapLibrary.getAmountsOut(\\n                pancakeRouter,\\n                address(wmx),\\n                address(busd),\\n                wmxBalance\\n            );\\n\\n            if (amountOut > 0) {\\n                uint256 wmxBusd = PancakeSwapLibrary.swapExactTokensForTokens(\\n                    pancakeRouter,\\n                    address(wmx),\\n                    address(busd),\\n                    wmxBalance,\\n                    amountOut * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalBusd += wmxBusd;\\n            }\\n        }\\n\\n        if (totalBusd > 0) {\\n            busd.transfer(_to, totalBusd);\\n        }\\n\\n        return totalBusd;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa1b88fa89ed9a969c86bae121eb6dcb69f73de869e6f9f99e28e74cc153d8c71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b6200199d1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6143346200018e600039600081816108ae015281816108ee0152818161098e015281816109ce0152610a5d01526143346000f3fe60806040526004361061023b5760003560e01c8063620b75df1161012e578063bd25c6db116100ab578063d547741f1161006f578063d547741f146106a4578063dc19d643146106c4578063ef5cfb8c146106db578063f6f6b881146106fb578063fd35ece21461071b57600080fd5b8063bd25c6db1461060a578063bf52e0801461062b578063c21ebd0714610641578063c5a6222e14610662578063d2b9af8b1461068357600080fd5b8063a217fddf116100f2578063a217fddf1461057f578063a3673b3814610594578063a440b21a146105a9578063a66b5713146105c9578063adc9772e146105ea57600080fd5b8063620b75df146104e85780636b42c576146105085780637d5f5802146105285780638129fc1c1461054a57806391d148541461055f57600080fd5b806336568abe116101bc57806352d1902d1161018057806352d1902d1461043d578063588250c6146104525780635dbd733a146104725780635fea9cbb146104a6578063612c87df146104c757600080fd5b806336568abe146103a85780633659cfe6146103c85780633ca5b234146103e85780633e413bee146104095780634f1ef2861461042a57600080fd5b806318bc0faa1161020357806318bc0faa1461030a5780631b1e7ddc1461032c578063248a9ca3146103435780632576e65a146103735780632f2ff15d1461038857600080fd5b806301ffc9a714610240578063083975d4146102755780630a37cacd146102ae578063119cd879146102d357806316f0115b146102e9575b600080fd5b34801561024c57600080fd5b5061026061025b366004613beb565b61073c565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061013054610296906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b3480156102ba57600080fd5b506102c561013b5481565b60405190815260200161026c565b3480156102df57600080fd5b506102c560fd5481565b3480156102f557600080fd5b5061013454610296906001600160a01b031681565b34801561031657600080fd5b5061032a610325366004613c75565b610773565b005b34801561033857600080fd5b506102c561013a5481565b34801561034f57600080fd5b506102c561035e366004613b89565b60009081526065602052604090206001015490565b34801561037f57600080fd5b506102c56107ea565b34801561039457600080fd5b5061032a6103a3366004613bbb565b6107fb565b3480156103b457600080fd5b5061032a6103c3366004613bbb565b610825565b3480156103d457600080fd5b5061032a6103e33660046139ce565b6108a3565b3480156103f457600080fd5b5061012d54610296906001600160a01b031681565b34801561041557600080fd5b5061012e54610296906001600160a01b031681565b61032a610438366004613a08565b610983565b34801561044957600080fd5b506102c5610a50565b34801561045e57600080fd5b5061032a61046d366004613c15565b610b03565b34801561047e57600080fd5b506102c57fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156104b257600080fd5b5061013854610296906001600160a01b031681565b3480156104d357600080fd5b5061013654610296906001600160a01b031681565b3480156104f457600080fd5b5060fb54610296906001600160a01b031681565b34801561051457600080fd5b5061032a610523366004613c75565b6110cd565b34801561053457600080fd5b506102c560008051602061429883398151915281565b34801561055657600080fd5b5061032a6111f5565b34801561056b57600080fd5b5061026061057a366004613bbb565b6112bf565b34801561058b57600080fd5b506102c5600081565b3480156105a057600080fd5b506102c56112ea565b3480156105b557600080fd5b5061032a6105c43660046139ce565b6112f6565b3480156105d557600080fd5b5061013754610296906001600160a01b031681565b3480156105f657600080fd5b5061032a610605366004613ab0565b6113fe565b34801561061657600080fd5b5061013354610296906001600160a01b031681565b34801561063757600080fd5b506102c560fc5481565b34801561064d57600080fd5b5061013554610296906001600160a01b031681565b34801561066e57600080fd5b5061012f54610296906001600160a01b031681565b34801561068f57600080fd5b5061013254610296906001600160a01b031681565b3480156106b057600080fd5b5061032a6106bf366004613bbb565b61162d565b3480156106d057600080fd5b506102c56101395481565b3480156106e757600080fd5b506102c56106f63660046139ce565b611652565b34801561070757600080fd5b506102c5610716366004613adc565b6116d4565b34801561072757600080fd5b5061013154610296906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061076d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61077e6000336112bf565b6107a35760405162461bcd60e51b815260040161079a90613fa6565b60405180910390fd5b60fc82905560fd81905560408051838152602081018390527fce5a32eeae390ce399fd83b29e4bee51b2b1a5898dc3575411e3a498f4f552a0910160405180910390a15050565b60006107f660006119ac565b905090565b60008281526065602052604090206001015461081681611c61565b6108208383611c6b565b505050565b6001600160a01b03811633146108955760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161079a565b61089f8282611cf1565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108ec5760405162461bcd60e51b815260040161079a90613ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109356000805160206142b8833981519152546001600160a01b031690565b6001600160a01b03161461095b5760405162461bcd60e51b815260040161079a90613f0c565b61096481611d58565b6040805160008082526020820190925261098091839190611d63565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109cc5760405162461bcd60e51b815260040161079a90613ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a156000805160206142b8833981519152546001600160a01b031690565b6001600160a01b031614610a3b5760405162461bcd60e51b815260040161079a90613f0c565b610a4482611d58565b61089f82826001611d63565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079a565b506000805160206142b883398151915290565b610b0e6000336112bf565b610b2a5760405162461bcd60e51b815260040161079a90613fa6565b610b3760208201826139ce565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610b6860408201602083016139ce565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610b9960608201604083016139ce565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610bca60808201606083016139ce565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610bfb60a08201608083016139ce565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610c2c60c0820160a083016139ce565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610c5d60e0820160c083016139ce565b61013380546001600160a01b0319166001600160a01b0392831617905561013154604080516316f0115b60e01b8152905191909216916316f0115b916004808301926020929190829003018186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906139eb565b61013480546001600160a01b0319166001600160a01b0392909216919091179055610d23610120820161010083016139ce565b61013580546001600160a01b0319166001600160a01b0392909216919091179055610d56610140820161012083016139ce565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610d89610160820161014083016139ce565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610dbc610180820161016083016139ce565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610dea60208201826139ce565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2257600080fd5b505afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190613cbb565b610e6590600a61410e565b61013955610e7960408201602083016139ce565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb157600080fd5b505afa158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee99190613cbb565b610ef490600a61410e565b61013a55610f0860a08201608083016139ce565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190613cbb565b610f8390600a61410e565b61013b5561012e546101335460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610fc19291169060001990600401613db3565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190613b6c565b50610132546101335460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261104e9291169060001990600401613db3565b602060405180830381600087803b15801561106857600080fd5b505af115801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190613b6c565b506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b6110f77fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336112bf565b8061119e575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190613b6c565b6107a35760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b606482015260840161079a565b600054610100900460ff16158080156112155750600054600160ff909116105b8061122f5750303b15801561122f575060005460ff166001145b61124b5760405162461bcd60e51b815260040161079a90613f58565b6000805460ff19166001179055801561126e576000805461ff0019166101001790555b611276611edd565b8015610980576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107f660016119ac565b6113016000336112bf565b61131d5760405162461bcd60e51b815260040161079a90613fa6565b6001600160a01b0381166113735760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161079a565b60fb5461139890600080516020614298833981519152906001600160a01b031661162d565b6113b0600080516020614298833981519152826107fb565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016112b4565b611416600080516020614298833981519152336112bf565b6114325760405162461bcd60e51b815260040161079a90613e89565b60006114b0306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561147057600080fd5b505afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190613ba2565b60fd54611fbd565b6040516370a0823160e01b81523060048201529091506115359084906001600160a01b038216906370a082319060240160206040518083038186803b1580156114f857600080fd5b505afa15801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613ba2565b611fe7565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190613ba2565b10156115f55760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161079a565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a1505050565b60008281526065602052604090206001015461164881611c61565b6108208383611cf1565b600061166c600080516020614298833981519152336112bf565b6116885760405162461bcd60e51b815260040161079a90613e89565b6000611693836122ee565b9050801561076d576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a192915050565b60006116ee600080516020614298833981519152336112bf565b61170a5760405162461bcd60e51b815260040161079a90613e89565b6000611748306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561147057600080fd5b9050600080841561176f5761175c866122ee565b9050611768888761269f565b91506117de565b61177a888888612a28565b9150868210156117de5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161079a565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561181857600080fd5b505afa15801561182c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118509190613ba2565b101561189e5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161079a565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906118cc9089908690600401613db3565b602060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e9190613b6c565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611992576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190613ba2565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaf9190613ba2565b610132546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b319190613ba2565b90508015611bd557610133546101315460405163135dbd1360e01b81526000926001600160a01b039081169263135dbd1392611b7592909116908690600401613db3565b604080518083038186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc49190613c97565b509050611bd18184614091565b9250505b8115611c58578415611c1e5761013a54610139546101385461013754611c0d938693909290916001600160a01b039182169116612d8a565b611c179084614091565b9250611c58565b6101365461012e5461012d5461013454611c4b936001600160a01b03908116938116928116911686612eaa565b611c559084614091565b92505b50909392505050565b610980813361300b565b611c7582826112bf565b61089f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cad3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611cfb82826112bf565b1561089f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061089f81611c61565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d96576108208361306f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dcf57600080fd5b505afa925050508015611dff575060408051601f3d908101601f19168201909252611dfc91810190613ba2565b60015b611e625760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161079a565b6000805160206142b88339815191528114611ed15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161079a565b5061082083838361310b565b600054610100900460ff1615808015611efd5750600054600160ff909116105b80611f175750303b158015611f17575060005460ff166001145b611f335760405162461bcd60e51b815260040161079a90613f58565b6000805460ff191660011790558015611f56576000805461ff0019166101001790555b611f5e613136565b611f66613136565b611f71600033611c6b565b601460fc81905560fd558015610980576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016112b4565b6000612710611fcc83826141d8565b611fd690856141b9565b611fe091906140a9565b9392505050565b61012d546001600160a01b038381169116146120155760405162461bcd60e51b815260040161079a90613fd4565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561205a57600080fd5b505afa15801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190613ba2565b6101365461012d5461012e54610134549394506000936120c5936001600160a01b03908116938116928116911686612eaa565b90508015612144576101395461013a5461013754610138546000936120fc938793919290916001600160a01b039081169116612d8a565b6101365461012d5461012e546101345460fc54949550612141946001600160a01b0394851694938416939283169290911690889061213b908890611fbd565b306131a3565b50505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561218957600080fd5b505afa15801561219d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c19190613ba2565b6101335461013154604051630650739d60e41b81529293506000926001600160a01b039283169263650739d0926121ff929116908690600401613db3565b604080518083038186803b15801561221657600080fd5b505afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190613c97565b5061013354610131549192506001600160a01b039081169163fe41e524911684612279856001611fbd565b6040516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152604482015260016064820152608401600060405180830381600087803b1580156122ce57600080fd5b505af11580156122e2573d6000803e3d6000fd5b50505050505050505050565b610132546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561233757600080fd5b505afa15801561234b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236f9190613ba2565b905080156123fe5761013254604051637050ccd960e01b8152306004820152600060248201526001600160a01b0390911690637050ccd990604401602060405180830381600087803b1580156123c457600080fd5b505af11580156123d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fc9190613b6c565b505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561244757600080fd5b505afa15801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f9190613ba2565b9050801561250d576101355461012f5461012d546000926124b1926001600160a01b0391821692908216911685613354565b9050801561250b576101355461012f5461012d546000926124fb926001600160a01b039182169290821691168660646124eb8860636141b9565b6124f591906140a9565b3061347d565b90506125078185614091565b9350505b505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561255257600080fd5b505afa158015612566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258a9190613ba2565b9050801561260857610135546101305461012d546000926125bc926001600160a01b0391821692908216911685613354565b9050801561260657610135546101305461012d546000926125f6926001600160a01b039182169290821691168660646124eb8860636141b9565b90506126028186614091565b9450505b505b82156126955761012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906126419089908790600401613db3565b602060405180830381600087803b15801561265b57600080fd5b505af115801561266f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126939190613b6c565b505b5090949350505050565b61012d546000906001600160a01b038481169116146126d05760405162461bcd60e51b815260040161079a90613fd4565b610132546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d9190613ba2565b9050801561287957610133546101315460405163135dbd1360e01b81526000926001600160a01b039081169263135dbd139261279192909116908690600401613db3565b604080518083038186803b1580156127a857600080fd5b505afa1580156127bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e09190613c97565b5061013354610131549192506001600160a01b03908116916316762eed91168461280b856001611fbd565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152306064820152608401600060405180830381600087803b15801561285f57600080fd5b505af1158015612873573d6000803e3d6000fd5b50505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156128be57600080fd5b505afa1580156128d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f69190613ba2565b6101365461012e5461012d5461013454939450600093612929936001600160a01b03908116938116928116911686612eaa565b905080156129a25761013a54610139546101385461013754600093612960938793919290916001600160a01b039081169116612d8a565b6101365461012e5461012d546101345460fc5494955061299f946001600160a01b0394851694938416939283169290911690889061213b908890611fbd565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156129e657600080fd5b505afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e9190613ba2565b9695505050505050565b61012d546000906001600160a01b03858116911614612a595760405162461bcd60e51b815260040161079a90613fd4565b6101365461012e5461012d5461013454600093612a8b936001600160a01b039182169390821692908216911688612eaa565b9050600081612a9a86806141b9565b612aa491906140a9565b610133546101315461013b5460405163135dbd1360e01b81529394506000936001600160a01b039384169363135dbd1393612ae493911691600401613db3565b604080518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b339190613c97565b50905060008161013b54612b48856001613630565b612b5291906141b9565b612b5c91906140a9565b61013354610131546040516316762eed60e01b81526001600160a01b039182166004820152602481018490526044810187905230606482015292935016906316762eed90608401600060405180830381600087803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c549190613ba2565b6101365461012e5461012d5461013454939450600093612c87936001600160a01b03908116938116928116911686612eaa565b90508015612d005761013a54610139546101385461013754600093612cbe938793919290916001600160a01b039081169116612d8a565b6101365461012e5461012d546101345460fc54949550612cfd946001600160a01b0394851694938416939283169290911690889061213b908890611fbd565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612d4457600080fd5b505afa158015612d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7c9190613ba2565b9a9950505050505050505050565b600080836001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc657600080fd5b505afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe9190613ba2565b90506000836001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3b57600080fd5b505afa158015612e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e739190613ba2565b9050612e7f81886141b9565b82612e8a888b6141b9565b612e9491906141b9565b612e9e91906140a9565b98975050505050505050565b604080516002808252606082018352600092839291906020830190803683370190505090508581600081518110612ee357612ee3614248565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110612f1757612f17614248565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508481600081518110612f6857612f68614248565b6001600160a01b03928316602091820292909201015260405163b9e598c160e01b81526000918a169063b9e598c190612fa990869086908a90600401613dcc565b60006040518083038186803b158015612fc157600080fd5b505afa158015612fd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ffd9190810190613c2e565b509998505050505050505050565b61301582826112bf565b61089f5761302d816001600160a01b0316601461363f565b61303883602061363f565b604051602001613049929190613d3e565b60408051601f198184030181529082905262461bcd60e51b825261079a91600401613e56565b6001600160a01b0381163b6130dc5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161079a565b6000805160206142b883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613114836137db565b6000825111806131215750805b1561082057613130838361381b565b50505050565b600054610100900460ff166131a15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161079a565b565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b3906131d4908b908890600401613db3565b602060405180830381600087803b1580156131ee57600080fd5b505af1158015613202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132269190613b6c565b50604080516002808252606082018352600092602083019080368337019050509050878160008151811061325c5761325c614248565b60200260200101906001600160a01b031690816001600160a01b031681525050868160018151811061329057613290614248565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905086816000815181106132e1576132e1614248565b6001600160a01b03928316602091820292909201015260405163351041e960e21b8152908b169063d44107a49061332690859085908b908b908b904290600401613e02565b602060405180830381600087803b15801561334057600080fd5b505af1158015612d58573d6000803e3d6000fd5b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061338d5761338d614248565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106133c1576133c1614248565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009188169063d06ca61f90613400908790869060040161400b565b60006040518083038186803b15801561341857600080fd5b505afa15801561342c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134549190810190613b2f565b90508060018151811061346957613469614248565b602002602001015192505050949350505050565b60405163095ea7b360e01b81526000906001600160a01b0387169063095ea7b3906134ae908a908890600401613db3565b602060405180830381600087803b1580156134c857600080fd5b505af11580156134dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135009190613b6c565b50604080516002808252606082018352600092602083019080368337019050509050868160008151811061353657613536614248565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061356a5761356a614248565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918a16906338ed1739906135af908990899087908a904290600401614024565b600060405180830381600087803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136059190810190613b2f565b90508060018151811061361a5761361a614248565b6020026020010151925050509695505050505050565b6000612710611fcc8382614091565b6060600061364e8360026141b9565b613659906002614091565b67ffffffffffffffff8111156136715761367161425e565b6040519080825280601f01601f19166020018201604052801561369b576020820181803683370190505b509050600360fc1b816000815181106136b6576136b6614248565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106136e5576136e5614248565b60200101906001600160f81b031916908160001a90535060006137098460026141b9565b613714906001614091565b90505b600181111561378c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061374857613748614248565b1a60f81b82828151811061375e5761375e614248565b60200101906001600160f81b031916908160001a90535060049490941c936137858161421b565b9050613717565b508315611fe05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079a565b6137e48161306f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6138835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161079a565b600080846001600160a01b03168460405161389e9190613d22565b600060405180830381855af49150503d80600081146138d9576040519150601f19603f3d011682016040523d82523d6000602084013e6138de565b606091505b509150915061390682826040518060600160405280602781526020016142d86027913961390f565b95945050505050565b6060831561391e575081611fe0565b82511561392e5782518084602001fd5b8160405162461bcd60e51b815260040161079a9190613e56565b600082601f83011261395957600080fd5b8151602067ffffffffffffffff8211156139755761397561425e565b8160051b613984828201614060565b83815282810190868401838801850189101561399f57600080fd5b600093505b858410156139c25780518352600193909301929184019184016139a4565b50979650505050505050565b6000602082840312156139e057600080fd5b8135611fe081614274565b6000602082840312156139fd57600080fd5b8151611fe081614274565b60008060408385031215613a1b57600080fd5b8235613a2681614274565b915060208381013567ffffffffffffffff80821115613a4457600080fd5b818601915086601f830112613a5857600080fd5b813581811115613a6a57613a6a61425e565b613a7c601f8201601f19168501614060565b91508082528784828501011115613a9257600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215613ac357600080fd5b8235613ace81614274565b946020939093013593505050565b60008060008060808587031215613af257600080fd5b8435613afd81614274565b9350602085013592506040850135613b1481614274565b91506060850135613b2481614289565b939692955090935050565b600060208284031215613b4157600080fd5b815167ffffffffffffffff811115613b5857600080fd5b613b6484828501613948565b949350505050565b600060208284031215613b7e57600080fd5b8151611fe081614289565b600060208284031215613b9b57600080fd5b5035919050565b600060208284031215613bb457600080fd5b5051919050565b60008060408385031215613bce57600080fd5b823591506020830135613be081614274565b809150509250929050565b600060208284031215613bfd57600080fd5b81356001600160e01b031981168114611fe057600080fd5b60006101808284031215613c2857600080fd5b50919050565b60008060408385031215613c4157600080fd5b82519150602083015167ffffffffffffffff811115613c5f57600080fd5b613c6b85828601613948565b9150509250929050565b60008060408385031215613c8857600080fd5b50508035926020909101359150565b60008060408385031215613caa57600080fd5b505080516020909101519092909150565b600060208284031215613ccd57600080fd5b815160ff81168114611fe057600080fd5b600081518084526020808501945080840160005b83811015613d175781516001600160a01b031687529582019590820190600101613cf2565b509495945050505050565b60008251613d348184602087016141ef565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613d768160178501602088016141ef565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613da78160288401602088016141ef565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b606081526000613ddf6060830186613cde565b8281036020840152613df18186613cde565b915050826040830152949350505050565b60c081526000613e1560c0830189613cde565b8281036020840152613e278189613cde565b6040840197909752505060608101939093526001600160a01b0391909116608083015260a09091015292915050565b6020815260008251806020840152613e758160408501602087016141ef565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b828152604060208201526000613b646040830184613cde565b85815284602082015260a06040820152600061404360a0830186613cde565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156140895761408961425e565b604052919050565b600082198211156140a4576140a4614232565b500190565b6000826140c657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156141065781600019048211156140ec576140ec614232565b808516156140f957918102915b93841c93908002906140d0565b509250929050565b6000611fe060ff8416836000826141275750600161076d565b816141345750600061076d565b816001811461414a576002811461415457614170565b600191505061076d565b60ff84111561416557614165614232565b50506001821b61076d565b5060208310610133831016604e8410600b8410161715614193575081810a61076d565b61419d83836140cb565b80600019048211156141b1576141b1614232565b029392505050565b60008160001904831182151516156141d3576141d3614232565b500290565b6000828210156141ea576141ea614232565b500390565b60005b8381101561420a5781810151838201526020016141f2565b838111156131305750506000910152565b60008161422a5761422a614232565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461098057600080fd5b801515811461098057600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122076138435b8037d10321b58602b148d479ed6ed185b8c82a0f967c56ca681e0a564736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c8063620b75df1161012e578063bd25c6db116100ab578063d547741f1161006f578063d547741f146106a4578063dc19d643146106c4578063ef5cfb8c146106db578063f6f6b881146106fb578063fd35ece21461071b57600080fd5b8063bd25c6db1461060a578063bf52e0801461062b578063c21ebd0714610641578063c5a6222e14610662578063d2b9af8b1461068357600080fd5b8063a217fddf116100f2578063a217fddf1461057f578063a3673b3814610594578063a440b21a146105a9578063a66b5713146105c9578063adc9772e146105ea57600080fd5b8063620b75df146104e85780636b42c576146105085780637d5f5802146105285780638129fc1c1461054a57806391d148541461055f57600080fd5b806336568abe116101bc57806352d1902d1161018057806352d1902d1461043d578063588250c6146104525780635dbd733a146104725780635fea9cbb146104a6578063612c87df146104c757600080fd5b806336568abe146103a85780633659cfe6146103c85780633ca5b234146103e85780633e413bee146104095780634f1ef2861461042a57600080fd5b806318bc0faa1161020357806318bc0faa1461030a5780631b1e7ddc1461032c578063248a9ca3146103435780632576e65a146103735780632f2ff15d1461038857600080fd5b806301ffc9a714610240578063083975d4146102755780630a37cacd146102ae578063119cd879146102d357806316f0115b146102e9575b600080fd5b34801561024c57600080fd5b5061026061025b366004613beb565b61073c565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061013054610296906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b3480156102ba57600080fd5b506102c561013b5481565b60405190815260200161026c565b3480156102df57600080fd5b506102c560fd5481565b3480156102f557600080fd5b5061013454610296906001600160a01b031681565b34801561031657600080fd5b5061032a610325366004613c75565b610773565b005b34801561033857600080fd5b506102c561013a5481565b34801561034f57600080fd5b506102c561035e366004613b89565b60009081526065602052604090206001015490565b34801561037f57600080fd5b506102c56107ea565b34801561039457600080fd5b5061032a6103a3366004613bbb565b6107fb565b3480156103b457600080fd5b5061032a6103c3366004613bbb565b610825565b3480156103d457600080fd5b5061032a6103e33660046139ce565b6108a3565b3480156103f457600080fd5b5061012d54610296906001600160a01b031681565b34801561041557600080fd5b5061012e54610296906001600160a01b031681565b61032a610438366004613a08565b610983565b34801561044957600080fd5b506102c5610a50565b34801561045e57600080fd5b5061032a61046d366004613c15565b610b03565b34801561047e57600080fd5b506102c57fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156104b257600080fd5b5061013854610296906001600160a01b031681565b3480156104d357600080fd5b5061013654610296906001600160a01b031681565b3480156104f457600080fd5b5060fb54610296906001600160a01b031681565b34801561051457600080fd5b5061032a610523366004613c75565b6110cd565b34801561053457600080fd5b506102c560008051602061429883398151915281565b34801561055657600080fd5b5061032a6111f5565b34801561056b57600080fd5b5061026061057a366004613bbb565b6112bf565b34801561058b57600080fd5b506102c5600081565b3480156105a057600080fd5b506102c56112ea565b3480156105b557600080fd5b5061032a6105c43660046139ce565b6112f6565b3480156105d557600080fd5b5061013754610296906001600160a01b031681565b3480156105f657600080fd5b5061032a610605366004613ab0565b6113fe565b34801561061657600080fd5b5061013354610296906001600160a01b031681565b34801561063757600080fd5b506102c560fc5481565b34801561064d57600080fd5b5061013554610296906001600160a01b031681565b34801561066e57600080fd5b5061012f54610296906001600160a01b031681565b34801561068f57600080fd5b5061013254610296906001600160a01b031681565b3480156106b057600080fd5b5061032a6106bf366004613bbb565b61162d565b3480156106d057600080fd5b506102c56101395481565b3480156106e757600080fd5b506102c56106f63660046139ce565b611652565b34801561070757600080fd5b506102c5610716366004613adc565b6116d4565b34801561072757600080fd5b5061013154610296906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061076d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61077e6000336112bf565b6107a35760405162461bcd60e51b815260040161079a90613fa6565b60405180910390fd5b60fc82905560fd81905560408051838152602081018390527fce5a32eeae390ce399fd83b29e4bee51b2b1a5898dc3575411e3a498f4f552a0910160405180910390a15050565b60006107f660006119ac565b905090565b60008281526065602052604090206001015461081681611c61565b6108208383611c6b565b505050565b6001600160a01b03811633146108955760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161079a565b61089f8282611cf1565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108ec5760405162461bcd60e51b815260040161079a90613ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109356000805160206142b8833981519152546001600160a01b031690565b6001600160a01b03161461095b5760405162461bcd60e51b815260040161079a90613f0c565b61096481611d58565b6040805160008082526020820190925261098091839190611d63565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109cc5760405162461bcd60e51b815260040161079a90613ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a156000805160206142b8833981519152546001600160a01b031690565b6001600160a01b031614610a3b5760405162461bcd60e51b815260040161079a90613f0c565b610a4482611d58565b61089f82826001611d63565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079a565b506000805160206142b883398151915290565b610b0e6000336112bf565b610b2a5760405162461bcd60e51b815260040161079a90613fa6565b610b3760208201826139ce565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610b6860408201602083016139ce565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610b9960608201604083016139ce565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610bca60808201606083016139ce565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610bfb60a08201608083016139ce565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610c2c60c0820160a083016139ce565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610c5d60e0820160c083016139ce565b61013380546001600160a01b0319166001600160a01b0392831617905561013154604080516316f0115b60e01b8152905191909216916316f0115b916004808301926020929190829003018186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906139eb565b61013480546001600160a01b0319166001600160a01b0392909216919091179055610d23610120820161010083016139ce565b61013580546001600160a01b0319166001600160a01b0392909216919091179055610d56610140820161012083016139ce565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610d89610160820161014083016139ce565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610dbc610180820161016083016139ce565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610dea60208201826139ce565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2257600080fd5b505afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190613cbb565b610e6590600a61410e565b61013955610e7960408201602083016139ce565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb157600080fd5b505afa158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee99190613cbb565b610ef490600a61410e565b61013a55610f0860a08201608083016139ce565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190613cbb565b610f8390600a61410e565b61013b5561012e546101335460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610fc19291169060001990600401613db3565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190613b6c565b50610132546101335460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261104e9291169060001990600401613db3565b602060405180830381600087803b15801561106857600080fd5b505af115801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a09190613b6c565b506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b6110f77fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336112bf565b8061119e575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190613b6c565b6107a35760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b606482015260840161079a565b600054610100900460ff16158080156112155750600054600160ff909116105b8061122f5750303b15801561122f575060005460ff166001145b61124b5760405162461bcd60e51b815260040161079a90613f58565b6000805460ff19166001179055801561126e576000805461ff0019166101001790555b611276611edd565b8015610980576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107f660016119ac565b6113016000336112bf565b61131d5760405162461bcd60e51b815260040161079a90613fa6565b6001600160a01b0381166113735760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161079a565b60fb5461139890600080516020614298833981519152906001600160a01b031661162d565b6113b0600080516020614298833981519152826107fb565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016112b4565b611416600080516020614298833981519152336112bf565b6114325760405162461bcd60e51b815260040161079a90613e89565b60006114b0306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561147057600080fd5b505afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190613ba2565b60fd54611fbd565b6040516370a0823160e01b81523060048201529091506115359084906001600160a01b038216906370a082319060240160206040518083038186803b1580156114f857600080fd5b505afa15801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613ba2565b611fe7565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190613ba2565b10156115f55760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161079a565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a1505050565b60008281526065602052604090206001015461164881611c61565b6108208383611cf1565b600061166c600080516020614298833981519152336112bf565b6116885760405162461bcd60e51b815260040161079a90613e89565b6000611693836122ee565b9050801561076d576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a192915050565b60006116ee600080516020614298833981519152336112bf565b61170a5760405162461bcd60e51b815260040161079a90613e89565b6000611748306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561147057600080fd5b9050600080841561176f5761175c866122ee565b9050611768888761269f565b91506117de565b61177a888888612a28565b9150868210156117de5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161079a565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561181857600080fd5b505afa15801561182c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118509190613ba2565b101561189e5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161079a565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906118cc9089908690600401613db3565b602060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e9190613b6c565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611992576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190613ba2565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaf9190613ba2565b610132546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b319190613ba2565b90508015611bd557610133546101315460405163135dbd1360e01b81526000926001600160a01b039081169263135dbd1392611b7592909116908690600401613db3565b604080518083038186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc49190613c97565b509050611bd18184614091565b9250505b8115611c58578415611c1e5761013a54610139546101385461013754611c0d938693909290916001600160a01b039182169116612d8a565b611c179084614091565b9250611c58565b6101365461012e5461012d5461013454611c4b936001600160a01b03908116938116928116911686612eaa565b611c559084614091565b92505b50909392505050565b610980813361300b565b611c7582826112bf565b61089f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cad3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611cfb82826112bf565b1561089f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061089f81611c61565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d96576108208361306f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dcf57600080fd5b505afa925050508015611dff575060408051601f3d908101601f19168201909252611dfc91810190613ba2565b60015b611e625760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161079a565b6000805160206142b88339815191528114611ed15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161079a565b5061082083838361310b565b600054610100900460ff1615808015611efd5750600054600160ff909116105b80611f175750303b158015611f17575060005460ff166001145b611f335760405162461bcd60e51b815260040161079a90613f58565b6000805460ff191660011790558015611f56576000805461ff0019166101001790555b611f5e613136565b611f66613136565b611f71600033611c6b565b601460fc81905560fd558015610980576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016112b4565b6000612710611fcc83826141d8565b611fd690856141b9565b611fe091906140a9565b9392505050565b61012d546001600160a01b038381169116146120155760405162461bcd60e51b815260040161079a90613fd4565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561205a57600080fd5b505afa15801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190613ba2565b6101365461012d5461012e54610134549394506000936120c5936001600160a01b03908116938116928116911686612eaa565b90508015612144576101395461013a5461013754610138546000936120fc938793919290916001600160a01b039081169116612d8a565b6101365461012d5461012e546101345460fc54949550612141946001600160a01b0394851694938416939283169290911690889061213b908890611fbd565b306131a3565b50505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561218957600080fd5b505afa15801561219d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c19190613ba2565b6101335461013154604051630650739d60e41b81529293506000926001600160a01b039283169263650739d0926121ff929116908690600401613db3565b604080518083038186803b15801561221657600080fd5b505afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e9190613c97565b5061013354610131549192506001600160a01b039081169163fe41e524911684612279856001611fbd565b6040516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152604482015260016064820152608401600060405180830381600087803b1580156122ce57600080fd5b505af11580156122e2573d6000803e3d6000fd5b50505050505050505050565b610132546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561233757600080fd5b505afa15801561234b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236f9190613ba2565b905080156123fe5761013254604051637050ccd960e01b8152306004820152600060248201526001600160a01b0390911690637050ccd990604401602060405180830381600087803b1580156123c457600080fd5b505af11580156123d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fc9190613b6c565b505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561244757600080fd5b505afa15801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f9190613ba2565b9050801561250d576101355461012f5461012d546000926124b1926001600160a01b0391821692908216911685613354565b9050801561250b576101355461012f5461012d546000926124fb926001600160a01b039182169290821691168660646124eb8860636141b9565b6124f591906140a9565b3061347d565b90506125078185614091565b9350505b505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561255257600080fd5b505afa158015612566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258a9190613ba2565b9050801561260857610135546101305461012d546000926125bc926001600160a01b0391821692908216911685613354565b9050801561260657610135546101305461012d546000926125f6926001600160a01b039182169290821691168660646124eb8860636141b9565b90506126028186614091565b9450505b505b82156126955761012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906126419089908790600401613db3565b602060405180830381600087803b15801561265b57600080fd5b505af115801561266f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126939190613b6c565b505b5090949350505050565b61012d546000906001600160a01b038481169116146126d05760405162461bcd60e51b815260040161079a90613fd4565b610132546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d9190613ba2565b9050801561287957610133546101315460405163135dbd1360e01b81526000926001600160a01b039081169263135dbd139261279192909116908690600401613db3565b604080518083038186803b1580156127a857600080fd5b505afa1580156127bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e09190613c97565b5061013354610131549192506001600160a01b03908116916316762eed91168461280b856001611fbd565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152306064820152608401600060405180830381600087803b15801561285f57600080fd5b505af1158015612873573d6000803e3d6000fd5b50505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156128be57600080fd5b505afa1580156128d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f69190613ba2565b6101365461012e5461012d5461013454939450600093612929936001600160a01b03908116938116928116911686612eaa565b905080156129a25761013a54610139546101385461013754600093612960938793919290916001600160a01b039081169116612d8a565b6101365461012e5461012d546101345460fc5494955061299f946001600160a01b0394851694938416939283169290911690889061213b908890611fbd565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156129e657600080fd5b505afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e9190613ba2565b9695505050505050565b61012d546000906001600160a01b03858116911614612a595760405162461bcd60e51b815260040161079a90613fd4565b6101365461012e5461012d5461013454600093612a8b936001600160a01b039182169390821692908216911688612eaa565b9050600081612a9a86806141b9565b612aa491906140a9565b610133546101315461013b5460405163135dbd1360e01b81529394506000936001600160a01b039384169363135dbd1393612ae493911691600401613db3565b604080518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b339190613c97565b50905060008161013b54612b48856001613630565b612b5291906141b9565b612b5c91906140a9565b61013354610131546040516316762eed60e01b81526001600160a01b039182166004820152602481018490526044810187905230606482015292935016906316762eed90608401600060405180830381600087803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c549190613ba2565b6101365461012e5461012d5461013454939450600093612c87936001600160a01b03908116938116928116911686612eaa565b90508015612d005761013a54610139546101385461013754600093612cbe938793919290916001600160a01b039081169116612d8a565b6101365461012e5461012d546101345460fc54949550612cfd946001600160a01b0394851694938416939283169290911690889061213b908890611fbd565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612d4457600080fd5b505afa158015612d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7c9190613ba2565b9a9950505050505050505050565b600080836001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc657600080fd5b505afa158015612dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfe9190613ba2565b90506000836001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3b57600080fd5b505afa158015612e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e739190613ba2565b9050612e7f81886141b9565b82612e8a888b6141b9565b612e9491906141b9565b612e9e91906140a9565b98975050505050505050565b604080516002808252606082018352600092839291906020830190803683370190505090508581600081518110612ee357612ee3614248565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110612f1757612f17614248565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508481600081518110612f6857612f68614248565b6001600160a01b03928316602091820292909201015260405163b9e598c160e01b81526000918a169063b9e598c190612fa990869086908a90600401613dcc565b60006040518083038186803b158015612fc157600080fd5b505afa158015612fd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ffd9190810190613c2e565b509998505050505050505050565b61301582826112bf565b61089f5761302d816001600160a01b0316601461363f565b61303883602061363f565b604051602001613049929190613d3e565b60408051601f198184030181529082905262461bcd60e51b825261079a91600401613e56565b6001600160a01b0381163b6130dc5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161079a565b6000805160206142b883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613114836137db565b6000825111806131215750805b1561082057613130838361381b565b50505050565b600054610100900460ff166131a15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161079a565b565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b3906131d4908b908890600401613db3565b602060405180830381600087803b1580156131ee57600080fd5b505af1158015613202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132269190613b6c565b50604080516002808252606082018352600092602083019080368337019050509050878160008151811061325c5761325c614248565b60200260200101906001600160a01b031690816001600160a01b031681525050868160018151811061329057613290614248565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905086816000815181106132e1576132e1614248565b6001600160a01b03928316602091820292909201015260405163351041e960e21b8152908b169063d44107a49061332690859085908b908b908b904290600401613e02565b602060405180830381600087803b15801561334057600080fd5b505af1158015612d58573d6000803e3d6000fd5b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061338d5761338d614248565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106133c1576133c1614248565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009188169063d06ca61f90613400908790869060040161400b565b60006040518083038186803b15801561341857600080fd5b505afa15801561342c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134549190810190613b2f565b90508060018151811061346957613469614248565b602002602001015192505050949350505050565b60405163095ea7b360e01b81526000906001600160a01b0387169063095ea7b3906134ae908a908890600401613db3565b602060405180830381600087803b1580156134c857600080fd5b505af11580156134dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135009190613b6c565b50604080516002808252606082018352600092602083019080368337019050509050868160008151811061353657613536614248565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061356a5761356a614248565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918a16906338ed1739906135af908990899087908a904290600401614024565b600060405180830381600087803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136059190810190613b2f565b90508060018151811061361a5761361a614248565b6020026020010151925050509695505050505050565b6000612710611fcc8382614091565b6060600061364e8360026141b9565b613659906002614091565b67ffffffffffffffff8111156136715761367161425e565b6040519080825280601f01601f19166020018201604052801561369b576020820181803683370190505b509050600360fc1b816000815181106136b6576136b6614248565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106136e5576136e5614248565b60200101906001600160f81b031916908160001a90535060006137098460026141b9565b613714906001614091565b90505b600181111561378c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061374857613748614248565b1a60f81b82828151811061375e5761375e614248565b60200101906001600160f81b031916908160001a90535060049490941c936137858161421b565b9050613717565b508315611fe05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079a565b6137e48161306f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6138835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161079a565b600080846001600160a01b03168460405161389e9190613d22565b600060405180830381855af49150503d80600081146138d9576040519150601f19603f3d011682016040523d82523d6000602084013e6138de565b606091505b509150915061390682826040518060600160405280602781526020016142d86027913961390f565b95945050505050565b6060831561391e575081611fe0565b82511561392e5782518084602001fd5b8160405162461bcd60e51b815260040161079a9190613e56565b600082601f83011261395957600080fd5b8151602067ffffffffffffffff8211156139755761397561425e565b8160051b613984828201614060565b83815282810190868401838801850189101561399f57600080fd5b600093505b858410156139c25780518352600193909301929184019184016139a4565b50979650505050505050565b6000602082840312156139e057600080fd5b8135611fe081614274565b6000602082840312156139fd57600080fd5b8151611fe081614274565b60008060408385031215613a1b57600080fd5b8235613a2681614274565b915060208381013567ffffffffffffffff80821115613a4457600080fd5b818601915086601f830112613a5857600080fd5b813581811115613a6a57613a6a61425e565b613a7c601f8201601f19168501614060565b91508082528784828501011115613a9257600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215613ac357600080fd5b8235613ace81614274565b946020939093013593505050565b60008060008060808587031215613af257600080fd5b8435613afd81614274565b9350602085013592506040850135613b1481614274565b91506060850135613b2481614289565b939692955090935050565b600060208284031215613b4157600080fd5b815167ffffffffffffffff811115613b5857600080fd5b613b6484828501613948565b949350505050565b600060208284031215613b7e57600080fd5b8151611fe081614289565b600060208284031215613b9b57600080fd5b5035919050565b600060208284031215613bb457600080fd5b5051919050565b60008060408385031215613bce57600080fd5b823591506020830135613be081614274565b809150509250929050565b600060208284031215613bfd57600080fd5b81356001600160e01b031981168114611fe057600080fd5b60006101808284031215613c2857600080fd5b50919050565b60008060408385031215613c4157600080fd5b82519150602083015167ffffffffffffffff811115613c5f57600080fd5b613c6b85828601613948565b9150509250929050565b60008060408385031215613c8857600080fd5b50508035926020909101359150565b60008060408385031215613caa57600080fd5b505080516020909101519092909150565b600060208284031215613ccd57600080fd5b815160ff81168114611fe057600080fd5b600081518084526020808501945080840160005b83811015613d175781516001600160a01b031687529582019590820190600101613cf2565b509495945050505050565b60008251613d348184602087016141ef565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613d768160178501602088016141ef565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613da78160288401602088016141ef565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b606081526000613ddf6060830186613cde565b8281036020840152613df18186613cde565b915050826040830152949350505050565b60c081526000613e1560c0830189613cde565b8281036020840152613e278189613cde565b6040840197909752505060608101939093526001600160a01b0391909116608083015260a09091015292915050565b6020815260008251806020840152613e758160408501602087016141ef565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b828152604060208201526000613b646040830184613cde565b85815284602082015260a06040820152600061404360a0830186613cde565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156140895761408961425e565b604052919050565b600082198211156140a4576140a4614232565b500190565b6000826140c657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156141065781600019048211156140ec576140ec614232565b808516156140f957918102915b93841c93908002906140d0565b509250929050565b6000611fe060ff8416836000826141275750600161076d565b816141345750600061076d565b816001811461414a576002811461415457614170565b600191505061076d565b60ff84111561416557614165614232565b50506001821b61076d565b5060208310610133831016604e8410600b8410161715614193575081810a61076d565b61419d83836140cb565b80600019048211156141b1576141b1614232565b029392505050565b60008160001904831182151516156141d3576141d3614232565b500290565b6000828210156141ea576141ea614232565b500390565b60005b8381101561420a5781810151838201526020016141f2565b838111156131305750506000910152565b60008161422a5761422a614232565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461098057600080fd5b801515811461098057600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122076138435b8037d10321b58602b148d479ed6ed185b8c82a0f967c56ca681e0a564736f6c63430008060033",
  "implementation": "0xa181Dc5ba8821aAba59eb0eA7f1AFA1c91A0dF22",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10805,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 10807,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 10809,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 11206,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 26681,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "busd",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 26684,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "usdc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 26687,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "wom",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 26690,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "wmx",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 26693,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "lpUsdc",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IAsset)10344"
      },
      {
        "astId": 26696,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "wmxLpUsdc",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IBaseRewardPool)10601"
      },
      {
        "astId": 26699,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "poolDepositor",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IPoolDepositor)10646"
      },
      {
        "astId": 26702,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "pool",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IPool)10776"
      },
      {
        "astId": 26705,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "pancakeRouter",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IPancakeRouter02)7268"
      },
      {
        "astId": 26708,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "wombatRouter",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IWombatRouter)10102"
      },
      {
        "astId": 26711,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "oracleBusd",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPriceFeed)4905"
      },
      {
        "astId": 26714,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IPriceFeed)4905"
      },
      {
        "astId": 26716,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "busdDm",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 26718,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "usdcDm",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 26720,
        "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
        "label": "lpUsdcDm",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAsset)10344": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_contract(IBaseRewardPool)10601": {
        "encoding": "inplace",
        "label": "contract IBaseRewardPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2379": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)7268": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)10776": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolDepositor)10646": {
        "encoding": "inplace",
        "label": "contract IPoolDepositor",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)4905": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IWombatRouter)10102": {
        "encoding": "inplace",
        "label": "contract IWombatRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/busd/StrategyWombexUsdc.sol:StrategyWombexUsdc",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}