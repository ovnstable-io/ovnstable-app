{
  "address": "0xed197258b388AfaAD5f0D46B608B583E395ede92",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkBusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneGauge",
      "outputs": [
        {
          "internalType": "contract IGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conePair",
      "outputs": [
        {
          "internalType": "contract IConePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneRouter",
      "outputs": [
        {
          "internalType": "contract IConeRouter01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWalletPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "busdToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wBnbToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "conePair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneGauge",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "synapseStableSwapPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "chainlinkBusd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "chainlinkUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardWalletPercent",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unkwnToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unkwnUserProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unkwnLens",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unkwnPercent",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyConeBusdUsdc.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "synapseStableSwapPool",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnLens",
      "outputs": [
        {
          "internalType": "contract IUnkwnLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnUserProxy",
      "outputs": [
        {
          "internalType": "contract IUserProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wBnbToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "f71a6bf58bd23244b1c1e8b7c6e5fc0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkBusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneGauge\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conePair\",\"outputs\":[{\"internalType\":\"contract IConePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneRouter\",\"outputs\":[{\"internalType\":\"contract IConeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWalletPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"busdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wBnbToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"conePair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"synapseStableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkBusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardWalletPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unkwnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unkwnUserProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unkwnLens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unkwnPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyConeBusdUsdc.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synapseStableSwapPool\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnLens\",\"outputs\":[{\"internalType\":\"contract IUnkwnLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnUserProxy\",\"outputs\":[{\"internalType\":\"contract IUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBnbToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/busd/StrategyConeBusdUsdc.sol\":\"StrategyConeBusdUsdc\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x056c9d4cc5faf3fa6115f5033af1eebb3367d2ec747ee1da80a926940083825c\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IConeRouter01 {\\n\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n\\n    function getExactAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint);\\n\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) external view returns (uint amountA, uint amountB);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityMATIC(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountMATIC, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityMATIC(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountMATIC);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityMATICWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountMATIC);\\n\\n    function removeLiquidityMATICSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountFTM);\\n\\n    function removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountFTM);\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactMATICForTokens(uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForMATIC(uint amountIn, uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactMATICForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForMATICSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint[] memory amounts,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory);\\n\\n}\\n\\n\\ninterface IGauge {\\n\\n    function tokenIds(address account) external view returns (uint);\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function depositAll(uint tokenId) external;\\n\\n    function deposit(uint amount, uint tokenId) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint amount) external;\\n\\n    function withdrawToken(uint amount, uint tokenId) external;\\n\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account) external view returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n\\n}\\n\\n\\ninterface IConePair is IERC20 {\\n\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n}\\n\\n\\nlibrary ConeLibrary {\\n\\n    function getAmountOut(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = coneRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = coneRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function swap(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(coneRouter), amountIn);\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = coneRouter.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swap(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(coneRouter), amountIn);\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = coneRouter.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n}\\n\\ninterface IConeVoter {\\n\\n    function lastVote(uint tokenId) external returns (uint256 lastTime);\\n\\n    function vote(uint tokenId, address[] calldata _poolVote, int256[] calldata _weights) external ;\\n}\\n\",\"keccak256\":\"0xf401d1d6576146850a72263530b84b91f7b21aa652cb8661b06ec0add6a057c8\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Synapse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n    external\\n    view\\n    returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\\n\\ninterface IMiniChefV2 {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint128 accSynapsePerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function harvest(uint256 pid, address to) external;\\n\\n    function withdrawAndHarvest(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\\n\\nabstract contract SynapseExchange {\\n\\n    ISwap private synapseSwap;\\n\\n    function _setSynapseSwap(address _synapseSwap) internal {\\n        synapseSwap = ISwap(_synapseSwap);\\n    }\\n\\n    function _synapseCalculateSwap(\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 dx\\n    ) internal view returns (uint256) {\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\n        return synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    function _synapseSwap(\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 dx\\n    ) internal returns (uint256) {\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\n        uint256 minDy = synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n        if (minDy == 0) {\\n            return 0;\\n        }\\n        IERC20(tokenFrom).approve(address(synapseSwap), dx);\\n        return synapseSwap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, block.timestamp);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\\n\\nlibrary SynapseLibrary {\\n\\n    function calculateSwap(\\n        ISwap synapseSwap,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 dx\\n    ) internal view returns (uint256) {\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\n        return synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    function swap(\\n        ISwap synapseSwap,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 dx\\n    ) internal returns (uint256) {\\n        uint8 tokenIndexFrom = synapseSwap.getTokenIndex(tokenFrom);\\n        uint8 tokenIndexTo = synapseSwap.getTokenIndex(tokenTo);\\n        uint256 minDy = synapseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n        if (minDy == 0) {\\n            return 0;\\n        }\\n        IERC20(tokenFrom).approve(address(synapseSwap), dx);\\n        return synapseSwap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, block.timestamp);\\n    }\\n\\n    /**\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmount0(\\n        ISwap synapseSwap,\\n        address token0,\\n        address token1,\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision\\n    ) internal view returns (uint256 amount0) {\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = calculateSwap(synapseSwap, token0, token1, amount0);\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\n        }\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmountLpTokens(\\n        ISwap synapseSwap,\\n        address token0,\\n        address token1,\\n        uint256 amount0Total,\\n        uint256 totalAmountLpTokens,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision\\n    ) internal view returns (uint256 amountLpTokens) {\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\n            uint256 amount0 = calculateSwap(synapseSwap, token1, token0, amount1);\\n            amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\n        }\\n    }\\n\\n    /**\\n     * Get amounts of token0 and token1 nominated in token2 where amount2Total is total getting amount nominated in token2\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmounts(\\n        ISwap synapseSwap,\\n        address token0,\\n        address token1,\\n        address token2,\\n        uint256 amount2Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 precision\\n    ) internal view returns (uint256 amount0InToken2, uint256 amount1InToken2) {\\n        amount0InToken2 = (amount2Total * reserve0) / (reserve0 + reserve1 * amount0 / amount1);\\n        console.log(\\\"amount0InToken2: %s\\\", amount0InToken2);\\n        amount1InToken2 = amount2Total - amount0InToken2;\\n        console.log(\\\"amount1InToken2: %s\\\", amount1InToken2);\\n        for (uint i = 0; i < precision; i++) {\\n            amount0 = calculateSwap(synapseSwap, token2, token0, amount0InToken2);\\n            console.log(\\\"amount0: %s\\\", amount0);\\n            amount1 = calculateSwap(synapseSwap, token2, token1, amount1InToken2);\\n            console.log(\\\"amount1: %s\\\", amount1);\\n            amount0InToken2 = (amount2Total * reserve0) / (reserve0 + reserve1 * amount0 / amount1);\\n            console.log(\\\"amount0InToken2 %s: %s\\\", i, amount0InToken2);\\n            amount1InToken2 = amount2Total - amount0InToken2;\\n            console.log(\\\"amount1InToken2 %s: %s\\\", i, amount1InToken2);\\n        }\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount2Total is total getting amount nominated in token2\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmountLpTokens(\\n        ISwap synapseSwap,\\n        address token0,\\n        address token1,\\n        address token2,\\n        uint256 amount2Total,\\n        uint256 totalAmountLpTokens,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 precision\\n    ) internal view returns (uint256 amountLpTokens) {\\n        amountLpTokens = 0;\\n        for (uint i = 0; i < precision + 1; i++) {\\n            uint256 amount0InToken2 = reserve0 * amount2Total / (reserve0 + reserve1 * amount0 / amount1);\\n            console.log(\\\"amount0InToken2: %s\\\", amount0InToken2);\\n            amount0 = calculateSwap(synapseSwap, token2, token0, amount0InToken2);\\n            console.log(\\\"amount0: %s\\\", amount0);\\n            amount1 = calculateSwap(synapseSwap, token2, token1, amount2Total - amount0InToken2);\\n            console.log(\\\"amount1: %s\\\", amount1);\\n            amountLpTokens = (totalAmountLpTokens * (amount0 + amount1 * reserve0 / reserve1)) / (reserve0 + reserve1 * amount0 / amount1);\\n            console.log(\\\"amountLpTokens %s: %s\\\", i, amountLpTokens);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1c9f61928fdc98f9adfac7545267649a3ad614d1f2ce138fbd322071db2e3524\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Unknown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConeLens {\\n    struct Pool {\\n        address id;\\n        string symbol;\\n        bool stable;\\n        address token0Address;\\n        address token1Address;\\n        address gaugeAddress;\\n        address bribeAddress;\\n        address[] bribeTokensAddresses;\\n        address fees;\\n        uint256 totalSupply;\\n    }\\n\\n    struct PoolReserveData {\\n        address id;\\n        address token0Address;\\n        address token1Address;\\n        uint256 token0Reserve;\\n        uint256 token1Reserve;\\n        uint8 token0Decimals;\\n        uint8 token1Decimals;\\n    }\\n\\n    struct PositionVe {\\n        uint256 tokenId;\\n        uint256 balanceOf;\\n        uint256 locked;\\n    }\\n\\n    struct PositionBribesByTokenId {\\n        uint256 tokenId;\\n        PositionBribe[] bribes;\\n    }\\n\\n    struct PositionBribe {\\n        address bribeTokenAddress;\\n        uint256 earned;\\n    }\\n\\n    struct PositionPool {\\n        address id;\\n        uint256 balanceOf;\\n    }\\n\\n    function poolsLength() external view returns (uint256);\\n\\n    function voterAddress() external view returns (address);\\n\\n    function veAddress() external view returns (address);\\n\\n    function poolsFactoryAddress() external view returns (address);\\n\\n    function gaugesFactoryAddress() external view returns (address);\\n\\n    function minterAddress() external view returns (address);\\n\\n    function coneAddress() external view returns (address);\\n\\n    function vePositionsOf(address) external view returns (PositionVe[] memory);\\n\\n    function bribeAddresByPoolAddress(address) external view returns (address);\\n\\n    function gaugeAddressByPoolAddress(address) external view returns (address);\\n\\n    function poolsPositionsOf(address)\\n    external\\n    view\\n    returns (PositionPool[] memory);\\n\\n    function poolsPositionsOf(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (PositionPool[] memory);\\n\\n    function poolInfo(address) external view returns (Pool memory);\\n}\\n\\n\\ninterface IUnkwnLens {\\n    struct ProtocolAddresses {\\n        address unkwnPoolFactoryAddress;\\n        address ConeLensAddress;\\n        address UnkwnAddress;\\n        address vlUnkwnAddress;\\n        address unConeAddress;\\n        address voterProxyAddress;\\n        address coneAddress;\\n        address voterAddress;\\n        address poolsFactoryAddress;\\n        address gaugesFactoryAddress;\\n        address minterAddress;\\n        address veAddress;\\n        address userProxyInterfaceAddress;\\n        address votingSnapshotAddress;\\n    }\\n\\n    struct UserPosition {\\n        address userProxyAddress;\\n        uint256 veTotalBalanceOf;\\n        IConeLens.PositionVe[] vePositions;\\n        IConeLens.PositionPool[] poolsPositions;\\n        IUserProxy.PositionStakingPool[] stakingPools;\\n        uint256 unConeanceOf;\\n        uint256 unkwnBalanceOf;\\n        uint256 coneBalanceOf;\\n        uint256 vlUnkwnBalanceOf;\\n    }\\n\\n    struct TokenMetadata {\\n        address id;\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n        uint256 priceUsdc;\\n    }\\n\\n    struct UnkwnPoolData {\\n        address id;\\n        address stakingAddress;\\n        uint256 stakedTotalSupply;\\n        uint256 totalSupply;\\n        IConeLens.Pool poolData;\\n    }\\n\\n    struct Pool {\\n        address id;\\n        string symbol;\\n        bool stable;\\n        address token0Address;\\n        address token1Address;\\n        address gaugeAddress;\\n        address bribeAddress;\\n        address[] bribeTokensAddresses;\\n        address fees;\\n    }\\n\\n    struct RewardTokenData {\\n        address id;\\n        uint256 rewardRate;\\n        uint256 periodFinish;\\n    }\\n\\n    /* ========== PUBLIC VARS ========== */\\n\\n    function unkwnPoolFactoryAddress() external view returns (address);\\n\\n    function rewardsDistributorAddress() external view returns (address);\\n\\n    function userProxyFactoryAddress() external view returns (address);\\n\\n    function coneLensAddress() external view returns (address);\\n\\n    function unkwnAddress() external view returns (address);\\n\\n    function vlUnkwnAddress() external view returns (address);\\n\\n    function unConeAddress() external view returns (address);\\n\\n    function voterProxyAddress() external view returns (address);\\n\\n    function veAddress() external view returns (address);\\n\\n    function coneAddress() external view returns (address);\\n\\n    function unConeRewardsPoolAddress() external view returns (address);\\n\\n    function partnersRewardsPoolAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function cvlUnkwnAddress() external view returns (address);\\n\\n    function unkwnV1RewardsAddress() external view returns (address);\\n\\n    function unkwnV1RedeemAddress() external view returns (address);\\n\\n    function unkwnV1Address() external view returns (address);\\n\\n    function tokensAllowlistAddress() external view returns (address);\\n\\n    /* ========== PUBLIC VIEW FUNCTIONS ========== */\\n\\n    function voterAddress() external view returns (address);\\n\\n    function poolsFactoryAddress() external view returns (address);\\n\\n    function gaugesFactoryAddress() external view returns (address);\\n\\n    function minterAddress() external view returns (address);\\n\\n    function protocolAddresses()\\n    external\\n    view\\n    returns (ProtocolAddresses memory);\\n\\n    function positionsOf(address accountAddress)\\n    external\\n    view\\n    returns (UserPosition memory);\\n\\n    function rewardTokensPositionsOf(address, address)\\n    external\\n    view\\n    returns (IUserProxy.RewardToken[] memory);\\n\\n    function veTotalBalanceOf(IConeLens.PositionVe[] memory positions)\\n    external\\n    pure\\n    returns (uint256);\\n\\n    function unkwnPoolsLength() external view returns (uint256);\\n\\n    function userProxiesLength() external view returns (uint256);\\n\\n    function userProxyByAccount(address accountAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function userProxyByIndex(uint256 index) external view returns (address);\\n\\n    function gaugeByConePool(address) external view returns (address);\\n\\n    function conePoolByUnkwnPool(address unkwnPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function unkwnPoolByConePool(address conePoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByConePool(address conePoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByUnkwnPool(address conePoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function isUnkwnPool(address unkwnPoolAddress) external view returns (bool);\\n\\n    function unkwnPoolsAddresses() external view returns (address[] memory);\\n\\n    function unkwnPoolData(address unkwnPoolAddress)\\n    external\\n    view\\n    returns (UnkwnPoolData memory);\\n\\n    function unkwnPoolsData(address[] memory _unkwnPoolsAddresses)\\n    external\\n    view\\n    returns (UnkwnPoolData[] memory);\\n\\n    function unkwnPoolsData() external view returns (UnkwnPoolData[] memory);\\n\\n    function isPartner(address userProxyAddress) external view returns (bool);\\n\\n    function stakedUnConeBalanceOf(address accountAddress)\\n    external\\n    view\\n    returns (uint256 stakedBalance);\\n\\n    function coneInflationSinceInception() external view returns (uint256);\\n}\\n\\n\\ninterface IUserProxy {\\n    struct PositionStakingPool {\\n        address stakingPoolAddress;\\n        address unkwnPoolAddress;\\n        address conePoolAddress;\\n        uint256 balanceOf;\\n        RewardToken[] rewardTokens;\\n    }\\n\\n    function initialize(\\n        address,\\n        address,\\n        address,\\n        address[] memory\\n    ) external;\\n\\n    struct RewardToken {\\n        address rewardTokenAddress;\\n        uint256 rewardRate;\\n        uint256 rewardPerToken;\\n        uint256 getRewardForDuration;\\n        uint256 earned;\\n    }\\n\\n    struct Vote {\\n        address poolAddress;\\n        int256 weight;\\n    }\\n\\n    function convertNftToUnCone(uint256) external;\\n\\n    function convertConeToUnCone(uint256) external;\\n\\n    function depositLpAndStake(address, uint256) external;\\n\\n    function depositLp(address, uint256) external;\\n\\n    function stakingAddresses() external view returns (address[] memory);\\n\\n    function initialize(address, address) external;\\n\\n    function stakingPoolsLength() external view returns (uint256);\\n\\n    function unstakeLpAndWithdraw(\\n        address,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function unstakeLpAndWithdraw(address, uint256) external;\\n\\n    function unstakeLpWithdrawAndClaim(address) external;\\n\\n    function unstakeLpWithdrawAndClaim(address, uint256) external;\\n\\n    function withdrawLp(address, uint256) external;\\n\\n    function stakeUnkwnLp(address, uint256) external;\\n\\n    function unstakeUnkwnLp(address, uint256) external;\\n\\n    function ownerAddress() external view returns (address);\\n\\n    function stakingPoolsPositions()\\n    external\\n    view\\n    returns (PositionStakingPool[] memory);\\n\\n    function stakeUnCone(uint256) external;\\n\\n    function unstakeUnCone(uint256) external;\\n\\n    function unstakeUnCone(address, uint256) external;\\n\\n    function convertConeToUnConeAndStake(uint256) external;\\n\\n    function convertNftToUnConeAndStake(uint256) external;\\n\\n    function claimUnConeStakingRewards() external;\\n\\n    function claimPartnerStakingRewards() external;\\n\\n    function claimStakingRewards(address) external;\\n\\n    function claimStakingRewards(address[] memory) external;\\n\\n    function claimStakingRewards() external;\\n\\n    function claimVlUnkwnRewards() external;\\n\\n    function depositUnkwn(uint256, uint256) external;\\n\\n    function withdrawUnkwn(bool, uint256) external;\\n\\n    function voteLockUnkwn(uint256, uint256) external;\\n\\n    function withdrawVoteLockedUnkwn(uint256, bool) external;\\n\\n    function relockVoteLockedUnkwn(uint256) external;\\n\\n    function removeVote(address) external;\\n\\n    function registerStake(address) external;\\n\\n    function registerUnstake(address) external;\\n\\n    function resetVotes() external;\\n\\n    function setVoteDelegate(address) external;\\n\\n    function clearVoteDelegate() external;\\n\\n    function vote(address, int256) external;\\n\\n    function vote(Vote[] memory) external;\\n\\n    function votesByAccount(address) external view returns (Vote[] memory);\\n\\n    function migrateUnConeToPartner() external;\\n\\n    function stakeUnConeInUnkwnV1(uint256) external;\\n\\n    function unstakeUnConeInUnkwnV1(uint256) external;\\n\\n    function redeemUnkwnV1(uint256) external;\\n\\n    function redeemAndStakeUnkwnV1(uint256) external;\\n\\n    function whitelist(address) external;\\n\\n    function implementationsAddresses()\\n    external\\n    view\\n    returns (address[] memory);\\n}\\n\\n\\nlibrary UnknownLibrary {\\n\\n    function getUserLpBalance(\\n        IUnkwnLens unkwnLens,\\n        address conePair,\\n        address userAddress\\n    ) internal view returns (uint256 lpBalance) {\\n        address userProxyThis = unkwnLens.userProxyByAccount(userAddress);\\n        address stakingAddress = unkwnLens.stakingRewardsByConePool(conePair);\\n        lpBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\n    }\\n}\\n\",\"keccak256\":\"0x73d5ab137fe595ae537f37ccd6dee6dd93d4cc9973b2a316a39d3e05368def8e\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyPortfolioManager {\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n        emit Stake(_amount);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            uint256 totalAsset = _claimRewards(_beneficiary);\\n            if (totalAsset > 0) {\\n                emit Reward(totalAsset);\\n            }\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalAsset = _claimRewards(_to);\\n        if (totalAsset > 0) {\\n            emit Reward(totalAsset);\\n        }\\n        return totalAsset;\\n    }\\n\\n    function healthFactorBalance() external override onlyPortfolioManager {\\n        uint256 healthFactor = _healthFactorBalance();\\n        if (healthFactor > 0) {\\n            emit BalanceHealthFactor(healthFactor);\\n        }\\n    }\\n\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\n        _setHealthFactor(healthFactor);\\n        emit SetHealthFactor(healthFactor);\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\n\\n    }\\n\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\n\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfa70428bd5dc4e4e3ddfd68c1d5e8f6ffccc62c1223efb869d3d87b94228266\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n    function healthFactorBalance() external;\\n\\n    function setHealthFactor(uint256 healthFactor) external;\\n}\\n\",\"keccak256\":\"0x4404caa3b9be9c213aee4babcb2957833ff90a1e300de1d2d7bd355859539d4e\",\"license\":\"GPL-3.0\"},\"contracts/busd/StrategyConeBusdUsdc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Unknown.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Synapse.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\n\\n\\ncontract StrategyConeBusdUsdc is Strategy {\\n\\n    // --- structs\\n\\n    struct StrategyParams {\\n        address busdToken;\\n        address usdcToken;\\n        address wBnbToken;\\n        address coneToken;\\n        address coneRouter;\\n        address conePair;\\n        address coneGauge;\\n        address synapseStableSwapPool;\\n        address chainlinkBusd;\\n        address chainlinkUsdc;\\n        address rewardWallet;\\n        uint256 rewardWalletPercent;\\n        address unkwnToken;\\n        address unkwnUserProxy;\\n        address unkwnLens;\\n        uint256 unkwnPercent;\\n    }\\n\\n    // --- params\\n\\n    IERC20 public busdToken;\\n    IERC20 public usdcToken;\\n    IERC20 public wBnbToken;\\n    IERC20 public coneToken;\\n\\n    IConeRouter01 public coneRouter;\\n    IConePair public conePair;\\n    IGauge public coneGauge;\\n\\n    ISwap public synapseStableSwapPool;\\n\\n    IPriceFeed public chainlinkBusd;\\n    IPriceFeed public chainlinkUsdc;\\n\\n    address public rewardWallet;\\n    uint256 public rewardWalletPercent;\\n\\n    uint256 public busdTokenDenominator;\\n    uint256 public usdcTokenDenominator;\\n\\n    IERC20 public unkwnToken;\\n    IUserProxy public unkwnUserProxy;\\n    IUnkwnLens public unkwnLens;\\n    uint256 public unkwnPercent;\\n\\n    // --- events\\n\\n    event StrategyUpdatedParams();\\n\\n    // --- constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n    // --- setters\\n\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\n\\n        busdToken = IERC20(params.busdToken);\\n        usdcToken = IERC20(params.usdcToken);\\n        wBnbToken = IERC20(params.wBnbToken);\\n        coneToken = IERC20(params.coneToken);\\n\\n        coneRouter = IConeRouter01(params.coneRouter);\\n        conePair = IConePair(params.conePair);\\n        coneGauge = IGauge(params.coneGauge);\\n\\n        synapseStableSwapPool = ISwap(params.synapseStableSwapPool);\\n\\n        chainlinkBusd = IPriceFeed(params.chainlinkBusd);\\n        chainlinkUsdc = IPriceFeed(params.chainlinkUsdc);\\n\\n        rewardWallet = params.rewardWallet;\\n        rewardWalletPercent = params.rewardWalletPercent;\\n\\n        busdTokenDenominator = 10 ** IERC20Metadata(params.busdToken).decimals();\\n        usdcTokenDenominator = 10 ** IERC20Metadata(params.usdcToken).decimals();\\n\\n        unkwnToken = IERC20(params.unkwnToken);\\n        unkwnUserProxy = IUserProxy(params.unkwnUserProxy);\\n        unkwnLens = IUnkwnLens(params.unkwnLens);\\n        unkwnPercent = params.unkwnPercent;\\n\\n        emit StrategyUpdatedParams();\\n    }\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(busdToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveUsdc, uint256 reserveBusd,) = conePair.getReserves();\\n        require(reserveUsdc > 10 ** 15 && reserveBusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        uint256 busdBalance = busdToken.balanceOf(address(this));\\n        uint256 amountBusdToSwap = SynapseLibrary.getAmount0(\\n            synapseStableSwapPool,\\n            address(busdToken),\\n            address(usdcToken),\\n            busdBalance,\\n            reserveBusd,\\n            reserveUsdc,\\n            busdTokenDenominator,\\n            usdcTokenDenominator,\\n            1\\n        );\\n\\n        // swap busd to usdc\\n        SynapseLibrary.swap(\\n            synapseStableSwapPool,\\n            address(busdToken),\\n            address(usdcToken),\\n            amountBusdToSwap\\n        );\\n\\n        // add liquidity\\n        busdBalance = busdToken.balanceOf(address(this));\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n        busdToken.approve(address(coneRouter), busdBalance);\\n        usdcToken.approve(address(coneRouter), usdcBalance);\\n        coneRouter.addLiquidity(\\n            address(busdToken),\\n            address(usdcToken),\\n            true,\\n            busdBalance,\\n            usdcBalance,\\n            busdBalance * 99 / 100,\\n            usdcBalance * 99 / 100,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 lpTokenBalance = conePair.balanceOf(address(this));\\n        uint256 lpTokenBalanceUnkwn = lpTokenBalance * unkwnPercent / 1e4;\\n        uint256 lpTokenBalanceGauge = lpTokenBalance - lpTokenBalanceUnkwn;\\n\\n        // stake to unknown\\n        conePair.approve(address(unkwnUserProxy), lpTokenBalanceUnkwn);\\n        unkwnUserProxy.depositLpAndStake(address(conePair), lpTokenBalanceUnkwn);\\n\\n        // stake to gauge\\n        conePair.approve(address(coneGauge), lpTokenBalanceGauge);\\n        // don't lock cone -> tokenId = 0\\n        coneGauge.deposit(lpTokenBalanceGauge, 0);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(busdToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveUsdc, uint256 reserveBusd,) = conePair.getReserves();\\n        require(reserveUsdc > 10 ** 15 && reserveBusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        // Fetch amount of LP currently staked\\n        uint256 lpTokenBalance = coneGauge.balanceOf(address(this));\\n        if (lpTokenBalance > 0) {\\n            // count amount to unstake\\n            uint256 totalLpBalance = conePair.totalSupply();\\n            uint256 lpTokensToWithdraw = SynapseLibrary.getAmountLpTokens(\\n                synapseStableSwapPool,\\n                address(busdToken),\\n                address(usdcToken),\\n                // add 1e13 to _amount for smooth withdraw\\n                _amount + 1e13,\\n                totalLpBalance,\\n                reserveBusd,\\n                reserveUsdc,\\n                busdTokenDenominator,\\n                usdcTokenDenominator,\\n                1\\n            );\\n\\n            if (lpTokensToWithdraw > lpTokenBalance) {\\n                lpTokensToWithdraw = lpTokenBalance;\\n            }\\n\\n            // unstake from gauge\\n            coneGauge.withdraw(lpTokensToWithdraw);\\n\\n            uint256 unstakedLPTokenBalance = conePair.balanceOf(address(this));\\n            uint256 amountOutBusdMin = reserveBusd * unstakedLPTokenBalance / totalLpBalance;\\n            uint256 amountOutUsdcMin = reserveUsdc * unstakedLPTokenBalance / totalLpBalance;\\n\\n            // remove liquidity\\n            conePair.approve(address(coneRouter), unstakedLPTokenBalance);\\n            coneRouter.removeLiquidity(\\n                address(busdToken),\\n                address(usdcToken),\\n                true,\\n                unstakedLPTokenBalance,\\n                amountOutBusdMin * 99 / 100,\\n                amountOutUsdcMin * 99 / 100,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n\\n        // swap usdc to busd\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n        if (usdcBalance > 0) {\\n            SynapseLibrary.swap(\\n                synapseStableSwapPool,\\n                address(usdcToken),\\n                address(busdToken),\\n                usdcBalance\\n            );\\n        }\\n\\n        return busdToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(busdToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveUsdc, uint256 reserveBusd,) = conePair.getReserves();\\n        require(reserveUsdc > 10 ** 15 && reserveBusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        // unstake from gauge\\n        uint256 lpTokenBalanceGauge = coneGauge.balanceOf(address(this));\\n        if (lpTokenBalanceGauge > 0) {\\n            coneGauge.withdrawAll();\\n        }\\n\\n        // unstake from unknown\\n        address userProxyThis = unkwnLens.userProxyByAccount(address(this));\\n        address stakingAddress = unkwnLens.stakingRewardsByConePool(address(conePair));\\n        uint256 lpTokenBalanceUnkwn = IERC20(stakingAddress).balanceOf(userProxyThis);\\n        if (lpTokenBalanceUnkwn > 0) {\\n            unkwnUserProxy.unstakeLpAndWithdraw(address(conePair), lpTokenBalanceUnkwn);\\n        }\\n\\n        uint256 unstakedLPTokenBalance = conePair.balanceOf(address(this));\\n        if (unstakedLPTokenBalance > 0) {\\n            uint256 totalLpBalance = conePair.totalSupply();\\n            uint256 amountOutBusdMin = reserveBusd * unstakedLPTokenBalance / totalLpBalance;\\n            uint256 amountOutUsdcMin = reserveUsdc * unstakedLPTokenBalance / totalLpBalance;\\n\\n            // remove liquidity\\n            conePair.approve(address(coneRouter), unstakedLPTokenBalance);\\n            coneRouter.removeLiquidity(\\n                address(busdToken),\\n                address(usdcToken),\\n                true,\\n                unstakedLPTokenBalance,\\n                amountOutBusdMin * 99 / 100,\\n                amountOutUsdcMin * 99 / 100,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n\\n        // swap usdc to busd\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n        if (usdcBalance > 0) {\\n            SynapseLibrary.swap(\\n                synapseStableSwapPool,\\n                address(usdcToken),\\n                address(busdToken),\\n                usdcBalance\\n            );\\n        }\\n\\n        return busdToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 busdBalance = busdToken.balanceOf(address(this));\\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n\\n        // Fetch amount of LP currently staked\\n        uint256 lpTokenBalance = coneGauge.balanceOf(address(this));\\n        address userProxyThis = unkwnLens.userProxyByAccount(address(this));\\n        address stakingAddress = unkwnLens.stakingRewardsByConePool(address(conePair));\\n        lpTokenBalance += IERC20(stakingAddress).balanceOf(userProxyThis);\\n        if (lpTokenBalance > 0) {\\n            uint256 totalLpBalance = conePair.totalSupply();\\n            (uint256 reserveUsdc, uint256 reserveBusd,) = conePair.getReserves();\\n            busdBalance += reserveBusd * lpTokenBalance / totalLpBalance;\\n            usdcBalance += reserveUsdc * lpTokenBalance / totalLpBalance;\\n        }\\n\\n        uint256 busdBalanceFromUsdc;\\n        if (usdcBalance > 0) {\\n            if (nav) {\\n                uint256 priceBusd = uint256(chainlinkBusd.latestAnswer());\\n                uint256 priceUsdc = uint256(chainlinkUsdc.latestAnswer());\\n                busdBalanceFromUsdc = (usdcBalance * busdTokenDenominator * priceUsdc) / (usdcTokenDenominator * priceBusd);\\n            } else {\\n                busdBalanceFromUsdc = SynapseLibrary.calculateSwap(\\n                    synapseStableSwapPool,\\n                    address(usdcToken),\\n                    address(busdToken),\\n                    usdcBalance\\n                );\\n            }\\n        }\\n\\n        return busdBalance + busdBalanceFromUsdc;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards gauge\\n        uint256 lpTokenBalanceGauge = coneGauge.balanceOf(address(this));\\n        if (lpTokenBalanceGauge > 0) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = address(coneToken);\\n            coneGauge.getReward(address(this), tokens);\\n        }\\n\\n        // claim rewards unknown\\n        address userProxyThis = unkwnLens.userProxyByAccount(address(this));\\n        address stakingAddress = unkwnLens.stakingRewardsByConePool(address(conePair));\\n        uint256 lpTokenBalanceUnkwn = IERC20(stakingAddress).balanceOf(userProxyThis);\\n        if (lpTokenBalanceUnkwn > 0) {\\n            unkwnUserProxy.claimStakingRewards();\\n        }\\n\\n        // sell rewards\\n        uint256 totalBusd;\\n\\n        uint256 coneBalance = coneToken.balanceOf(address(this));\\n        if (coneBalance > 0) {\\n            uint256 amountOutCone = ConeLibrary.getAmountsOut(\\n                coneRouter,\\n                address(coneToken),\\n                address(wBnbToken),\\n                address(busdToken),\\n                // TODO \\u0442\\u0443\\u0442 \\u0432\\u043e\\u0437\\u043c\\u043e\\u0436\\u043d\\u043e \\u043d\\u0430\\u0434\\u043e \\u043f\\u043e\\u043c\\u0435\\u043d\\u044f\\u0442\\u044c \\u043d\\u0430 true, \\u043d\\u043e \\u0443 \\u043c\\u0435\\u043d\\u044f \\u0432 \\u0442\\u0435\\u0441\\u0442\\u0430\\u0445 \\u0441 false \\u0432\\u044b\\u0433\\u043e\\u0434\\u043d\\u0435\\u0435 \\u043e\\u0431\\u043c\\u0435\\u043d \\u0440\\u0430\\u0437 \\u0432 10\\n                false,\\n                false,\\n                coneBalance\\n            );\\n\\n            if (amountOutCone > 0) {\\n                uint256 coneBusd = ConeLibrary.swap(\\n                    coneRouter,\\n                    address(coneToken),\\n                    address(wBnbToken),\\n                    address(busdToken),\\n                    // TODO \\u0442\\u0443\\u0442 \\u0432\\u043e\\u0437\\u043c\\u043e\\u0436\\u043d\\u043e \\u043d\\u0430\\u0434\\u043e \\u043f\\u043e\\u043c\\u0435\\u043d\\u044f\\u0442\\u044c \\u043d\\u0430 true, \\u043d\\u043e \\u0443 \\u043c\\u0435\\u043d\\u044f \\u0432 \\u0442\\u0435\\u0441\\u0442\\u0430\\u0445 \\u0441 false \\u0432\\u044b\\u0433\\u043e\\u0434\\u043d\\u0435\\u0435 \\u043e\\u0431\\u043c\\u0435\\u043d \\u0440\\u0430\\u0437 \\u0432 10\\n                    false,\\n                    false,\\n                    coneBalance,\\n                    amountOutCone * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalBusd += coneBusd;\\n            }\\n        }\\n\\n        uint256 unkwnBalance = unkwnToken.balanceOf(address(this));\\n        if (unkwnBalance > 0) {\\n            uint256 amountOutUnkwn = ConeLibrary.getAmountsOut(\\n                coneRouter,\\n                address(unkwnToken),\\n                address(wBnbToken),\\n                address(busdToken),\\n                false,\\n                false,\\n                unkwnBalance\\n            );\\n\\n            if (amountOutUnkwn > 0) {\\n                uint256 unkwnBusd = ConeLibrary.swap(\\n                    coneRouter,\\n                    address(unkwnToken),\\n                    address(wBnbToken),\\n                    address(busdToken),\\n                    false,\\n                    false,\\n                    unkwnBalance,\\n                    amountOutUnkwn * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalBusd += unkwnBusd;\\n            }\\n        }\\n\\n        if (totalBusd > 0) {\\n            uint256 rewardBalance = totalBusd * rewardWalletPercent / 1e4;\\n            uint256 toBalance = totalBusd - rewardBalance;\\n            busdToken.transfer(rewardWallet, rewardBalance);\\n            busdToken.transfer(_to, toBalance);\\n        }\\n\\n        return totalBusd;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0fddb7815589c74917971abd3c40e1528de27e38a30663aea183e6290251682a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b6200154e1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6154a26200018e600039600081816108d701528181610917015281816109b7015281816109f70152610a8601526154a26000f3fe6080604052600436106102455760003560e01c80637b73aa4e11610139578063bb94d0f4116100b6578063e71f6a9e1161007a578063e71f6a9e14610691578063eb7147ca146106b2578063ef5cfb8c146106d3578063f6f6b881146106f3578063f72c0d8b14610713578063fb75b2c71461074757600080fd5b8063bb94d0f4146105ed578063cb22a73a1461060e578063d4a6bfc21461062f578063d547741f14610650578063de0e70141461067057600080fd5b80639f709492116100fd5780639f7094921461056c578063a217fddf14610583578063a3673b3814610598578063a440b21a146105ad578063adc9772e146105cd57600080fd5b80637b73aa4e146104df5780637d5f5802146104f45780638129fc1c1461051657806391d148541461052b5780639bd59a751461054b57600080fd5b806336568abe116101c75780635918be1a1161018b5780635918be1a1461043c578063620b75df1461045d57806364f8b89a1461047d5780636c0e0a5d1461049e5780636d7f7f82146104bf57600080fd5b806336568abe146103b35780633659cfe6146103d3578063379d878c146103f35780634f1ef2861461041457806352d1902d1461042757600080fd5b8063248a9ca31161020e578063248a9ca3146103155780632576e65a146103455780632639839c1461035a5780632f2ff15d14610371578063311117081461039357600080fd5b8062cb5a831461024a57806301ffc9a71461028857806306aee957146102b857806306da3f2e146102dd57806311eac855146102f4575b600080fd5b34801561025657600080fd5b5061013c5461026b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029457600080fd5b506102a86102a3366004614cdf565b610768565b604051901515815260200161027f565b3480156102c457600080fd5b506102cf6101385481565b60405190815260200161027f565b3480156102e957600080fd5b506102cf61013a5481565b34801561030057600080fd5b5061012e5461026b906001600160a01b031681565b34801561032157600080fd5b506102cf610330366004614c7d565b60009081526065602052604090206001015490565b34801561035157600080fd5b506102cf61079f565b34801561036657600080fd5b506102cf61013e5481565b34801561037d57600080fd5b5061039161038c366004614caf565b6107b0565b005b34801561039f57600080fd5b506103916103ae366004614c7d565b6107da565b3480156103bf57600080fd5b506103916103ce366004614caf565b61084e565b3480156103df57600080fd5b506103916103ee366004614a52565b6108cc565b3480156103ff57600080fd5b5061013b5461026b906001600160a01b031681565b610391610422366004614a8c565b6109ac565b34801561043357600080fd5b506102cf610a79565b34801561044857600080fd5b506101335461026b906001600160a01b031681565b34801561046957600080fd5b5060fb5461026b906001600160a01b031681565b34801561048957600080fd5b506101305461026b906001600160a01b031681565b3480156104aa57600080fd5b506101355461026b906001600160a01b031681565b3480156104cb57600080fd5b506103916104da366004614d09565b610b2c565b3480156104eb57600080fd5b50610391610f8d565b34801561050057600080fd5b506102cf60008051602061540683398151915281565b34801561052257600080fd5b50610391610fc3565b34801561053757600080fd5b506102a8610546366004614caf565b611086565b34801561055757600080fd5b506101325461026b906001600160a01b031681565b34801561057857600080fd5b506102cf6101395481565b34801561058f57600080fd5b506102cf600081565b3480156105a457600080fd5b506102cf6110b1565b3480156105b957600080fd5b506103916105c8366004614a52565b6110bd565b3480156105d957600080fd5b506103916105e8366004614b34565b6111ec565b3480156105f957600080fd5b506101315461026b906001600160a01b031681565b34801561061a57600080fd5b506101365461026b906001600160a01b031681565b34801561063b57600080fd5b506101345461026b906001600160a01b031681565b34801561065c57600080fd5b5061039161066b366004614caf565b6112d9565b34801561067c57600080fd5b5061012d5461026b906001600160a01b031681565b34801561069d57600080fd5b5061012f5461026b906001600160a01b031681565b3480156106be57600080fd5b5061013d5461026b906001600160a01b031681565b3480156106df57600080fd5b506102cf6106ee366004614a52565b6112fe565b3480156106ff57600080fd5b506102cf61070e366004614b60565b611383565b34801561071f57600080fd5b506102cf7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561075357600080fd5b506101375461026b906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061079957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107ab600061155d565b905090565b6000828152606560205260409020600101546107cb81611b6f565b6107d58383611b79565b505050565b6107f260008051602061540683398151915233611086565b6108175760405162461bcd60e51b815260040161080e90614fc8565b60405180910390fd5b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146108be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161080e565b6108c88282611bff565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109155760405162461bcd60e51b815260040161080e90614fff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661095e600080516020615426833981519152546001600160a01b031690565b6001600160a01b0316146109845760405162461bcd60e51b815260040161080e9061508d565b61098d81611c66565b604080516000808252602082019092526109a991839190611c90565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109f55760405162461bcd60e51b815260040161080e90614fff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a3e600080516020615426833981519152546001600160a01b031690565b6001600160a01b031614610a645760405162461bcd60e51b815260040161080e9061508d565b610a6d82611c66565b6108c882826001611c90565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b195760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161080e565b5060008051602061542683398151915290565b610b37600033611086565b610b7a5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161080e565b610b876020820182614a52565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610bb86040820160208301614a52565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610be96060820160408301614a52565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610c1a6080820160608301614a52565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610c4b60a0820160808301614a52565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610c7c60c0820160a08301614a52565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610cad60e0820160c08301614a52565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610cdf610100820160e08301614a52565b61013480546001600160a01b0319166001600160a01b0392909216919091179055610d1261012082016101008301614a52565b61013580546001600160a01b0319166001600160a01b0392909216919091179055610d4561014082016101208301614a52565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610d7861016082016101408301614a52565b61013780546001600160a01b0319166001600160a01b039290921691909117905561016081013561013855610db06020820182614a52565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610de857600080fd5b505afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e209190614dc4565b610e2b90600a615261565b61013955610e3f6040820160208301614a52565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7757600080fd5b505afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190614dc4565b610eba90600a615261565b61013a55610ed06101a082016101808301614a52565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055610f036101c082016101a08301614a52565b61013c80546001600160a01b0319166001600160a01b0392909216919091179055610f366101e082016101c08301614a52565b61013d80546001600160a01b0319166001600160a01b03929092169190911790556101e081013561013e556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b610fa560008051602061540683398151915233611086565b610fc15760405162461bcd60e51b815260040161080e90614fc8565b565b600054610100900460ff1615808015610fe35750600054600160ff909116105b80610ffd5750303b158015610ffd575060005460ff166001145b6110195760405162461bcd60e51b815260040161080e906150d9565b6000805460ff19166001179055801561103c576000805461ff0019166101001790555b611044611e0a565b80156109a9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610843565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107ab600161155d565b6110c8600033611086565b61110b5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161080e565b6001600160a01b0381166111615760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161080e565b60fb5461118690600080516020615406833981519152906001600160a01b03166112d9565b61119e600080516020615406833981519152826107b0565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610843565b61120460008051602061540683398151915233611086565b6112205760405162461bcd60e51b815260040161080e90614fc8565b6040516370a0823160e01b81523060048201526112a29083906001600160a01b038216906370a082319060240160206040518083038186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190614c96565b611ec8565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b6000828152606560205260409020600101546112f481611b6f565b6107d58383611bff565b600061131860008051602061540683398151915233611086565b6113345760405162461bcd60e51b815260040161080e90614fc8565b600061133f83612671565b9050801561137b576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061139d60008051602061540683398151915233611086565b6113b95760405162461bcd60e51b815260040161080e90614fc8565b6000821561141a5760006113cc85612671565b90508015611408576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b6114128786612d2d565b915050611489565b6114258686866134e5565b9050848110156114895760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161080e565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906114b79087908590600401614f7c565b602060405180830381600087803b1580156114d157600080fd5b505af11580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115099190614c60565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a190505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190614c96565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561162857600080fd5b505afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116609190614c96565b610133546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e29190614c96565b61013d54604051636f4ba70b60e11b81523060048201529192506000916001600160a01b039091169063de974e169060240160206040518083038186803b15801561172c57600080fd5b505afa158015611740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117649190614a6f565b61013d5461013254604051630c3f16df60e31b81526001600160a01b0391821660048201529293506000929116906361f8b6f89060240160206040518083038186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb9190614a6f565b6040516370a0823160e01b81526001600160a01b038481166004830152919250908216906370a082319060240160206040518083038186803b15801561183057600080fd5b505afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118689190614c96565b61187290846151e4565b925082156119db5761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156118c057600080fd5b505afa1580156118d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f89190614c96565b905060008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119849190614d22565b506001600160701b039182169350169050826119a0878361530c565b6119aa91906151fc565b6119b490896151e4565b9750826119c1878461530c565b6119cb91906151fc565b6119d590886151e4565b96505050505b60008415611b59578715611b305761013554604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b158015611a2f57600080fd5b505afa158015611a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a679190614c96565b9050600061013660009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af29190614c96565b90508161013a54611b03919061530c565b816101395489611b13919061530c565b611b1d919061530c565b611b2791906151fc565b92505050611b59565b6101345461012e5461012d54611b56926001600160a01b03908116928116911688613aec565b90505b611b6381876151e4565b98975050505050505050565b6109a98133613c80565b611b838282611086565b6108c85760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611bbb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c098282611086565b156108c85760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36108c881611b6f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cc3576107d583613ce4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfc57600080fd5b505afa925050508015611d2c575060408051601f3d908101601f19168201909252611d2991810190614c96565b60015b611d8f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161080e565b6000805160206154268339815191528114611dfe5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161080e565b506107d5838383613d80565b600054610100900460ff1615808015611e2a5750600054600160ff909116105b80611e445750303b158015611e44575060005460ff166001145b611e605760405162461bcd60e51b815260040161080e906150d9565b6000805460ff191660011790558015611e83576000805461ff0019166101001790555b611e8b613dab565b611e93613dab565b611e9e600033611b79565b6110447f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611b79565b61012d546001600160a01b03838116911614611ef65760405162461bcd60e51b815260040161080e90615127565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611f4857600080fd5b505afa158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f809190614d22565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015611fb3575066038d7ea4c6800081115b611fcf5760405162461bcd60e51b815260040161080e9061504b565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561201457600080fd5b505afa158015612028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204c9190614c96565b6101345461012d5461012e546101395461013a54949550600094612088946001600160a01b03908116948116931691879189918b916001613e16565b6101345461012d5461012e549293506120b2926001600160a01b0392831692918216911684613ec1565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156120f757600080fd5b505afa15801561210b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212f9190614c96565b61012e546040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561217957600080fd5b505afa15801561218d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b19190614c96565b61012d546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926121eb9216908790600401614f7c565b602060405180830381600087803b15801561220557600080fd5b505af1158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d9190614c60565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612276929116908590600401614f7c565b602060405180830381600087803b15801561229057600080fd5b505af11580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190614c60565b506101315461012d5461012e546001600160a01b0392831692635a47ddc392811691166001878660646122fc83606361530c565b61230691906151fc565b60646123138a606361530c565b61231d91906151fc565b6040516001600160e01b031960e08a901b1681526001600160a01b03978816600482015296909516602487015292151560448601526064850191909152608484015260a483015260c48201523060e48201524261010482015261012401606060405180830381600087803b15801561239457600080fd5b505af11580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190614d96565b5050610132546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e9190614c96565b9050600061271061013e5483612464919061530c565b61246e91906151fc565b9050600061247c828461532b565b6101325461013c5460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926124b69216908690600401614f7c565b602060405180830381600087803b1580156124d057600080fd5b505af11580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190614c60565b5061013c54610132546040516351b3839960e11b81526001600160a01b039283169263a367073292612541929116908690600401614f7c565b600060405180830381600087803b15801561255b57600080fd5b505af115801561256f573d6000803e3d6000fd5b5050610132546101335460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506125ac92909116908590600401614f7c565b602060405180830381600087803b1580156125c657600080fd5b505af11580156125da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fe9190614c60565b5061013354604051631c57762b60e31b815260048101839052600060248201526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b15801561264d57600080fd5b505af1158015612661573d6000803e3d6000fd5b5050505050505050505050505050565b610133546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156126ba57600080fd5b505afa1580156126ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f29190614c96565b905080156127b1576040805160018082528183019092526000916020808301908036833750506101305482519293506001600160a01b03169183915060009061273d5761273d6153b6565b6001600160a01b039283166020918202929092010152610133546040516331279d3d60e01b81529116906331279d3d9061277d9030908590600401614f20565b600060405180830381600087803b15801561279757600080fd5b505af11580156127ab573d6000803e3d6000fd5b50505050505b61013d54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b1580156127f657600080fd5b505afa15801561280a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282e9190614a6f565b61013d5461013254604051630c3f16df60e31b81526001600160a01b0391821660048201529293506000929116906361f8b6f89060240160206040518083038186803b15801561287d57600080fd5b505afa158015612891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b59190614a6f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b1580156128fc57600080fd5b505afa158015612910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129349190614c96565b905080156129a65761013c60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561298d57600080fd5b505af11580156129a1573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156129ef57600080fd5b505afa158015612a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a279190614c96565b90508015612ac957610131546101305461012f5461012d54600093612a63936001600160a01b0391821693908216929082169116858088614179565b90508015612ac757610131546101305461012f5461012d54600093612ab7936001600160a01b03918216939082169290821691168580896064612aa78b606361530c565b612ab191906151fc565b306143a4565b9050612ac381856151e4565b9350505b505b61013b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612b0e57600080fd5b505afa158015612b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b469190614c96565b90508015612bd8576101315461013b5461012f5461012d54600093612b82936001600160a01b0391821693908216929082169116858088614179565b90508015612bd6576101315461013b5461012f5461012d54600093612bc6936001600160a01b03918216939082169290821691168580896064612aa78b606361530c565b9050612bd281866151e4565b9450505b505b8215612d205760006127106101385485612bf2919061530c565b612bfc91906151fc565b90506000612c0a828661532b565b61012d546101375460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92612c449216908690600401614f7c565b602060405180830381600087803b158015612c5e57600080fd5b505af1158015612c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c969190614c60565b5061012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612cca908e908590600401614f7c565b602060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1c9190614c60565b5050505b5090979650505050505050565b61012d546000906001600160a01b03848116911614612d5e5760405162461bcd60e51b815260040161080e90615127565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de89190614d22565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015612e1b575066038d7ea4c6800081115b612e375760405162461bcd60e51b815260040161080e9061504b565b610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612e7c57600080fd5b505afa158015612e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb49190614c96565b90508015612f265761013360009054906101000a90046001600160a01b03166001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f0d57600080fd5b505af1158015612f21573d6000803e3d6000fd5b505050505b61013d54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b158015612f6b57600080fd5b505afa158015612f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa39190614a6f565b61013d5461013254604051630c3f16df60e31b81526001600160a01b0391821660048201529293506000929116906361f8b6f89060240160206040518083038186803b158015612ff257600080fd5b505afa158015613006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302a9190614a6f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561307157600080fd5b505afa158015613085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a99190614c96565b9050801561311c5761013c546101325460405163fce07e8960e01b81526001600160a01b039283169263fce07e89926130e9929116908590600401614f7c565b600060405180830381600087803b15801561310357600080fd5b505af1158015613117573d6000803e3d6000fd5b505050505b610132546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561316157600080fd5b505afa158015613175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131999190614c96565b905080156133ad5761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156131e757600080fd5b505afa1580156131fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321f9190614c96565b905060008161322e848a61530c565b61323891906151fc565b9050600082613247858c61530c565b61325191906151fc565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261328b9216908890600401614f7c565b602060405180830381600087803b1580156132a557600080fd5b505af11580156132b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132dd9190614c60565b506101315461012d5461012e546001600160a01b0392831692630dede6c49281169116600188606461331089606361530c565b61331a91906151fc565b606461332789606361530c565b61333191906151fc565b30426040518963ffffffff1660e01b8152600401613356989796959493929190614ed7565b6040805180830381600087803b15801561336f57600080fd5b505af1158015613383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a79190614d72565b50505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156133f257600080fd5b505afa158015613406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342a9190614c96565b9050801561345a576101345461012e5461012d54613458926001600160a01b03908116928116911684613ec1565b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561349e57600080fd5b505afa1580156134b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d69190614c96565b9b9a5050505050505050505050565b61012d546000906001600160a01b038581169116146135165760405162461bcd60e51b815260040161080e90615127565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561356857600080fd5b505afa15801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a09190614d22565b506001600160701b031691506001600160701b0316915066038d7ea4c68000821180156135d3575066038d7ea4c6800081115b6135ef5760405162461bcd60e51b815260040161080e9061504b565b610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561363457600080fd5b505afa158015613648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366c9190614c96565b905080156139b55761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156136ba57600080fd5b505afa1580156136ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f29190614c96565b6101345461012d5461012e5492935060009261373a926001600160a01b0390811692811691166137288c6509184e72a0006151e4565b86898b6101395461013a54600161465a565b9050828111156137475750815b61013354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561378e57600080fd5b505af11580156137a2573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156137ed57600080fd5b505afa158015613801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138259190614c96565b9050600083613834838861530c565b61383e91906151fc565b905060008461384d848a61530c565b61385791906151fc565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926138919216908790600401614f7c565b602060405180830381600087803b1580156138ab57600080fd5b505af11580156138bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e39190614c60565b506101315461012d5461012e546001600160a01b0392831692630dede6c49281169116600187606461391689606361530c565b61392091906151fc565b606461392d89606361530c565b61393791906151fc565b30426040518963ffffffff1660e01b815260040161395c989796959493929190614ed7565b6040805180830381600087803b15801561397557600080fd5b505af1158015613989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ad9190614d72565b505050505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156139fa57600080fd5b505afa158015613a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a329190614c96565b90508015613a62576101345461012e5461012d54613a60926001600160a01b03908116928116911684613ec1565b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613aa657600080fd5b505afa158015613aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ade9190614c96565b9450505050505b9392505050565b6040516319b02f4960e21b81526001600160a01b03848116600483015260009182918716906366c0bd249060240160206040518083038186803b158015613b3257600080fd5b505afa158015613b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6a9190614dc4565b6040516319b02f4960e21b81526001600160a01b0386811660048301529192506000918816906366c0bd249060240160206040518083038186803b158015613bb157600080fd5b505afa158015613bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be99190614dc4565b60405163a95b089f60e01b815260ff808516600483015282166024820152604481018690529091506001600160a01b0388169063a95b089f9060640160206040518083038186803b158015613c3d57600080fd5b505afa158015613c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c759190614c96565b979650505050505050565b613c8a8282611086565b6108c857613ca2816001600160a01b03166014614732565b613cad836020614732565b604051602001613cbe929190614e62565b60408051601f198184030181529082905262461bcd60e51b825261080e91600401614f95565b6001600160a01b0381163b613d515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161080e565b60008051602061542683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613d89836148ce565b600082511180613d965750805b156107d557613da5838361490e565b50505050565b600054610100900460ff16610fc15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161080e565b60008484613e24858961530c565b613e2e91906151fc565b613e3891906151e4565b613e42868961530c565b613e4c91906151fc565b905060005b82811015613eb3576000613e678c8c8c86613aec565b90508683613e75838b61530c565b613e7f91906151fc565b613e8991906151e4565b613e93888b61530c565b613e9d91906151fc565b9250508080613eab90615385565b915050613e51565b509998505050505050505050565b6040516319b02f4960e21b81526001600160a01b03848116600483015260009182918716906366c0bd249060240160206040518083038186803b158015613f0757600080fd5b505afa158015613f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3f9190614dc4565b6040516319b02f4960e21b81526001600160a01b0386811660048301529192506000918816906366c0bd249060240160206040518083038186803b158015613f8657600080fd5b505afa158015613f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbe9190614dc4565b60405163a95b089f60e01b815260ff808516600483015282166024820152604481018690529091506000906001600160a01b0389169063a95b089f9060640160206040518083038186803b15801561401557600080fd5b505afa158015614029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404d9190614c96565b9050806140605760009350505050611546565b60405163095ea7b360e01b81526001600160a01b0388169063095ea7b39061408e908b908990600401614f7c565b602060405180830381600087803b1580156140a857600080fd5b505af11580156140bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e09190614c60565b506040516348b4aac360e11b815260ff80851660048301528316602482015260448101869052606481018290524260848201526001600160a01b0389169063916955869060a401602060405180830381600087803b15801561414157600080fd5b505af1158015614155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b639190614c96565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161419457905050905087816000815181106141d7576141d76153b6565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050868160008151811061420f5761420f6153b6565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110614247576142476153b6565b602002602001015160400190151590811515815250508681600181518110614271576142716153b6565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505085816001815181106142a9576142a96153b6565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505083816001815181106142e1576142e16153b6565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb490614324908790869060040161515e565b60006040518083038186803b15801561433c57600080fd5b505afa158015614350573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143789190810190614bb3565b90508060028151811061438d5761438d6153b6565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526000906001600160a01b038a169063095ea7b3906143d5908d908890600401614f7c565b602060405180830381600087803b1580156143ef57600080fd5b505af1158015614403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144279190614c60565b5060408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816144405790505090508981600081518110614483576144836153b6565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505088816000815181106144bb576144bb6153b6565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106144f3576144f36153b6565b60200260200101516040019015159081151581525050888160018151811061451d5761451d6153b6565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508781600181518110614555576145556153b6565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160018151811061458d5761458d6153b6565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038d169063f41766d8906145d6908990899087908a904290600401615177565b600060405180830381600087803b1580156145f057600080fd5b505af1158015614604573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261462c9190810190614bb3565b905080600281518110614641576146416153b6565b6020026020010151925050509998505050505050505050565b6000614666848661530c565b614670848861530c565b61467a91906151e4565b836146858a8a61530c565b61468f919061530c565b61469991906151fc565b905060005b82811015614723576000886146b3848961530c565b6146bd91906151fc565b905060006146cd8e8d8f85613aec565b90506146d9818961530c565b6146e3838b61530c565b6146ed91906151e4565b826146f88d8d61530c565b614702919061530c565b61470c91906151fc565b93505050808061471b90615385565b91505061469e565b509a9950505050505050505050565b6060600061474183600261530c565b61474c9060026151e4565b67ffffffffffffffff811115614764576147646153cc565b6040519080825280601f01601f19166020018201604052801561478e576020820181803683370190505b509050600360fc1b816000815181106147a9576147a96153b6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106147d8576147d86153b6565b60200101906001600160f81b031916908160001a90535060006147fc84600261530c565b6148079060016151e4565b90505b600181111561487f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061483b5761483b6153b6565b1a60f81b828281518110614851576148516153b6565b60200101906001600160f81b031916908160001a90535060049490941c936148788161536e565b905061480a565b508315613ae55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161080e565b6148d781613ce4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161080e565b600080846001600160a01b0316846040516149919190614e46565b600060405180830381855af49150503d80600081146149cc576040519150601f19603f3d011682016040523d82523d6000602084013e6149d1565b606091505b50915091506149f9828260405180606001604052806027815260200161544660279139614a02565b95945050505050565b60608315614a11575081613ae5565b825115614a215782518084602001fd5b8160405162461bcd60e51b815260040161080e9190614f95565b80516001600160701b038116811461137e57600080fd5b600060208284031215614a6457600080fd5b8135613ae5816153e2565b600060208284031215614a8157600080fd5b8151613ae5816153e2565b60008060408385031215614a9f57600080fd5b8235614aaa816153e2565b915060208381013567ffffffffffffffff80821115614ac857600080fd5b818601915086601f830112614adc57600080fd5b813581811115614aee57614aee6153cc565b614b00601f8201601f191685016151b3565b91508082528784828501011115614b1657600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215614b4757600080fd5b8235614b52816153e2565b946020939093013593505050565b60008060008060808587031215614b7657600080fd5b8435614b81816153e2565b9350602085013592506040850135614b98816153e2565b91506060850135614ba8816153f7565b939692955090935050565b60006020808385031215614bc657600080fd5b825167ffffffffffffffff80821115614bde57600080fd5b818501915085601f830112614bf257600080fd5b815181811115614c0457614c046153cc565b8060051b9150614c158483016151b3565b8181528481019084860184860187018a1015614c3057600080fd5b600095505b83861015614c53578051835260019590950194918601918601614c35565b5098975050505050505050565b600060208284031215614c7257600080fd5b8151613ae5816153f7565b600060208284031215614c8f57600080fd5b5035919050565b600060208284031215614ca857600080fd5b5051919050565b60008060408385031215614cc257600080fd5b823591506020830135614cd4816153e2565b809150509250929050565b600060208284031215614cf157600080fd5b81356001600160e01b031981168114613ae557600080fd5b60006102008284031215614d1c57600080fd5b50919050565b600080600060608486031215614d3757600080fd5b614d4084614a3b565b9250614d4e60208501614a3b565b9150604084015163ffffffff81168114614d6757600080fd5b809150509250925092565b60008060408385031215614d8557600080fd5b505080516020909101519092909150565b600080600060608486031215614dab57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614dd657600080fd5b815160ff81168114613ae557600080fd5b600081518084526020808501945080840160005b83811015614e3b57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614dfb565b509495945050505050565b60008251614e58818460208701615342565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e9a816017850160208801615342565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614ecb816028840160208801615342565b01602801949350505050565b6001600160a01b039889168152968816602088015294151560408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b81811015614f6e578551851683529483019491830191600101614f50565b509098975050505050505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152614fb4816040850160208701615342565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526022908201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6040820152616f7760f01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b8281526040602082015260006115466040830184614de7565b85815284602082015260a06040820152600061519660a0830186614de7565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156151dc576151dc6153cc565b604052919050565b600082198211156151f7576151f76153a0565b500190565b60008261521957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561525957816000190482111561523f5761523f6153a0565b8085161561524c57918102915b93841c9390800290615223565b509250929050565b6000613ae560ff84168360008261527a57506001610799565b8161528757506000610799565b816001811461529d57600281146152a7576152c3565b6001915050610799565b60ff8411156152b8576152b86153a0565b50506001821b610799565b5060208310610133831016604e8410600b84101617156152e6575081810a610799565b6152f0838361521e565b8060001904821115615304576153046153a0565b029392505050565b6000816000190483118215151615615326576153266153a0565b500290565b60008282101561533d5761533d6153a0565b500390565b60005b8381101561535d578181015183820152602001615345565b83811115613da55750506000910152565b60008161537d5761537d6153a0565b506000190190565b6000600019821415615399576153996153a0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109a957600080fd5b80151581146109a957600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200cff11434d2274df085754fda8c0165057792c57fe0357e7edb9176ef82ff77764736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102455760003560e01c80637b73aa4e11610139578063bb94d0f4116100b6578063e71f6a9e1161007a578063e71f6a9e14610691578063eb7147ca146106b2578063ef5cfb8c146106d3578063f6f6b881146106f3578063f72c0d8b14610713578063fb75b2c71461074757600080fd5b8063bb94d0f4146105ed578063cb22a73a1461060e578063d4a6bfc21461062f578063d547741f14610650578063de0e70141461067057600080fd5b80639f709492116100fd5780639f7094921461056c578063a217fddf14610583578063a3673b3814610598578063a440b21a146105ad578063adc9772e146105cd57600080fd5b80637b73aa4e146104df5780637d5f5802146104f45780638129fc1c1461051657806391d148541461052b5780639bd59a751461054b57600080fd5b806336568abe116101c75780635918be1a1161018b5780635918be1a1461043c578063620b75df1461045d57806364f8b89a1461047d5780636c0e0a5d1461049e5780636d7f7f82146104bf57600080fd5b806336568abe146103b35780633659cfe6146103d3578063379d878c146103f35780634f1ef2861461041457806352d1902d1461042757600080fd5b8063248a9ca31161020e578063248a9ca3146103155780632576e65a146103455780632639839c1461035a5780632f2ff15d14610371578063311117081461039357600080fd5b8062cb5a831461024a57806301ffc9a71461028857806306aee957146102b857806306da3f2e146102dd57806311eac855146102f4575b600080fd5b34801561025657600080fd5b5061013c5461026b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029457600080fd5b506102a86102a3366004614cdf565b610768565b604051901515815260200161027f565b3480156102c457600080fd5b506102cf6101385481565b60405190815260200161027f565b3480156102e957600080fd5b506102cf61013a5481565b34801561030057600080fd5b5061012e5461026b906001600160a01b031681565b34801561032157600080fd5b506102cf610330366004614c7d565b60009081526065602052604090206001015490565b34801561035157600080fd5b506102cf61079f565b34801561036657600080fd5b506102cf61013e5481565b34801561037d57600080fd5b5061039161038c366004614caf565b6107b0565b005b34801561039f57600080fd5b506103916103ae366004614c7d565b6107da565b3480156103bf57600080fd5b506103916103ce366004614caf565b61084e565b3480156103df57600080fd5b506103916103ee366004614a52565b6108cc565b3480156103ff57600080fd5b5061013b5461026b906001600160a01b031681565b610391610422366004614a8c565b6109ac565b34801561043357600080fd5b506102cf610a79565b34801561044857600080fd5b506101335461026b906001600160a01b031681565b34801561046957600080fd5b5060fb5461026b906001600160a01b031681565b34801561048957600080fd5b506101305461026b906001600160a01b031681565b3480156104aa57600080fd5b506101355461026b906001600160a01b031681565b3480156104cb57600080fd5b506103916104da366004614d09565b610b2c565b3480156104eb57600080fd5b50610391610f8d565b34801561050057600080fd5b506102cf60008051602061540683398151915281565b34801561052257600080fd5b50610391610fc3565b34801561053757600080fd5b506102a8610546366004614caf565b611086565b34801561055757600080fd5b506101325461026b906001600160a01b031681565b34801561057857600080fd5b506102cf6101395481565b34801561058f57600080fd5b506102cf600081565b3480156105a457600080fd5b506102cf6110b1565b3480156105b957600080fd5b506103916105c8366004614a52565b6110bd565b3480156105d957600080fd5b506103916105e8366004614b34565b6111ec565b3480156105f957600080fd5b506101315461026b906001600160a01b031681565b34801561061a57600080fd5b506101365461026b906001600160a01b031681565b34801561063b57600080fd5b506101345461026b906001600160a01b031681565b34801561065c57600080fd5b5061039161066b366004614caf565b6112d9565b34801561067c57600080fd5b5061012d5461026b906001600160a01b031681565b34801561069d57600080fd5b5061012f5461026b906001600160a01b031681565b3480156106be57600080fd5b5061013d5461026b906001600160a01b031681565b3480156106df57600080fd5b506102cf6106ee366004614a52565b6112fe565b3480156106ff57600080fd5b506102cf61070e366004614b60565b611383565b34801561071f57600080fd5b506102cf7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561075357600080fd5b506101375461026b906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061079957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107ab600061155d565b905090565b6000828152606560205260409020600101546107cb81611b6f565b6107d58383611b79565b505050565b6107f260008051602061540683398151915233611086565b6108175760405162461bcd60e51b815260040161080e90614fc8565b60405180910390fd5b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146108be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161080e565b6108c88282611bff565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109155760405162461bcd60e51b815260040161080e90614fff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661095e600080516020615426833981519152546001600160a01b031690565b6001600160a01b0316146109845760405162461bcd60e51b815260040161080e9061508d565b61098d81611c66565b604080516000808252602082019092526109a991839190611c90565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109f55760405162461bcd60e51b815260040161080e90614fff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a3e600080516020615426833981519152546001600160a01b031690565b6001600160a01b031614610a645760405162461bcd60e51b815260040161080e9061508d565b610a6d82611c66565b6108c882826001611c90565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b195760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161080e565b5060008051602061542683398151915290565b610b37600033611086565b610b7a5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161080e565b610b876020820182614a52565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610bb86040820160208301614a52565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610be96060820160408301614a52565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610c1a6080820160608301614a52565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610c4b60a0820160808301614a52565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610c7c60c0820160a08301614a52565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610cad60e0820160c08301614a52565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610cdf610100820160e08301614a52565b61013480546001600160a01b0319166001600160a01b0392909216919091179055610d1261012082016101008301614a52565b61013580546001600160a01b0319166001600160a01b0392909216919091179055610d4561014082016101208301614a52565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610d7861016082016101408301614a52565b61013780546001600160a01b0319166001600160a01b039290921691909117905561016081013561013855610db06020820182614a52565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610de857600080fd5b505afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e209190614dc4565b610e2b90600a615261565b61013955610e3f6040820160208301614a52565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7757600080fd5b505afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190614dc4565b610eba90600a615261565b61013a55610ed06101a082016101808301614a52565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055610f036101c082016101a08301614a52565b61013c80546001600160a01b0319166001600160a01b0392909216919091179055610f366101e082016101c08301614a52565b61013d80546001600160a01b0319166001600160a01b03929092169190911790556101e081013561013e556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b610fa560008051602061540683398151915233611086565b610fc15760405162461bcd60e51b815260040161080e90614fc8565b565b600054610100900460ff1615808015610fe35750600054600160ff909116105b80610ffd5750303b158015610ffd575060005460ff166001145b6110195760405162461bcd60e51b815260040161080e906150d9565b6000805460ff19166001179055801561103c576000805461ff0019166101001790555b611044611e0a565b80156109a9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610843565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107ab600161155d565b6110c8600033611086565b61110b5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161080e565b6001600160a01b0381166111615760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161080e565b60fb5461118690600080516020615406833981519152906001600160a01b03166112d9565b61119e600080516020615406833981519152826107b0565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610843565b61120460008051602061540683398151915233611086565b6112205760405162461bcd60e51b815260040161080e90614fc8565b6040516370a0823160e01b81523060048201526112a29083906001600160a01b038216906370a082319060240160206040518083038186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190614c96565b611ec8565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b6000828152606560205260409020600101546112f481611b6f565b6107d58383611bff565b600061131860008051602061540683398151915233611086565b6113345760405162461bcd60e51b815260040161080e90614fc8565b600061133f83612671565b9050801561137b576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061139d60008051602061540683398151915233611086565b6113b95760405162461bcd60e51b815260040161080e90614fc8565b6000821561141a5760006113cc85612671565b90508015611408576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b6114128786612d2d565b915050611489565b6114258686866134e5565b9050848110156114895760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161080e565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906114b79087908590600401614f7c565b602060405180830381600087803b1580156114d157600080fd5b505af11580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115099190614c60565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a190505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190614c96565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561162857600080fd5b505afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116609190614c96565b610133546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e29190614c96565b61013d54604051636f4ba70b60e11b81523060048201529192506000916001600160a01b039091169063de974e169060240160206040518083038186803b15801561172c57600080fd5b505afa158015611740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117649190614a6f565b61013d5461013254604051630c3f16df60e31b81526001600160a01b0391821660048201529293506000929116906361f8b6f89060240160206040518083038186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb9190614a6f565b6040516370a0823160e01b81526001600160a01b038481166004830152919250908216906370a082319060240160206040518083038186803b15801561183057600080fd5b505afa158015611844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118689190614c96565b61187290846151e4565b925082156119db5761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156118c057600080fd5b505afa1580156118d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f89190614c96565b905060008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119849190614d22565b506001600160701b039182169350169050826119a0878361530c565b6119aa91906151fc565b6119b490896151e4565b9750826119c1878461530c565b6119cb91906151fc565b6119d590886151e4565b96505050505b60008415611b59578715611b305761013554604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b158015611a2f57600080fd5b505afa158015611a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a679190614c96565b9050600061013660009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af29190614c96565b90508161013a54611b03919061530c565b816101395489611b13919061530c565b611b1d919061530c565b611b2791906151fc565b92505050611b59565b6101345461012e5461012d54611b56926001600160a01b03908116928116911688613aec565b90505b611b6381876151e4565b98975050505050505050565b6109a98133613c80565b611b838282611086565b6108c85760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611bbb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c098282611086565b156108c85760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36108c881611b6f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cc3576107d583613ce4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfc57600080fd5b505afa925050508015611d2c575060408051601f3d908101601f19168201909252611d2991810190614c96565b60015b611d8f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161080e565b6000805160206154268339815191528114611dfe5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161080e565b506107d5838383613d80565b600054610100900460ff1615808015611e2a5750600054600160ff909116105b80611e445750303b158015611e44575060005460ff166001145b611e605760405162461bcd60e51b815260040161080e906150d9565b6000805460ff191660011790558015611e83576000805461ff0019166101001790555b611e8b613dab565b611e93613dab565b611e9e600033611b79565b6110447f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611b79565b61012d546001600160a01b03838116911614611ef65760405162461bcd60e51b815260040161080e90615127565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611f4857600080fd5b505afa158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f809190614d22565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015611fb3575066038d7ea4c6800081115b611fcf5760405162461bcd60e51b815260040161080e9061504b565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561201457600080fd5b505afa158015612028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204c9190614c96565b6101345461012d5461012e546101395461013a54949550600094612088946001600160a01b03908116948116931691879189918b916001613e16565b6101345461012d5461012e549293506120b2926001600160a01b0392831692918216911684613ec1565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156120f757600080fd5b505afa15801561210b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212f9190614c96565b61012e546040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561217957600080fd5b505afa15801561218d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b19190614c96565b61012d546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926121eb9216908790600401614f7c565b602060405180830381600087803b15801561220557600080fd5b505af1158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d9190614c60565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612276929116908590600401614f7c565b602060405180830381600087803b15801561229057600080fd5b505af11580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190614c60565b506101315461012d5461012e546001600160a01b0392831692635a47ddc392811691166001878660646122fc83606361530c565b61230691906151fc565b60646123138a606361530c565b61231d91906151fc565b6040516001600160e01b031960e08a901b1681526001600160a01b03978816600482015296909516602487015292151560448601526064850191909152608484015260a483015260c48201523060e48201524261010482015261012401606060405180830381600087803b15801561239457600080fd5b505af11580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190614d96565b5050610132546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e9190614c96565b9050600061271061013e5483612464919061530c565b61246e91906151fc565b9050600061247c828461532b565b6101325461013c5460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926124b69216908690600401614f7c565b602060405180830381600087803b1580156124d057600080fd5b505af11580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190614c60565b5061013c54610132546040516351b3839960e11b81526001600160a01b039283169263a367073292612541929116908690600401614f7c565b600060405180830381600087803b15801561255b57600080fd5b505af115801561256f573d6000803e3d6000fd5b5050610132546101335460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506125ac92909116908590600401614f7c565b602060405180830381600087803b1580156125c657600080fd5b505af11580156125da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fe9190614c60565b5061013354604051631c57762b60e31b815260048101839052600060248201526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b15801561264d57600080fd5b505af1158015612661573d6000803e3d6000fd5b5050505050505050505050505050565b610133546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156126ba57600080fd5b505afa1580156126ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f29190614c96565b905080156127b1576040805160018082528183019092526000916020808301908036833750506101305482519293506001600160a01b03169183915060009061273d5761273d6153b6565b6001600160a01b039283166020918202929092010152610133546040516331279d3d60e01b81529116906331279d3d9061277d9030908590600401614f20565b600060405180830381600087803b15801561279757600080fd5b505af11580156127ab573d6000803e3d6000fd5b50505050505b61013d54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b1580156127f657600080fd5b505afa15801561280a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282e9190614a6f565b61013d5461013254604051630c3f16df60e31b81526001600160a01b0391821660048201529293506000929116906361f8b6f89060240160206040518083038186803b15801561287d57600080fd5b505afa158015612891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b59190614a6f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b1580156128fc57600080fd5b505afa158015612910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129349190614c96565b905080156129a65761013c60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561298d57600080fd5b505af11580156129a1573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156129ef57600080fd5b505afa158015612a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a279190614c96565b90508015612ac957610131546101305461012f5461012d54600093612a63936001600160a01b0391821693908216929082169116858088614179565b90508015612ac757610131546101305461012f5461012d54600093612ab7936001600160a01b03918216939082169290821691168580896064612aa78b606361530c565b612ab191906151fc565b306143a4565b9050612ac381856151e4565b9350505b505b61013b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612b0e57600080fd5b505afa158015612b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b469190614c96565b90508015612bd8576101315461013b5461012f5461012d54600093612b82936001600160a01b0391821693908216929082169116858088614179565b90508015612bd6576101315461013b5461012f5461012d54600093612bc6936001600160a01b03918216939082169290821691168580896064612aa78b606361530c565b9050612bd281866151e4565b9450505b505b8215612d205760006127106101385485612bf2919061530c565b612bfc91906151fc565b90506000612c0a828661532b565b61012d546101375460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92612c449216908690600401614f7c565b602060405180830381600087803b158015612c5e57600080fd5b505af1158015612c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c969190614c60565b5061012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612cca908e908590600401614f7c565b602060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1c9190614c60565b5050505b5090979650505050505050565b61012d546000906001600160a01b03848116911614612d5e5760405162461bcd60e51b815260040161080e90615127565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de89190614d22565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015612e1b575066038d7ea4c6800081115b612e375760405162461bcd60e51b815260040161080e9061504b565b610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612e7c57600080fd5b505afa158015612e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb49190614c96565b90508015612f265761013360009054906101000a90046001600160a01b03166001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f0d57600080fd5b505af1158015612f21573d6000803e3d6000fd5b505050505b61013d54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b158015612f6b57600080fd5b505afa158015612f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa39190614a6f565b61013d5461013254604051630c3f16df60e31b81526001600160a01b0391821660048201529293506000929116906361f8b6f89060240160206040518083038186803b158015612ff257600080fd5b505afa158015613006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302a9190614a6f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561307157600080fd5b505afa158015613085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a99190614c96565b9050801561311c5761013c546101325460405163fce07e8960e01b81526001600160a01b039283169263fce07e89926130e9929116908590600401614f7c565b600060405180830381600087803b15801561310357600080fd5b505af1158015613117573d6000803e3d6000fd5b505050505b610132546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561316157600080fd5b505afa158015613175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131999190614c96565b905080156133ad5761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156131e757600080fd5b505afa1580156131fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321f9190614c96565b905060008161322e848a61530c565b61323891906151fc565b9050600082613247858c61530c565b61325191906151fc565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261328b9216908890600401614f7c565b602060405180830381600087803b1580156132a557600080fd5b505af11580156132b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132dd9190614c60565b506101315461012d5461012e546001600160a01b0392831692630dede6c49281169116600188606461331089606361530c565b61331a91906151fc565b606461332789606361530c565b61333191906151fc565b30426040518963ffffffff1660e01b8152600401613356989796959493929190614ed7565b6040805180830381600087803b15801561336f57600080fd5b505af1158015613383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a79190614d72565b50505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156133f257600080fd5b505afa158015613406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342a9190614c96565b9050801561345a576101345461012e5461012d54613458926001600160a01b03908116928116911684613ec1565b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561349e57600080fd5b505afa1580156134b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d69190614c96565b9b9a5050505050505050505050565b61012d546000906001600160a01b038581169116146135165760405162461bcd60e51b815260040161080e90615127565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561356857600080fd5b505afa15801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a09190614d22565b506001600160701b031691506001600160701b0316915066038d7ea4c68000821180156135d3575066038d7ea4c6800081115b6135ef5760405162461bcd60e51b815260040161080e9061504b565b610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561363457600080fd5b505afa158015613648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366c9190614c96565b905080156139b55761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156136ba57600080fd5b505afa1580156136ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f29190614c96565b6101345461012d5461012e5492935060009261373a926001600160a01b0390811692811691166137288c6509184e72a0006151e4565b86898b6101395461013a54600161465a565b9050828111156137475750815b61013354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561378e57600080fd5b505af11580156137a2573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156137ed57600080fd5b505afa158015613801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138259190614c96565b9050600083613834838861530c565b61383e91906151fc565b905060008461384d848a61530c565b61385791906151fc565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926138919216908790600401614f7c565b602060405180830381600087803b1580156138ab57600080fd5b505af11580156138bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e39190614c60565b506101315461012d5461012e546001600160a01b0392831692630dede6c49281169116600187606461391689606361530c565b61392091906151fc565b606461392d89606361530c565b61393791906151fc565b30426040518963ffffffff1660e01b815260040161395c989796959493929190614ed7565b6040805180830381600087803b15801561397557600080fd5b505af1158015613989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ad9190614d72565b505050505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156139fa57600080fd5b505afa158015613a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a329190614c96565b90508015613a62576101345461012e5461012d54613a60926001600160a01b03908116928116911684613ec1565b505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613aa657600080fd5b505afa158015613aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ade9190614c96565b9450505050505b9392505050565b6040516319b02f4960e21b81526001600160a01b03848116600483015260009182918716906366c0bd249060240160206040518083038186803b158015613b3257600080fd5b505afa158015613b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6a9190614dc4565b6040516319b02f4960e21b81526001600160a01b0386811660048301529192506000918816906366c0bd249060240160206040518083038186803b158015613bb157600080fd5b505afa158015613bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be99190614dc4565b60405163a95b089f60e01b815260ff808516600483015282166024820152604481018690529091506001600160a01b0388169063a95b089f9060640160206040518083038186803b158015613c3d57600080fd5b505afa158015613c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c759190614c96565b979650505050505050565b613c8a8282611086565b6108c857613ca2816001600160a01b03166014614732565b613cad836020614732565b604051602001613cbe929190614e62565b60408051601f198184030181529082905262461bcd60e51b825261080e91600401614f95565b6001600160a01b0381163b613d515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161080e565b60008051602061542683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613d89836148ce565b600082511180613d965750805b156107d557613da5838361490e565b50505050565b600054610100900460ff16610fc15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161080e565b60008484613e24858961530c565b613e2e91906151fc565b613e3891906151e4565b613e42868961530c565b613e4c91906151fc565b905060005b82811015613eb3576000613e678c8c8c86613aec565b90508683613e75838b61530c565b613e7f91906151fc565b613e8991906151e4565b613e93888b61530c565b613e9d91906151fc565b9250508080613eab90615385565b915050613e51565b509998505050505050505050565b6040516319b02f4960e21b81526001600160a01b03848116600483015260009182918716906366c0bd249060240160206040518083038186803b158015613f0757600080fd5b505afa158015613f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3f9190614dc4565b6040516319b02f4960e21b81526001600160a01b0386811660048301529192506000918816906366c0bd249060240160206040518083038186803b158015613f8657600080fd5b505afa158015613f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbe9190614dc4565b60405163a95b089f60e01b815260ff808516600483015282166024820152604481018690529091506000906001600160a01b0389169063a95b089f9060640160206040518083038186803b15801561401557600080fd5b505afa158015614029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404d9190614c96565b9050806140605760009350505050611546565b60405163095ea7b360e01b81526001600160a01b0388169063095ea7b39061408e908b908990600401614f7c565b602060405180830381600087803b1580156140a857600080fd5b505af11580156140bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e09190614c60565b506040516348b4aac360e11b815260ff80851660048301528316602482015260448101869052606481018290524260848201526001600160a01b0389169063916955869060a401602060405180830381600087803b15801561414157600080fd5b505af1158015614155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b639190614c96565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161419457905050905087816000815181106141d7576141d76153b6565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050868160008151811061420f5761420f6153b6565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110614247576142476153b6565b602002602001015160400190151590811515815250508681600181518110614271576142716153b6565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505085816001815181106142a9576142a96153b6565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505083816001815181106142e1576142e16153b6565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb490614324908790869060040161515e565b60006040518083038186803b15801561433c57600080fd5b505afa158015614350573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143789190810190614bb3565b90508060028151811061438d5761438d6153b6565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526000906001600160a01b038a169063095ea7b3906143d5908d908890600401614f7c565b602060405180830381600087803b1580156143ef57600080fd5b505af1158015614403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144279190614c60565b5060408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816144405790505090508981600081518110614483576144836153b6565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505088816000815181106144bb576144bb6153b6565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106144f3576144f36153b6565b60200260200101516040019015159081151581525050888160018151811061451d5761451d6153b6565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508781600181518110614555576145556153b6565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160018151811061458d5761458d6153b6565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038d169063f41766d8906145d6908990899087908a904290600401615177565b600060405180830381600087803b1580156145f057600080fd5b505af1158015614604573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261462c9190810190614bb3565b905080600281518110614641576146416153b6565b6020026020010151925050509998505050505050505050565b6000614666848661530c565b614670848861530c565b61467a91906151e4565b836146858a8a61530c565b61468f919061530c565b61469991906151fc565b905060005b82811015614723576000886146b3848961530c565b6146bd91906151fc565b905060006146cd8e8d8f85613aec565b90506146d9818961530c565b6146e3838b61530c565b6146ed91906151e4565b826146f88d8d61530c565b614702919061530c565b61470c91906151fc565b93505050808061471b90615385565b91505061469e565b509a9950505050505050505050565b6060600061474183600261530c565b61474c9060026151e4565b67ffffffffffffffff811115614764576147646153cc565b6040519080825280601f01601f19166020018201604052801561478e576020820181803683370190505b509050600360fc1b816000815181106147a9576147a96153b6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106147d8576147d86153b6565b60200101906001600160f81b031916908160001a90535060006147fc84600261530c565b6148079060016151e4565b90505b600181111561487f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061483b5761483b6153b6565b1a60f81b828281518110614851576148516153b6565b60200101906001600160f81b031916908160001a90535060049490941c936148788161536e565b905061480a565b508315613ae55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161080e565b6148d781613ce4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161080e565b600080846001600160a01b0316846040516149919190614e46565b600060405180830381855af49150503d80600081146149cc576040519150601f19603f3d011682016040523d82523d6000602084013e6149d1565b606091505b50915091506149f9828260405180606001604052806027815260200161544660279139614a02565b95945050505050565b60608315614a11575081613ae5565b825115614a215782518084602001fd5b8160405162461bcd60e51b815260040161080e9190614f95565b80516001600160701b038116811461137e57600080fd5b600060208284031215614a6457600080fd5b8135613ae5816153e2565b600060208284031215614a8157600080fd5b8151613ae5816153e2565b60008060408385031215614a9f57600080fd5b8235614aaa816153e2565b915060208381013567ffffffffffffffff80821115614ac857600080fd5b818601915086601f830112614adc57600080fd5b813581811115614aee57614aee6153cc565b614b00601f8201601f191685016151b3565b91508082528784828501011115614b1657600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215614b4757600080fd5b8235614b52816153e2565b946020939093013593505050565b60008060008060808587031215614b7657600080fd5b8435614b81816153e2565b9350602085013592506040850135614b98816153e2565b91506060850135614ba8816153f7565b939692955090935050565b60006020808385031215614bc657600080fd5b825167ffffffffffffffff80821115614bde57600080fd5b818501915085601f830112614bf257600080fd5b815181811115614c0457614c046153cc565b8060051b9150614c158483016151b3565b8181528481019084860184860187018a1015614c3057600080fd5b600095505b83861015614c53578051835260019590950194918601918601614c35565b5098975050505050505050565b600060208284031215614c7257600080fd5b8151613ae5816153f7565b600060208284031215614c8f57600080fd5b5035919050565b600060208284031215614ca857600080fd5b5051919050565b60008060408385031215614cc257600080fd5b823591506020830135614cd4816153e2565b809150509250929050565b600060208284031215614cf157600080fd5b81356001600160e01b031981168114613ae557600080fd5b60006102008284031215614d1c57600080fd5b50919050565b600080600060608486031215614d3757600080fd5b614d4084614a3b565b9250614d4e60208501614a3b565b9150604084015163ffffffff81168114614d6757600080fd5b809150509250925092565b60008060408385031215614d8557600080fd5b505080516020909101519092909150565b600080600060608486031215614dab57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614dd657600080fd5b815160ff81168114613ae557600080fd5b600081518084526020808501945080840160005b83811015614e3b57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614dfb565b509495945050505050565b60008251614e58818460208701615342565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e9a816017850160208801615342565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614ecb816028840160208801615342565b01602801949350505050565b6001600160a01b039889168152968816602088015294151560408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b81811015614f6e578551851683529483019491830191600101614f50565b509098975050505050505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152614fb4816040850160208701615342565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526022908201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6040820152616f7760f01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b8281526040602082015260006115466040830184614de7565b85815284602082015260a06040820152600061519660a0830186614de7565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156151dc576151dc6153cc565b604052919050565b600082198211156151f7576151f76153a0565b500190565b60008261521957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561525957816000190482111561523f5761523f6153a0565b8085161561524c57918102915b93841c9390800290615223565b509250929050565b6000613ae560ff84168360008261527a57506001610799565b8161528757506000610799565b816001811461529d57600281146152a7576152c3565b6001915050610799565b60ff8411156152b8576152b86153a0565b50506001821b610799565b5060208310610133831016604e8410600b84101617156152e6575081810a610799565b6152f0838361521e565b8060001904821115615304576153046153a0565b029392505050565b6000816000190483118215151615615326576153266153a0565b500290565b60008282101561533d5761533d6153a0565b500390565b60005b8381101561535d578181015183820152602001615345565b83811115613da55750506000910152565b60008161537d5761537d6153a0565b506000190190565b6000600019821415615399576153996153a0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109a957600080fd5b80151581146109a957600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200cff11434d2274df085754fda8c0165057792c57fe0357e7edb9176ef82ff77764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7015,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 7351,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7472,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "busdToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7475,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "usdcToken",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7478,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "wBnbToken",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7481,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "coneToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7484,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "coneRouter",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IConeRouter01)3081"
      },
      {
        "astId": 7487,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "conePair",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IConePair)3320"
      },
      {
        "astId": 7490,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "coneGauge",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IGauge)3219"
      },
      {
        "astId": 7493,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "synapseStableSwapPool",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(ISwap)5035"
      },
      {
        "astId": 7496,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "chainlinkBusd",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IPriceFeed)2609"
      },
      {
        "astId": 7499,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "chainlinkUsdc",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IPriceFeed)2609"
      },
      {
        "astId": 7501,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "rewardWallet",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 7503,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "rewardWalletPercent",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 7505,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "busdTokenDenominator",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 7507,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "usdcTokenDenominator",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 7510,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "unkwnToken",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7513,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "unkwnUserProxy",
        "offset": 0,
        "slot": "316",
        "type": "t_contract(IUserProxy)6616"
      },
      {
        "astId": 7516,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "unkwnLens",
        "offset": 0,
        "slot": "317",
        "type": "t_contract(IUnkwnLens)6305"
      },
      {
        "astId": 7518,
        "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
        "label": "unkwnPercent",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConePair)3320": {
        "encoding": "inplace",
        "label": "contract IConePair",
        "numberOfBytes": "20"
      },
      "t_contract(IConeRouter01)3081": {
        "encoding": "inplace",
        "label": "contract IConeRouter01",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2379": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGauge)3219": {
        "encoding": "inplace",
        "label": "contract IGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)2609": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)5035": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IUnkwnLens)6305": {
        "encoding": "inplace",
        "label": "contract IUnkwnLens",
        "numberOfBytes": "20"
      },
      "t_contract(IUserProxy)6616": {
        "encoding": "inplace",
        "label": "contract IUserProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/busd/StrategyConeBusdUsdc.sol:StrategyConeBusdUsdc",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}