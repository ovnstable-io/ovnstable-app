{
  "address": "0x6A9d96f5eaCa97D61AD8f82C98591462Af9a7fc8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "annexStablePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkBusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkTusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conePair",
      "outputs": [
        {
          "internalType": "contract IConePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneRouter",
      "outputs": [
        {
          "internalType": "contract IConeRouter01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWalletPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "busdToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tusdToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wBnbToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "conePair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "chainlinkBusd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "chainlinkTusd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardWalletPercent",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unkwnToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unkwnUserProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unkwnLens",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeStep",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "annexStablePool",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyUnknownBusdTusd.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tusdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tusdTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnLens",
      "outputs": [
        {
          "internalType": "contract IUnkwnLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkwnUserProxy",
      "outputs": [
        {
          "internalType": "contract IUserProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wBnbToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "a9b56830b053c8aa677c6d41c1c3920e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annexStablePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkBusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkTusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conePair\",\"outputs\":[{\"internalType\":\"contract IConePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneRouter\",\"outputs\":[{\"internalType\":\"contract IConeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWalletPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"busdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tusdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wBnbToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"conePair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkBusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkTusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardWalletPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unkwnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unkwnUserProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unkwnLens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeStep\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"annexStablePool\",\"type\":\"address\"}],\"internalType\":\"struct StrategyUnknownBusdTusd.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusdTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnLens\",\"outputs\":[{\"internalType\":\"contract IUnkwnLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkwnUserProxy\",\"outputs\":[{\"internalType\":\"contract IUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBnbToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/busd/StrategyUnknownBusdTusd.sol\":\"StrategyUnknownBusdTusd\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Annex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AnnexStablePool {\\n\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\n    function get_dy(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    function get_dy_underlying(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    //Perform an exchange between two coins.\\n    // i: Index value for the coin to send\\n    // j: Index value of the coin to receive\\n    // _dx: Amount of i being exchanged\\n    // _min_dy: Minimum amount of j to receive\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    function exchange(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function exchange_underlying(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n}\\n\\n// Copy from CurveSwapPlace.sol\\n\\nlibrary AnnexLibrary {\\n\\n    function swap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountMinOut,\\n        address pool\\n    ) internal returns (uint256) {\\n        IERC20(tokenIn).approve(pool, amountIn);\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(tokenIn, tokenOut, pool);\\n\\n        uint256 backAmount;\\n        if (isUnderlying) {\\n            backAmount = AnnexStablePool(pool).exchange_underlying(\\n                indexIn,\\n                indexOut,\\n                amountIn,\\n                amountMinOut\\n            );\\n        } else {\\n            backAmount = AnnexStablePool(pool).exchange(\\n                indexIn,\\n                indexOut,\\n                amountIn,\\n                amountMinOut\\n            );\\n        }\\n\\n        return backAmount;\\n    }\\n\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) internal view returns (uint256) {\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(tokenIn, tokenOut, pool);\\n        if (isUnderlying) {\\n            return AnnexStablePool(pool).get_dy_underlying(indexIn, indexOut, amountIn);\\n        } else {\\n            return AnnexStablePool(pool).get_dy(indexIn, indexOut, amountIn);\\n        }\\n    }\\n\\n\\n    function getIndexes(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool\\n    ) internal view returns (int128, int128, bool){\\n        int128 indexIn = type(int128).max;\\n        int128 indexOut = type(int128).max;\\n\\n        // search in coins list\\n        uint256 i;\\n        while (true) {\\n            address token = getCoin(pool, i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n\\n            if (token == tokenIn) {\\n                indexIn = int128(uint128(i));\\n            } else if (token == tokenOut) {\\n                indexOut = int128(uint128(i));\\n            }\\n            i++;\\n        }\\n\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\n            return (indexIn, indexOut, false);\\n        }\\n\\n        if (indexIn != type(int128).max || indexOut != type(int128).max) {\\n            // one of tokens found in coins but not found another - it is incorrect\\n            // setup case for token pairs\\n            revert(\\\"CurveSP: incorrect token pair setup\\\");\\n        }\\n\\n        // search in underlying coins list\\n        i = 0;\\n        while (true) {\\n            address token = getUnderlyingCoin(pool, i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n\\n            if (token == tokenIn) {\\n                indexIn = int128(uint128(i));\\n            } else if (token == tokenOut) {\\n                indexOut = int128(uint128(i));\\n            }\\n            i++;\\n        }\\n\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\n            return (indexIn, indexOut, true);\\n        }\\n\\n        revert(\\\"CurveSP: Can't find index for tokens in pool\\\");\\n    }\\n\\n\\n    function getCoin(address pool, uint256 index) internal view returns (address) {\\n        try AnnexStablePool(pool).coins(index) returns (address tokenAddress) {\\n            return tokenAddress;\\n        } catch {}\\n        return address(0);\\n    }\\n\\n    function getUnderlyingCoin(address pool, uint256 index) internal view returns (address) {\\n        try AnnexStablePool(pool).underlying_coins(index) returns (address tokenAddress) {\\n            return tokenAddress;\\n        } catch {}\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x3eb79c1a201ada86cbe1166989f497a4944a337f6a9f8664b9d5bb03073f8c21\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\\n\\nlibrary ChainlinkLibrary {\\n\\n    function convertTokenToToken(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenToUSD(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToToken(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n}\\n\",\"keccak256\":\"0x583c9b50c81bf05e8a785f12db1c2f2223067f11fc24fbd17865d416bb5b6468\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IConeRouter01 {\\n\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n\\n    function getExactAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint);\\n\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) external view returns (uint amountA, uint amountB);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityMATIC(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountMATIC, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityMATIC(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountMATIC);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityMATICWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountMATIC);\\n\\n    function removeLiquidityMATICSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountFTM);\\n\\n    function removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountFTM);\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactMATICForTokens(uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForMATIC(uint amountIn, uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactMATICForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForMATICSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint[] memory amounts,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory);\\n\\n}\\n\\n\\ninterface IGauge {\\n\\n    function bribe() external view returns (address);\\n\\n    function tokenIds(address account) external view returns (uint);\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function depositAll(uint tokenId) external;\\n\\n    function deposit(uint amount, uint tokenId) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint amount) external;\\n\\n    function withdrawToken(uint amount, uint tokenId) external;\\n\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account) external view returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n\\n}\\n\\n\\ninterface IConePair is IERC20 {\\n\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n}\\n\\n\\nlibrary ConeLibrary {\\n\\n    function getAmountOut(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = coneRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = coneRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function swap(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(coneRouter), amountIn);\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = coneRouter.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swap(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(coneRouter), amountIn);\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = coneRouter.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n}\\n\\ninterface VeCone is IERC721 {\\n\\n    function increaseAmount(uint _tokenId, uint _value) external;\\n    function increaseUnlockTime(uint _tokenId, uint _lockDuration) external;\\n    function balanceOfNFT(uint256 _tokenId) external returns (uint256);\\n}\\n\\ninterface IBribe {\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n\\n}\\n\\ninterface VeDist {\\n\\n    function claimable(uint _tokenId) external view returns (uint);\\n    function claim(uint _tokenId) external returns (uint);\\n}\\n\\ninterface IConeVoter {\\n\\n    function lastVote(uint tokenId) external returns (uint256 lastTime);\\n\\n    function vote(uint tokenId, address[] calldata _poolVote, int256[] calldata _weights) external ;\\n\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens) external;\\n\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n\\n    function claimFees(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n}\\n\",\"keccak256\":\"0xcd8eee1813168426a152cd99dd2db0d292b472db696bb4443e3cfc9c5e1aa9c4\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Unknown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConeLens {\\n    struct Pool {\\n        address id;\\n        string symbol;\\n        bool stable;\\n        address token0Address;\\n        address token1Address;\\n        address gaugeAddress;\\n        address bribeAddress;\\n        address[] bribeTokensAddresses;\\n        address fees;\\n        uint256 totalSupply;\\n    }\\n\\n    struct PoolReserveData {\\n        address id;\\n        address token0Address;\\n        address token1Address;\\n        uint256 token0Reserve;\\n        uint256 token1Reserve;\\n        uint8 token0Decimals;\\n        uint8 token1Decimals;\\n    }\\n\\n    struct PositionVe {\\n        uint256 tokenId;\\n        uint256 balanceOf;\\n        uint256 locked;\\n    }\\n\\n    struct PositionBribesByTokenId {\\n        uint256 tokenId;\\n        PositionBribe[] bribes;\\n    }\\n\\n    struct PositionBribe {\\n        address bribeTokenAddress;\\n        uint256 earned;\\n    }\\n\\n    struct PositionPool {\\n        address id;\\n        uint256 balanceOf;\\n    }\\n\\n    function poolsLength() external view returns (uint256);\\n\\n    function voterAddress() external view returns (address);\\n\\n    function veAddress() external view returns (address);\\n\\n    function poolsFactoryAddress() external view returns (address);\\n\\n    function gaugesFactoryAddress() external view returns (address);\\n\\n    function minterAddress() external view returns (address);\\n\\n    function coneAddress() external view returns (address);\\n\\n    function vePositionsOf(address) external view returns (PositionVe[] memory);\\n\\n    function bribeAddresByPoolAddress(address) external view returns (address);\\n\\n    function gaugeAddressByPoolAddress(address) external view returns (address);\\n\\n    function poolsPositionsOf(address)\\n    external\\n    view\\n    returns (PositionPool[] memory);\\n\\n    function poolsPositionsOf(\\n        address,\\n        uint256,\\n        uint256\\n    ) external view returns (PositionPool[] memory);\\n\\n    function poolInfo(address) external view returns (Pool memory);\\n}\\n\\n\\ninterface IUnkwnLens {\\n    struct ProtocolAddresses {\\n        address unkwnPoolFactoryAddress;\\n        address ConeLensAddress;\\n        address UnkwnAddress;\\n        address vlUnkwnAddress;\\n        address unConeAddress;\\n        address voterProxyAddress;\\n        address coneAddress;\\n        address voterAddress;\\n        address poolsFactoryAddress;\\n        address gaugesFactoryAddress;\\n        address minterAddress;\\n        address veAddress;\\n        address userProxyInterfaceAddress;\\n        address votingSnapshotAddress;\\n    }\\n\\n    struct UserPosition {\\n        address userProxyAddress;\\n        uint256 veTotalBalanceOf;\\n        IConeLens.PositionVe[] vePositions;\\n        IConeLens.PositionPool[] poolsPositions;\\n        IUserProxy.PositionStakingPool[] stakingPools;\\n        uint256 unConeanceOf;\\n        uint256 unkwnBalanceOf;\\n        uint256 coneBalanceOf;\\n        uint256 vlUnkwnBalanceOf;\\n    }\\n\\n    struct TokenMetadata {\\n        address id;\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n        uint256 priceUsdc;\\n    }\\n\\n    struct UnkwnPoolData {\\n        address id;\\n        address stakingAddress;\\n        uint256 stakedTotalSupply;\\n        uint256 totalSupply;\\n        IConeLens.Pool poolData;\\n    }\\n\\n    struct Pool {\\n        address id;\\n        string symbol;\\n        bool stable;\\n        address token0Address;\\n        address token1Address;\\n        address gaugeAddress;\\n        address bribeAddress;\\n        address[] bribeTokensAddresses;\\n        address fees;\\n    }\\n\\n    struct RewardTokenData {\\n        address id;\\n        uint256 rewardRate;\\n        uint256 periodFinish;\\n    }\\n\\n    /* ========== PUBLIC VARS ========== */\\n\\n    function unkwnPoolFactoryAddress() external view returns (address);\\n\\n    function rewardsDistributorAddress() external view returns (address);\\n\\n    function userProxyFactoryAddress() external view returns (address);\\n\\n    function coneLensAddress() external view returns (address);\\n\\n    function unkwnAddress() external view returns (address);\\n\\n    function vlUnkwnAddress() external view returns (address);\\n\\n    function unConeAddress() external view returns (address);\\n\\n    function voterProxyAddress() external view returns (address);\\n\\n    function veAddress() external view returns (address);\\n\\n    function coneAddress() external view returns (address);\\n\\n    function unConeRewardsPoolAddress() external view returns (address);\\n\\n    function partnersRewardsPoolAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function cvlUnkwnAddress() external view returns (address);\\n\\n    function unkwnV1RewardsAddress() external view returns (address);\\n\\n    function unkwnV1RedeemAddress() external view returns (address);\\n\\n    function unkwnV1Address() external view returns (address);\\n\\n    function tokensAllowlistAddress() external view returns (address);\\n\\n    /* ========== PUBLIC VIEW FUNCTIONS ========== */\\n\\n    function voterAddress() external view returns (address);\\n\\n    function poolsFactoryAddress() external view returns (address);\\n\\n    function gaugesFactoryAddress() external view returns (address);\\n\\n    function minterAddress() external view returns (address);\\n\\n    function protocolAddresses()\\n    external\\n    view\\n    returns (ProtocolAddresses memory);\\n\\n    function positionsOf(address accountAddress)\\n    external\\n    view\\n    returns (UserPosition memory);\\n\\n    function rewardTokensPositionsOf(address, address)\\n    external\\n    view\\n    returns (IUserProxy.RewardToken[] memory);\\n\\n    function veTotalBalanceOf(IConeLens.PositionVe[] memory positions)\\n    external\\n    pure\\n    returns (uint256);\\n\\n    function unkwnPoolsLength() external view returns (uint256);\\n\\n    function userProxiesLength() external view returns (uint256);\\n\\n    function userProxyByAccount(address accountAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function userProxyByIndex(uint256 index) external view returns (address);\\n\\n    function gaugeByConePool(address) external view returns (address);\\n\\n    function conePoolByUnkwnPool(address unkwnPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function unkwnPoolByConePool(address conePoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByConePool(address conePoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByUnkwnPool(address conePoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function isUnkwnPool(address unkwnPoolAddress) external view returns (bool);\\n\\n    function unkwnPoolsAddresses() external view returns (address[] memory);\\n\\n    function unkwnPoolData(address unkwnPoolAddress)\\n    external\\n    view\\n    returns (UnkwnPoolData memory);\\n\\n    function unkwnPoolsData(address[] memory _unkwnPoolsAddresses)\\n    external\\n    view\\n    returns (UnkwnPoolData[] memory);\\n\\n    function unkwnPoolsData() external view returns (UnkwnPoolData[] memory);\\n\\n    function isPartner(address userProxyAddress) external view returns (bool);\\n\\n    function stakedUnConeBalanceOf(address accountAddress)\\n    external\\n    view\\n    returns (uint256 stakedBalance);\\n\\n    function coneInflationSinceInception() external view returns (uint256);\\n}\\n\\n\\ninterface IUserProxy {\\n    struct PositionStakingPool {\\n        address stakingPoolAddress;\\n        address unkwnPoolAddress;\\n        address conePoolAddress;\\n        uint256 balanceOf;\\n        RewardToken[] rewardTokens;\\n    }\\n\\n    function initialize(\\n        address,\\n        address,\\n        address,\\n        address[] memory\\n    ) external;\\n\\n    struct RewardToken {\\n        address rewardTokenAddress;\\n        uint256 rewardRate;\\n        uint256 rewardPerToken;\\n        uint256 getRewardForDuration;\\n        uint256 earned;\\n    }\\n\\n    struct Vote {\\n        address poolAddress;\\n        int256 weight;\\n    }\\n\\n    function convertNftToUnCone(uint256) external;\\n\\n    function convertConeToUnCone(uint256) external;\\n\\n    function depositLpAndStake(address, uint256) external;\\n\\n    function depositLp(address, uint256) external;\\n\\n    function stakingAddresses() external view returns (address[] memory);\\n\\n    function initialize(address, address) external;\\n\\n    function stakingPoolsLength() external view returns (uint256);\\n\\n    function unstakeLpAndWithdraw(\\n        address,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function unstakeLpAndWithdraw(address, uint256) external;\\n\\n    function unstakeLpWithdrawAndClaim(address) external;\\n\\n    function unstakeLpWithdrawAndClaim(address, uint256) external;\\n\\n    function withdrawLp(address, uint256) external;\\n\\n    function stakeUnkwnLp(address, uint256) external;\\n\\n    function unstakeUnkwnLp(address, uint256) external;\\n\\n    function ownerAddress() external view returns (address);\\n\\n    function stakingPoolsPositions()\\n    external\\n    view\\n    returns (PositionStakingPool[] memory);\\n\\n    function stakeUnCone(uint256) external;\\n\\n    function unstakeUnCone(uint256) external;\\n\\n    function unstakeUnCone(address, uint256) external;\\n\\n    function convertConeToUnConeAndStake(uint256) external;\\n\\n    function convertNftToUnConeAndStake(uint256) external;\\n\\n    function claimUnConeStakingRewards() external;\\n\\n    function claimPartnerStakingRewards() external;\\n\\n    function claimStakingRewards(address) external;\\n\\n    function claimStakingRewards(address[] memory) external;\\n\\n    function claimStakingRewards() external;\\n\\n    function claimVlUnkwnRewards() external;\\n\\n    function depositUnkwn(uint256, uint256) external;\\n\\n    function withdrawUnkwn(bool, uint256) external;\\n\\n    function voteLockUnkwn(uint256, uint256) external;\\n\\n    function withdrawVoteLockedUnkwn(uint256, bool) external;\\n\\n    function relockVoteLockedUnkwn(uint256) external;\\n\\n    function removeVote(address) external;\\n\\n    function registerStake(address) external;\\n\\n    function registerUnstake(address) external;\\n\\n    function resetVotes() external;\\n\\n    function setVoteDelegate(address) external;\\n\\n    function clearVoteDelegate() external;\\n\\n    function vote(address, int256) external;\\n\\n    function vote(Vote[] memory) external;\\n\\n    function votesByAccount(address) external view returns (Vote[] memory);\\n\\n    function migrateUnConeToPartner() external;\\n\\n    function stakeUnConeInUnkwnV1(uint256) external;\\n\\n    function unstakeUnConeInUnkwnV1(uint256) external;\\n\\n    function redeemUnkwnV1(uint256) external;\\n\\n    function redeemAndStakeUnkwnV1(uint256) external;\\n\\n    function whitelist(address) external;\\n\\n    function implementationsAddresses()\\n    external\\n    view\\n    returns (address[] memory);\\n}\\n\\n\\nlibrary UnknownLibrary {\\n\\n    function getUserLpBalance(\\n        IUnkwnLens unkwnLens,\\n        address conePair,\\n        address userAddress\\n    ) internal view returns (uint256 lpBalance) {\\n        address userProxyThis = unkwnLens.userProxyByAccount(userAddress);\\n        address stakingAddress = unkwnLens.stakingRewardsByConePool(conePair);\\n        lpBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\n    }\\n}\\n\",\"keccak256\":\"0x73d5ab137fe595ae537f37ccd6dee6dd93d4cc9973b2a316a39d3e05368def8e\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyPortfolioManager {\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n        emit Stake(_amount);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            uint256 totalAsset = _claimRewards(_beneficiary);\\n            if (totalAsset > 0) {\\n                emit Reward(totalAsset);\\n            }\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalAsset = _claimRewards(_to);\\n        if (totalAsset > 0) {\\n            emit Reward(totalAsset);\\n        }\\n        return totalAsset;\\n    }\\n\\n    function healthFactorBalance() external override onlyPortfolioManager {\\n        uint256 healthFactor = _healthFactorBalance();\\n        if (healthFactor > 0) {\\n            emit BalanceHealthFactor(healthFactor);\\n        }\\n    }\\n\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\n        _setHealthFactor(healthFactor);\\n        emit SetHealthFactor(healthFactor);\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\n\\n    }\\n\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\n\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfa70428bd5dc4e4e3ddfd68c1d5e8f6ffccc62c1223efb869d3d87b94228266\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n    function healthFactorBalance() external;\\n\\n    function setHealthFactor(uint256 healthFactor) external;\\n}\\n\",\"keccak256\":\"0x4404caa3b9be9c213aee4babcb2957833ff90a1e300de1d2d7bd355859539d4e\",\"license\":\"GPL-3.0\"},\"contracts/busd/StrategyUnknownBusdTusd.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Unknown.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Annex.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\ncontract StrategyUnknownBusdTusd is Strategy {\\n\\n    // --- structs\\n\\n    struct StrategyParams {\\n        address busdToken;\\n        address tusdToken;\\n        address wBnbToken;\\n        address coneToken;\\n        address coneRouter;\\n        address conePair;\\n        address chainlinkBusd;\\n        address chainlinkTusd;\\n        address rewardWallet;\\n        uint256 rewardWalletPercent;\\n        address unkwnToken;\\n        address unkwnUserProxy;\\n        address unkwnLens;\\n        uint256 stakeStep;\\n        address annexStablePool;\\n    }\\n\\n    // --- params\\n\\n    IERC20 public busdToken;\\n    IERC20 public tusdToken;\\n    IERC20 public wBnbToken;\\n    IERC20 public coneToken;\\n\\n    IConeRouter01 public coneRouter;\\n    IConePair public conePair;\\n\\n    IPriceFeed public chainlinkBusd;\\n    IPriceFeed public chainlinkTusd;\\n\\n    address public rewardWallet;\\n    uint256 public rewardWalletPercent;\\n\\n    uint256 public busdTokenDenominator;\\n    uint256 public tusdTokenDenominator;\\n\\n    IERC20 public unkwnToken;\\n    IUserProxy public unkwnUserProxy;\\n    IUnkwnLens public unkwnLens;\\n\\n    uint256 public stakeStep;\\n\\n    address public annexStablePool;\\n\\n    // --- events\\n\\n    event StrategyUpdatedParams();\\n\\n    // --- constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n    // --- setters\\n\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\n\\n        busdToken = IERC20(params.busdToken);\\n        tusdToken = IERC20(params.tusdToken);\\n        wBnbToken = IERC20(params.wBnbToken);\\n        coneToken = IERC20(params.coneToken);\\n\\n        coneRouter = IConeRouter01(params.coneRouter);\\n        conePair = IConePair(params.conePair);\\n\\n        chainlinkBusd = IPriceFeed(params.chainlinkBusd);\\n        chainlinkTusd = IPriceFeed(params.chainlinkTusd);\\n\\n        annexStablePool = params.annexStablePool;\\n\\n        rewardWallet = params.rewardWallet;\\n        rewardWalletPercent = params.rewardWalletPercent;\\n\\n        busdTokenDenominator = 10 ** IERC20Metadata(params.busdToken).decimals();\\n        tusdTokenDenominator = 10 ** IERC20Metadata(params.tusdToken).decimals();\\n\\n        unkwnToken = IERC20(params.unkwnToken);\\n        unkwnUserProxy = IUserProxy(params.unkwnUserProxy);\\n        unkwnLens = IUnkwnLens(params.unkwnLens);\\n\\n        stakeStep = params.stakeStep;\\n\\n        emit StrategyUpdatedParams();\\n    }\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(busdToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveTusd, uint256 reserveBusd,) = conePair.getReserves();\\n        require(reserveTusd > 10 ** 15 && reserveBusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        uint256 busdBalance = busdToken.balanceOf(address(this));\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n\\n        uint256 priceBusd = uint256(chainlinkBusd.latestAnswer());\\n        uint256 priceTusd = uint256(chainlinkTusd.latestAnswer());\\n        uint256 busdBalanceFromTusd = (tusdBalance * busdTokenDenominator * priceTusd) / (tusdTokenDenominator * priceBusd);\\n\\n        uint256 amountBusdToSwap = _getAmountTusdInBusd(\\n            busdBalance - busdBalanceFromTusd,\\n            reserveBusd,\\n            reserveTusd,\\n            1\\n        );\\n\\n        AnnexLibrary.swap(\\n            address(busdToken),\\n            address(tusdToken),\\n            amountBusdToSwap,\\n            amountBusdToSwap * 99 / 100,\\n            annexStablePool\\n        );\\n\\n        (reserveTusd, reserveBusd,) = conePair.getReserves();\\n\\n        busdBalance = busdToken.balanceOf(address(this));\\n        tusdBalance = tusdToken.balanceOf(address(this));\\n\\n        uint256 amountTusdMin = busdBalance * reserveTusd / reserveBusd;\\n        if (amountTusdMin > tusdBalance) {\\n            amountTusdMin = tusdBalance;\\n        }\\n        uint256 amountBusdMin = tusdBalance * reserveBusd / reserveTusd;\\n        if (amountBusdMin > busdBalance) {\\n            amountBusdMin = busdBalance;\\n        }\\n\\n        // add liquidity\\n        busdToken.approve(address(coneRouter), busdBalance);\\n        tusdToken.approve(address(coneRouter), tusdBalance);\\n        coneRouter.addLiquidity(\\n            address(busdToken),\\n            address(tusdToken),\\n            true,\\n            busdBalance,\\n            tusdBalance,\\n            amountBusdMin * 99 / 100,\\n            amountTusdMin * 99 / 100,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        busdBalance = busdToken.balanceOf(address(this));\\n        tusdBalance = tusdToken.balanceOf(address(this));\\n\\n        // stake to unknown\\n        uint256 lpTokenBalance = conePair.balanceOf(address(this));\\n        conePair.approve(address(unkwnUserProxy), lpTokenBalance);\\n        unkwnUserProxy.depositLpAndStake(address(conePair), lpTokenBalance);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(busdToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveTusd, uint256 reserveBusd,) = conePair.getReserves();\\n        require(reserveTusd > 10 ** 15 && reserveBusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        // Fetch amount of LP currently staked\\n        uint256 lpTokenBalance = UnknownLibrary.getUserLpBalance(unkwnLens, address(conePair), address(this));\\n        if (lpTokenBalance > 0) {\\n            // count amount to unstake\\n            uint256 totalLpBalance = conePair.totalSupply();\\n            uint256 lpTokensToWithdraw = _getAmountLpTokens(\\n            // add 4bp and 1e14 to _amount for smooth withdraw\\n                OvnMath.addBasisPoints(_amount, 4) + 1e14,\\n                totalLpBalance,\\n                reserveBusd,\\n                reserveTusd,\\n                1\\n            );\\n\\n            if (lpTokensToWithdraw > lpTokenBalance) {\\n                lpTokensToWithdraw = lpTokenBalance;\\n            }\\n\\n            // unstake from unknown\\n            unkwnUserProxy.unstakeLpAndWithdraw(address(conePair), lpTokensToWithdraw);\\n\\n            uint256 unstakedLPTokenBalance = conePair.balanceOf(address(this));\\n            uint256 amountOutBusdMin = reserveBusd * unstakedLPTokenBalance / totalLpBalance;\\n            uint256 amountOutTusdMin = reserveTusd * unstakedLPTokenBalance / totalLpBalance;\\n\\n            // remove liquidity\\n            conePair.approve(address(coneRouter), unstakedLPTokenBalance);\\n            coneRouter.removeLiquidity(\\n                address(busdToken),\\n                address(tusdToken),\\n                true,\\n                unstakedLPTokenBalance,\\n                amountOutBusdMin * 99 / 100,\\n                amountOutTusdMin * 99 / 100,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n\\n        // swap tusd to busd\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n        if (tusdBalance > 0) {\\n\\n            uint256 amountMin = AnnexLibrary.getAmountOut(\\n                address(tusdToken),\\n                address(busdToken),\\n                tusdBalance,\\n                annexStablePool\\n            );\\n\\n            AnnexLibrary.swap(\\n                address(tusdToken),\\n                address(busdToken),\\n                tusdBalance,\\n                amountMin,\\n                annexStablePool\\n            );\\n        }\\n\\n        return busdToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(busdToken), \\\"Some token not compatible\\\");\\n\\n        (uint256 reserveTusd, uint256 reserveBusd,) = conePair.getReserves();\\n        require(reserveTusd > 10 ** 15 && reserveBusd > 10 ** 15, 'Liquidity lpToken reserves too low');\\n\\n        // unstake from unknown\\n        uint256 lpTokenBalance = UnknownLibrary.getUserLpBalance(unkwnLens, address(conePair), address(this));\\n        if (lpTokenBalance > 0) {\\n            unkwnUserProxy.unstakeLpAndWithdraw(address(conePair), lpTokenBalance);\\n        }\\n\\n        uint256 unstakedLPTokenBalance = conePair.balanceOf(address(this));\\n        if (unstakedLPTokenBalance > 0) {\\n            uint256 totalLpBalance = conePair.totalSupply();\\n            uint256 amountOutBusdMin = reserveBusd * unstakedLPTokenBalance / totalLpBalance;\\n            uint256 amountOutTusdMin = reserveTusd * unstakedLPTokenBalance / totalLpBalance;\\n\\n            // remove liquidity\\n            conePair.approve(address(coneRouter), unstakedLPTokenBalance);\\n            coneRouter.removeLiquidity(\\n                address(busdToken),\\n                address(tusdToken),\\n                true,\\n                unstakedLPTokenBalance,\\n                amountOutBusdMin * 99 / 100,\\n                amountOutTusdMin * 99 / 100,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n\\n        // swap tusd to busd\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n        if (tusdBalance > 0) {\\n            uint256 amountMin = AnnexLibrary.getAmountOut(\\n                address(tusdToken),\\n                address(busdToken),\\n                tusdBalance,\\n                annexStablePool\\n            );\\n\\n            AnnexLibrary.swap(\\n                address(tusdToken),\\n                address(busdToken),\\n                tusdBalance,\\n                amountMin,\\n                annexStablePool\\n            );\\n        }\\n\\n        return busdToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 busdBalance = busdToken.balanceOf(address(this));\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n\\n        // Fetch amount of LP currently staked\\n        uint256 lpTokenBalance = UnknownLibrary.getUserLpBalance(unkwnLens, address(conePair), address(this));\\n        if (lpTokenBalance > 0) {\\n            uint256 totalLpBalance = conePair.totalSupply();\\n            (uint256 reserveTusd, uint256 reserveBusd,) = conePair.getReserves();\\n            busdBalance += reserveBusd * lpTokenBalance / totalLpBalance;\\n            tusdBalance += reserveTusd * lpTokenBalance / totalLpBalance;\\n        }\\n\\n        uint256 busdBalanceFromTusd;\\n        if (tusdBalance > 0) {\\n            if (nav) {\\n                uint256 priceBusd = uint256(chainlinkBusd.latestAnswer());\\n                uint256 priceTusd = uint256(chainlinkTusd.latestAnswer());\\n                busdBalanceFromTusd = (tusdBalance * busdTokenDenominator * priceTusd) / (tusdTokenDenominator * priceBusd);\\n            } else {\\n                busdBalanceFromTusd = AnnexLibrary.getAmountOut(\\n                    address(tusdToken),\\n                    address(busdToken),\\n                    tusdBalance,\\n                    annexStablePool\\n                );\\n            }\\n        }\\n\\n        return busdBalance + busdBalanceFromTusd;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards unknown\\n        uint256 lpTokenBalance = UnknownLibrary.getUserLpBalance(unkwnLens, address(conePair), address(this));\\n        if (lpTokenBalance > 0) {\\n            unkwnUserProxy.claimStakingRewards();\\n        }\\n\\n        // sell rewards\\n        uint256 totalBusd;\\n\\n        uint256 coneBalance = coneToken.balanceOf(address(this));\\n        if (coneBalance > 0) {\\n            uint256 amountOutCone = ConeLibrary.getAmountsOut(\\n                coneRouter,\\n                address(coneToken),\\n                address(wBnbToken),\\n                address(busdToken),\\n                false,\\n                false,\\n                coneBalance\\n            );\\n\\n            if (amountOutCone > 0) {\\n                uint256 coneBusd = ConeLibrary.swap(\\n                    coneRouter,\\n                    address(coneToken),\\n                    address(wBnbToken),\\n                    address(busdToken),\\n                    false,\\n                    false,\\n                    coneBalance,\\n                    amountOutCone * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalBusd += coneBusd;\\n            }\\n        }\\n\\n        uint256 unkwnBalance = unkwnToken.balanceOf(address(this));\\n        if (unkwnBalance > 0) {\\n            uint256 amountOutUnkwn = ConeLibrary.getAmountsOut(\\n                coneRouter,\\n                address(unkwnToken),\\n                address(wBnbToken),\\n                address(busdToken),\\n                false,\\n                false,\\n                unkwnBalance\\n            );\\n\\n            if (amountOutUnkwn > 0) {\\n                uint256 unkwnBusd = ConeLibrary.swap(\\n                    coneRouter,\\n                    address(unkwnToken),\\n                    address(wBnbToken),\\n                    address(busdToken),\\n                    false,\\n                    false,\\n                    unkwnBalance,\\n                    amountOutUnkwn * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalBusd += unkwnBusd;\\n            }\\n        }\\n\\n        if (totalBusd > 0) {\\n            uint256 rewardBalance = totalBusd * rewardWalletPercent / 1e4;\\n            uint256 toBalance = totalBusd - rewardBalance;\\n            busdToken.transfer(rewardWallet, rewardBalance);\\n            busdToken.transfer(_to, toBalance);\\n        }\\n\\n        return totalBusd;\\n    }\\n\\n    function _getAmountTusdInBusd(\\n        uint256 amountBusdTotal,\\n        uint256 reserveBusd,\\n        uint256 reserveTusd,\\n        uint256 precision\\n    ) internal view returns (uint256 amountTusdInBusd) {\\n        amountTusdInBusd = (amountBusdTotal * reserveTusd) / (reserveBusd * tusdTokenDenominator / busdTokenDenominator + reserveTusd);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amountTusd = AnnexLibrary.getAmountOut(\\n                address(busdToken),\\n                address(tusdToken),\\n                amountTusdInBusd,\\n                annexStablePool\\n            );\\n            amountTusdInBusd = (amountBusdTotal * reserveTusd) / (reserveBusd * amountTusd / amountTusdInBusd + reserveTusd);\\n        }\\n    }\\n\\n    function _getAmountBusdInTusd(\\n        uint256 amountTusdTotal,\\n        uint256 reserveTusd,\\n        uint256 reserveBusd,\\n        uint256 precision\\n    ) internal view returns (uint256 amountBusdInTusd) {\\n        amountBusdInTusd = (amountTusdTotal * reserveBusd) / (reserveTusd * tusdTokenDenominator / busdTokenDenominator + reserveBusd);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amountBusd = AnnexLibrary.getAmountOut(\\n                address(busdToken),\\n                address(tusdToken),\\n                amountBusdInTusd,\\n                annexStablePool\\n            );\\n            amountBusdInTusd = (amountTusdTotal * reserveBusd) / (reserveTusd * amountBusd / amountBusdInTusd + reserveBusd);\\n        }\\n    }\\n\\n    function _getAmountLpTokens(\\n        uint256 amountBusdTotal,\\n        uint256 totalAmountLpTokens,\\n        uint256 reserveBusd,\\n        uint256 reserveTusd,\\n        uint256 precision\\n    ) internal view returns (uint256 amountLpTokens) {\\n        amountLpTokens = (totalAmountLpTokens * amountBusdTotal) / (reserveBusd + reserveTusd * busdTokenDenominator / tusdTokenDenominator);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amountTusd = reserveTusd * amountLpTokens / totalAmountLpTokens;\\n            uint256 amountBusd = AnnexLibrary.getAmountOut(\\n                address(tusdToken),\\n                address(busdToken),\\n                amountTusd,\\n                annexStablePool\\n            );\\n            amountLpTokens = (totalAmountLpTokens * amountBusdTotal) / (reserveBusd + reserveTusd * amountBusd / amountTusd);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd51ea7535d6b0c4029d61f8e6c98d1d01aac3db7e1f4648caf380e4ca864952a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620014ef1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6152e36200018e600039600081816108ab015281816108eb01528181610db901528181610df90152610e8801526152e36000f3fe60806040526004361061023a5760003560e01c80637d5f58021161012e578063adc9772e116100ab578063eb7147ca1161006f578063eb7147ca14610686578063ef5cfb8c146106a7578063f6f6b881146106c7578063f72c0d8b146106e7578063fb75b2c71461071b57600080fd5b8063adc9772e146105e3578063bb94d0f414610603578063d547741f14610624578063de0e701414610644578063e71f6a9e1461066557600080fd5b80639f709492116100f25780639f70949214610561578063a217fddf14610578578063a3673b381461058d578063a440b21a146105a2578063a69dc7f8146105c257600080fd5b80637d5f5802146104d25780638129fc1c146104f45780638a5693cd1461050957806391d14854146105205780639bd59a751461054057600080fd5b8063379d878c116101bc57806352d1902d1161018057806352d1902d14610446578063620b75df1461045b57806364f8b89a1461047b5780636c0e0a5d1461049c5780637b73aa4e146104bd57600080fd5b8063379d878c146103ba57806338762d32146103db5780633ec9474a146103fc5780633ed4d44f146104135780634f1ef2861461043357600080fd5b80632f2ff15d116102035780632f2ff15d1461031757806330fd579414610339578063311117081461035a57806336568abe1461037a5780633659cfe61461039a57600080fd5b8062cb5a831461023f57806301ffc9a71461027d57806306aee957146102ad578063248a9ca3146102d25780632576e65a14610302575b600080fd5b34801561024b57600080fd5b5061013a54610260906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028957600080fd5b5061029d610298366004614b7c565b61073c565b6040519015158152602001610274565b3480156102b957600080fd5b506102c46101365481565b604051908152602001610274565b3480156102de57600080fd5b506102c46102ed366004614b1a565b60009081526065602052604090206001015490565b34801561030e57600080fd5b506102c4610773565b34801561032357600080fd5b50610337610332366004614b4c565b610784565b005b34801561034557600080fd5b5061013d54610260906001600160a01b031681565b34801561036657600080fd5b50610337610375366004614b1a565b6107ae565b34801561038657600080fd5b50610337610395366004614b4c565b610822565b3480156103a657600080fd5b506103376103b53660046148ef565b6108a0565b3480156103c657600080fd5b5061013954610260906001600160a01b031681565b3480156103e757600080fd5b5061013454610260906001600160a01b031681565b34801561040857600080fd5b506102c461013c5481565b34801561041f57600080fd5b5061033761042e366004614ba6565b610980565b610337610441366004614929565b610dae565b34801561045257600080fd5b506102c4610e7b565b34801561046757600080fd5b5060fb54610260906001600160a01b031681565b34801561048757600080fd5b5061013054610260906001600160a01b031681565b3480156104a857600080fd5b5061013354610260906001600160a01b031681565b3480156104c957600080fd5b50610337610f2e565b3480156104de57600080fd5b506102c460008051602061524783398151915281565b34801561050057600080fd5b50610337610f64565b34801561051557600080fd5b506102c46101385481565b34801561052c57600080fd5b5061029d61053b366004614b4c565b611027565b34801561054c57600080fd5b5061013254610260906001600160a01b031681565b34801561056d57600080fd5b506102c46101375481565b34801561058457600080fd5b506102c4600081565b34801561059957600080fd5b506102c4611052565b3480156105ae57600080fd5b506103376105bd3660046148ef565b61105e565b3480156105ce57600080fd5b5061012e54610260906001600160a01b031681565b3480156105ef57600080fd5b506103376105fe3660046149d1565b61118d565b34801561060f57600080fd5b5061013154610260906001600160a01b031681565b34801561063057600080fd5b5061033761063f366004614b4c565b61127a565b34801561065057600080fd5b5061012d54610260906001600160a01b031681565b34801561067157600080fd5b5061012f54610260906001600160a01b031681565b34801561069257600080fd5b5061013b54610260906001600160a01b031681565b3480156106b357600080fd5b506102c46106c23660046148ef565b61129f565b3480156106d357600080fd5b506102c46106e23660046149fd565b611324565b3480156106f357600080fd5b506102c47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561072757600080fd5b5061013554610260906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061076d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061077f60006114fe565b905090565b60008281526065602052604090206001015461079f81611922565b6107a9838361192c565b505050565b6107c660008051602061524783398151915233611027565b6107eb5760405162461bcd60e51b81526004016107e290614e09565b60405180910390fd5b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146108925760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107e2565b61089c82826119b2565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108e95760405162461bcd60e51b81526004016107e290614e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610932600080516020615267833981519152546001600160a01b031690565b6001600160a01b0316146109585760405162461bcd60e51b81526004016107e290614ece565b61096181611a19565b6040805160008082526020820190925261097d91839190611a43565b50565b61098b600033611027565b6109ce5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016107e2565b6109db60208201826148ef565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610a0c60408201602083016148ef565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610a3d60608201604083016148ef565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610a6e60808201606083016148ef565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610a9f60a08201608083016148ef565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610ad060c0820160a083016148ef565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610b0160e0820160c083016148ef565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610b33610100820160e083016148ef565b61013480546001600160a01b0319166001600160a01b0392909216919091179055610b666101e082016101c083016148ef565b61013d80546001600160a01b0319166001600160a01b0392909216919091179055610b99610120820161010083016148ef565b61013580546001600160a01b0319166001600160a01b039290921691909117905561012081013561013655610bd160208201826148ef565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190614c61565b610c4c90600a6150a2565b61013755610c6060408201602083016148ef565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd09190614c61565b610cdb90600a6150a2565b61013855610cf1610160820161014083016148ef565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610d24610180820161016083016148ef565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610d576101a0820161018083016148ef565b61013b80546001600160a01b0319166001600160a01b03929092169190911790556101a081013561013c556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610df75760405162461bcd60e51b81526004016107e290614e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e40600080516020615267833981519152546001600160a01b031690565b6001600160a01b031614610e665760405162461bcd60e51b81526004016107e290614ece565b610e6f82611a19565b61089c82826001611a43565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107e2565b5060008051602061526783398151915290565b610f4660008051602061524783398151915233611027565b610f625760405162461bcd60e51b81526004016107e290614e09565b565b600054610100900460ff1615808015610f845750600054600160ff909116105b80610f9e5750303b158015610f9e575060005460ff166001145b610fba5760405162461bcd60e51b81526004016107e290614f1a565b6000805460ff191660011790558015610fdd576000805461ff0019166101001790555b610fe5611bbd565b801561097d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610817565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061077f60016114fe565b611069600033611027565b6110ac5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016107e2565b6001600160a01b0381166111025760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016107e2565b60fb5461112790600080516020615247833981519152906001600160a01b031661127a565b61113f60008051602061524783398151915282610784565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610817565b6111a560008051602061524783398151915233611027565b6111c15760405162461bcd60e51b81526004016107e290614e09565b6040516370a0823160e01b81523060048201526112439083906001600160a01b038216906370a082319060240160206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190614b33565b611c7b565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b60008281526065602052604090206001015461129581611922565b6107a983836119b2565b60006112b960008051602061524783398151915233611027565b6112d55760405162461bcd60e51b81526004016107e290614e09565b60006112e0836126aa565b9050801561131c576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061133e60008051602061524783398151915233611027565b61135a5760405162461bcd60e51b81526004016107e290614e09565b600082156113bb57600061136d856126aa565b905080156113a9576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b6113b38786612ac4565b91505061142a565b6113c686868661305c565b90508481101561142a5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016107e2565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906114589087908590600401614dbd565b602060405180830381600087803b15801561147257600080fd5b505af1158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa9190614afd565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a190505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f9190614b33565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115c957600080fd5b505afa1580156115dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116019190614b33565b61013b5461013254919250600091611626916001600160a01b0390811691163061362a565b9050801561178f5761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190614b33565b905060008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190614bbf565b506001600160701b03918216935016905082611754858361514d565b61175e919061503d565b6117689087615025565b955082611775858461514d565b61177f919061503d565b6117899086615025565b94505050505b6000821561190e5785156118e45761013354604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190614b33565b9050600061013460009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614b33565b905081610138546118b7919061514d565b8161013754876118c7919061514d565b6118d1919061514d565b6118db919061503d565b9250505061190e565b61012e5461012d5461013d5461190b926001600160a01b03908116928116918791166137a4565b90505b6119188185615025565b9695505050505050565b61097d8133613895565b6119368282611027565b61089c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561196e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119bc8282611027565b1561089c5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361089c81611922565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a76576107a9836138f9565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aaf57600080fd5b505afa925050508015611adf575060408051601f3d908101601f19168201909252611adc91810190614b33565b60015b611b425760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107e2565b6000805160206152678339815191528114611bb15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107e2565b506107a9838383613995565b600054610100900460ff1615808015611bdd5750600054600160ff909116105b80611bf75750303b158015611bf7575060005460ff166001145b611c135760405162461bcd60e51b81526004016107e290614f1a565b6000805460ff191660011790558015611c36576000805461ff0019166101001790555b611c3e6139c0565b611c466139c0565b611c5160003361192c565b610fe57f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361192c565b61012d546001600160a01b03838116911614611ca95760405162461bcd60e51b81526004016107e290614f68565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611cfb57600080fd5b505afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d339190614bbf565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015611d66575066038d7ea4c6800081115b611d825760405162461bcd60e51b81526004016107e290614e8c565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611dc757600080fd5b505afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff9190614b33565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611e4957600080fd5b505afa158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e819190614b33565b9050600061013360009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c9190614b33565b9050600061013460009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f979190614b33565b905060008261013854611faa919061514d565b826101375486611fba919061514d565b611fc4919061514d565b611fce919061503d565b90506000611fe8611fdf838861516c565b888a6001613a2b565b61012d5461012e5491925061202e916001600160a01b03918216911683606461201282606361514d565b61201c919061503d565b61013d546001600160a01b0316613af6565b5061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561207e57600080fd5b505afa158015612092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b69190614bbf565b5061012d546040516370a0823160e01b81523060048201526001600160701b039384169b509190921698506001600160a01b03909116906370a082319060240160206040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190614b33565b61012e546040516370a0823160e01b81523060048201529197506001600160a01b0316906370a082319060240160206040518083038186803b15801561218b57600080fd5b505afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190614b33565b94506000876121d28a8961514d565b6121dc919061503d565b9050858111156121e95750845b6000896121f68a8961514d565b612200919061503d565b90508781111561220d5750865b61012d546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612245929116908c90600401614dbd565b602060405180830381600087803b15801561225f57600080fd5b505af1158015612273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122979190614afd565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926122d0929116908b90600401614dbd565b602060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123229190614afd565b506101315461012d5461012e546001600160a01b0392831692635a47ddc3928116911660018c8c606461235689606361514d565b612360919061503d565b606461236d8b606361514d565b612377919061503d565b6040516001600160e01b031960e08a901b1681526001600160a01b03978816600482015296909516602487015292151560448601526064850191909152608484015260a483015260c48201523060e48201524261010482015261012401606060405180830381600087803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124269190614c33565b505061012d546040516370a0823160e01b81523060048201526001600160a01b0390911691506370a082319060240160206040518083038186803b15801561246d57600080fd5b505afa158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a59190614b33565b61012e546040516370a0823160e01b81523060048201529199506001600160a01b0316906370a082319060240160206040518083038186803b1580156124ea57600080fd5b505afa1580156124fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125229190614b33565b610132546040516370a0823160e01b81523060048201529198506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561256c57600080fd5b505afa158015612580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a49190614b33565b6101325461013a5460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926125de9216908590600401614dbd565b602060405180830381600087803b1580156125f857600080fd5b505af115801561260c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126309190614afd565b5061013a54610132546040516351b3839960e11b81526001600160a01b039283169263a367073292612669929116908590600401614dbd565b600060405180830381600087803b15801561268357600080fd5b505af1158015612697573d6000803e3d6000fd5b5050505050505050505050505050505050565b61013b546101325460009182916126ce916001600160a01b0390811691163061362a565b905080156127405761013a60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561272757600080fd5b505af115801561273b573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561278957600080fd5b505afa15801561279d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c19190614b33565b9050801561286357610131546101305461012f5461012d546000936127fd936001600160a01b0391821693908216929082169116858088613cd5565b9050801561286157610131546101305461012f5461012d54600093612851936001600160a01b039182169390821692908216911685808960646128418b606361514d565b61284b919061503d565b30613f00565b905061285d8185615025565b9350505b505b610139546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156128a857600080fd5b505afa1580156128bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e09190614b33565b9050801561297257610131546101395461012f5461012d5460009361291c936001600160a01b0391821693908216929082169116858088613cd5565b9050801561297057610131546101395461012f5461012d54600093612960936001600160a01b039182169390821692908216911685808960646128418b606361514d565b905061296c8186615025565b9450505b505b8215612aba576000612710610136548561298c919061514d565b612996919061503d565b905060006129a4828661516c565b61012d546101355460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb926129de9216908690600401614dbd565b602060405180830381600087803b1580156129f857600080fd5b505af1158015612a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a309190614afd565b5061012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612a64908b908590600401614dbd565b602060405180830381600087803b158015612a7e57600080fd5b505af1158015612a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab69190614afd565b5050505b5090949350505050565b61012d546000906001600160a01b03848116911614612af55760405162461bcd60e51b81526004016107e290614f68565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b4757600080fd5b505afa158015612b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7f9190614bbf565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015612bb2575066038d7ea4c6800081115b612bce5760405162461bcd60e51b81526004016107e290614e8c565b61013b5461013254600091612bf0916001600160a01b0391821691163061362a565b90508015612c635761013a546101325460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992612c30929116908590600401614dbd565b600060405180830381600087803b158015612c4a57600080fd5b505af1158015612c5e573d6000803e3d6000fd5b505050505b610132546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612ca857600080fd5b505afa158015612cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce09190614b33565b90508015612ef45761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612d2e57600080fd5b505afa158015612d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d669190614b33565b9050600081612d75848761514d565b612d7f919061503d565b9050600082612d8e858961514d565b612d98919061503d565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392612dd29216908890600401614dbd565b602060405180830381600087803b158015612dec57600080fd5b505af1158015612e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e249190614afd565b506101315461012d5461012e546001600160a01b0392831692630dede6c492811691166001886064612e5789606361514d565b612e61919061503d565b6064612e6e89606361514d565b612e78919061503d565b30426040518963ffffffff1660e01b8152600401612e9d989796959493929190614d74565b6040805180830381600087803b158015612eb657600080fd5b505af1158015612eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eee9190614c0f565b50505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612f3957600080fd5b505afa158015612f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f719190614b33565b90508015612fd45761012e5461012d5461013d54600092612fa4926001600160a01b0391821692908216918691166137a4565b61012e5461012d5461013d54929350612fd1926001600160a01b0392831692918216918691869116613af6565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561301857600080fd5b505afa15801561302c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130509190614b33565b98975050505050505050565b61012d546000906001600160a01b0385811691161461308d5760405162461bcd60e51b81526004016107e290614f68565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131179190614bbf565b506001600160701b031691506001600160701b0316915066038d7ea4c680008211801561314a575066038d7ea4c6800081115b6131665760405162461bcd60e51b81526004016107e290614e8c565b61013b5461013254600091613188916001600160a01b0391821691163061362a565b905080156134c05761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156131d657600080fd5b505afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e9190614b33565b9050600061323a6132208960046141b6565b61323090655af3107a4000615025565b83868860016141d9565b9050828111156132475750815b61013a546101325460405163fce07e8960e01b81526001600160a01b039283169263fce07e899261327f929116908590600401614dbd565b600060405180830381600087803b15801561329957600080fd5b505af11580156132ad573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156132f857600080fd5b505afa15801561330c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133309190614b33565b905060008361333f838861514d565b613349919061503d565b9050600084613358848a61514d565b613362919061503d565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261339c9216908790600401614dbd565b602060405180830381600087803b1580156133b657600080fd5b505af11580156133ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ee9190614afd565b506101315461012d5461012e546001600160a01b0392831692630dede6c49281169116600187606461342189606361514d565b61342b919061503d565b606461343889606361514d565b613442919061503d565b30426040518963ffffffff1660e01b8152600401613467989796959493929190614d74565b6040805180830381600087803b15801561348057600080fd5b505af1158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190614c0f565b505050505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561350557600080fd5b505afa158015613519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353d9190614b33565b905080156135a05761012e5461012d5461013d54600092613570926001600160a01b0391821692908216918691166137a4565b61012e5461012d5461013d5492935061359d926001600160a01b0392831692918216918691869116613af6565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156135e457600080fd5b505afa1580156135f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361c9190614b33565b9450505050505b9392505050565b604051636f4ba70b60e11b81526001600160a01b038281166004830152600091829186169063de974e169060240160206040518083038186803b15801561367057600080fd5b505afa158015613684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a8919061490c565b604051630c3f16df60e31b81526001600160a01b0386811660048301529192506000918716906361f8b6f89060240160206040518083038186803b1580156136ef57600080fd5b505afa158015613703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613727919061490c565b6040516370a0823160e01b81526001600160a01b038481166004830152919250908216906370a082319060240160206040518083038186803b15801561376c57600080fd5b505afa158015613780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119189190614b33565b6000806000806137b58888876142bd565b9250925092508015613856576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b038616906307211ef7906064015b60206040518083038186803b15801561381457600080fd5b505afa158015613828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384c9190614b33565b93505050506114e7565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b03861690635e0d443f906064016137fc565b61389f8282611027565b61089c576138b7816001600160a01b03166014614512565b6138c2836020614512565b6040516020016138d3929190614cff565b60408051601f198184030181529082905262461bcd60e51b82526107e291600401614dd6565b6001600160a01b0381163b6139665760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107e2565b60008051602061526783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61399e836146ae565b6000825111806139ab5750805b156107a9576139ba83836146ee565b50505050565b600054610100900460ff16610f625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e2565b600082610137546101385486613a41919061514d565b613a4b919061503d565b613a559190615025565b613a5f848761514d565b613a69919061503d565b905060005b82811015613aed5761012d5461012e5461013d54600092613aa1926001600160a01b0391821692908216918791166137a4565b90508483613aaf838961514d565b613ab9919061503d565b613ac39190615025565b613acd868961514d565b613ad7919061503d565b9250508080613ae5906151c6565b915050613a6e565b50949350505050565b60405163095ea7b360e01b81526000906001600160a01b0387169063095ea7b390613b279085908890600401614dbd565b602060405180830381600087803b158015613b4157600080fd5b505af1158015613b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b799190614afd565b506000806000613b8a8989876142bd565b92509250925060008115613c3257604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101899052606481018890526001600160a01b0387169063a6417ed690608401602060405180830381600087803b158015613bf357600080fd5b505af1158015613c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2b9190614b33565b9050613cc8565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101899052606481018890526001600160a01b03871690633df0212490608401602060405180830381600087803b158015613c8d57600080fd5b505af1158015613ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc59190614b33565b90505b9998505050505050505050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613cf05790505090508781600081518110613d3357613d336151f7565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110613d6b57613d6b6151f7565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110613da357613da36151f7565b602002602001015160400190151590811515815250508681600181518110613dcd57613dcd6151f7565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508581600181518110613e0557613e056151f7565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600181518110613e3d57613e3d6151f7565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb490613e809087908690600401614f9f565b60006040518083038186803b158015613e9857600080fd5b505afa158015613eac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ed49190810190614a50565b905080600281518110613ee957613ee96151f7565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526000906001600160a01b038a169063095ea7b390613f31908d908890600401614dbd565b602060405180830381600087803b158015613f4b57600080fd5b505af1158015613f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f839190614afd565b5060408051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613f9c5790505090508981600081518110613fdf57613fdf6151f7565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110614017576140176151f7565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050868160008151811061404f5761404f6151f7565b602002602001015160400190151590811515815250508881600181518110614079576140796151f7565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505087816001815181106140b1576140b16151f7565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816001815181106140e9576140e96151f7565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038d169063f41766d890614132908990899087908a904290600401614fb8565b600060405180830381600087803b15801561414c57600080fd5b505af1158015614160573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141889190810190614a50565b90508060028151811061419d5761419d6151f7565b6020026020010151925050509998505050505050505050565b60006127106141c58382615025565b6141cf908561514d565b613623919061503d565b60006101385461013754846141ee919061514d565b6141f8919061503d565b6142029085615025565b61420c878761514d565b614216919061503d565b905060005b828110156142b357600086614230848761514d565b61423a919061503d565b61012e5461012d5461013d54929350600092614267926001600160a01b03908116928116918691166137a4565b905081614274828861514d565b61427e919061503d565b6142889088615025565b6142928a8a61514d565b61429c919061503d565b9350505080806142ab906151c6565b91505061421b565b5095945050505050565b6000808060016001607f1b0380825b60006142d888836147e2565b90506001600160a01b0381166142ee5750614341565b896001600160a01b0316816001600160a01b031614156143105781935061432e565b886001600160a01b0316816001600160a01b0316141561432e578192505b81614338816151c6565b925050506142cc565b600f83900b60016001607f1b03148015906143675750600f82900b60016001607f1b0314155b1561437b5750909350915060009050614509565b600f83900b60016001607f1b031415806143a05750600f82900b60016001607f1b0314155b156143f95760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b60648201526084016107e2565b5060005b6000614409888361486f565b90506001600160a01b03811661441f5750614472565b896001600160a01b0316816001600160a01b031614156144415781935061445f565b886001600160a01b0316816001600160a01b0316141561445f578192505b81614469816151c6565b925050506143fd565b600f83900b60016001607f1b03148015906144985750600f82900b60016001607f1b0314155b156144ac5750909350915060019050614509565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b60648201526084016107e2565b93509350939050565b6060600061452183600261514d565b61452c906002615025565b67ffffffffffffffff8111156145445761454461520d565b6040519080825280601f01601f19166020018201604052801561456e576020820181803683370190505b509050600360fc1b81600081518110614589576145896151f7565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106145b8576145b86151f7565b60200101906001600160f81b031916908160001a90535060006145dc84600261514d565b6145e7906001615025565b90505b600181111561465f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061461b5761461b6151f7565b1a60f81b828281518110614631576146316151f7565b60200101906001600160f81b031916908160001a90535060049490941c93614658816151af565b90506145ea565b5083156136235760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e2565b6146b7816138f9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6147565760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107e2565b600080846001600160a01b0316846040516147719190614ce3565b600060405180830381855af49150503d80600081146147ac576040519150601f19603f3d011682016040523d82523d6000602084013e6147b1565b606091505b50915091506147d982826040518060600160405280602781526020016152876027913961489f565b95945050505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b15801561482657600080fd5b505afa925050508015614856575060408051601f3d908101601f191682019092526148539181019061490c565b60015b61485f57614866565b905061076d565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb09060240161480e565b606083156148ae575081613623565b8251156148be5782518084602001fd5b8160405162461bcd60e51b81526004016107e29190614dd6565b80516001600160701b038116811461131f57600080fd5b60006020828403121561490157600080fd5b813561362381615223565b60006020828403121561491e57600080fd5b815161362381615223565b6000806040838503121561493c57600080fd5b823561494781615223565b915060208381013567ffffffffffffffff8082111561496557600080fd5b818601915086601f83011261497957600080fd5b81358181111561498b5761498b61520d565b61499d601f8201601f19168501614ff4565b915080825287848285010111156149b357600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156149e457600080fd5b82356149ef81615223565b946020939093013593505050565b60008060008060808587031215614a1357600080fd5b8435614a1e81615223565b9350602085013592506040850135614a3581615223565b91506060850135614a4581615238565b939692955090935050565b60006020808385031215614a6357600080fd5b825167ffffffffffffffff80821115614a7b57600080fd5b818501915085601f830112614a8f57600080fd5b815181811115614aa157614aa161520d565b8060051b9150614ab2848301614ff4565b8181528481019084860184860187018a1015614acd57600080fd5b600095505b83861015614af0578051835260019590950194918601918601614ad2565b5098975050505050505050565b600060208284031215614b0f57600080fd5b815161362381615238565b600060208284031215614b2c57600080fd5b5035919050565b600060208284031215614b4557600080fd5b5051919050565b60008060408385031215614b5f57600080fd5b823591506020830135614b7181615223565b809150509250929050565b600060208284031215614b8e57600080fd5b81356001600160e01b03198116811461362357600080fd5b60006101e08284031215614bb957600080fd5b50919050565b600080600060608486031215614bd457600080fd5b614bdd846148d8565b9250614beb602085016148d8565b9150604084015163ffffffff81168114614c0457600080fd5b809150509250925092565b60008060408385031215614c2257600080fd5b505080516020909101519092909150565b600080600060608486031215614c4857600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614c7357600080fd5b815160ff8116811461362357600080fd5b600081518084526020808501945080840160005b83811015614cd857815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614c98565b509495945050505050565b60008251614cf5818460208701615183565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d37816017850160208801615183565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614d68816028840160208801615183565b01602801949350505050565b6001600160a01b039889168152968816602088015294151560408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152614df5816040850160208701615183565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526022908201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6040820152616f7760f01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b8281526040602082015260006114e76040830184614c84565b85815284602082015260a060408201526000614fd760a0830186614c84565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561501d5761501d61520d565b604052919050565b60008219821115615038576150386151e1565b500190565b60008261505a57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561509a578160001904821115615080576150806151e1565b8085161561508d57918102915b93841c9390800290615064565b509250929050565b600061362360ff8416836000826150bb5750600161076d565b816150c85750600061076d565b81600181146150de57600281146150e857615104565b600191505061076d565b60ff8411156150f9576150f96151e1565b50506001821b61076d565b5060208310610133831016604e8410600b8410161715615127575081810a61076d565b615131838361505f565b8060001904821115615145576151456151e1565b029392505050565b6000816000190483118215151615615167576151676151e1565b500290565b60008282101561517e5761517e6151e1565b500390565b60005b8381101561519e578181015183820152602001615186565b838111156139ba5750506000910152565b6000816151be576151be6151e1565b506000190190565b60006000198214156151da576151da6151e1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461097d57600080fd5b801515811461097d57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f6e47cf45931fab741d1b540d1656431007289256e429d6a37465d491501827b64736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061023a5760003560e01c80637d5f58021161012e578063adc9772e116100ab578063eb7147ca1161006f578063eb7147ca14610686578063ef5cfb8c146106a7578063f6f6b881146106c7578063f72c0d8b146106e7578063fb75b2c71461071b57600080fd5b8063adc9772e146105e3578063bb94d0f414610603578063d547741f14610624578063de0e701414610644578063e71f6a9e1461066557600080fd5b80639f709492116100f25780639f70949214610561578063a217fddf14610578578063a3673b381461058d578063a440b21a146105a2578063a69dc7f8146105c257600080fd5b80637d5f5802146104d25780638129fc1c146104f45780638a5693cd1461050957806391d14854146105205780639bd59a751461054057600080fd5b8063379d878c116101bc57806352d1902d1161018057806352d1902d14610446578063620b75df1461045b57806364f8b89a1461047b5780636c0e0a5d1461049c5780637b73aa4e146104bd57600080fd5b8063379d878c146103ba57806338762d32146103db5780633ec9474a146103fc5780633ed4d44f146104135780634f1ef2861461043357600080fd5b80632f2ff15d116102035780632f2ff15d1461031757806330fd579414610339578063311117081461035a57806336568abe1461037a5780633659cfe61461039a57600080fd5b8062cb5a831461023f57806301ffc9a71461027d57806306aee957146102ad578063248a9ca3146102d25780632576e65a14610302575b600080fd5b34801561024b57600080fd5b5061013a54610260906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028957600080fd5b5061029d610298366004614b7c565b61073c565b6040519015158152602001610274565b3480156102b957600080fd5b506102c46101365481565b604051908152602001610274565b3480156102de57600080fd5b506102c46102ed366004614b1a565b60009081526065602052604090206001015490565b34801561030e57600080fd5b506102c4610773565b34801561032357600080fd5b50610337610332366004614b4c565b610784565b005b34801561034557600080fd5b5061013d54610260906001600160a01b031681565b34801561036657600080fd5b50610337610375366004614b1a565b6107ae565b34801561038657600080fd5b50610337610395366004614b4c565b610822565b3480156103a657600080fd5b506103376103b53660046148ef565b6108a0565b3480156103c657600080fd5b5061013954610260906001600160a01b031681565b3480156103e757600080fd5b5061013454610260906001600160a01b031681565b34801561040857600080fd5b506102c461013c5481565b34801561041f57600080fd5b5061033761042e366004614ba6565b610980565b610337610441366004614929565b610dae565b34801561045257600080fd5b506102c4610e7b565b34801561046757600080fd5b5060fb54610260906001600160a01b031681565b34801561048757600080fd5b5061013054610260906001600160a01b031681565b3480156104a857600080fd5b5061013354610260906001600160a01b031681565b3480156104c957600080fd5b50610337610f2e565b3480156104de57600080fd5b506102c460008051602061524783398151915281565b34801561050057600080fd5b50610337610f64565b34801561051557600080fd5b506102c46101385481565b34801561052c57600080fd5b5061029d61053b366004614b4c565b611027565b34801561054c57600080fd5b5061013254610260906001600160a01b031681565b34801561056d57600080fd5b506102c46101375481565b34801561058457600080fd5b506102c4600081565b34801561059957600080fd5b506102c4611052565b3480156105ae57600080fd5b506103376105bd3660046148ef565b61105e565b3480156105ce57600080fd5b5061012e54610260906001600160a01b031681565b3480156105ef57600080fd5b506103376105fe3660046149d1565b61118d565b34801561060f57600080fd5b5061013154610260906001600160a01b031681565b34801561063057600080fd5b5061033761063f366004614b4c565b61127a565b34801561065057600080fd5b5061012d54610260906001600160a01b031681565b34801561067157600080fd5b5061012f54610260906001600160a01b031681565b34801561069257600080fd5b5061013b54610260906001600160a01b031681565b3480156106b357600080fd5b506102c46106c23660046148ef565b61129f565b3480156106d357600080fd5b506102c46106e23660046149fd565b611324565b3480156106f357600080fd5b506102c47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561072757600080fd5b5061013554610260906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061076d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061077f60006114fe565b905090565b60008281526065602052604090206001015461079f81611922565b6107a9838361192c565b505050565b6107c660008051602061524783398151915233611027565b6107eb5760405162461bcd60e51b81526004016107e290614e09565b60405180910390fd5b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146108925760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107e2565b61089c82826119b2565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108e95760405162461bcd60e51b81526004016107e290614e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610932600080516020615267833981519152546001600160a01b031690565b6001600160a01b0316146109585760405162461bcd60e51b81526004016107e290614ece565b61096181611a19565b6040805160008082526020820190925261097d91839190611a43565b50565b61098b600033611027565b6109ce5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016107e2565b6109db60208201826148ef565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610a0c60408201602083016148ef565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610a3d60608201604083016148ef565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610a6e60808201606083016148ef565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610a9f60a08201608083016148ef565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610ad060c0820160a083016148ef565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610b0160e0820160c083016148ef565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610b33610100820160e083016148ef565b61013480546001600160a01b0319166001600160a01b0392909216919091179055610b666101e082016101c083016148ef565b61013d80546001600160a01b0319166001600160a01b0392909216919091179055610b99610120820161010083016148ef565b61013580546001600160a01b0319166001600160a01b039290921691909117905561012081013561013655610bd160208201826148ef565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190614c61565b610c4c90600a6150a2565b61013755610c6060408201602083016148ef565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd09190614c61565b610cdb90600a6150a2565b61013855610cf1610160820161014083016148ef565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610d24610180820161016083016148ef565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610d576101a0820161018083016148ef565b61013b80546001600160a01b0319166001600160a01b03929092169190911790556101a081013561013c556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610df75760405162461bcd60e51b81526004016107e290614e40565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e40600080516020615267833981519152546001600160a01b031690565b6001600160a01b031614610e665760405162461bcd60e51b81526004016107e290614ece565b610e6f82611a19565b61089c82826001611a43565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107e2565b5060008051602061526783398151915290565b610f4660008051602061524783398151915233611027565b610f625760405162461bcd60e51b81526004016107e290614e09565b565b600054610100900460ff1615808015610f845750600054600160ff909116105b80610f9e5750303b158015610f9e575060005460ff166001145b610fba5760405162461bcd60e51b81526004016107e290614f1a565b6000805460ff191660011790558015610fdd576000805461ff0019166101001790555b610fe5611bbd565b801561097d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610817565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061077f60016114fe565b611069600033611027565b6110ac5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064016107e2565b6001600160a01b0381166111025760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060448201526064016107e2565b60fb5461112790600080516020615247833981519152906001600160a01b031661127a565b61113f60008051602061524783398151915282610784565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610817565b6111a560008051602061524783398151915233611027565b6111c15760405162461bcd60e51b81526004016107e290614e09565b6040516370a0823160e01b81523060048201526112439083906001600160a01b038216906370a082319060240160206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190614b33565b611c7b565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b60008281526065602052604090206001015461129581611922565b6107a983836119b2565b60006112b960008051602061524783398151915233611027565b6112d55760405162461bcd60e51b81526004016107e290614e09565b60006112e0836126aa565b9050801561131c576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061133e60008051602061524783398151915233611027565b61135a5760405162461bcd60e51b81526004016107e290614e09565b600082156113bb57600061136d856126aa565b905080156113a9576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b6113b38786612ac4565b91505061142a565b6113c686868661305c565b90508481101561142a5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016107e2565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906114589087908590600401614dbd565b602060405180830381600087803b15801561147257600080fd5b505af1158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa9190614afd565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a190505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f9190614b33565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115c957600080fd5b505afa1580156115dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116019190614b33565b61013b5461013254919250600091611626916001600160a01b0390811691163061362a565b9050801561178f5761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190614b33565b905060008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190614bbf565b506001600160701b03918216935016905082611754858361514d565b61175e919061503d565b6117689087615025565b955082611775858461514d565b61177f919061503d565b6117899086615025565b94505050505b6000821561190e5785156118e45761013354604080516350d25bcd60e01b815290516000926001600160a01b0316916350d25bcd916004808301926020929190829003018186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190614b33565b9050600061013460009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614b33565b905081610138546118b7919061514d565b8161013754876118c7919061514d565b6118d1919061514d565b6118db919061503d565b9250505061190e565b61012e5461012d5461013d5461190b926001600160a01b03908116928116918791166137a4565b90505b6119188185615025565b9695505050505050565b61097d8133613895565b6119368282611027565b61089c5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561196e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119bc8282611027565b1561089c5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361089c81611922565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a76576107a9836138f9565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aaf57600080fd5b505afa925050508015611adf575060408051601f3d908101601f19168201909252611adc91810190614b33565b60015b611b425760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107e2565b6000805160206152678339815191528114611bb15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107e2565b506107a9838383613995565b600054610100900460ff1615808015611bdd5750600054600160ff909116105b80611bf75750303b158015611bf7575060005460ff166001145b611c135760405162461bcd60e51b81526004016107e290614f1a565b6000805460ff191660011790558015611c36576000805461ff0019166101001790555b611c3e6139c0565b611c466139c0565b611c5160003361192c565b610fe57f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361192c565b61012d546001600160a01b03838116911614611ca95760405162461bcd60e51b81526004016107e290614f68565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611cfb57600080fd5b505afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d339190614bbf565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015611d66575066038d7ea4c6800081115b611d825760405162461bcd60e51b81526004016107e290614e8c565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611dc757600080fd5b505afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff9190614b33565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611e4957600080fd5b505afa158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e819190614b33565b9050600061013360009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c9190614b33565b9050600061013460009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f979190614b33565b905060008261013854611faa919061514d565b826101375486611fba919061514d565b611fc4919061514d565b611fce919061503d565b90506000611fe8611fdf838861516c565b888a6001613a2b565b61012d5461012e5491925061202e916001600160a01b03918216911683606461201282606361514d565b61201c919061503d565b61013d546001600160a01b0316613af6565b5061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561207e57600080fd5b505afa158015612092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b69190614bbf565b5061012d546040516370a0823160e01b81523060048201526001600160701b039384169b509190921698506001600160a01b03909116906370a082319060240160206040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190614b33565b61012e546040516370a0823160e01b81523060048201529197506001600160a01b0316906370a082319060240160206040518083038186803b15801561218b57600080fd5b505afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190614b33565b94506000876121d28a8961514d565b6121dc919061503d565b9050858111156121e95750845b6000896121f68a8961514d565b612200919061503d565b90508781111561220d5750865b61012d546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612245929116908c90600401614dbd565b602060405180830381600087803b15801561225f57600080fd5b505af1158015612273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122979190614afd565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926122d0929116908b90600401614dbd565b602060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123229190614afd565b506101315461012d5461012e546001600160a01b0392831692635a47ddc3928116911660018c8c606461235689606361514d565b612360919061503d565b606461236d8b606361514d565b612377919061503d565b6040516001600160e01b031960e08a901b1681526001600160a01b03978816600482015296909516602487015292151560448601526064850191909152608484015260a483015260c48201523060e48201524261010482015261012401606060405180830381600087803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124269190614c33565b505061012d546040516370a0823160e01b81523060048201526001600160a01b0390911691506370a082319060240160206040518083038186803b15801561246d57600080fd5b505afa158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a59190614b33565b61012e546040516370a0823160e01b81523060048201529199506001600160a01b0316906370a082319060240160206040518083038186803b1580156124ea57600080fd5b505afa1580156124fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125229190614b33565b610132546040516370a0823160e01b81523060048201529198506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561256c57600080fd5b505afa158015612580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a49190614b33565b6101325461013a5460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926125de9216908590600401614dbd565b602060405180830381600087803b1580156125f857600080fd5b505af115801561260c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126309190614afd565b5061013a54610132546040516351b3839960e11b81526001600160a01b039283169263a367073292612669929116908590600401614dbd565b600060405180830381600087803b15801561268357600080fd5b505af1158015612697573d6000803e3d6000fd5b5050505050505050505050505050505050565b61013b546101325460009182916126ce916001600160a01b0390811691163061362a565b905080156127405761013a60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561272757600080fd5b505af115801561273b573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561278957600080fd5b505afa15801561279d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c19190614b33565b9050801561286357610131546101305461012f5461012d546000936127fd936001600160a01b0391821693908216929082169116858088613cd5565b9050801561286157610131546101305461012f5461012d54600093612851936001600160a01b039182169390821692908216911685808960646128418b606361514d565b61284b919061503d565b30613f00565b905061285d8185615025565b9350505b505b610139546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156128a857600080fd5b505afa1580156128bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e09190614b33565b9050801561297257610131546101395461012f5461012d5460009361291c936001600160a01b0391821693908216929082169116858088613cd5565b9050801561297057610131546101395461012f5461012d54600093612960936001600160a01b039182169390821692908216911685808960646128418b606361514d565b905061296c8186615025565b9450505b505b8215612aba576000612710610136548561298c919061514d565b612996919061503d565b905060006129a4828661516c565b61012d546101355460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb926129de9216908690600401614dbd565b602060405180830381600087803b1580156129f857600080fd5b505af1158015612a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a309190614afd565b5061012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612a64908b908590600401614dbd565b602060405180830381600087803b158015612a7e57600080fd5b505af1158015612a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab69190614afd565b5050505b5090949350505050565b61012d546000906001600160a01b03848116911614612af55760405162461bcd60e51b81526004016107e290614f68565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b4757600080fd5b505afa158015612b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7f9190614bbf565b506001600160701b031691506001600160701b0316915066038d7ea4c6800082118015612bb2575066038d7ea4c6800081115b612bce5760405162461bcd60e51b81526004016107e290614e8c565b61013b5461013254600091612bf0916001600160a01b0391821691163061362a565b90508015612c635761013a546101325460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992612c30929116908590600401614dbd565b600060405180830381600087803b158015612c4a57600080fd5b505af1158015612c5e573d6000803e3d6000fd5b505050505b610132546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612ca857600080fd5b505afa158015612cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce09190614b33565b90508015612ef45761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612d2e57600080fd5b505afa158015612d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d669190614b33565b9050600081612d75848761514d565b612d7f919061503d565b9050600082612d8e858961514d565b612d98919061503d565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392612dd29216908890600401614dbd565b602060405180830381600087803b158015612dec57600080fd5b505af1158015612e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e249190614afd565b506101315461012d5461012e546001600160a01b0392831692630dede6c492811691166001886064612e5789606361514d565b612e61919061503d565b6064612e6e89606361514d565b612e78919061503d565b30426040518963ffffffff1660e01b8152600401612e9d989796959493929190614d74565b6040805180830381600087803b158015612eb657600080fd5b505af1158015612eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eee9190614c0f565b50505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612f3957600080fd5b505afa158015612f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f719190614b33565b90508015612fd45761012e5461012d5461013d54600092612fa4926001600160a01b0391821692908216918691166137a4565b61012e5461012d5461013d54929350612fd1926001600160a01b0392831692918216918691869116613af6565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561301857600080fd5b505afa15801561302c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130509190614b33565b98975050505050505050565b61012d546000906001600160a01b0385811691161461308d5760405162461bcd60e51b81526004016107e290614f68565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131179190614bbf565b506001600160701b031691506001600160701b0316915066038d7ea4c680008211801561314a575066038d7ea4c6800081115b6131665760405162461bcd60e51b81526004016107e290614e8c565b61013b5461013254600091613188916001600160a01b0391821691163061362a565b905080156134c05761013254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156131d657600080fd5b505afa1580156131ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320e9190614b33565b9050600061323a6132208960046141b6565b61323090655af3107a4000615025565b83868860016141d9565b9050828111156132475750815b61013a546101325460405163fce07e8960e01b81526001600160a01b039283169263fce07e899261327f929116908590600401614dbd565b600060405180830381600087803b15801561329957600080fd5b505af11580156132ad573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156132f857600080fd5b505afa15801561330c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133309190614b33565b905060008361333f838861514d565b613349919061503d565b9050600084613358848a61514d565b613362919061503d565b610132546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261339c9216908790600401614dbd565b602060405180830381600087803b1580156133b657600080fd5b505af11580156133ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ee9190614afd565b506101315461012d5461012e546001600160a01b0392831692630dede6c49281169116600187606461342189606361514d565b61342b919061503d565b606461343889606361514d565b613442919061503d565b30426040518963ffffffff1660e01b8152600401613467989796959493929190614d74565b6040805180830381600087803b15801561348057600080fd5b505af1158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190614c0f565b505050505050505b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561350557600080fd5b505afa158015613519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353d9190614b33565b905080156135a05761012e5461012d5461013d54600092613570926001600160a01b0391821692908216918691166137a4565b61012e5461012d5461013d5492935061359d926001600160a01b0392831692918216918691869116613af6565b50505b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156135e457600080fd5b505afa1580156135f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361c9190614b33565b9450505050505b9392505050565b604051636f4ba70b60e11b81526001600160a01b038281166004830152600091829186169063de974e169060240160206040518083038186803b15801561367057600080fd5b505afa158015613684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a8919061490c565b604051630c3f16df60e31b81526001600160a01b0386811660048301529192506000918716906361f8b6f89060240160206040518083038186803b1580156136ef57600080fd5b505afa158015613703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613727919061490c565b6040516370a0823160e01b81526001600160a01b038481166004830152919250908216906370a082319060240160206040518083038186803b15801561376c57600080fd5b505afa158015613780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119189190614b33565b6000806000806137b58888876142bd565b9250925092508015613856576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b038616906307211ef7906064015b60206040518083038186803b15801561381457600080fd5b505afa158015613828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384c9190614b33565b93505050506114e7565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018790526001600160a01b03861690635e0d443f906064016137fc565b61389f8282611027565b61089c576138b7816001600160a01b03166014614512565b6138c2836020614512565b6040516020016138d3929190614cff565b60408051601f198184030181529082905262461bcd60e51b82526107e291600401614dd6565b6001600160a01b0381163b6139665760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107e2565b60008051602061526783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61399e836146ae565b6000825111806139ab5750805b156107a9576139ba83836146ee565b50505050565b600054610100900460ff16610f625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e2565b600082610137546101385486613a41919061514d565b613a4b919061503d565b613a559190615025565b613a5f848761514d565b613a69919061503d565b905060005b82811015613aed5761012d5461012e5461013d54600092613aa1926001600160a01b0391821692908216918791166137a4565b90508483613aaf838961514d565b613ab9919061503d565b613ac39190615025565b613acd868961514d565b613ad7919061503d565b9250508080613ae5906151c6565b915050613a6e565b50949350505050565b60405163095ea7b360e01b81526000906001600160a01b0387169063095ea7b390613b279085908890600401614dbd565b602060405180830381600087803b158015613b4157600080fd5b505af1158015613b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b799190614afd565b506000806000613b8a8989876142bd565b92509250925060008115613c3257604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101899052606481018890526001600160a01b0387169063a6417ed690608401602060405180830381600087803b158015613bf357600080fd5b505af1158015613c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2b9190614b33565b9050613cc8565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101899052606481018890526001600160a01b03871690633df0212490608401602060405180830381600087803b158015613c8d57600080fd5b505af1158015613ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc59190614b33565b90505b9998505050505050505050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613cf05790505090508781600081518110613d3357613d336151f7565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110613d6b57613d6b6151f7565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110613da357613da36151f7565b602002602001015160400190151590811515815250508681600181518110613dcd57613dcd6151f7565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508581600181518110613e0557613e056151f7565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600181518110613e3d57613e3d6151f7565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb490613e809087908690600401614f9f565b60006040518083038186803b158015613e9857600080fd5b505afa158015613eac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ed49190810190614a50565b905080600281518110613ee957613ee96151f7565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526000906001600160a01b038a169063095ea7b390613f31908d908890600401614dbd565b602060405180830381600087803b158015613f4b57600080fd5b505af1158015613f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f839190614afd565b5060408051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613f9c5790505090508981600081518110613fdf57613fdf6151f7565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110614017576140176151f7565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050868160008151811061404f5761404f6151f7565b602002602001015160400190151590811515815250508881600181518110614079576140796151f7565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505087816001815181106140b1576140b16151f7565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816001815181106140e9576140e96151f7565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038d169063f41766d890614132908990899087908a904290600401614fb8565b600060405180830381600087803b15801561414c57600080fd5b505af1158015614160573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141889190810190614a50565b90508060028151811061419d5761419d6151f7565b6020026020010151925050509998505050505050505050565b60006127106141c58382615025565b6141cf908561514d565b613623919061503d565b60006101385461013754846141ee919061514d565b6141f8919061503d565b6142029085615025565b61420c878761514d565b614216919061503d565b905060005b828110156142b357600086614230848761514d565b61423a919061503d565b61012e5461012d5461013d54929350600092614267926001600160a01b03908116928116918691166137a4565b905081614274828861514d565b61427e919061503d565b6142889088615025565b6142928a8a61514d565b61429c919061503d565b9350505080806142ab906151c6565b91505061421b565b5095945050505050565b6000808060016001607f1b0380825b60006142d888836147e2565b90506001600160a01b0381166142ee5750614341565b896001600160a01b0316816001600160a01b031614156143105781935061432e565b886001600160a01b0316816001600160a01b0316141561432e578192505b81614338816151c6565b925050506142cc565b600f83900b60016001607f1b03148015906143675750600f82900b60016001607f1b0314155b1561437b5750909350915060009050614509565b600f83900b60016001607f1b031415806143a05750600f82900b60016001607f1b0314155b156143f95760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b60648201526084016107e2565b5060005b6000614409888361486f565b90506001600160a01b03811661441f5750614472565b896001600160a01b0316816001600160a01b031614156144415781935061445f565b886001600160a01b0316816001600160a01b0316141561445f578192505b81614469816151c6565b925050506143fd565b600f83900b60016001607f1b03148015906144985750600f82900b60016001607f1b0314155b156144ac5750909350915060019050614509565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b60648201526084016107e2565b93509350939050565b6060600061452183600261514d565b61452c906002615025565b67ffffffffffffffff8111156145445761454461520d565b6040519080825280601f01601f19166020018201604052801561456e576020820181803683370190505b509050600360fc1b81600081518110614589576145896151f7565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106145b8576145b86151f7565b60200101906001600160f81b031916908160001a90535060006145dc84600261514d565b6145e7906001615025565b90505b600181111561465f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061461b5761461b6151f7565b1a60f81b828281518110614631576146316151f7565b60200101906001600160f81b031916908160001a90535060049490941c93614658816151af565b90506145ea565b5083156136235760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e2565b6146b7816138f9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6147565760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107e2565b600080846001600160a01b0316846040516147719190614ce3565b600060405180830381855af49150503d80600081146147ac576040519150601f19603f3d011682016040523d82523d6000602084013e6147b1565b606091505b50915091506147d982826040518060600160405280602781526020016152876027913961489f565b95945050505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b15801561482657600080fd5b505afa925050508015614856575060408051601f3d908101601f191682019092526148539181019061490c565b60015b61485f57614866565b905061076d565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb09060240161480e565b606083156148ae575081613623565b8251156148be5782518084602001fd5b8160405162461bcd60e51b81526004016107e29190614dd6565b80516001600160701b038116811461131f57600080fd5b60006020828403121561490157600080fd5b813561362381615223565b60006020828403121561491e57600080fd5b815161362381615223565b6000806040838503121561493c57600080fd5b823561494781615223565b915060208381013567ffffffffffffffff8082111561496557600080fd5b818601915086601f83011261497957600080fd5b81358181111561498b5761498b61520d565b61499d601f8201601f19168501614ff4565b915080825287848285010111156149b357600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156149e457600080fd5b82356149ef81615223565b946020939093013593505050565b60008060008060808587031215614a1357600080fd5b8435614a1e81615223565b9350602085013592506040850135614a3581615223565b91506060850135614a4581615238565b939692955090935050565b60006020808385031215614a6357600080fd5b825167ffffffffffffffff80821115614a7b57600080fd5b818501915085601f830112614a8f57600080fd5b815181811115614aa157614aa161520d565b8060051b9150614ab2848301614ff4565b8181528481019084860184860187018a1015614acd57600080fd5b600095505b83861015614af0578051835260019590950194918601918601614ad2565b5098975050505050505050565b600060208284031215614b0f57600080fd5b815161362381615238565b600060208284031215614b2c57600080fd5b5035919050565b600060208284031215614b4557600080fd5b5051919050565b60008060408385031215614b5f57600080fd5b823591506020830135614b7181615223565b809150509250929050565b600060208284031215614b8e57600080fd5b81356001600160e01b03198116811461362357600080fd5b60006101e08284031215614bb957600080fd5b50919050565b600080600060608486031215614bd457600080fd5b614bdd846148d8565b9250614beb602085016148d8565b9150604084015163ffffffff81168114614c0457600080fd5b809150509250925092565b60008060408385031215614c2257600080fd5b505080516020909101519092909150565b600080600060608486031215614c4857600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614c7357600080fd5b815160ff8116811461362357600080fd5b600081518084526020808501945080840160005b83811015614cd857815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614c98565b509495945050505050565b60008251614cf5818460208701615183565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d37816017850160208801615183565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614d68816028840160208801615183565b01602801949350505050565b6001600160a01b039889168152968816602088015294151560408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152614df5816040850160208701615183565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526022908201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6040820152616f7760f01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b8281526040602082015260006114e76040830184614c84565b85815284602082015260a060408201526000614fd760a0830186614c84565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561501d5761501d61520d565b604052919050565b60008219821115615038576150386151e1565b500190565b60008261505a57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561509a578160001904821115615080576150806151e1565b8085161561508d57918102915b93841c9390800290615064565b509250929050565b600061362360ff8416836000826150bb5750600161076d565b816150c85750600061076d565b81600181146150de57600281146150e857615104565b600191505061076d565b60ff8411156150f9576150f96151e1565b50506001821b61076d565b5060208310610133831016604e8410600b8410161715615127575081810a61076d565b615131838361505f565b8060001904821115615145576151456151e1565b029392505050565b6000816000190483118215151615615167576151676151e1565b500290565b60008282101561517e5761517e6151e1565b500390565b60005b8381101561519e578181015183820152602001615186565b838111156139ba5750506000910152565b6000816151be576151be6151e1565b506000190190565b60006000198214156151da576151da6151e1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461097d57600080fd5b801515811461097d57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f6e47cf45931fab741d1b540d1656431007289256e429d6a37465d491501827b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9848,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 10184,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18881,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "busdToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 18884,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "tusdToken",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 18887,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "wBnbToken",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 18890,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "coneToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 18893,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "coneRouter",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IConeRouter01)5449"
      },
      {
        "astId": 18896,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "conePair",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IConePair)5693"
      },
      {
        "astId": 18899,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "chainlinkBusd",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IPriceFeed)4905"
      },
      {
        "astId": 18902,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "chainlinkTusd",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IPriceFeed)4905"
      },
      {
        "astId": 18904,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "rewardWallet",
        "offset": 0,
        "slot": "309",
        "type": "t_address"
      },
      {
        "astId": 18906,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "rewardWalletPercent",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 18908,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "busdTokenDenominator",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 18910,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "tusdTokenDenominator",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 18913,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "unkwnToken",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 18916,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "unkwnUserProxy",
        "offset": 0,
        "slot": "314",
        "type": "t_contract(IUserProxy)9071"
      },
      {
        "astId": 18919,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "unkwnLens",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IUnkwnLens)8760"
      },
      {
        "astId": 18921,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "stakeStep",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 18923,
        "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
        "label": "annexStablePool",
        "offset": 0,
        "slot": "317",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConePair)5693": {
        "encoding": "inplace",
        "label": "contract IConePair",
        "numberOfBytes": "20"
      },
      "t_contract(IConeRouter01)5449": {
        "encoding": "inplace",
        "label": "contract IConeRouter01",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2379": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)4905": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IUnkwnLens)8760": {
        "encoding": "inplace",
        "label": "contract IUnkwnLens",
        "numberOfBytes": "20"
      },
      "t_contract(IUserProxy)9071": {
        "encoding": "inplace",
        "label": "contract IUserProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/busd/StrategyUnknownBusdTusd.sol:StrategyUnknownBusdTusd",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}