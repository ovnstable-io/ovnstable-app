{
  "address": "0xaaE3A8725bAe9a799C78BCd19b592BC9dbbd7a32",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "BalanceHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactorBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miniChefV2",
      "outputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nUsdLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "setHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdtToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nUsdLPToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "synToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "busdToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "miniChefV2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pancakeRouter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategySynapseUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "synToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9102e7642f2b4212142790c8662a3321",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"BalanceHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniChefV2\",\"outputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nUsdLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"setHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nUsdLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"synToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"busdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miniChefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategySynapseUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/usdt/StrategySynapseUsdt.sol\":\"StrategySynapseUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyPortfolioManager {\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n        emit Stake(_amount);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            uint256 totalAsset = _claimRewards(_beneficiary);\\n            if (totalAsset > 0) {\\n                emit Reward(totalAsset);\\n            }\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalAsset = _claimRewards(_to);\\n        if (totalAsset > 0) {\\n            emit Reward(totalAsset);\\n        }\\n        return totalAsset;\\n    }\\n\\n    function healthFactorBalance() external override onlyPortfolioManager {\\n        uint256 healthFactor = _healthFactorBalance();\\n        if (healthFactor > 0) {\\n            emit BalanceHealthFactor(healthFactor);\\n        }\\n    }\\n\\n    function setHealthFactor(uint256 healthFactor) external override onlyPortfolioManager {\\n        _setHealthFactor(healthFactor);\\n        emit SetHealthFactor(healthFactor);\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _healthFactorBalance() internal virtual returns (uint256) {\\n\\n    }\\n\\n    function _setHealthFactor(uint256 _healthFactor) internal virtual {\\n\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfa70428bd5dc4e4e3ddfd68c1d5e8f6ffccc62c1223efb869d3d87b94228266\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event BalanceHealthFactor(uint256 healthFactor);\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n    function healthFactorBalance() external;\\n\\n    function setHealthFactor(uint256 healthFactor) external;\\n}\\n\",\"keccak256\":\"0x4404caa3b9be9c213aee4babcb2957833ff90a1e300de1d2d7bd355859539d4e\",\"license\":\"GPL-3.0\"},\"contracts/connectors/pancakeSwap/v2/interfaces/IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xa7209f52319419a1987acc5bf121dcc916036c5d99dea4b2d77f987c4c28628e\",\"license\":\"MIT\"},\"contracts/connectors/pancakeSwap/v2/interfaces/IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport './IPancakeRouter01.sol';\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0xfe0745ecd1d5b7f283f3c3eb92fad7499331a63785202d49eaf0df4d5734ca05\",\"license\":\"MIT\"},\"contracts/connectors/synapse/interfaces/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMiniChefV2 {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint128 accSynapsePerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function harvest(uint256 pid, address to) external;\\n\\n    function withdrawAndHarvest(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\",\"keccak256\":\"0x0e8f2e3a4137cbf19ddefcb2425ec57b61cf4a354b50203522c48aa1353361e9\",\"license\":\"MIT\"},\"contracts/connectors/synapse/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n    external\\n    view\\n    returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\",\"keccak256\":\"0x629cff118bedb9f8f78774e5fa3c8765df5642c9215d18c5a06e717c32d6c29d\",\"license\":\"MIT\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/libraries/PancakeSwapLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/pancakeSwap/v2/interfaces/IPancakeRouter02.sol\\\";\\n\\nlibrary PancakeSwapLibrary {\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[2];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function addLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(pancakeRouter), amountADesired);\\n        IERC20(tokenB).approve(address(pancakeRouter), amountBDesired);\\n\\n        return pancakeRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(pancakeRouter), liquidity);\\n\\n        return pancakeRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9770a650c62f4e629c99e8c3bb5d7a956dbfe33e57fae7ca5efe840e5bfedf67\",\"license\":\"MIT\"},\"contracts/usdt/StrategySynapseUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\nimport \\\"../libraries/OvnMath.sol\\\";\\nimport \\\"../libraries/PancakeSwapLibrary.sol\\\";\\nimport \\\"../connectors/synapse/interfaces/ISwap.sol\\\";\\nimport \\\"../connectors/synapse/interfaces/IMiniChefV2.sol\\\";\\n\\n\\ncontract StrategySynapseUsdt is Strategy {\\n    using OvnMath for uint256;\\n\\n    IERC20 public usdtToken;\\n    IERC20 public nUsdLPToken;\\n    IERC20 public synToken;\\n    IERC20 public busdToken;\\n\\n    ISwap public swap;\\n    IMiniChefV2 public miniChefV2;\\n    IPancakeRouter02 public pancakeRouter;\\n    uint256 public pid;\\n\\n\\n    // --- events\\n\\n    event StrategyUpdatedParams();\\n\\n\\n    // --- structs\\n\\n    struct StrategyParams {\\n        address usdtToken;\\n        address nUsdLPToken;\\n        address synToken;\\n        address busdToken;\\n        address swap;\\n        address miniChefV2;\\n        address pancakeRouter;\\n        uint256 pid;\\n    }\\n\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n    // --- Setters\\n\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\n        usdtToken = IERC20(params.usdtToken);\\n        nUsdLPToken = IERC20(params.nUsdLPToken);\\n        synToken = IERC20(params.synToken);\\n        busdToken = IERC20(params.busdToken);\\n\\n        swap = ISwap(params.swap);\\n        miniChefV2 = IMiniChefV2(params.miniChefV2);\\n        pancakeRouter = IPancakeRouter02(params.pancakeRouter);\\n        pid = params.pid;\\n\\n        emit StrategyUpdatedParams();\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(usdtToken), \\\"Some token not compatible\\\");\\n\\n        // add liquidity\\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\\n        uint256[] memory amounts = new uint256[](4);\\n        amounts[0] = 0;\\n        amounts[1] = 0;\\n        amounts[2] = 0;\\n        // sub 4 bp to calculate min amount\\n        amounts[3] = usdtBalance.subBasisPoints(4);\\n        uint256 minToMint = swap.calculateTokenAmount(amounts, true);\\n        amounts[3] = usdtBalance;\\n        usdtToken.approve(address(swap), usdtBalance);\\n        uint256 nUsdLPTokenAmount = swap.addLiquidity(amounts, minToMint, block.timestamp);\\n\\n        // stake\\n        nUsdLPToken.approve(address(miniChefV2), nUsdLPTokenAmount);\\n        miniChefV2.deposit(pid, nUsdLPTokenAmount, address(this));\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdtToken), \\\"Some token not compatible\\\");\\n\\n        // unstake\\n        uint256[] memory amounts = new uint256[](4);\\n        amounts[0] = 0;\\n        amounts[1] = 0;\\n        amounts[2] = 0;\\n        // add 4 bp to unstake more than requested\\n        amounts[3] = _amount.addBasisPoints(4) + 1;\\n        uint256 lpBalance = swap.calculateTokenAmount(amounts, false);\\n        (uint256 amount,) = miniChefV2.userInfo(pid, address(this));\\n        if (lpBalance > amount) {\\n            lpBalance = amount;\\n        }\\n        miniChefV2.withdraw(pid, lpBalance, address(this));\\n\\n        // remove liquidity\\n        nUsdLPToken.approve(address(swap), lpBalance);\\n        swap.removeLiquidityOneToken(lpBalance, 3, _amount, block.timestamp);\\n\\n        return usdtToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdtToken), \\\"Some token not compatible\\\");\\n\\n        // unstake\\n        (uint256 amount,) = miniChefV2.userInfo(pid, address(this));\\n        if (amount == 0) {\\n            return usdtToken.balanceOf(address(this));\\n        }\\n        miniChefV2.withdraw(pid, amount, address(this));\\n\\n        // remove liquidity\\n        uint256 usdtBalance = swap.calculateRemoveLiquidityOneToken(amount, 3);\\n        nUsdLPToken.approve(address(swap), amount);\\n        swap.removeLiquidityOneToken(amount, 3, usdtBalance, block.timestamp);\\n\\n        return usdtToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\\n\\n        (uint256 amount,) = miniChefV2.userInfo(pid, address(this));\\n        if (amount > 0) {\\n            if (nav) {\\n                usdtBalance += swap.calculateRemoveLiquidityOneToken(1e18, 3) * amount / 1e18;\\n            } else {\\n                usdtBalance += swap.calculateRemoveLiquidityOneToken(amount, 3);\\n            }\\n        }\\n\\n        return usdtBalance;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards\\n        (uint256 amount,) = miniChefV2.userInfo(pid, address(this));\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        miniChefV2.harvest(pid, address(this));\\n\\n        // sell rewards\\n        uint256 totalUsdt;\\n\\n        uint256 synBalance = synToken.balanceOf(address(this));\\n        if (synBalance > 0) {\\n            uint256 amountOutMin = PancakeSwapLibrary.getAmountsOut(\\n                pancakeRouter,\\n                address(synToken),\\n                address(busdToken),\\n                address(usdtToken),\\n                synBalance\\n            );\\n\\n            if (amountOutMin > 0) {\\n                uint256 synUsdt = PancakeSwapLibrary.swapExactTokensForTokens(\\n                    pancakeRouter,\\n                    address(synToken),\\n                    address(busdToken),\\n                    address(usdtToken),\\n                    synBalance,\\n                    amountOutMin,\\n                    address(this)\\n                );\\n                totalUsdt += synUsdt;\\n            }\\n        }\\n\\n        if (totalUsdt > 0) {\\n            usdtToken.transfer(_to, totalUsdt);\\n        }\\n\\n        return totalUsdt;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x11469c3f388497b76c975cd29dd196d8736821a7334c28ce5e085b80470d2132\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b6200112b1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6135b86200018e6000396000818161073e0152818161077e0152818161081e0152818161085e01526108ed01526135b86000f3fe6080604052600436106101d85760003560e01c80638119c06511610102578063adc9772e11610095578063ef5cfb8c11610064578063ef5cfb8c14610544578063f106845414610564578063f6f6b8811461057b578063f72c0d8b1461059b57600080fd5b8063adc9772e146104c2578063c21ebd07146104e2578063d547741f14610503578063de0e70141461052357600080fd5b8063a217fddf116100d1578063a217fddf14610457578063a3673b381461046c578063a440b21a14610481578063a98ad46c146104a157600080fd5b80638119c065146103e15780638129fc1c1461040257806382808e641461041757806391d148541461043757600080fd5b806344a1342b1161017a578063620b75df11610149578063620b75df146103695780636d52ecb0146103895780637b73aa4e146103aa5780637d5f5802146103bf57600080fd5b806344a1342b146102e75780634b7f6363146103205780634f1ef2861461034157806352d1902d1461035457600080fd5b80632f2ff15d116101b65780632f2ff15d14610265578063311117081461028757806336568abe146102a75780633659cfe6146102c757600080fd5b806301ffc9a7146101dd578063248a9ca3146102125780632576e65a14610250575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461304e565b6105cf565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061024261022d366004612ff0565b60009081526065602052604090206001015490565b604051908152602001610209565b34801561025c57600080fd5b50610242610606565b34801561027157600080fd5b50610285610280366004613022565b610617565b005b34801561029357600080fd5b506102856102a2366004612ff0565b610641565b3480156102b357600080fd5b506102856102c2366004613022565b6106b5565b3480156102d357600080fd5b506102856102e2366004612dec565b610733565b3480156102f357600080fd5b5061012e54610308906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b34801561032c57600080fd5b5061013254610308906001600160a01b031681565b61028561034f366004612e07565b610813565b34801561036057600080fd5b506102426108e0565b34801561037557600080fd5b5060fb54610308906001600160a01b031681565b34801561039557600080fd5b5061012f54610308906001600160a01b031681565b3480156103b657600080fd5b50610285610993565b3480156103cb57600080fd5b5061024260008051602061351c83398151915281565b3480156103ed57600080fd5b5061013154610308906001600160a01b031681565b34801561040e57600080fd5b506102856109c9565b34801561042357600080fd5b50610285610432366004613078565b610a8c565b34801561044357600080fd5b506101fd610452366004613022565b610c63565b34801561046357600080fd5b50610242600081565b34801561047857600080fd5b50610242610c8e565b34801561048d57600080fd5b5061028561049c366004612dec565b610c9a565b3480156104ad57600080fd5b5061012d54610308906001600160a01b031681565b3480156104ce57600080fd5b506102856104dd366004612ead565b610dc9565b3480156104ee57600080fd5b5061013354610308906001600160a01b031681565b34801561050f57600080fd5b5061028561051e366004613022565b610eb6565b34801561052f57600080fd5b5061013054610308906001600160a01b031681565b34801561055057600080fd5b5061024261055f366004612dec565b610edb565b34801561057057600080fd5b506102426101345481565b34801561058757600080fd5b50610242610596366004612ed7565b610f60565b3480156105a757600080fd5b506102427f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061060057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610612600061113a565b905090565b600082815260656020526040902060010154610632816113a4565b61063c83836113ae565b505050565b61065960008051602061351c83398151915233610c63565b61067e5760405162461bcd60e51b815260040161067590613236565b60405180910390fd5b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146107255760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610675565b61072f8282611434565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561077c5760405162461bcd60e51b81526004016106759061326d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107c560008051602061353c833981519152546001600160a01b031690565b6001600160a01b0316146107eb5760405162461bcd60e51b8152600401610675906132b9565b6107f48161149b565b60408051600080825260208201909252610810918391906114c5565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561085c5760405162461bcd60e51b81526004016106759061326d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108a560008051602061353c833981519152546001600160a01b031690565b6001600160a01b0316146108cb5760405162461bcd60e51b8152600401610675906132b9565b6108d48261149b565b61072f828260016114c5565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109805760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610675565b5060008051602061353c83398151915290565b6109ab60008051602061351c83398151915233610c63565b6109c75760405162461bcd60e51b815260040161067590613236565b565b600054610100900460ff16158080156109e95750600054600160ff909116105b80610a035750303b158015610a03575060005460ff166001145b610a1f5760405162461bcd60e51b815260040161067590613305565b6000805460ff191660011790558015610a42576000805461ff0019166101001790555b610a4a61163f565b8015610810576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106aa565b610a97600033610c63565b610ada5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610675565b610ae76020820182612dec565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610b186040820160208301612dec565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610b496060820160408301612dec565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610b7a6080820160608301612dec565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610bab60a0820160808301612dec565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610bdc60c0820160a08301612dec565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610c0d60e0820160c08301612dec565b61013380546001600160a01b0319166001600160a01b039290921691909117905560e0810135610134556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610612600161113a565b610ca5600033610c63565b610ce85760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610675565b6001600160a01b038116610d3e5760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610675565b60fb54610d639060008051602061351c833981519152906001600160a01b0316610eb6565b610d7b60008051602061351c83398151915282610617565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016106aa565b610de160008051602061351c83398151915233610c63565b610dfd5760405162461bcd60e51b815260040161067590613236565b6040516370a0823160e01b8152306004820152610e7f9083906001600160a01b038216906370a082319060240160206040518083038186803b158015610e4257600080fd5b505afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a9190613009565b6116fd565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b600082815260656020526040902060010154610ed1816113a4565b61063c8383611434565b6000610ef560008051602061351c83398151915233610c63565b610f115760405162461bcd60e51b815260040161067590613236565b6000610f1c83611b19565b90508015610f58576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b6000610f7a60008051602061351c83398151915233610c63565b610f965760405162461bcd60e51b815260040161067590613236565b60008215610ff7576000610fa985611b19565b90508015610fe5576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b610fef8786611dc0565b915050611066565b6110028686866121a3565b9050848110156110665760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610675565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b1580156110b057600080fd5b505af11580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e89190612fd3565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb9190613009565b61013254610134546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190613091565b509050801561139d57831561130c576101315460405163342a87a160e01b8152670de0b6b3a764000060048201819052600360248301529183916001600160a01b039091169063342a87a19060440160206040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190613009565b6112f19190613452565b6112fb9190613430565b6113059083613418565b915061139d565b6101315460405163342a87a160e01b815260048101839052600360248201526001600160a01b039091169063342a87a19060440160206040518083038186803b15801561135857600080fd5b505afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190613009565b61139a9083613418565b91505b5092915050565b61081081336125c6565b6113b88282610c63565b61072f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113f03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61143e8282610c63565b1561072f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361072f816113a4565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156114f85761063c8361262a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153157600080fd5b505afa925050508015611561575060408051601f3d908101601f1916820190925261155e91810190613009565b60015b6115c45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610675565b60008051602061353c83398151915281146116335760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610675565b5061063c8383836126c6565b600054610100900460ff161580801561165f5750600054600160ff909116105b806116795750303b158015611679575060005460ff166001145b6116955760405162461bcd60e51b815260040161067590613305565b6000805460ff1916600117905580156116b8576000805461ff0019166101001790555b6116c06126f1565b6116c86126f1565b6116d36000336113ae565b610a4a7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336113ae565b61012d546001600160a01b0383811691161461172b5760405162461bcd60e51b815260040161067590613353565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190613009565b60408051600480825260a0820190925291925060009190602082016080803683370190505090506000816000815181106117e4576117e46134e1565b602002602001018181525050600081600181518110611805576118056134e1565b602002602001018181525050600081600281518110611826576118266134e1565b602090810291909101015261183c82600461275c565b8160038151811061184f5761184f6134e1565b602090810291909101015261013154604051637355940360e11b81526000916001600160a01b03169063e6ab28069061188f9085906001906004016131ba565b60206040518083038186803b1580156118a757600080fd5b505afa1580156118bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118df9190613009565b905082826003815181106118f5576118f56134e1565b602090810291909101015261012d546101315460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b390604401602060405180830381600087803b15801561195257600080fd5b505af1158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190612fd3565b5061013154604051634d49e87d60e01b81526000916001600160a01b031690634d49e87d906119c1908690869042906004016131de565b602060405180830381600087803b1580156119db57600080fd5b505af11580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613009565b61012e546101325460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f9190612fd3565b506101325461013454604051638dbdbe6d60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401600060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b50505050505050505050565b61013254610134546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190613091565b50905080611bb65750600092915050565b6101325461013454604051630c7e663b60e11b815260048101919091523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b505061012f546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b158015611c6957600080fd5b505afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca19190613009565b90508015611d29576101335461012f546101305461012d54600093611cdb936001600160a01b03918216939082169290821691168661277f565b90508015611d27576101335461012f546101305461012d54600093611d17936001600160a01b03918216939082169290821691168787306128de565b9050611d238185613418565b9350505b505b8115611db85761012d5460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db69190612fd3565b505b509392505050565b61012d546000906001600160a01b03848116911614611df15760405162461bcd60e51b815260040161067590613353565b61013254610134546040516393f1a40b60e01b815260048101919091523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b158015611e4157600080fd5b505afa158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e799190613091565b50905080611f055761012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611ec557600080fd5b505afa158015611ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efd9190613009565b915050610600565b6101325461013454604051630ad58d2f60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b158015611f5e57600080fd5b505af1158015611f72573d6000803e3d6000fd5b50506101315460405163342a87a160e01b81526004810185905260036024820152600093506001600160a01b03909116915063342a87a19060440160206040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190613009565b61012e546101315460405163095ea7b360e01b81526001600160a01b03918216600482015260248101869052929350169063095ea7b390604401602060405180830381600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120899190612fd3565b50610131546040516301f1d0ab60e51b81526004810184905260036024820152604481018390524260648201526001600160a01b0390911690633e3a156090608401602060405180830381600087803b1580156120e557600080fd5b505af11580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211d9190613009565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561216257600080fd5b505afa158015612176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219a9190613009565b95945050505050565b61012d546000906001600160a01b038581169116146121d45760405162461bcd60e51b815260040161067590613353565b60408051600480825260a082019092526000916020820160808036833701905050905060008160008151811061220c5761220c6134e1565b60200260200101818152505060008160018151811061222d5761222d6134e1565b60200260200101818152505060008160028151811061224e5761224e6134e1565b6020908102919091010152612264846004612acb565b61226f906001613418565b81600381518110612282576122826134e1565b602090810291909101015261013154604051637355940360e11b81526000916001600160a01b03169063e6ab2806906122c190859085906004016131ba565b60206040518083038186803b1580156122d957600080fd5b505afa1580156122ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123119190613009565b61013254610134546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561236657600080fd5b505afa15801561237a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239e9190613091565b509050808211156123ad578091505b6101325461013454604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b15801561240657600080fd5b505af115801561241a573d6000803e3d6000fd5b505061012e546101315460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529116925063095ea7b39150604401602060405180830381600087803b15801561247057600080fd5b505af1158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190612fd3565b50610131546040516301f1d0ab60e51b81526004810184905260036024820152604481018890524260648201526001600160a01b0390911690633e3a156090608401602060405180830381600087803b15801561250457600080fd5b505af1158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613009565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561258157600080fd5b505afa158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190613009565b93505050505b9392505050565b6125d08282610c63565b61072f576125e8816001600160a01b03166014612ada565b6125f3836020612ada565b604051602001612604929190613145565b60408051601f198184030181529082905262461bcd60e51b825261067591600401613203565b6001600160a01b0381163b6126975760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610675565b60008051602061353c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126cf83612c76565b6000825111806126dc5750805b1561063c576126eb8383612cb6565b50505050565b600054610100900460ff166109c75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610675565b600061271061276b8382613471565b6127759085613452565b6125bf9190613430565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106127b9576127b96134e1565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106127ed576127ed6134e1565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612821576128216134e1565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009189169063d06ca61f90612860908790869060040161338a565b60006040518083038186803b15801561287857600080fd5b505afa15801561288c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128b49190810190612f26565b9050806002815181106128c9576128c96134e1565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018590526000919088169063095ea7b390604401602060405180830381600087803b15801561292c57600080fd5b505af1158015612940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129649190612fd3565b506040805160038082526080820190925260009160208201606080368337019050509050878160008151811061299c5761299c6134e1565b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106129d0576129d06134e1565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600281518110612a0457612a046134e1565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918b16906338ed173990612a49908990899087908a9042906004016133ab565b600060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a9f9190810190612f26565b905080600281518110612ab457612ab46134e1565b602002602001015192505050979650505050505050565b600061271061276b8382613418565b60606000612ae9836002613452565b612af4906002613418565b67ffffffffffffffff811115612b0c57612b0c6134f7565b6040519080825280601f01601f191660200182016040528015612b36576020820181803683370190505b509050600360fc1b81600081518110612b5157612b516134e1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b8057612b806134e1565b60200101906001600160f81b031916908160001a9053506000612ba4846002613452565b612baf906001613418565b90505b6001811115612c27576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612be357612be36134e1565b1a60f81b828281518110612bf957612bf96134e1565b60200101906001600160f81b031916908160001a90535060049490941c93612c20816134b4565b9050612bb2565b5083156125bf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610675565b612c7f8161262a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612d1e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610675565b600080846001600160a01b031684604051612d399190613129565b600060405180830381855af49150503d8060008114612d74576040519150601f19603f3d011682016040523d82523d6000602084013e612d79565b606091505b509150915061219a828260405180606001604052806027815260200161355c6027913960608315612dab5750816125bf565b825115612dbb5782518084602001fd5b8160405162461bcd60e51b81526004016106759190613203565b80356001600160a01b0381168114610f5b57600080fd5b600060208284031215612dfe57600080fd5b6125bf82612dd5565b60008060408385031215612e1a57600080fd5b612e2383612dd5565b915060208084013567ffffffffffffffff80821115612e4157600080fd5b818601915086601f830112612e5557600080fd5b813581811115612e6757612e676134f7565b612e79601f8201601f191685016133e7565b91508082528784828501011115612e8f57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215612ec057600080fd5b612ec983612dd5565b946020939093013593505050565b60008060008060808587031215612eed57600080fd5b612ef685612dd5565b935060208501359250612f0b60408601612dd5565b91506060850135612f1b8161350d565b939692955090935050565b60006020808385031215612f3957600080fd5b825167ffffffffffffffff80821115612f5157600080fd5b818501915085601f830112612f6557600080fd5b815181811115612f7757612f776134f7565b8060051b9150612f888483016133e7565b8181528481019084860184860187018a1015612fa357600080fd5b600095505b83861015612fc6578051835260019590950194918601918601612fa8565b5098975050505050505050565b600060208284031215612fe557600080fd5b81516125bf8161350d565b60006020828403121561300257600080fd5b5035919050565b60006020828403121561301b57600080fd5b5051919050565b6000806040838503121561303557600080fd5b8235915061304560208401612dd5565b90509250929050565b60006020828403121561306057600080fd5b81356001600160e01b0319811681146125bf57600080fd5b6000610100828403121561308b57600080fd5b50919050565b600080604083850312156130a457600080fd5b505080516020909101519092909150565b600081518084526020808501945080840160005b838110156130ee5781516001600160a01b0316875295820195908201906001016130c9565b509495945050505050565b600081518084526020808501945080840160005b838110156130ee5781518752958201959082019060010161310d565b6000825161313b818460208701613488565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161317d816017850160208801613488565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131ae816028840160208801613488565b01602801949350505050565b6040815260006131cd60408301856130f9565b905082151560208301529392505050565b6060815260006131f160608301866130f9565b60208301949094525060400152919050565b6020815260008251806020840152613222816040850160208701613488565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b8281526040602082015260006133a360408301846130b5565b949350505050565b85815284602082015260a0604082015260006133ca60a08301866130b5565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613410576134106134f7565b604052919050565b6000821982111561342b5761342b6134cb565b500190565b60008261344d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561346c5761346c6134cb565b500290565b600082821015613483576134836134cb565b500390565b60005b838110156134a357818101518382015260200161348b565b838111156126eb5750506000910152565b6000816134c3576134c36134cb565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461081057600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122042f7b7fed6b1895d1119ebf2675e4fc18044d533494304d396a2ca66f763c15864736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80638119c06511610102578063adc9772e11610095578063ef5cfb8c11610064578063ef5cfb8c14610544578063f106845414610564578063f6f6b8811461057b578063f72c0d8b1461059b57600080fd5b8063adc9772e146104c2578063c21ebd07146104e2578063d547741f14610503578063de0e70141461052357600080fd5b8063a217fddf116100d1578063a217fddf14610457578063a3673b381461046c578063a440b21a14610481578063a98ad46c146104a157600080fd5b80638119c065146103e15780638129fc1c1461040257806382808e641461041757806391d148541461043757600080fd5b806344a1342b1161017a578063620b75df11610149578063620b75df146103695780636d52ecb0146103895780637b73aa4e146103aa5780637d5f5802146103bf57600080fd5b806344a1342b146102e75780634b7f6363146103205780634f1ef2861461034157806352d1902d1461035457600080fd5b80632f2ff15d116101b65780632f2ff15d14610265578063311117081461028757806336568abe146102a75780633659cfe6146102c757600080fd5b806301ffc9a7146101dd578063248a9ca3146102125780632576e65a14610250575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461304e565b6105cf565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061024261022d366004612ff0565b60009081526065602052604090206001015490565b604051908152602001610209565b34801561025c57600080fd5b50610242610606565b34801561027157600080fd5b50610285610280366004613022565b610617565b005b34801561029357600080fd5b506102856102a2366004612ff0565b610641565b3480156102b357600080fd5b506102856102c2366004613022565b6106b5565b3480156102d357600080fd5b506102856102e2366004612dec565b610733565b3480156102f357600080fd5b5061012e54610308906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b34801561032c57600080fd5b5061013254610308906001600160a01b031681565b61028561034f366004612e07565b610813565b34801561036057600080fd5b506102426108e0565b34801561037557600080fd5b5060fb54610308906001600160a01b031681565b34801561039557600080fd5b5061012f54610308906001600160a01b031681565b3480156103b657600080fd5b50610285610993565b3480156103cb57600080fd5b5061024260008051602061351c83398151915281565b3480156103ed57600080fd5b5061013154610308906001600160a01b031681565b34801561040e57600080fd5b506102856109c9565b34801561042357600080fd5b50610285610432366004613078565b610a8c565b34801561044357600080fd5b506101fd610452366004613022565b610c63565b34801561046357600080fd5b50610242600081565b34801561047857600080fd5b50610242610c8e565b34801561048d57600080fd5b5061028561049c366004612dec565b610c9a565b3480156104ad57600080fd5b5061012d54610308906001600160a01b031681565b3480156104ce57600080fd5b506102856104dd366004612ead565b610dc9565b3480156104ee57600080fd5b5061013354610308906001600160a01b031681565b34801561050f57600080fd5b5061028561051e366004613022565b610eb6565b34801561052f57600080fd5b5061013054610308906001600160a01b031681565b34801561055057600080fd5b5061024261055f366004612dec565b610edb565b34801561057057600080fd5b506102426101345481565b34801561058757600080fd5b50610242610596366004612ed7565b610f60565b3480156105a757600080fd5b506102427f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061060057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610612600061113a565b905090565b600082815260656020526040902060010154610632816113a4565b61063c83836113ae565b505050565b61065960008051602061351c83398151915233610c63565b61067e5760405162461bcd60e51b815260040161067590613236565b60405180910390fd5b6040518181527ff00d5f5126966481831a71a9d79a9b3af67c4a1a35637b992c7e465a7e465b71906020015b60405180910390a150565b6001600160a01b03811633146107255760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610675565b61072f8282611434565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561077c5760405162461bcd60e51b81526004016106759061326d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107c560008051602061353c833981519152546001600160a01b031690565b6001600160a01b0316146107eb5760405162461bcd60e51b8152600401610675906132b9565b6107f48161149b565b60408051600080825260208201909252610810918391906114c5565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561085c5760405162461bcd60e51b81526004016106759061326d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108a560008051602061353c833981519152546001600160a01b031690565b6001600160a01b0316146108cb5760405162461bcd60e51b8152600401610675906132b9565b6108d48261149b565b61072f828260016114c5565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109805760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610675565b5060008051602061353c83398151915290565b6109ab60008051602061351c83398151915233610c63565b6109c75760405162461bcd60e51b815260040161067590613236565b565b600054610100900460ff16158080156109e95750600054600160ff909116105b80610a035750303b158015610a03575060005460ff166001145b610a1f5760405162461bcd60e51b815260040161067590613305565b6000805460ff191660011790558015610a42576000805461ff0019166101001790555b610a4a61163f565b8015610810576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016106aa565b610a97600033610c63565b610ada5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610675565b610ae76020820182612dec565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610b186040820160208301612dec565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610b496060820160408301612dec565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610b7a6080820160608301612dec565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610bab60a0820160808301612dec565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610bdc60c0820160a08301612dec565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610c0d60e0820160c08301612dec565b61013380546001600160a01b0319166001600160a01b039290921691909117905560e0810135610134556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610612600161113a565b610ca5600033610c63565b610ce85760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610675565b6001600160a01b038116610d3e5760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610675565b60fb54610d639060008051602061351c833981519152906001600160a01b0316610eb6565b610d7b60008051602061351c83398151915282610617565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016106aa565b610de160008051602061351c83398151915233610c63565b610dfd5760405162461bcd60e51b815260040161067590613236565b6040516370a0823160e01b8152306004820152610e7f9083906001600160a01b038216906370a082319060240160206040518083038186803b158015610e4257600080fd5b505afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a9190613009565b6116fd565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a15050565b600082815260656020526040902060010154610ed1816113a4565b61063c8383611434565b6000610ef560008051602061351c83398151915233610c63565b610f115760405162461bcd60e51b815260040161067590613236565b6000610f1c83611b19565b90508015610f58576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b6000610f7a60008051602061351c83398151915233610c63565b610f965760405162461bcd60e51b815260040161067590613236565b60008215610ff7576000610fa985611b19565b90508015610fe5576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b610fef8786611dc0565b915050611066565b6110028686866121a3565b9050848110156110665760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610675565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b1580156110b057600080fd5b505af11580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e89190612fd3565b5060408051868152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a195945050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb9190613009565b61013254610134546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190613091565b509050801561139d57831561130c576101315460405163342a87a160e01b8152670de0b6b3a764000060048201819052600360248301529183916001600160a01b039091169063342a87a19060440160206040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190613009565b6112f19190613452565b6112fb9190613430565b6113059083613418565b915061139d565b6101315460405163342a87a160e01b815260048101839052600360248201526001600160a01b039091169063342a87a19060440160206040518083038186803b15801561135857600080fd5b505afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190613009565b61139a9083613418565b91505b5092915050565b61081081336125c6565b6113b88282610c63565b61072f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113f03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61143e8282610c63565b1561072f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361072f816113a4565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156114f85761063c8361262a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153157600080fd5b505afa925050508015611561575060408051601f3d908101601f1916820190925261155e91810190613009565b60015b6115c45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610675565b60008051602061353c83398151915281146116335760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610675565b5061063c8383836126c6565b600054610100900460ff161580801561165f5750600054600160ff909116105b806116795750303b158015611679575060005460ff166001145b6116955760405162461bcd60e51b815260040161067590613305565b6000805460ff1916600117905580156116b8576000805461ff0019166101001790555b6116c06126f1565b6116c86126f1565b6116d36000336113ae565b610a4a7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336113ae565b61012d546001600160a01b0383811691161461172b5760405162461bcd60e51b815260040161067590613353565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190613009565b60408051600480825260a0820190925291925060009190602082016080803683370190505090506000816000815181106117e4576117e46134e1565b602002602001018181525050600081600181518110611805576118056134e1565b602002602001018181525050600081600281518110611826576118266134e1565b602090810291909101015261183c82600461275c565b8160038151811061184f5761184f6134e1565b602090810291909101015261013154604051637355940360e11b81526000916001600160a01b03169063e6ab28069061188f9085906001906004016131ba565b60206040518083038186803b1580156118a757600080fd5b505afa1580156118bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118df9190613009565b905082826003815181106118f5576118f56134e1565b602090810291909101015261012d546101315460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b390604401602060405180830381600087803b15801561195257600080fd5b505af1158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190612fd3565b5061013154604051634d49e87d60e01b81526000916001600160a01b031690634d49e87d906119c1908690869042906004016131de565b602060405180830381600087803b1580156119db57600080fd5b505af11580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613009565b61012e546101325460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f9190612fd3565b506101325461013454604051638dbdbe6d60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401600060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b50505050505050505050565b61013254610134546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190613091565b50905080611bb65750600092915050565b6101325461013454604051630c7e663b60e11b815260048101919091523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b505061012f546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b158015611c6957600080fd5b505afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca19190613009565b90508015611d29576101335461012f546101305461012d54600093611cdb936001600160a01b03918216939082169290821691168661277f565b90508015611d27576101335461012f546101305461012d54600093611d17936001600160a01b03918216939082169290821691168787306128de565b9050611d238185613418565b9350505b505b8115611db85761012d5460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db69190612fd3565b505b509392505050565b61012d546000906001600160a01b03848116911614611df15760405162461bcd60e51b815260040161067590613353565b61013254610134546040516393f1a40b60e01b815260048101919091523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b158015611e4157600080fd5b505afa158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e799190613091565b50905080611f055761012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611ec557600080fd5b505afa158015611ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efd9190613009565b915050610600565b6101325461013454604051630ad58d2f60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b158015611f5e57600080fd5b505af1158015611f72573d6000803e3d6000fd5b50506101315460405163342a87a160e01b81526004810185905260036024820152600093506001600160a01b03909116915063342a87a19060440160206040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190613009565b61012e546101315460405163095ea7b360e01b81526001600160a01b03918216600482015260248101869052929350169063095ea7b390604401602060405180830381600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120899190612fd3565b50610131546040516301f1d0ab60e51b81526004810184905260036024820152604481018390524260648201526001600160a01b0390911690633e3a156090608401602060405180830381600087803b1580156120e557600080fd5b505af11580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211d9190613009565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561216257600080fd5b505afa158015612176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219a9190613009565b95945050505050565b61012d546000906001600160a01b038581169116146121d45760405162461bcd60e51b815260040161067590613353565b60408051600480825260a082019092526000916020820160808036833701905050905060008160008151811061220c5761220c6134e1565b60200260200101818152505060008160018151811061222d5761222d6134e1565b60200260200101818152505060008160028151811061224e5761224e6134e1565b6020908102919091010152612264846004612acb565b61226f906001613418565b81600381518110612282576122826134e1565b602090810291909101015261013154604051637355940360e11b81526000916001600160a01b03169063e6ab2806906122c190859085906004016131ba565b60206040518083038186803b1580156122d957600080fd5b505afa1580156122ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123119190613009565b61013254610134546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561236657600080fd5b505afa15801561237a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239e9190613091565b509050808211156123ad578091505b6101325461013454604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b15801561240657600080fd5b505af115801561241a573d6000803e3d6000fd5b505061012e546101315460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529116925063095ea7b39150604401602060405180830381600087803b15801561247057600080fd5b505af1158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190612fd3565b50610131546040516301f1d0ab60e51b81526004810184905260036024820152604481018890524260648201526001600160a01b0390911690633e3a156090608401602060405180830381600087803b15801561250457600080fd5b505af1158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613009565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561258157600080fd5b505afa158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190613009565b93505050505b9392505050565b6125d08282610c63565b61072f576125e8816001600160a01b03166014612ada565b6125f3836020612ada565b604051602001612604929190613145565b60408051601f198184030181529082905262461bcd60e51b825261067591600401613203565b6001600160a01b0381163b6126975760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610675565b60008051602061353c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126cf83612c76565b6000825111806126dc5750805b1561063c576126eb8383612cb6565b50505050565b600054610100900460ff166109c75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610675565b600061271061276b8382613471565b6127759085613452565b6125bf9190613430565b604080516003808252608082019092526000918291906020820160608036833701905050905085816000815181106127b9576127b96134e1565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106127ed576127ed6134e1565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612821576128216134e1565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009189169063d06ca61f90612860908790869060040161338a565b60006040518083038186803b15801561287857600080fd5b505afa15801561288c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128b49190810190612f26565b9050806002815181106128c9576128c96134e1565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018590526000919088169063095ea7b390604401602060405180830381600087803b15801561292c57600080fd5b505af1158015612940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129649190612fd3565b506040805160038082526080820190925260009160208201606080368337019050509050878160008151811061299c5761299c6134e1565b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106129d0576129d06134e1565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600281518110612a0457612a046134e1565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918b16906338ed173990612a49908990899087908a9042906004016133ab565b600060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a9f9190810190612f26565b905080600281518110612ab457612ab46134e1565b602002602001015192505050979650505050505050565b600061271061276b8382613418565b60606000612ae9836002613452565b612af4906002613418565b67ffffffffffffffff811115612b0c57612b0c6134f7565b6040519080825280601f01601f191660200182016040528015612b36576020820181803683370190505b509050600360fc1b81600081518110612b5157612b516134e1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b8057612b806134e1565b60200101906001600160f81b031916908160001a9053506000612ba4846002613452565b612baf906001613418565b90505b6001811115612c27576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612be357612be36134e1565b1a60f81b828281518110612bf957612bf96134e1565b60200101906001600160f81b031916908160001a90535060049490941c93612c20816134b4565b9050612bb2565b5083156125bf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610675565b612c7f8161262a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612d1e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610675565b600080846001600160a01b031684604051612d399190613129565b600060405180830381855af49150503d8060008114612d74576040519150601f19603f3d011682016040523d82523d6000602084013e612d79565b606091505b509150915061219a828260405180606001604052806027815260200161355c6027913960608315612dab5750816125bf565b825115612dbb5782518084602001fd5b8160405162461bcd60e51b81526004016106759190613203565b80356001600160a01b0381168114610f5b57600080fd5b600060208284031215612dfe57600080fd5b6125bf82612dd5565b60008060408385031215612e1a57600080fd5b612e2383612dd5565b915060208084013567ffffffffffffffff80821115612e4157600080fd5b818601915086601f830112612e5557600080fd5b813581811115612e6757612e676134f7565b612e79601f8201601f191685016133e7565b91508082528784828501011115612e8f57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215612ec057600080fd5b612ec983612dd5565b946020939093013593505050565b60008060008060808587031215612eed57600080fd5b612ef685612dd5565b935060208501359250612f0b60408601612dd5565b91506060850135612f1b8161350d565b939692955090935050565b60006020808385031215612f3957600080fd5b825167ffffffffffffffff80821115612f5157600080fd5b818501915085601f830112612f6557600080fd5b815181811115612f7757612f776134f7565b8060051b9150612f888483016133e7565b8181528481019084860184860187018a1015612fa357600080fd5b600095505b83861015612fc6578051835260019590950194918601918601612fa8565b5098975050505050505050565b600060208284031215612fe557600080fd5b81516125bf8161350d565b60006020828403121561300257600080fd5b5035919050565b60006020828403121561301b57600080fd5b5051919050565b6000806040838503121561303557600080fd5b8235915061304560208401612dd5565b90509250929050565b60006020828403121561306057600080fd5b81356001600160e01b0319811681146125bf57600080fd5b6000610100828403121561308b57600080fd5b50919050565b600080604083850312156130a457600080fd5b505080516020909101519092909150565b600081518084526020808501945080840160005b838110156130ee5781516001600160a01b0316875295820195908201906001016130c9565b509495945050505050565b600081518084526020808501945080840160005b838110156130ee5781518752958201959082019060010161310d565b6000825161313b818460208701613488565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161317d816017850160208801613488565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131ae816028840160208801613488565b01602801949350505050565b6040815260006131cd60408301856130f9565b905082151560208301529392505050565b6060815260006131f160608301866130f9565b60208301949094525060400152919050565b6020815260008251806020840152613222816040850160208701613488565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b8281526040602082015260006133a360408301846130b5565b949350505050565b85815284602082015260a0604082015260006133ca60a08301866130b5565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613410576134106134f7565b604052919050565b6000821982111561342b5761342b6134cb565b500190565b60008261344d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561346c5761346c6134cb565b500290565b600082821015613483576134836134cb565b500390565b60005b838110156134a357818101518382015260200161348b565b838111156126eb5750506000910152565b6000816134c3576134c36134cb565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461081057600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122042f7b7fed6b1895d1119ebf2675e4fc18044d533494304d396a2ca66f763c15864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2453,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 2789,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7747,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "usdtToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7750,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "nUsdLPToken",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7753,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "synToken",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7756,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "busdToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 7759,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "swap",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(ISwap)5344"
      },
      {
        "astId": 7762,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "miniChefV2",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IMiniChefV2)5176"
      },
      {
        "astId": 7765,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "pancakeRouter",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IPancakeRouter02)4921"
      },
      {
        "astId": 7767,
        "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
        "label": "pid",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2379": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMiniChefV2)5176": {
        "encoding": "inplace",
        "label": "contract IMiniChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)4921": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)5344": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/usdt/StrategySynapseUsdt.sol:StrategySynapseUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}