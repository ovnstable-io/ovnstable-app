{
  "address": "0x2070a825B8aEb4c7dca076Fb0a7a50F145b3AA77",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ddd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dm18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDepositor",
      "outputs": [
        {
          "internalType": "contract ILpDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleBusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdt",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IEllipsisPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "busd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wBnb",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ddd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "epx",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "valas",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "val3EPS",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpDepositor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pancakeRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wombatRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wombatPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleBusd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdt",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyEllipsisDotDotUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "val3EPS",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valas",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wBnb",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatRouter",
      "outputs": [
        {
          "internalType": "contract IWombatRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "38676570e92d1c6c0462f0bf4298c70e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dm18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDepositor\",\"outputs\":[{\"internalType\":\"contract ILpDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleBusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdt\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IEllipsisPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wBnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ddd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"epx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"val3EPS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wombatRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wombatPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleBusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdt\",\"type\":\"address\"}],\"internalType\":\"struct StrategyEllipsisDotDotUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"val3EPS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valas\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBnb\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatRouter\",\"outputs\":[{\"internalType\":\"contract IWombatRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/usdt/StrategyEllipsisDotDotUsdt.sol\":\"StrategyEllipsisDotDotUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n\\r\\n    function latestRound() external view returns (uint256);\\r\\n\\r\\n    function getAnswer(uint256 roundId) external view returns (int256);\\r\\n\\r\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n    // if they do not have data to report, instead of returning unset values\\r\\n    // which could be misinterpreted as actual reported values.\\r\\n    function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n    function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nlibrary ChainlinkLibrary {\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * price / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / price;\\r\\n    }\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        IPriceFeed oracle0,\\r\\n        IPriceFeed oracle1\\r\\n    ) internal view returns (uint256 amount1) {\\r\\n        uint256 price0 = getPrice(oracle0);\\r\\n        uint256 price1 = getPrice(oracle1);\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function getPrice(IPriceFeed oracle) internal view returns (uint256){\\r\\n        (uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = oracle.latestRoundData();\\r\\n        require(answeredInRound >= roundID, \\\"Old data\\\");\\r\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\r\\n        return uint256(price);\\r\\n\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * getPrice(oracle) / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / getPrice(oracle);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfacfe79aec4b4149ea003967cc78b66f8f667ea592bae768273a80a5edec9422\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/DotDot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface ILpDepositor {\\r\\n\\r\\n    function userBalances(address _user, address _token) external view returns (uint256);\\r\\n\\r\\n    function totalBalances(address _token) external view returns (uint256);\\r\\n\\r\\n    function deposit(address _user, address _token, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(address _receiver, address _token, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n        @notice Claim pending EPX and DDD rewards\\r\\n        @param _receiver Account to send claimed rewards to\\r\\n        @param _tokens List of LP tokens to claim for\\r\\n        @param _maxBondAmount Maximum amount of claimed EPX to convert to bonded dEPX.\\r\\n                              Converting to bonded dEPX earns a multiplier on DDD rewards.\\r\\n     */\\r\\n    function claim(address _receiver, address[] calldata _tokens, uint256 _maxBondAmount) external;\\r\\n\\r\\n    /**\\r\\n        @notice Claim all third-party incentives earned from `pool`\\r\\n     */\\r\\n    function claimExtraRewards(address _receiver, address pool) external;\\r\\n\\r\\n}\",\"keccak256\":\"0xf1d8136b98eb84ec96b9599b8c69ab4ee2e0f3ca304782ac60a6ddd270a3cd3d\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Ellipsis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IEllipsisPool {\\r\\n\\r\\n    function balances(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\r\\n\\r\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\\r\\n\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\r\\n\\r\\n    function wrapped_coins(uint256 arg0) external view returns (address);\\r\\n\\r\\n    function coins(uint256 arg0) external view returns (address);\\r\\n\\r\\n    function lp_token() external view returns (address);\\r\\n\\r\\n    function claim_rewards() external;\\r\\n\\r\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount, bool _use_wrapped) external returns (uint256);\\r\\n\\r\\n    function exchange_wrapped(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\\r\\n\\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external returns (uint256[3] memory);\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts, bool _use_wrapped) external returns (uint256[3] memory);\\r\\n\\r\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount) external returns (uint256[3] memory);\\r\\n\\r\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount, bool _use_wrapped) external returns (uint256[3] memory);\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount, bool _use_wrapped) external returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IAToken is IERC20 {\\r\\n\\r\\n    function getAssetPrice() external view returns (uint256);\\r\\n\\r\\n}\",\"keccak256\":\"0xd0ce12237a6cd541b70261973668109bcd4c16fd456a67aabfad98c4fe5a86e2\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/PancakeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary PancakeSwapLibrary {\\r\\n\\r\\n    function getAmountsOut(\\r\\n        IPancakeRouter02 pancakeRouter,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(\\r\\n        IPancakeRouter02 pancakeRouter,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = middleToken;\\r\\n        path[2] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        IPancakeRouter02 pancakeRouter,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        IPancakeRouter02 pancakeRouter,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\r\\n\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = middleToken;\\r\\n        path[2] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        IPancakeRouter02 pancakeRouter,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\r\\n\\r\\n        IERC20(tokenA).approve(address(pancakeRouter), amountADesired);\\r\\n        IERC20(tokenB).approve(address(pancakeRouter), amountBDesired);\\r\\n\\r\\n        return pancakeRouter.addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            amountADesired,\\r\\n            amountBDesired,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        IPancakeRouter02 pancakeRouter,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address lpToken,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB) {\\r\\n\\r\\n        IERC20(lpToken).approve(address(pancakeRouter), liquidity);\\r\\n\\r\\n        return pancakeRouter.removeLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0xa61c1ee370bec4f3fe2def2fff136abdb59e67f6e244917afd9da7306144799e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Wombat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IPool {\\r\\n    function getTokens() external view returns (address[] memory);\\r\\n\\r\\n    function addressOfAsset(address token) external view returns (address);\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 minimumLiquidity,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool shouldStake\\r\\n    ) external returns (uint256 liquidity);\\r\\n\\r\\n    function withdraw(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function withdrawFromOtherAsset(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function swap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\r\\n\\r\\n    function quotePotentialDeposit(address token, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 liquidity, uint256 reward);\\r\\n\\r\\n    function quotePotentialSwap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        int256 fromAmount\\r\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\r\\n\\r\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 amount, uint256 fee);\\r\\n\\r\\n    function quoteAmountIn(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        int256 toAmount\\r\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IAsset is IERC20 {\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function cash() external view returns (uint120);\\r\\n\\r\\n    function liability() external view returns (uint120);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function underlyingTokenDecimals() external view returns (uint8);\\r\\n\\r\\n    function setPool(address pool_) external;\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address to, uint256 amount) external;\\r\\n\\r\\n    function addCash(uint256 amount) external;\\r\\n\\r\\n    function removeCash(uint256 amount) external;\\r\\n\\r\\n    function addLiability(uint256 amount) external;\\r\\n\\r\\n    function removeLiability(uint256 amount) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IMasterWombatV2 {\\r\\n    function userInfo(uint256 _pid, address account) external view returns(uint128 amount, uint128 factor, uint128 rewardDebt, uint128 pendingWom);\\r\\n\\r\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function pendingTokens(uint256 _pid, address _user)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 pendingRewards,\\r\\n        IERC20[] memory bonusTokenAddresses,\\r\\n        string[] memory bonusTokenSymbols,\\r\\n        uint256[] memory pendingBonusRewards\\r\\n    );\\r\\n\\r\\n    function rewarderBonusTokenInfo(uint256 _pid)\\r\\n    external\\r\\n    view\\r\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\r\\n\\r\\n    function massUpdatePools() external;\\r\\n\\r\\n    function updatePool(uint256 _pid) external;\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\r\\n\\r\\n    function multiClaim(uint256[] memory _pids)\\r\\n    external\\r\\n    returns (\\r\\n        uint256 transfered,\\r\\n        uint256[] memory rewards,\\r\\n        uint256[][] memory additionalRewards\\r\\n    );\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) external;\\r\\n\\r\\n    function migrate(uint256[] calldata _pids) external;\\r\\n\\r\\n    function depositFor(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _user\\r\\n    ) external;\\r\\n\\r\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IWombatRouter {\\r\\n    function getAmountOut(\\r\\n        address[] calldata tokenPath,\\r\\n        address[] calldata poolPath,\\r\\n        int256 amountIn\\r\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\r\\n     * (accounting for fees and slippage)\\r\\n     * Note: This function should be used as estimation only. The actual swap amount might\\r\\n     * be different due to precision error (the error is typically under 1e-6)\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        address[] calldata tokenPath,\\r\\n        address[] calldata poolPath,\\r\\n        uint256 amountOut\\r\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address[] calldata tokenPath,\\r\\n        address[] calldata poolPath,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    function swapExactNativeForTokens(\\r\\n        address[] calldata tokenPath, // the first address should be WBNB\\r\\n        address[] calldata poolPath,\\r\\n        uint256 minimumamountOut,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function swapExactTokensForNative(\\r\\n        address[] calldata tokenPath, // the last address should be WBNB\\r\\n        address[] calldata poolPath,\\r\\n        uint256 amountIn,\\r\\n        uint256 minimumamountOut,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    function addLiquidityNative(\\r\\n        IPool pool,\\r\\n        uint256 minimumLiquidity,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool shouldStake\\r\\n    ) external payable returns (uint256 liquidity);\\r\\n\\r\\n    function removeLiquidityNative(\\r\\n        IPool pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function removeLiquidityFromOtherAssetAsNative(\\r\\n        IPool pool,\\r\\n        address fromToken,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n}\\r\\n\\r\\n\\r\\nlibrary WombatLibrary {\\r\\n\\r\\n    struct CalculateParams {\\r\\n        IWombatRouter wombatRouter;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address token2;\\r\\n        address pool0;\\r\\n        uint256 amount0Total;\\r\\n        uint256 totalAmountLpTokens;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 reserve2;\\r\\n        uint256 denominator0;\\r\\n        uint256 denominator1;\\r\\n        uint256 denominator2;\\r\\n        uint256 precision;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 amountIn\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory tokenPath = new address[](2);\\r\\n        tokenPath[0] = token0;\\r\\n        tokenPath[1] = token1;\\r\\n\\r\\n        address[] memory poolPath = new address[](1);\\r\\n        poolPath[0] = pool0;\\r\\n\\r\\n        (uint256 amountOut,) = wombatRouter.getAmountOut(\\r\\n            tokenPath,\\r\\n            poolPath,\\r\\n            int256(amountIn)\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(token0).approve(address(wombatRouter), fromAmount);\\r\\n\\r\\n        address[] memory tokenPath = new address[](2);\\r\\n        tokenPath[0] = token0;\\r\\n        tokenPath[1] = token1;\\r\\n\\r\\n        address[] memory poolPath = new address[](1);\\r\\n        poolPath[0] = pool0;\\r\\n\\r\\n        return wombatRouter.swapExactTokensForTokens(\\r\\n            tokenPath,\\r\\n            poolPath,\\r\\n            fromAmount,\\r\\n            minimumToAmount,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountToSwap(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1\\r\\n    ) internal view returns (uint256 amount0) {\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        uint256 amount1 = getAmountOut(wombatRouter, token0, token1, pool0, amount0);\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 amount0Total,\\r\\n        uint256 totalAmountLpTokens,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\r\\n        uint256 amount0 = getAmountOut(wombatRouter, token1, token0, pool0, amount1);\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 and token2 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountToSwap(CalculateParams memory params) internal view returns (uint256 amount1InToken0, uint256 amount2InToken0) {\\r\\n        uint256 amount01 = getAmountOut(params.wombatRouter, params.token0, params.token1, params.pool0, params.denominator0);\\r\\n        uint256 amount02 = getAmountOut(params.wombatRouter, params.token0, params.token2, params.pool0, params.denominator0);\\r\\n        amount1InToken0 = (params.amount0Total * params.reserve1) / (params.reserve0 * amount01 / params.denominator0\\r\\n                + params.reserve1 + params.reserve2 * amount01 / amount02);\\r\\n        amount2InToken0 = (params.amount0Total * params.reserve2) / (params.reserve0 * amount02 / params.denominator0\\r\\n                + params.reserve1 * amount02 / amount01 + params.reserve2);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountLpTokens(CalculateParams memory params) internal view returns (uint256 amountLpTokens) {\\r\\n        uint256 amount10 = getAmountOut(params.wombatRouter, params.token1, params.token0, params.pool0, params.denominator1);\\r\\n        uint256 amount20 = getAmountOut(params.wombatRouter, params.token2, params.token0, params.pool0, params.denominator2);\\r\\n        amountLpTokens = (params.totalAmountLpTokens * params.amount0Total) / (params.reserve0\\r\\n                + params.reserve1 * amount10 / params.denominator1 + params.reserve2 * amount20 / params.denominator2);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x408477e17cb2b44552cdd46082d3164bcf307191314f9c475cb332c2a80d0e86\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IControlRole.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n    uint256 public swapSlippageBP;\\r\\n    uint256 public navSlippageBP;\\r\\n    uint256 public stakeSlippageBP;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        swapSlippageBP = 20;\\r\\n        navSlippageBP = 20;\\r\\n        stakeSlippageBP = 4;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortfolioAgent() {\\r\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\r\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setSlippages(\\r\\n        uint256 _swapSlippageBP,\\r\\n        uint256 _navSlippageBP,\\r\\n        uint256 _stakeSlippageBP\\r\\n    ) public onlyPortfolioAgent {\\r\\n        swapSlippageBP = _swapSlippageBP;\\r\\n        navSlippageBP = _navSlippageBP;\\r\\n        stakeSlippageBP = _stakeSlippageBP;\\r\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        uint256 withdrawAmount;\\r\\n        uint256 rewardAmount;\\r\\n        if (_targetIsZero) {\\r\\n            rewardAmount = _claimRewards(_beneficiary);\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 rewardAmount = _claimRewards(_to);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xdad1bb1765b23745141b982d10052842e49f7c0e2b81077bf4a15fa09896a425\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IControlRole {\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf45e3261bc0e319aeffb0f00b6843bb6398a044dd710794a5f8088a426ca84c\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf24a033c2df4207da5f2cdcf30ae65632f0063483573ddaeb92a766f8d6556d0\",\"license\":\"GPL-3.0\"},\"contracts/usdt/StrategyEllipsisDotDotUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Ellipsis.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/DotDot.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/PancakeV2.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Wombat.sol\\\";\\r\\n\\r\\n\\r\\ncontract StrategyEllipsisDotDotUsdt is Strategy {\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address busd;\\r\\n        address usdc;\\r\\n        address usdt;\\r\\n        address wBnb;\\r\\n        address ddd;\\r\\n        address epx;\\r\\n        address valas;\\r\\n        address val3EPS;\\r\\n        address pool;\\r\\n        address lpDepositor;\\r\\n        address pancakeRouter;\\r\\n        address wombatRouter;\\r\\n        address wombatPool;\\r\\n        address oracleBusd;\\r\\n        address oracleUsdc;\\r\\n        address oracleUsdt;\\r\\n    }\\r\\n\\r\\n    // --- params\\r\\n\\r\\n    IERC20 public busd;\\r\\n    IERC20 public usdc;\\r\\n    IERC20 public usdt;\\r\\n    IERC20 public wBnb;\\r\\n    IERC20 public ddd;\\r\\n    IERC20 public epx;\\r\\n    IERC20 public valas;\\r\\n\\r\\n    IERC20 public val3EPS;\\r\\n\\r\\n    IEllipsisPool public pool;\\r\\n    ILpDepositor public lpDepositor;\\r\\n\\r\\n    IPancakeRouter02 public pancakeRouter;\\r\\n\\r\\n    IWombatRouter public wombatRouter;\\r\\n    address public wombatPool;\\r\\n\\r\\n    IPriceFeed public oracleBusd;\\r\\n    IPriceFeed public oracleUsdc;\\r\\n    IPriceFeed public oracleUsdt;\\r\\n\\r\\n    uint256 public dm18;\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n    // --- Setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        busd = IERC20(params.busd);\\r\\n        usdc = IERC20(params.usdc);\\r\\n        usdt = IERC20(params.usdt);\\r\\n        wBnb = IERC20(params.wBnb);\\r\\n        ddd = IERC20(params.ddd);\\r\\n        epx = IERC20(params.epx);\\r\\n        valas = IERC20(params.valas);\\r\\n\\r\\n        val3EPS = IERC20(params.val3EPS);\\r\\n\\r\\n        pool = IEllipsisPool(params.pool);\\r\\n        lpDepositor = ILpDepositor(params.lpDepositor);\\r\\n\\r\\n        pancakeRouter = IPancakeRouter02(params.pancakeRouter);\\r\\n\\r\\n        wombatRouter = IWombatRouter(params.wombatRouter);\\r\\n        wombatPool = params.wombatPool;\\r\\n\\r\\n        oracleBusd = IPriceFeed(params.oracleBusd);\\r\\n        oracleUsdc = IPriceFeed(params.oracleUsdc);\\r\\n        oracleUsdt = IPriceFeed(params.oracleUsdt);\\r\\n\\r\\n        dm18 = 1e18;\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n\\r\\n        require(_asset == address(usdt), \\\"Some token not compatible\\\");\\r\\n\\r\\n        // calculate amount to stake\\r\\n        WombatLibrary.CalculateParams memory params;\\r\\n        params.wombatRouter = wombatRouter;\\r\\n        params.token0 = address(usdt);\\r\\n        params.token1 = address(busd);\\r\\n        params.token2 = address(usdc);\\r\\n        params.pool0 = wombatPool;\\r\\n        params.amount0Total = usdt.balanceOf(address(this));\\r\\n        params.totalAmountLpTokens = 0;\\r\\n        params.reserve0 = pool.balances(2);\\r\\n        params.reserve1 = pool.balances(0);\\r\\n        params.reserve2 = pool.balances(1);\\r\\n        params.denominator0 = dm18;\\r\\n        params.denominator1 = dm18;\\r\\n        params.denominator2 = dm18;\\r\\n        params.precision = 0;\\r\\n        (uint256 amountBusdToSwap, uint256 amountUsdcToSwap) = WombatLibrary.getAmountToSwap(params);\\r\\n\\r\\n        // swap\\r\\n        _swapInWombat(address(usdt), address(busd), oracleUsdt, oracleBusd, amountBusdToSwap);\\r\\n        _swapInWombat(address(usdt), address(usdc), oracleUsdt, oracleUsdc, amountUsdcToSwap);\\r\\n\\r\\n        // calculate min amount to mint\\r\\n        uint256[3] memory amounts;\\r\\n        amounts[0] = busd.balanceOf(address(this));\\r\\n        amounts[1] = usdc.balanceOf(address(this));\\r\\n        amounts[2] = usdt.balanceOf(address(this));\\r\\n        // sub 4 bp to calculate min amount\\r\\n        uint256 minToMint = OvnMath.subBasisPoints(pool.calc_token_amount(amounts, true), stakeSlippageBP);\\r\\n\\r\\n        // add liquidity\\r\\n        busd.approve(address(pool), amounts[0]);\\r\\n        usdc.approve(address(pool), amounts[1]);\\r\\n        usdt.approve(address(pool), amounts[2]);\\r\\n        uint256 val3EPSBalance = pool.add_liquidity(amounts, minToMint);\\r\\n\\r\\n        // stake\\r\\n        val3EPS.approve(address(lpDepositor), val3EPSBalance);\\r\\n        lpDepositor.deposit(address(this), address(val3EPS), val3EPSBalance);\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        require(_asset == address(usdt), \\\"Some token not compatible\\\");\\r\\n\\r\\n        // calculate amount to unstake\\r\\n        uint256 totalAmountLpTokens = val3EPS.totalSupply();\\r\\n        uint256 reserve0 = pool.balances(0);\\r\\n        uint256 reserve1 = pool.balances(1);\\r\\n        uint256 reserve2 = pool.balances(2);\\r\\n\\r\\n        WombatLibrary.CalculateParams memory params;\\r\\n        params.wombatRouter = wombatRouter;\\r\\n        params.token0 = address(usdt);\\r\\n        params.token1 = address(busd);\\r\\n        params.token2 = address(usdc);\\r\\n        params.pool0 = wombatPool;\\r\\n        params.amount0Total = OvnMath.addBasisPoints(_amount, stakeSlippageBP) + 10;\\r\\n        params.totalAmountLpTokens = totalAmountLpTokens;\\r\\n        params.reserve0 = reserve2;\\r\\n        params.reserve1 = reserve0;\\r\\n        params.reserve2 = reserve1;\\r\\n        params.denominator0 = dm18;\\r\\n        params.denominator1 = dm18;\\r\\n        params.denominator2 = dm18;\\r\\n        params.precision = 0;\\r\\n\\r\\n        uint256 val3EPSAmount = WombatLibrary.getAmountLpTokens(params);\\r\\n        uint256 val3EPSBalance = lpDepositor.userBalances(address(this), address(val3EPS));\\r\\n        if (val3EPSAmount > val3EPSBalance) {\\r\\n            val3EPSAmount = val3EPSBalance;\\r\\n        }\\r\\n\\r\\n        // unstake\\r\\n        lpDepositor.withdraw(address(this), address(val3EPS), val3EPSAmount);\\r\\n\\r\\n        // calculate min amount to burn\\r\\n        uint256[3] memory minAmounts;\\r\\n        minAmounts[0] = OvnMath.subBasisPoints(reserve0 * val3EPSAmount / totalAmountLpTokens, stakeSlippageBP);\\r\\n        minAmounts[1] = OvnMath.subBasisPoints(reserve1 * val3EPSAmount / totalAmountLpTokens, stakeSlippageBP);\\r\\n        minAmounts[2] = OvnMath.subBasisPoints(reserve2 * val3EPSAmount / totalAmountLpTokens, stakeSlippageBP);\\r\\n\\r\\n        // remove liquidity\\r\\n        val3EPS.approve(address(pool), val3EPSAmount);\\r\\n        pool.remove_liquidity(val3EPSAmount, minAmounts);\\r\\n\\r\\n        // swap\\r\\n        _swapInWombat(address(busd), address(usdt), oracleBusd, oracleUsdt, busd.balanceOf(address(this)));\\r\\n        _swapInWombat(address(usdc), address(usdt), oracleUsdc, oracleUsdt, usdc.balanceOf(address(this)));\\r\\n\\r\\n        return usdt.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        require(_asset == address(usdt), \\\"Some token not compatible\\\");\\r\\n\\r\\n        // calculate amount to unstake\\r\\n        uint256 val3EPSBalance = lpDepositor.userBalances(address(this), address(val3EPS));\\r\\n\\r\\n        // unstake\\r\\n        lpDepositor.withdraw(address(this), address(val3EPS), val3EPSBalance);\\r\\n\\r\\n        // calculate min amount to burn\\r\\n        uint256 totalAmountLpTokens = val3EPS.totalSupply();\\r\\n        uint256[3] memory minAmounts;\\r\\n        minAmounts[0] = OvnMath.subBasisPoints(pool.balances(0) * val3EPSBalance / totalAmountLpTokens, stakeSlippageBP);\\r\\n        minAmounts[1] = OvnMath.subBasisPoints(pool.balances(1) * val3EPSBalance / totalAmountLpTokens, stakeSlippageBP);\\r\\n        minAmounts[2] = OvnMath.subBasisPoints(pool.balances(2) * val3EPSBalance / totalAmountLpTokens, stakeSlippageBP);\\r\\n\\r\\n        // remove liquidity\\r\\n        val3EPS.approve(address(pool), val3EPSBalance);\\r\\n        pool.remove_liquidity(val3EPSBalance, minAmounts);\\r\\n\\r\\n        // swap\\r\\n        _swapInWombat(address(busd), address(usdt), oracleBusd, oracleUsdt, busd.balanceOf(address(this)));\\r\\n        _swapInWombat(address(usdc), address(usdt), oracleUsdc, oracleUsdt, usdc.balanceOf(address(this)));\\r\\n\\r\\n        return usdt.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue(true);\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue(false);\\r\\n    }\\r\\n\\r\\n    function _totalValue(bool nav) internal view returns (uint256) {\\r\\n        uint256 busdBalance = busd.balanceOf(address(this));\\r\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n\\r\\n        uint256 val3EPSBalance = lpDepositor.userBalances(address(this), address(val3EPS));\\r\\n        if (val3EPSBalance > 0) {\\r\\n            uint256 totalSupply = val3EPS.totalSupply();\\r\\n            for (uint256 i = 0; i < 3; i++) {\\r\\n                uint256 coinBalance = val3EPSBalance * pool.balances(i) / totalSupply;\\r\\n                if (address(busd) == pool.coins(i)) {\\r\\n                    busdBalance += coinBalance;\\r\\n                } else if (address(usdc) == pool.coins(i)) {\\r\\n                    usdcBalance += coinBalance;\\r\\n                } else if (address(usdt) == pool.coins(i)) {\\r\\n                    usdtBalance += coinBalance;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (nav) {\\r\\n            if (busdBalance > 0) {\\r\\n                usdtBalance += ChainlinkLibrary.convertTokenToToken(\\r\\n                    busdBalance,\\r\\n                    dm18,\\r\\n                    dm18,\\r\\n                    oracleBusd,\\r\\n                    oracleUsdt\\r\\n                );\\r\\n            }\\r\\n            if (usdcBalance > 0) {\\r\\n                usdtBalance += ChainlinkLibrary.convertTokenToToken(\\r\\n                    usdcBalance,\\r\\n                    dm18,\\r\\n                    dm18,\\r\\n                    oracleUsdc,\\r\\n                    oracleUsdt\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            if (busdBalance > 0) {\\r\\n                usdtBalance += WombatLibrary.getAmountOut(\\r\\n                    wombatRouter,\\r\\n                    address(busd),\\r\\n                    address(usdt),\\r\\n                    address(wombatPool),\\r\\n                    busdBalance\\r\\n                );\\r\\n            }\\r\\n            if (usdcBalance > 0) {\\r\\n                usdtBalance += WombatLibrary.getAmountOut(\\r\\n                    wombatRouter,\\r\\n                    address(usdc),\\r\\n                    address(usdt),\\r\\n                    address(wombatPool),\\r\\n                    usdcBalance\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdtBalance;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        // claim rewards\\r\\n        uint256 val3EPSBalance = lpDepositor.userBalances(address(this), address(val3EPS));\\r\\n        if (val3EPSBalance > 0) {\\r\\n            address[] memory tokens = new address[](1);\\r\\n            tokens[0] = address(val3EPS);\\r\\n            lpDepositor.claim(address(this), tokens, 0);\\r\\n            lpDepositor.claimExtraRewards(address(this), address(val3EPS));\\r\\n        }\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 totalUsdt = _swapInPancakeSwap(address(ddd), address(wBnb), address(usdt));\\r\\n        totalUsdt += _swapInPancakeSwap(address(epx), address(wBnb), address(usdt));\\r\\n        totalUsdt += _swapInPancakeSwap(address(valas), address(wBnb), address(usdt));\\r\\n\\r\\n        if (totalUsdt > 0) {\\r\\n            usdt.transfer(_to, totalUsdt);\\r\\n        }\\r\\n\\r\\n        return totalUsdt;\\r\\n    }\\r\\n\\r\\n    function _swapInWombat(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        IPriceFeed oracleToken0,\\r\\n        IPriceFeed oracleToken1,\\r\\n        uint256 amountToken0ToSwap\\r\\n    ) internal {\\r\\n        uint256 token1BalanceOracle = ChainlinkLibrary.convertTokenToToken(\\r\\n            amountToken0ToSwap,\\r\\n            dm18,\\r\\n            dm18,\\r\\n            oracleToken0,\\r\\n            oracleToken1\\r\\n        );\\r\\n        WombatLibrary.swapExactTokensForTokens(\\r\\n            wombatRouter,\\r\\n            token0,\\r\\n            token1,\\r\\n            address(wombatPool),\\r\\n            amountToken0ToSwap,\\r\\n            OvnMath.subBasisPoints(token1BalanceOracle, swapSlippageBP),\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapInPancakeSwap(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address token2\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 token0Balance = IERC20(token0).balanceOf(address(this));\\r\\n        if (token0Balance > 0) {\\r\\n            uint256 token2AmountOut = PancakeSwapLibrary.getAmountsOut(\\r\\n                pancakeRouter,\\r\\n                token0,\\r\\n                token1,\\r\\n                token2,\\r\\n                token0Balance\\r\\n            );\\r\\n            if (token2AmountOut > 0) {\\r\\n                return PancakeSwapLibrary.swapExactTokensForTokens(\\r\\n                    pancakeRouter,\\r\\n                    token0,\\r\\n                    token1,\\r\\n                    token2,\\r\\n                    token0Balance,\\r\\n                    token2AmountOut * 99 / 100,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x92ebba83b7acb64b83a38edb39d8f7e5b733d851e51df51cfa0de534786b61de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620017e01760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6153bf6200018e60003960008181610c4301528181610c8301528181610d2301528181610d630152610df201526153bf6000f3fe6080604052600436106102515760003560e01c80635fea9cbb11610139578063a3673b38116100b6578063bf52e0801161007a578063bf52e080146106e6578063c21ebd07146106fc578063cc6522c31461071d578063d547741f1461073e578063ef5cfb8c1461075e578063f6f6b8811461077e57600080fd5b8063a3673b3814610650578063a440b21a14610665578063a66b571314610685578063adc9772e146106a6578063ae30c110146106c657600080fd5b80638129fc1c116100fd5780638129fc1c146105c457806390ffb8ee146105d957806391d14854146105fa57806397613ac71461061a578063a217fddf1461063b57600080fd5b80635fea9cbb1461051f578063612c87df14610540578063620b75df1461056157806378ab9c34146105815780637d5f5802146105a257600080fd5b80632f48ab7d116101d25780634f1ef286116101965780634f1ef2861461046b57806352d1902d1461047e5780635539143214610493578063573b90c1146104b45780635ca558f8146104d55780635dbd733a146104eb57600080fd5b80632f48ab7d146103c857806336568abe146103e95780633659cfe6146104095780633ca5b234146104295780633e413bee1461044a57600080fd5b806316f0115b1161021957806316f0115b1461032b578063248a9ca31461034c5780632576e65a1461037c5780632ad122dc146103915780632f2ff15d146103a857600080fd5b8063012ee9281461025657806301ffc9a71461029457806302f283be146102c4578063046cfa11146102e5578063119cd87914610307575b600080fd5b34801561026257600080fd5b5061013954610277906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a057600080fd5b506102b46102af366004614cc1565b61079e565b604051901515815260200161028b565b3480156102d057600080fd5b5061013654610277906001600160a01b031681565b3480156102f157600080fd5b50610305610300366004614ceb565b6107d5565b005b34801561031357600080fd5b5061031d60fd5481565b60405190815260200161028b565b34801561033757600080fd5b5061013554610277906001600160a01b031681565b34801561035857600080fd5b5061031d610367366004614c5f565b60009081526065602052604090206001015490565b34801561038857600080fd5b5061031d610b7f565b34801561039d57600080fd5b5061031d61013d5481565b3480156103b457600080fd5b506103056103c3366004614c91565b610b90565b3480156103d457600080fd5b5061012f54610277906001600160a01b031681565b3480156103f557600080fd5b50610305610404366004614c91565b610bba565b34801561041557600080fd5b50610305610424366004614a26565b610c38565b34801561043557600080fd5b5061012d54610277906001600160a01b031681565b34801561045657600080fd5b5061012e54610277906001600160a01b031681565b610305610479366004614a60565b610d18565b34801561048a57600080fd5b5061031d610de5565b34801561049f57600080fd5b5061013254610277906001600160a01b031681565b3480156104c057600080fd5b5061013354610277906001600160a01b031681565b3480156104e157600080fd5b5061031d60fe5481565b3480156104f757600080fd5b5061031d7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561052b57600080fd5b5061013b54610277906001600160a01b031681565b34801561054c57600080fd5b5061013854610277906001600160a01b031681565b34801561056d57600080fd5b5060fb54610277906001600160a01b031681565b34801561058d57600080fd5b5061013154610277906001600160a01b031681565b3480156105ae57600080fd5b5061031d60008051602061532383398151915281565b3480156105d057600080fd5b50610305610e98565b3480156105e557600080fd5b5061013454610277906001600160a01b031681565b34801561060657600080fd5b506102b4610615366004614c91565b610f62565b34801561062657600080fd5b5061013054610277906001600160a01b031681565b34801561064757600080fd5b5061031d600081565b34801561065c57600080fd5b5061031d610f8d565b34801561067157600080fd5b50610305610680366004614a26565b610f99565b34801561069157600080fd5b5061013a54610277906001600160a01b031681565b3480156106b257600080fd5b506103056106c1366004614b08565b6110c8565b3480156106d257600080fd5b506103056106e1366004614d4b565b6112f8565b3480156106f257600080fd5b5061031d60fc5481565b34801561070857600080fd5b5061013754610277906001600160a01b031681565b34801561072957600080fd5b5061013c54610277906001600160a01b031681565b34801561074a57600080fd5b50610305610759366004614c91565b61146d565b34801561076a57600080fd5b5061031d610779366004614a26565b611492565b34801561078a57600080fd5b5061031d610799366004614b34565b611517565b60006001600160e01b03198216637965db0b60e01b14806107cf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107e0600033610f62565b6108285760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064015b60405180910390fd5b6108356020820182614a26565b61012d80546001600160a01b0319166001600160a01b03929092169190911790556108666040820160208301614a26565b61012e80546001600160a01b0319166001600160a01b03929092169190911790556108976060820160408301614a26565b61012f80546001600160a01b0319166001600160a01b03929092169190911790556108c86080820160608301614a26565b61013080546001600160a01b0319166001600160a01b03929092169190911790556108f960a0820160808301614a26565b61013180546001600160a01b0319166001600160a01b039290921691909117905561092a60c0820160a08301614a26565b61013280546001600160a01b0319166001600160a01b039290921691909117905561095b60e0820160c08301614a26565b61013380546001600160a01b0319166001600160a01b039290921691909117905561098d610100820160e08301614a26565b61013480546001600160a01b0319166001600160a01b03929092169190911790556109c061012082016101008301614a26565b61013580546001600160a01b0319166001600160a01b03929092169190911790556109f361014082016101208301614a26565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610a2661016082016101408301614a26565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610a5961018082016101608301614a26565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610a8c6101a082016101808301614a26565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610abf6101c082016101a08301614a26565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610af26101e082016101c08301614a26565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055610b2561020082016101e08301614a26565b61013c80546001600160a01b0319166001600160a01b0392909216919091179055670de0b6b3a764000061013d556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b6000610b8b60006117ef565b905090565b600082815260656020526040902060010154610bab81611e37565b610bb58383611e41565b505050565b6001600160a01b0381163314610c2a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161081f565b610c348282611ec7565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c815760405162461bcd60e51b815260040161081f90615038565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cca600080516020615343833981519152546001600160a01b031690565b6001600160a01b031614610cf05760405162461bcd60e51b815260040161081f90615084565b610cf981611f2e565b60408051600080825260208201909252610d1591839190611f39565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d615760405162461bcd60e51b815260040161081f90615038565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610daa600080516020615343833981519152546001600160a01b031690565b6001600160a01b031614610dd05760405162461bcd60e51b815260040161081f90615084565b610dd982611f2e565b610c3482826001611f39565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e855760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161081f565b5060008051602061534383398151915290565b600054610100900460ff1615808015610eb85750600054600160ff909116105b80610ed25750303b158015610ed2575060005460ff166001145b610eee5760405162461bcd60e51b815260040161081f906150d0565b6000805460ff191660011790558015610f11576000805461ff0019166101001790555b610f196120b3565b8015610d15576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610b8b60016117ef565b610fa4600033610f62565b610fe75760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161081f565b6001600160a01b03811661103d5760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161081f565b60fb5461106290600080516020615323833981519152906001600160a01b031661146d565b61107a60008051602061532383398151915282610b90565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610f57565b6110e060008051602061532383398151915233610f62565b6110fc5760405162461bcd60e51b815260040161081f90615001565b600061117a306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190614c78565b60fd54612198565b6040516370a0823160e01b81523060048201529091506111ff9084906001600160a01b038216906370a082319060240160206040518083038186803b1580156111c257600080fd5b505afa1580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190614c78565b6121c2565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561123957600080fd5b505afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190614c78565b10156112bf5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161081f565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6113227fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f62565b806113c9575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561139157600080fd5b505afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190614c42565b6114205760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b606482015260840161081f565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a906060016112eb565b60008281526065602052604090206001015461148881611e37565b610bb58383611ec7565b60006114ac60008051602061532383398151915233610f62565b6114c85760405162461bcd60e51b815260040161081f90615001565b60006114d383612a20565b9050801561150f576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061153160008051602061532383398151915233610f62565b61154d5760405162461bcd60e51b815260040161081f90615001565b600061158b306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561113a57600080fd5b905060008084156115b25761159f86612a20565b90506115ab8887612cfa565b9150611621565b6115bd888888613251565b9150868210156116215760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161081f565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561165b57600080fd5b505afa15801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190614c78565b10156116e15760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161081f565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb9061170f9089908690600401614ef3565b602060405180830381600087803b15801561172957600080fd5b505af115801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190614c42565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a180156117d5576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561183857600080fd5b505afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190614c78565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156118ba57600080fd5b505afa1580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190614c78565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119749190614c78565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b03918216602482015292935060009291169063adb519809060440160206040518083038186803b1580156119c957600080fd5b505afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190614c78565b90508015611d2d5761013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611a4f57600080fd5b505afa158015611a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a879190614c78565b905060005b6003811015611d2a5761013554604051634903b0d160e01b81526004810183905260009184916001600160a01b0390911690634903b0d19060240160206040518083038186803b158015611adf57600080fd5b505afa158015611af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b179190614c78565b611b219086615229565b611b2b9190615207565b6101355460405163c661065760e01b8152600481018590529192506001600160a01b03169063c66106579060240160206040518083038186803b158015611b7157600080fd5b505afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190614a43565b61012d546001600160a01b0390811691161415611bd157611bca81886151ef565b9650611d17565b6101355460405163c661065760e01b8152600481018490526001600160a01b039091169063c66106579060240160206040518083038186803b158015611c1657600080fd5b505afa158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e9190614a43565b61012e546001600160a01b0390811691161415611c7657611c6f81876151ef565b9550611d17565b6101355460405163c661065760e01b8152600481018490526001600160a01b039091169063c66106579060240160206040518083038186803b158015611cbb57600080fd5b505afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf39190614a43565b61012f546001600160a01b0390811691161415611d1757611d1481866151ef565b94505b5080611d22816152a2565b915050611a8c565b50505b8515611dae578315611d6e5761013d5461013a5461013c54611d61928792909182916001600160a01b0390811691166138b6565b611d6b90836151ef565b91505b8215611da95761013d5461013b5461013c54611d9c928692909182916001600160a01b0390811691166138b6565b611da690836151ef565b91505b611e2e565b8315611dee576101385461012d5461012f5461013954611de1936001600160a01b03908116938116928116911688613906565b611deb90836151ef565b91505b8215611e2e576101385461012e5461012f5461013954611e21936001600160a01b03908116938116928116911687613906565b611e2b90836151ef565b91505b50949350505050565b610d158133613a67565b611e4b8282610f62565b610c345760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611e833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ed18282610f62565b15610c345760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c3481611e37565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f6c57610bb583613ac0565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa557600080fd5b505afa925050508015611fd5575060408051601f3d908101601f19168201909252611fd291810190614c78565b60015b6120385760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161081f565b60008051602061534383398151915281146120a75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161081f565b50610bb5838383613b5c565b600054610100900460ff16158080156120d35750600054600160ff909116105b806120ed5750303b1580156120ed575060005460ff166001145b6121095760405162461bcd60e51b815260040161081f906150d0565b6000805460ff19166001179055801561212c576000805461ff0019166101001790555b612134613b87565b61213c613b87565b612147600033611e41565b601460fc81905560fd55600460fe558015610d15576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f57565b60006127106121a78382615248565b6121b19085615229565b6121bb9190615207565b9392505050565b61012f546001600160a01b038381169116146121f05760405162461bcd60e51b815260040161081f9061511e565b6121f86148cc565b610138546001600160a01b03908116825261012f5481166020830181905261012d54821660408085019190915261012e548316606085015261013954909216608084015290516370a0823160e01b81523060048201526370a082319060240160206040518083038186803b15801561226f57600080fd5b505afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190614c78565b60a0820152600060c082015261013554604051634903b0d160e01b8152600260048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190614c78565b60e082015261013554604051634903b0d160e01b8152600060048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561237a57600080fd5b505afa15801561238e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b29190614c78565b61010082015261013554604051634903b0d160e01b8152600160048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b1580156123fd57600080fd5b505afa158015612411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124359190614c78565b61012082015261013d546101408201819052610160820181905261018082015260006101a082018190528061246983613bf4565b61012f5461012d5461013c5461013a5494965092945061249e936001600160a01b039283169391831692918216911686613d38565b61012f5461012e5461013c5461013b546124cb936001600160a01b03908116938116928116911685613d38565b6124d3614968565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561251757600080fd5b505afa15801561252b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254f9190614c78565b815261012e546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561259557600080fd5b505afa1580156125a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cd9190614c78565b602082015261012f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561261657600080fd5b505afa15801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190614c78565b816002602002015261013554604051633883e11960e01b81526000916126e9916001600160a01b0390911690633883e11990612691908690600190600401614f96565b60206040518083038186803b1580156126a957600080fd5b505afa1580156126bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e19190614c78565b60fe54612198565b61012d5461013554845160405163095ea7b360e01b81529394506001600160a01b039283169363095ea7b39361272493169190600401614ef3565b602060405180830381600087803b15801561273e57600080fd5b505af1158015612752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127769190614c42565b5061012e5461013554602084015160405163095ea7b360e01b81526001600160a01b039384169363095ea7b3936127b293911691600401614ef3565b602060405180830381600087803b1580156127cc57600080fd5b505af11580156127e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128049190614c42565b5061012f5461013554604080850151905163095ea7b360e01b81526001600160a01b039384169363095ea7b39361284093911691600401614ef3565b602060405180830381600087803b15801561285a57600080fd5b505af115801561286e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128929190614c42565b5061013554604051634515cef360e01b81526000916001600160a01b031690634515cef3906128c79086908690600401614fb3565b602060405180830381600087803b1580156128e157600080fd5b505af11580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190614c78565b610134546101365460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926129539216908590600401614ef3565b602060405180830381600087803b15801561296d57600080fd5b505af1158015612981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a59190614c42565b506101365461013454604051638340f54960e01b81523060048201526001600160a01b03918216602482015260448101849052911690638340f54990606401600060405180830381600087803b1580156129fe57600080fd5b505af1158015612a12573d6000803e3d6000fd5b505050505050505050505050565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b0391821660248201526000928392169063adb519809060440160206040518083038186803b158015612a7357600080fd5b505afa158015612a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aab9190614c78565b90508015612bd6576040805160018082528183019092526000916020808301908036833750506101345482519293506001600160a01b031691839150600090612af657612af66152d3565b6001600160a01b03928316602091820292909201015261013654604051633601ae0560e01b8152911690633601ae0590612b399030908590600090600401614ebf565b600060405180830381600087803b158015612b5357600080fd5b505af1158015612b67573d6000803e3d6000fd5b5050610136546101345460405163d12914ff60e01b81523060048201526001600160a01b0391821660248201529116925063d12914ff9150604401600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b50505050505b610131546101305461012f54600092612bff926001600160a01b03918216929082169116613d8e565b610132546101305461012f54929350612c28926001600160a01b03928316929182169116613d8e565b612c3290826151ef565b610133546101305461012f54929350612c5b926001600160a01b03928316929182169116613d8e565b612c6590826151ef565b905080156121bb5761012f5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612ca09087908590600401614ef3565b602060405180830381600087803b158015612cba57600080fd5b505af1158015612cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf29190614c42565b509392505050565b61012f546000906001600160a01b03848116911614612d2b5760405162461bcd60e51b815260040161081f9061511e565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b039182166024820152600092919091169063adb519809060440160206040518083038186803b158015612d7f57600080fd5b505afa158015612d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db79190614c78565b6101365461013454604051636ce5768960e11b81523060048201526001600160a01b03918216602482015260448101849052929350169063d9caed1290606401600060405180830381600087803b158015612e1157600080fd5b505af1158015612e25573d6000803e3d6000fd5b50505050600061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb29190614c78565b9050612ebc614968565b61013554604051634903b0d160e01b815260006004820152612f5491849186916001600160a01b031690634903b0d1906024015b60206040518083038186803b158015612f0857600080fd5b505afa158015612f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f409190614c78565b612f4a9190615229565b6126e19190615207565b815261013554604051634903b0d160e01b815260016004820152612f8e91849186916001600160a01b031690634903b0d190602401612ef0565b602082015261013554604051634903b0d160e01b815260026004820152612fcb91849186916001600160a01b031690634903b0d190602401612ef0565b8160026020020152610134546101355460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261300b929116908790600401614ef3565b602060405180830381600087803b15801561302557600080fd5b505af1158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d9190614c42565b506101355460405163ecb586a560e01b81526001600160a01b039091169063ecb586a590613091908690859060040161516e565b606060405180830381600087803b1580156130ab57600080fd5b505af11580156130bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e39190614b87565b5061012d5461012f5461013a5461013c546040516370a0823160e01b8152306004820152613180946001600160a01b0390811694811693811692169084906370a08231906024015b60206040518083038186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190614c78565b613d38565b61012e5461012f5461013b5461013c546040516370a0823160e01b81523060048201526131cb946001600160a01b0390811694811693811692169084906370a082319060240161312b565b61012f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561320f57600080fd5b505afa158015613223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132479190614c78565b9695505050505050565b61012f546000906001600160a01b038581169116146132825760405162461bcd60e51b815260040161081f9061511e565b61013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156132c857600080fd5b505afa1580156132dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133009190614c78565b61013554604051634903b0d160e01b81526000600482018190529293506001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561334a57600080fd5b505afa15801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190614c78565b61013554604051634903b0d160e01b8152600160048201529192506000916001600160a01b0390911690634903b0d19060240160206040518083038186803b1580156133cd57600080fd5b505afa1580156133e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134059190614c78565b61013554604051634903b0d160e01b8152600260048201529192506000916001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561345057600080fd5b505afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134889190614c78565b90506134926148cc565b610138546001600160a01b03908116825261012f548116602083015261012d548116604083015261012e54811660608301526101395416608082015260fe546134dc908990613e7f565b6134e790600a6151ef565b60a082015260c0810185905260e081018290526101008101849052610120810183905261013d546101408201819052610160820181905261018082015260006101a0820181905261353782613e8e565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b03918216602482015292935060009291169063adb519809060440160206040518083038186803b15801561358c57600080fd5b505afa1580156135a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c49190614c78565b9050808211156135d2578091505b6101365461013454604051636ce5768960e11b81523060048201526001600160a01b0391821660248201526044810185905291169063d9caed1290606401600060405180830381600087803b15801561362a57600080fd5b505af115801561363e573d6000803e3d6000fd5b5050505061364a614968565b61365888612f4a858a615229565b815261366888612f4a8589615229565b602082015261367b88612f4a8588615229565b8160026020020152610134546101355460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926136bb929116908790600401614ef3565b602060405180830381600087803b1580156136d557600080fd5b505af11580156136e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370d9190614c42565b506101355460405163ecb586a560e01b81526001600160a01b039091169063ecb586a590613741908690859060040161516e565b606060405180830381600087803b15801561375b57600080fd5b505af115801561376f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137939190614b87565b5061012d5461012f5461013a5461013c546040516370a0823160e01b81523060048201526137df946001600160a01b0390811694811693811692169084906370a082319060240161312b565b61012e5461012f5461013b5461013c546040516370a0823160e01b815230600482015261382a946001600160a01b0390811694811693811692169084906370a082319060240161312b565b61012f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561386e57600080fd5b505afa158015613882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a69190614c78565b9c9b505050505050505050505050565b6000806138c284613f5c565b905060006138cf84613f5c565b90506138db8188615229565b826138e6888b615229565b6138f09190615229565b6138fa9190615207565b98975050505050505050565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061393f5761393f6152d3565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110613973576139736152d3565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084816000815181106139c4576139c46152d3565b6001600160a01b03928316602091820292909201015260405163b9e598c160e01b81526000918a169063b9e598c190613a0590869086908a90600401614f0c565b60006040518083038186803b158015613a1d57600080fd5b505afa158015613a31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a599190810190614d04565b509998505050505050505050565b613a718282610f62565b610c3457613a7e81614080565b613a89836020614092565b604051602001613a9a929190614e4a565b60408051601f198184030181529082905262461bcd60e51b825261081f91600401614fce565b6001600160a01b0381163b613b2d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161081f565b60008051602061534383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613b658361422e565b600082511180613b725750805b15610bb557613b81838361426e565b50505050565b600054610100900460ff16613bf25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161081f565b565b6000806000613c1b8460000151856020015186604001518760800151886101400151613906565b90506000613c418560000151866020015187606001518860800151896101400151613906565b90508082866101200151613c559190615229565b613c5f9190615207565b856101000151866101400151848860e00151613c7b9190615229565b613c859190615207565b613c8f91906151ef565b613c9991906151ef565b8561010001518660a00151613cae9190615229565b613cb89190615207565b93508461012001518282876101000151613cd29190615229565b613cdc9190615207565b866101400151838860e00151613cf29190615229565b613cfc9190615207565b613d0691906151ef565b613d1091906151ef565b8561012001518660a00151613d259190615229565b613d2f9190615207565b92505050915091565b6000613d4d8261013d5461013d5487876138b6565b610138546101395460fc54929350613d85926001600160a01b03928316928a928a929116908790613d7f908890612198565b30614362565b50505050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b158015613dd257600080fd5b505afa158015613de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0a9190614c78565b90508015613e745761013754600090613e2f906001600160a01b031687878786614545565b90508015613e725761013754613e69906001600160a01b0316878787866064613e59886063615229565b613e639190615207565b306146a4565b925050506121bb565b505b506000949350505050565b60006127106121a783826151ef565b600080613eb38360000151846040015185602001518660800151876101600151613906565b90506000613ed98460000151856060015186602001518760800151886101800151613906565b905083610180015181856101200151613ef29190615229565b613efc9190615207565b84610160015183866101000151613f139190615229565b613f1d9190615207565b8560e00151613f2c91906151ef565b613f3691906151ef565b8460a001518560c00151613f4a9190615229565b613f549190615207565b949350505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015613f9d57600080fd5b505afa158015613fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fd59190614d77565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff1610156140315760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b604482015260640161081f565b600082116140765760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b604482015260640161081f565b5090949350505050565b60606107cf6001600160a01b03831660145b606060006140a1836002615229565b6140ac9060026151ef565b67ffffffffffffffff8111156140c4576140c46152e9565b6040519080825280601f01601f1916602001820160405280156140ee576020820181803683370190505b509050600360fc1b81600081518110614109576141096152d3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614138576141386152d3565b60200101906001600160f81b031916908160001a905350600061415c846002615229565b6141679060016151ef565b90505b60018111156141df576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061419b5761419b6152d3565b1a60f81b8282815181106141b1576141b16152d3565b60200101906001600160f81b031916908160001a90535060049490941c936141d88161528b565b905061416a565b5083156121bb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161081f565b61423781613ac0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6142d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161081f565b600080846001600160a01b0316846040516142f19190614e2e565b600060405180830381855af49150503d806000811461432c576040519150601f19603f3d011682016040523d82523d6000602084013e614331565b606091505b509150915061435982826040518060600160405280602781526020016153636027913961488e565b95945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b390614393908b908890600401614ef3565b602060405180830381600087803b1580156143ad57600080fd5b505af11580156143c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e59190614c42565b50604080516002808252606082018352600092602083019080368337019050509050878160008151811061441b5761441b6152d3565b60200260200101906001600160a01b031690816001600160a01b031681525050868160018151811061444f5761444f6152d3565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905086816000815181106144a0576144a06152d3565b6001600160a01b03928316602091820292909201015260405163351041e960e21b8152908b169063d44107a4906144e590859085908b908b908b904290600401614f42565b602060405180830381600087803b1580156144ff57600080fd5b505af1158015614513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145379190614c78565b9a9950505050505050505050565b6040805160038082526080820190925260009182919060208201606080368337019050509050858160008151811061457f5761457f6152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106145b3576145b36152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505083816002815181106145e7576145e76152d3565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009189169063d06ca61f906146269087908690600401615155565b60006040518083038186803b15801561463e57600080fd5b505afa158015614652573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261467a9190810190614c0d565b90508060028151811061468f5761468f6152d3565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b3906146d5908b908890600401614ef3565b602060405180830381600087803b1580156146ef57600080fd5b505af1158015614703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147279190614c42565b506040805160038082526080820190925260009160208201606080368337019050509050878160008151811061475f5761475f6152d3565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600181518110614793576147936152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505085816002815181106147c7576147c76152d3565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918b16906338ed17399061480c908990899087908a904290600401615182565b600060405180830381600087803b15801561482657600080fd5b505af115801561483a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148629190810190614c0d565b905080600281518110614877576148776152d3565b602002602001015192505050979650505050505050565b6060831561489d5750816121bb565b6121bb83838151156148b25781518083602001fd5b8060405162461bcd60e51b815260040161081f9190614fce565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b600082601f83011261499757600080fd5b8151602067ffffffffffffffff8211156149b3576149b36152e9565b8160051b6149c28282016151be565b8381528281019086840183880185018910156149dd57600080fd5b600093505b85841015614a005780518352600193909301929184019184016149e2565b50979650505050505050565b805169ffffffffffffffffffff8116811461151257600080fd5b600060208284031215614a3857600080fd5b81356121bb816152ff565b600060208284031215614a5557600080fd5b81516121bb816152ff565b60008060408385031215614a7357600080fd5b8235614a7e816152ff565b915060208381013567ffffffffffffffff80821115614a9c57600080fd5b818601915086601f830112614ab057600080fd5b813581811115614ac257614ac26152e9565b614ad4601f8201601f191685016151be565b91508082528784828501011115614aea57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215614b1b57600080fd5b8235614b26816152ff565b946020939093013593505050565b60008060008060808587031215614b4a57600080fd5b8435614b55816152ff565b9350602085013592506040850135614b6c816152ff565b91506060850135614b7c81615314565b939692955090935050565b600060608284031215614b9957600080fd5b82601f830112614ba857600080fd5b6040516060810181811067ffffffffffffffff82111715614bcb57614bcb6152e9565b604052808360608101861015614be057600080fd5b60005b6003811015614c02578151835260209283019290910190600101614be3565b509195945050505050565b600060208284031215614c1f57600080fd5b815167ffffffffffffffff811115614c3657600080fd5b613f5484828501614986565b600060208284031215614c5457600080fd5b81516121bb81615314565b600060208284031215614c7157600080fd5b5035919050565b600060208284031215614c8a57600080fd5b5051919050565b60008060408385031215614ca457600080fd5b823591506020830135614cb6816152ff565b809150509250929050565b600060208284031215614cd357600080fd5b81356001600160e01b0319811681146121bb57600080fd5b60006102008284031215614cfe57600080fd5b50919050565b60008060408385031215614d1757600080fd5b82519150602083015167ffffffffffffffff811115614d3557600080fd5b614d4185828601614986565b9150509250929050565b600080600060608486031215614d6057600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614d8f57600080fd5b614d9886614a0c565b9450602086015193506040860151925060608601519150614dbb60808701614a0c565b90509295509295909350565b600081518084526020808501945080840160005b83811015614e005781516001600160a01b031687529582019590820190600101614ddb565b509495945050505050565b8060005b6003811015613b81578151845260209384019390910190600101614e0f565b60008251614e4081846020870161525f565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e8281601785016020880161525f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614eb381602884016020880161525f565b01602801949350505050565b6001600160a01b0384168152606060208201819052600090614ee390830185614dc7565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b606081526000614f1f6060830186614dc7565b8281036020840152614f318186614dc7565b915050826040830152949350505050565b60c081526000614f5560c0830189614dc7565b8281036020840152614f678189614dc7565b6040840197909752505060608101939093526001600160a01b0391909116608083015260a09091015292915050565b60808101614fa48285614e0b565b82151560608301529392505050565b60808101614fc18285614e0b565b8260608301529392505050565b6020815260008251806020840152614fed81604085016020870161525f565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b828152604060208201526000613f546040830184614dc7565b828152608081016121bb6020830184614e0b565b85815284602082015260a0604082015260006151a160a0830186614dc7565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156151e7576151e76152e9565b604052919050565b60008219821115615202576152026152bd565b500190565b60008261522457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615243576152436152bd565b500290565b60008282101561525a5761525a6152bd565b500390565b60005b8381101561527a578181015183820152602001615262565b83811115613b815750506000910152565b60008161529a5761529a6152bd565b506000190190565b60006000198214156152b6576152b66152bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d1557600080fd5b8015158114610d1557600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220017aef49701a3770de4feaeabe4b901d4aed4ff3fe25f84c71b40f4fac6a884564736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c80635fea9cbb11610139578063a3673b38116100b6578063bf52e0801161007a578063bf52e080146106e6578063c21ebd07146106fc578063cc6522c31461071d578063d547741f1461073e578063ef5cfb8c1461075e578063f6f6b8811461077e57600080fd5b8063a3673b3814610650578063a440b21a14610665578063a66b571314610685578063adc9772e146106a6578063ae30c110146106c657600080fd5b80638129fc1c116100fd5780638129fc1c146105c457806390ffb8ee146105d957806391d14854146105fa57806397613ac71461061a578063a217fddf1461063b57600080fd5b80635fea9cbb1461051f578063612c87df14610540578063620b75df1461056157806378ab9c34146105815780637d5f5802146105a257600080fd5b80632f48ab7d116101d25780634f1ef286116101965780634f1ef2861461046b57806352d1902d1461047e5780635539143214610493578063573b90c1146104b45780635ca558f8146104d55780635dbd733a146104eb57600080fd5b80632f48ab7d146103c857806336568abe146103e95780633659cfe6146104095780633ca5b234146104295780633e413bee1461044a57600080fd5b806316f0115b1161021957806316f0115b1461032b578063248a9ca31461034c5780632576e65a1461037c5780632ad122dc146103915780632f2ff15d146103a857600080fd5b8063012ee9281461025657806301ffc9a71461029457806302f283be146102c4578063046cfa11146102e5578063119cd87914610307575b600080fd5b34801561026257600080fd5b5061013954610277906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a057600080fd5b506102b46102af366004614cc1565b61079e565b604051901515815260200161028b565b3480156102d057600080fd5b5061013654610277906001600160a01b031681565b3480156102f157600080fd5b50610305610300366004614ceb565b6107d5565b005b34801561031357600080fd5b5061031d60fd5481565b60405190815260200161028b565b34801561033757600080fd5b5061013554610277906001600160a01b031681565b34801561035857600080fd5b5061031d610367366004614c5f565b60009081526065602052604090206001015490565b34801561038857600080fd5b5061031d610b7f565b34801561039d57600080fd5b5061031d61013d5481565b3480156103b457600080fd5b506103056103c3366004614c91565b610b90565b3480156103d457600080fd5b5061012f54610277906001600160a01b031681565b3480156103f557600080fd5b50610305610404366004614c91565b610bba565b34801561041557600080fd5b50610305610424366004614a26565b610c38565b34801561043557600080fd5b5061012d54610277906001600160a01b031681565b34801561045657600080fd5b5061012e54610277906001600160a01b031681565b610305610479366004614a60565b610d18565b34801561048a57600080fd5b5061031d610de5565b34801561049f57600080fd5b5061013254610277906001600160a01b031681565b3480156104c057600080fd5b5061013354610277906001600160a01b031681565b3480156104e157600080fd5b5061031d60fe5481565b3480156104f757600080fd5b5061031d7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561052b57600080fd5b5061013b54610277906001600160a01b031681565b34801561054c57600080fd5b5061013854610277906001600160a01b031681565b34801561056d57600080fd5b5060fb54610277906001600160a01b031681565b34801561058d57600080fd5b5061013154610277906001600160a01b031681565b3480156105ae57600080fd5b5061031d60008051602061532383398151915281565b3480156105d057600080fd5b50610305610e98565b3480156105e557600080fd5b5061013454610277906001600160a01b031681565b34801561060657600080fd5b506102b4610615366004614c91565b610f62565b34801561062657600080fd5b5061013054610277906001600160a01b031681565b34801561064757600080fd5b5061031d600081565b34801561065c57600080fd5b5061031d610f8d565b34801561067157600080fd5b50610305610680366004614a26565b610f99565b34801561069157600080fd5b5061013a54610277906001600160a01b031681565b3480156106b257600080fd5b506103056106c1366004614b08565b6110c8565b3480156106d257600080fd5b506103056106e1366004614d4b565b6112f8565b3480156106f257600080fd5b5061031d60fc5481565b34801561070857600080fd5b5061013754610277906001600160a01b031681565b34801561072957600080fd5b5061013c54610277906001600160a01b031681565b34801561074a57600080fd5b50610305610759366004614c91565b61146d565b34801561076a57600080fd5b5061031d610779366004614a26565b611492565b34801561078a57600080fd5b5061031d610799366004614b34565b611517565b60006001600160e01b03198216637965db0b60e01b14806107cf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107e0600033610f62565b6108285760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064015b60405180910390fd5b6108356020820182614a26565b61012d80546001600160a01b0319166001600160a01b03929092169190911790556108666040820160208301614a26565b61012e80546001600160a01b0319166001600160a01b03929092169190911790556108976060820160408301614a26565b61012f80546001600160a01b0319166001600160a01b03929092169190911790556108c86080820160608301614a26565b61013080546001600160a01b0319166001600160a01b03929092169190911790556108f960a0820160808301614a26565b61013180546001600160a01b0319166001600160a01b039290921691909117905561092a60c0820160a08301614a26565b61013280546001600160a01b0319166001600160a01b039290921691909117905561095b60e0820160c08301614a26565b61013380546001600160a01b0319166001600160a01b039290921691909117905561098d610100820160e08301614a26565b61013480546001600160a01b0319166001600160a01b03929092169190911790556109c061012082016101008301614a26565b61013580546001600160a01b0319166001600160a01b03929092169190911790556109f361014082016101208301614a26565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610a2661016082016101408301614a26565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610a5961018082016101608301614a26565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610a8c6101a082016101808301614a26565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610abf6101c082016101a08301614a26565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610af26101e082016101c08301614a26565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055610b2561020082016101e08301614a26565b61013c80546001600160a01b0319166001600160a01b0392909216919091179055670de0b6b3a764000061013d556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b6000610b8b60006117ef565b905090565b600082815260656020526040902060010154610bab81611e37565b610bb58383611e41565b505050565b6001600160a01b0381163314610c2a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161081f565b610c348282611ec7565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c815760405162461bcd60e51b815260040161081f90615038565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cca600080516020615343833981519152546001600160a01b031690565b6001600160a01b031614610cf05760405162461bcd60e51b815260040161081f90615084565b610cf981611f2e565b60408051600080825260208201909252610d1591839190611f39565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d615760405162461bcd60e51b815260040161081f90615038565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610daa600080516020615343833981519152546001600160a01b031690565b6001600160a01b031614610dd05760405162461bcd60e51b815260040161081f90615084565b610dd982611f2e565b610c3482826001611f39565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e855760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161081f565b5060008051602061534383398151915290565b600054610100900460ff1615808015610eb85750600054600160ff909116105b80610ed25750303b158015610ed2575060005460ff166001145b610eee5760405162461bcd60e51b815260040161081f906150d0565b6000805460ff191660011790558015610f11576000805461ff0019166101001790555b610f196120b3565b8015610d15576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610b8b60016117ef565b610fa4600033610f62565b610fe75760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161081f565b6001600160a01b03811661103d5760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161081f565b60fb5461106290600080516020615323833981519152906001600160a01b031661146d565b61107a60008051602061532383398151915282610b90565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610f57565b6110e060008051602061532383398151915233610f62565b6110fc5760405162461bcd60e51b815260040161081f90615001565b600061117a306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190614c78565b60fd54612198565b6040516370a0823160e01b81523060048201529091506111ff9084906001600160a01b038216906370a082319060240160206040518083038186803b1580156111c257600080fd5b505afa1580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190614c78565b6121c2565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561123957600080fd5b505afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190614c78565b10156112bf5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161081f565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6113227fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f62565b806113c9575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561139157600080fd5b505afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190614c42565b6114205760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b606482015260840161081f565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a906060016112eb565b60008281526065602052604090206001015461148881611e37565b610bb58383611ec7565b60006114ac60008051602061532383398151915233610f62565b6114c85760405162461bcd60e51b815260040161081f90615001565b60006114d383612a20565b9050801561150f576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b600061153160008051602061532383398151915233610f62565b61154d5760405162461bcd60e51b815260040161081f90615001565b600061158b306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561113a57600080fd5b905060008084156115b25761159f86612a20565b90506115ab8887612cfa565b9150611621565b6115bd888888613251565b9150868210156116215760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161081f565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561165b57600080fd5b505afa15801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190614c78565b10156116e15760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161081f565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb9061170f9089908690600401614ef3565b602060405180830381600087803b15801561172957600080fd5b505af115801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190614c42565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a180156117d5576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561183857600080fd5b505afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190614c78565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156118ba57600080fd5b505afa1580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190614c78565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119749190614c78565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b03918216602482015292935060009291169063adb519809060440160206040518083038186803b1580156119c957600080fd5b505afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190614c78565b90508015611d2d5761013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611a4f57600080fd5b505afa158015611a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a879190614c78565b905060005b6003811015611d2a5761013554604051634903b0d160e01b81526004810183905260009184916001600160a01b0390911690634903b0d19060240160206040518083038186803b158015611adf57600080fd5b505afa158015611af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b179190614c78565b611b219086615229565b611b2b9190615207565b6101355460405163c661065760e01b8152600481018590529192506001600160a01b03169063c66106579060240160206040518083038186803b158015611b7157600080fd5b505afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190614a43565b61012d546001600160a01b0390811691161415611bd157611bca81886151ef565b9650611d17565b6101355460405163c661065760e01b8152600481018490526001600160a01b039091169063c66106579060240160206040518083038186803b158015611c1657600080fd5b505afa158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e9190614a43565b61012e546001600160a01b0390811691161415611c7657611c6f81876151ef565b9550611d17565b6101355460405163c661065760e01b8152600481018490526001600160a01b039091169063c66106579060240160206040518083038186803b158015611cbb57600080fd5b505afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf39190614a43565b61012f546001600160a01b0390811691161415611d1757611d1481866151ef565b94505b5080611d22816152a2565b915050611a8c565b50505b8515611dae578315611d6e5761013d5461013a5461013c54611d61928792909182916001600160a01b0390811691166138b6565b611d6b90836151ef565b91505b8215611da95761013d5461013b5461013c54611d9c928692909182916001600160a01b0390811691166138b6565b611da690836151ef565b91505b611e2e565b8315611dee576101385461012d5461012f5461013954611de1936001600160a01b03908116938116928116911688613906565b611deb90836151ef565b91505b8215611e2e576101385461012e5461012f5461013954611e21936001600160a01b03908116938116928116911687613906565b611e2b90836151ef565b91505b50949350505050565b610d158133613a67565b611e4b8282610f62565b610c345760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611e833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ed18282610f62565b15610c345760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c3481611e37565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f6c57610bb583613ac0565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa557600080fd5b505afa925050508015611fd5575060408051601f3d908101601f19168201909252611fd291810190614c78565b60015b6120385760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161081f565b60008051602061534383398151915281146120a75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161081f565b50610bb5838383613b5c565b600054610100900460ff16158080156120d35750600054600160ff909116105b806120ed5750303b1580156120ed575060005460ff166001145b6121095760405162461bcd60e51b815260040161081f906150d0565b6000805460ff19166001179055801561212c576000805461ff0019166101001790555b612134613b87565b61213c613b87565b612147600033611e41565b601460fc81905560fd55600460fe558015610d15576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f57565b60006127106121a78382615248565b6121b19085615229565b6121bb9190615207565b9392505050565b61012f546001600160a01b038381169116146121f05760405162461bcd60e51b815260040161081f9061511e565b6121f86148cc565b610138546001600160a01b03908116825261012f5481166020830181905261012d54821660408085019190915261012e548316606085015261013954909216608084015290516370a0823160e01b81523060048201526370a082319060240160206040518083038186803b15801561226f57600080fd5b505afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190614c78565b60a0820152600060c082015261013554604051634903b0d160e01b8152600260048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190614c78565b60e082015261013554604051634903b0d160e01b8152600060048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561237a57600080fd5b505afa15801561238e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b29190614c78565b61010082015261013554604051634903b0d160e01b8152600160048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b1580156123fd57600080fd5b505afa158015612411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124359190614c78565b61012082015261013d546101408201819052610160820181905261018082015260006101a082018190528061246983613bf4565b61012f5461012d5461013c5461013a5494965092945061249e936001600160a01b039283169391831692918216911686613d38565b61012f5461012e5461013c5461013b546124cb936001600160a01b03908116938116928116911685613d38565b6124d3614968565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561251757600080fd5b505afa15801561252b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254f9190614c78565b815261012e546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561259557600080fd5b505afa1580156125a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cd9190614c78565b602082015261012f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561261657600080fd5b505afa15801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190614c78565b816002602002015261013554604051633883e11960e01b81526000916126e9916001600160a01b0390911690633883e11990612691908690600190600401614f96565b60206040518083038186803b1580156126a957600080fd5b505afa1580156126bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e19190614c78565b60fe54612198565b61012d5461013554845160405163095ea7b360e01b81529394506001600160a01b039283169363095ea7b39361272493169190600401614ef3565b602060405180830381600087803b15801561273e57600080fd5b505af1158015612752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127769190614c42565b5061012e5461013554602084015160405163095ea7b360e01b81526001600160a01b039384169363095ea7b3936127b293911691600401614ef3565b602060405180830381600087803b1580156127cc57600080fd5b505af11580156127e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128049190614c42565b5061012f5461013554604080850151905163095ea7b360e01b81526001600160a01b039384169363095ea7b39361284093911691600401614ef3565b602060405180830381600087803b15801561285a57600080fd5b505af115801561286e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128929190614c42565b5061013554604051634515cef360e01b81526000916001600160a01b031690634515cef3906128c79086908690600401614fb3565b602060405180830381600087803b1580156128e157600080fd5b505af11580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190614c78565b610134546101365460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926129539216908590600401614ef3565b602060405180830381600087803b15801561296d57600080fd5b505af1158015612981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a59190614c42565b506101365461013454604051638340f54960e01b81523060048201526001600160a01b03918216602482015260448101849052911690638340f54990606401600060405180830381600087803b1580156129fe57600080fd5b505af1158015612a12573d6000803e3d6000fd5b505050505050505050505050565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b0391821660248201526000928392169063adb519809060440160206040518083038186803b158015612a7357600080fd5b505afa158015612a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aab9190614c78565b90508015612bd6576040805160018082528183019092526000916020808301908036833750506101345482519293506001600160a01b031691839150600090612af657612af66152d3565b6001600160a01b03928316602091820292909201015261013654604051633601ae0560e01b8152911690633601ae0590612b399030908590600090600401614ebf565b600060405180830381600087803b158015612b5357600080fd5b505af1158015612b67573d6000803e3d6000fd5b5050610136546101345460405163d12914ff60e01b81523060048201526001600160a01b0391821660248201529116925063d12914ff9150604401600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b50505050505b610131546101305461012f54600092612bff926001600160a01b03918216929082169116613d8e565b610132546101305461012f54929350612c28926001600160a01b03928316929182169116613d8e565b612c3290826151ef565b610133546101305461012f54929350612c5b926001600160a01b03928316929182169116613d8e565b612c6590826151ef565b905080156121bb5761012f5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612ca09087908590600401614ef3565b602060405180830381600087803b158015612cba57600080fd5b505af1158015612cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf29190614c42565b509392505050565b61012f546000906001600160a01b03848116911614612d2b5760405162461bcd60e51b815260040161081f9061511e565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b039182166024820152600092919091169063adb519809060440160206040518083038186803b158015612d7f57600080fd5b505afa158015612d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db79190614c78565b6101365461013454604051636ce5768960e11b81523060048201526001600160a01b03918216602482015260448101849052929350169063d9caed1290606401600060405180830381600087803b158015612e1157600080fd5b505af1158015612e25573d6000803e3d6000fd5b50505050600061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb29190614c78565b9050612ebc614968565b61013554604051634903b0d160e01b815260006004820152612f5491849186916001600160a01b031690634903b0d1906024015b60206040518083038186803b158015612f0857600080fd5b505afa158015612f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f409190614c78565b612f4a9190615229565b6126e19190615207565b815261013554604051634903b0d160e01b815260016004820152612f8e91849186916001600160a01b031690634903b0d190602401612ef0565b602082015261013554604051634903b0d160e01b815260026004820152612fcb91849186916001600160a01b031690634903b0d190602401612ef0565b8160026020020152610134546101355460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261300b929116908790600401614ef3565b602060405180830381600087803b15801561302557600080fd5b505af1158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d9190614c42565b506101355460405163ecb586a560e01b81526001600160a01b039091169063ecb586a590613091908690859060040161516e565b606060405180830381600087803b1580156130ab57600080fd5b505af11580156130bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e39190614b87565b5061012d5461012f5461013a5461013c546040516370a0823160e01b8152306004820152613180946001600160a01b0390811694811693811692169084906370a08231906024015b60206040518083038186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190614c78565b613d38565b61012e5461012f5461013b5461013c546040516370a0823160e01b81523060048201526131cb946001600160a01b0390811694811693811692169084906370a082319060240161312b565b61012f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561320f57600080fd5b505afa158015613223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132479190614c78565b9695505050505050565b61012f546000906001600160a01b038581169116146132825760405162461bcd60e51b815260040161081f9061511e565b61013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156132c857600080fd5b505afa1580156132dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133009190614c78565b61013554604051634903b0d160e01b81526000600482018190529293506001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561334a57600080fd5b505afa15801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190614c78565b61013554604051634903b0d160e01b8152600160048201529192506000916001600160a01b0390911690634903b0d19060240160206040518083038186803b1580156133cd57600080fd5b505afa1580156133e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134059190614c78565b61013554604051634903b0d160e01b8152600260048201529192506000916001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561345057600080fd5b505afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134889190614c78565b90506134926148cc565b610138546001600160a01b03908116825261012f548116602083015261012d548116604083015261012e54811660608301526101395416608082015260fe546134dc908990613e7f565b6134e790600a6151ef565b60a082015260c0810185905260e081018290526101008101849052610120810183905261013d546101408201819052610160820181905261018082015260006101a0820181905261353782613e8e565b610136546101345460405163015b6a3360e71b81523060048201526001600160a01b03918216602482015292935060009291169063adb519809060440160206040518083038186803b15801561358c57600080fd5b505afa1580156135a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c49190614c78565b9050808211156135d2578091505b6101365461013454604051636ce5768960e11b81523060048201526001600160a01b0391821660248201526044810185905291169063d9caed1290606401600060405180830381600087803b15801561362a57600080fd5b505af115801561363e573d6000803e3d6000fd5b5050505061364a614968565b61365888612f4a858a615229565b815261366888612f4a8589615229565b602082015261367b88612f4a8588615229565b8160026020020152610134546101355460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926136bb929116908790600401614ef3565b602060405180830381600087803b1580156136d557600080fd5b505af11580156136e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370d9190614c42565b506101355460405163ecb586a560e01b81526001600160a01b039091169063ecb586a590613741908690859060040161516e565b606060405180830381600087803b15801561375b57600080fd5b505af115801561376f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137939190614b87565b5061012d5461012f5461013a5461013c546040516370a0823160e01b81523060048201526137df946001600160a01b0390811694811693811692169084906370a082319060240161312b565b61012e5461012f5461013b5461013c546040516370a0823160e01b815230600482015261382a946001600160a01b0390811694811693811692169084906370a082319060240161312b565b61012f546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561386e57600080fd5b505afa158015613882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a69190614c78565b9c9b505050505050505050505050565b6000806138c284613f5c565b905060006138cf84613f5c565b90506138db8188615229565b826138e6888b615229565b6138f09190615229565b6138fa9190615207565b98975050505050505050565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061393f5761393f6152d3565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110613973576139736152d3565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084816000815181106139c4576139c46152d3565b6001600160a01b03928316602091820292909201015260405163b9e598c160e01b81526000918a169063b9e598c190613a0590869086908a90600401614f0c565b60006040518083038186803b158015613a1d57600080fd5b505afa158015613a31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a599190810190614d04565b509998505050505050505050565b613a718282610f62565b610c3457613a7e81614080565b613a89836020614092565b604051602001613a9a929190614e4a565b60408051601f198184030181529082905262461bcd60e51b825261081f91600401614fce565b6001600160a01b0381163b613b2d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161081f565b60008051602061534383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613b658361422e565b600082511180613b725750805b15610bb557613b81838361426e565b50505050565b600054610100900460ff16613bf25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161081f565b565b6000806000613c1b8460000151856020015186604001518760800151886101400151613906565b90506000613c418560000151866020015187606001518860800151896101400151613906565b90508082866101200151613c559190615229565b613c5f9190615207565b856101000151866101400151848860e00151613c7b9190615229565b613c859190615207565b613c8f91906151ef565b613c9991906151ef565b8561010001518660a00151613cae9190615229565b613cb89190615207565b93508461012001518282876101000151613cd29190615229565b613cdc9190615207565b866101400151838860e00151613cf29190615229565b613cfc9190615207565b613d0691906151ef565b613d1091906151ef565b8561012001518660a00151613d259190615229565b613d2f9190615207565b92505050915091565b6000613d4d8261013d5461013d5487876138b6565b610138546101395460fc54929350613d85926001600160a01b03928316928a928a929116908790613d7f908890612198565b30614362565b50505050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b158015613dd257600080fd5b505afa158015613de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0a9190614c78565b90508015613e745761013754600090613e2f906001600160a01b031687878786614545565b90508015613e725761013754613e69906001600160a01b0316878787866064613e59886063615229565b613e639190615207565b306146a4565b925050506121bb565b505b506000949350505050565b60006127106121a783826151ef565b600080613eb38360000151846040015185602001518660800151876101600151613906565b90506000613ed98460000151856060015186602001518760800151886101800151613906565b905083610180015181856101200151613ef29190615229565b613efc9190615207565b84610160015183866101000151613f139190615229565b613f1d9190615207565b8560e00151613f2c91906151ef565b613f3691906151ef565b8460a001518560c00151613f4a9190615229565b613f549190615207565b949350505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015613f9d57600080fd5b505afa158015613fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fd59190614d77565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff1610156140315760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b604482015260640161081f565b600082116140765760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b604482015260640161081f565b5090949350505050565b60606107cf6001600160a01b03831660145b606060006140a1836002615229565b6140ac9060026151ef565b67ffffffffffffffff8111156140c4576140c46152e9565b6040519080825280601f01601f1916602001820160405280156140ee576020820181803683370190505b509050600360fc1b81600081518110614109576141096152d3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614138576141386152d3565b60200101906001600160f81b031916908160001a905350600061415c846002615229565b6141679060016151ef565b90505b60018111156141df576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061419b5761419b6152d3565b1a60f81b8282815181106141b1576141b16152d3565b60200101906001600160f81b031916908160001a90535060049490941c936141d88161528b565b905061416a565b5083156121bb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161081f565b61423781613ac0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6142d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161081f565b600080846001600160a01b0316846040516142f19190614e2e565b600060405180830381855af49150503d806000811461432c576040519150601f19603f3d011682016040523d82523d6000602084013e614331565b606091505b509150915061435982826040518060600160405280602781526020016153636027913961488e565b95945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b390614393908b908890600401614ef3565b602060405180830381600087803b1580156143ad57600080fd5b505af11580156143c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e59190614c42565b50604080516002808252606082018352600092602083019080368337019050509050878160008151811061441b5761441b6152d3565b60200260200101906001600160a01b031690816001600160a01b031681525050868160018151811061444f5761444f6152d3565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905086816000815181106144a0576144a06152d3565b6001600160a01b03928316602091820292909201015260405163351041e960e21b8152908b169063d44107a4906144e590859085908b908b908b904290600401614f42565b602060405180830381600087803b1580156144ff57600080fd5b505af1158015614513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145379190614c78565b9a9950505050505050505050565b6040805160038082526080820190925260009182919060208201606080368337019050509050858160008151811061457f5761457f6152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106145b3576145b36152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505083816002815181106145e7576145e76152d3565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009189169063d06ca61f906146269087908690600401615155565b60006040518083038186803b15801561463e57600080fd5b505afa158015614652573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261467a9190810190614c0d565b90508060028151811061468f5761468f6152d3565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b3906146d5908b908890600401614ef3565b602060405180830381600087803b1580156146ef57600080fd5b505af1158015614703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147279190614c42565b506040805160038082526080820190925260009160208201606080368337019050509050878160008151811061475f5761475f6152d3565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600181518110614793576147936152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505085816002815181106147c7576147c76152d3565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918b16906338ed17399061480c908990899087908a904290600401615182565b600060405180830381600087803b15801561482657600080fd5b505af115801561483a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148629190810190614c0d565b905080600281518110614877576148776152d3565b602002602001015192505050979650505050505050565b6060831561489d5750816121bb565b6121bb83838151156148b25781518083602001fd5b8060405162461bcd60e51b815260040161081f9190614fce565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b600082601f83011261499757600080fd5b8151602067ffffffffffffffff8211156149b3576149b36152e9565b8160051b6149c28282016151be565b8381528281019086840183880185018910156149dd57600080fd5b600093505b85841015614a005780518352600193909301929184019184016149e2565b50979650505050505050565b805169ffffffffffffffffffff8116811461151257600080fd5b600060208284031215614a3857600080fd5b81356121bb816152ff565b600060208284031215614a5557600080fd5b81516121bb816152ff565b60008060408385031215614a7357600080fd5b8235614a7e816152ff565b915060208381013567ffffffffffffffff80821115614a9c57600080fd5b818601915086601f830112614ab057600080fd5b813581811115614ac257614ac26152e9565b614ad4601f8201601f191685016151be565b91508082528784828501011115614aea57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215614b1b57600080fd5b8235614b26816152ff565b946020939093013593505050565b60008060008060808587031215614b4a57600080fd5b8435614b55816152ff565b9350602085013592506040850135614b6c816152ff565b91506060850135614b7c81615314565b939692955090935050565b600060608284031215614b9957600080fd5b82601f830112614ba857600080fd5b6040516060810181811067ffffffffffffffff82111715614bcb57614bcb6152e9565b604052808360608101861015614be057600080fd5b60005b6003811015614c02578151835260209283019290910190600101614be3565b509195945050505050565b600060208284031215614c1f57600080fd5b815167ffffffffffffffff811115614c3657600080fd5b613f5484828501614986565b600060208284031215614c5457600080fd5b81516121bb81615314565b600060208284031215614c7157600080fd5b5035919050565b600060208284031215614c8a57600080fd5b5051919050565b60008060408385031215614ca457600080fd5b823591506020830135614cb6816152ff565b809150509250929050565b600060208284031215614cd357600080fd5b81356001600160e01b0319811681146121bb57600080fd5b60006102008284031215614cfe57600080fd5b50919050565b60008060408385031215614d1757600080fd5b82519150602083015167ffffffffffffffff811115614d3557600080fd5b614d4185828601614986565b9150509250929050565b600080600060608486031215614d6057600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614d8f57600080fd5b614d9886614a0c565b9450602086015193506040860151925060608601519150614dbb60808701614a0c565b90509295509295909350565b600081518084526020808501945080840160005b83811015614e005781516001600160a01b031687529582019590820190600101614ddb565b509495945050505050565b8060005b6003811015613b81578151845260209384019390910190600101614e0f565b60008251614e4081846020870161525f565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e8281601785016020880161525f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614eb381602884016020880161525f565b01602801949350505050565b6001600160a01b0384168152606060208201819052600090614ee390830185614dc7565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b606081526000614f1f6060830186614dc7565b8281036020840152614f318186614dc7565b915050826040830152949350505050565b60c081526000614f5560c0830189614dc7565b8281036020840152614f678189614dc7565b6040840197909752505060608101939093526001600160a01b0391909116608083015260a09091015292915050565b60808101614fa48285614e0b565b82151560608301529392505050565b60808101614fc18285614e0b565b8260608301529392505050565b6020815260008251806020840152614fed81604085016020870161525f565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b828152604060208201526000613f546040830184614dc7565b828152608081016121bb6020830184614e0b565b85815284602082015260a0604082015260006151a160a0830186614dc7565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156151e7576151e76152e9565b604052919050565b60008219821115615202576152026152bd565b500190565b60008261522457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615243576152436152bd565b500290565b60008282101561525a5761525a6152bd565b500390565b60005b8381101561527a578181015183820152602001615262565b83811115613b815750506000910152565b60008161529a5761529a6152bd565b506000190190565b60006000198214156152b6576152b66152bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d1557600080fd5b8015158114610d1557600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220017aef49701a3770de4feaeabe4b901d4aed4ff3fe25f84c71b40f4fac6a884564736f6c63430008060033",
  "implementation": "0x3A25eB609bE72eac0b48Aff6Ca825011F64609Ae",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13568,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 13570,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 13572,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 13574,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 13959,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 37228,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "busd",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37231,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "usdc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37234,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "usdt",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37237,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "wBnb",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37240,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "ddd",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37243,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "epx",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37246,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "valas",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37249,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "val3EPS",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 37252,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "pool",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IEllipsisPool)7448"
      },
      {
        "astId": 37255,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "lpDepositor",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(ILpDepositor)7238"
      },
      {
        "astId": 37258,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "pancakeRouter",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPancakeRouter02)8467"
      },
      {
        "astId": 37261,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "wombatRouter",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IWombatRouter)12518"
      },
      {
        "astId": 37263,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "wombatPool",
        "offset": 0,
        "slot": "313",
        "type": "t_address"
      },
      {
        "astId": 37266,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "oracleBusd",
        "offset": 0,
        "slot": "314",
        "type": "t_contract(IPriceFeed)5810"
      },
      {
        "astId": 37269,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IPriceFeed)5810"
      },
      {
        "astId": 37272,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "oracleUsdt",
        "offset": 0,
        "slot": "316",
        "type": "t_contract(IPriceFeed)5810"
      },
      {
        "astId": 37274,
        "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
        "label": "dm18",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3249": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEllipsisPool)7448": {
        "encoding": "inplace",
        "label": "contract IEllipsisPool",
        "numberOfBytes": "20"
      },
      "t_contract(ILpDepositor)7238": {
        "encoding": "inplace",
        "label": "contract ILpDepositor",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)8467": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)5810": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IWombatRouter)12518": {
        "encoding": "inplace",
        "label": "contract IWombatRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/usdt/StrategyEllipsisDotDotUsdt.sol:StrategyEllipsisDotDotUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}