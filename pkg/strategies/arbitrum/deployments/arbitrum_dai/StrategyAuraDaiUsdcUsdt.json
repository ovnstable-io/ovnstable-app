{
  "address": "0x4d70bB1a3D2b49F958bb3CbBAa8B06f7028d810E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auraBaseRewardPool",
      "outputs": [
        {
          "internalType": "contract AuraBaseRewardPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auraBoosterLite",
      "outputs": [
        {
          "internalType": "contract AuraBoosterLite",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auraLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbamDai",
      "outputs": [
        {
          "internalType": "contract IBptToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbamDaiPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbamUsdc",
      "outputs": [
        {
          "internalType": "contract IBptToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbamUsdcPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbamUsdt",
      "outputs": [
        {
          "internalType": "contract IBptToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbamUsdtPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bpt",
      "outputs": [
        {
          "internalType": "contract IBptToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDai",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdt",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bbamDai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bbamUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bbamUsdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bpt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "bbamDaiPoolId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "bbamUsdcPoolId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "bbamUsdtPoolId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "oracleDai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "auraLp",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "auraBoosterLite",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "auraBaseRewardPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wombatRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wombatBasePool",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyAuraDaiUsdcUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatBasePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wombatRouter",
      "outputs": [
        {
          "internalType": "contract IWombatRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "141a2c1aecba96a101849b295d47f7f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auraBaseRewardPool\",\"outputs\":[{\"internalType\":\"contract AuraBaseRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auraBoosterLite\",\"outputs\":[{\"internalType\":\"contract AuraBoosterLite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auraLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbamDai\",\"outputs\":[{\"internalType\":\"contract IBptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbamDaiPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbamUsdc\",\"outputs\":[{\"internalType\":\"contract IBptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbamUsdcPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbamUsdt\",\"outputs\":[{\"internalType\":\"contract IBptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbamUsdtPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpt\",\"outputs\":[{\"internalType\":\"contract IBptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDai\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdt\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bbamDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bbamUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bbamUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bpt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bbamDaiPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bbamUsdcPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bbamUsdtPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracleDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auraLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auraBoosterLite\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auraBaseRewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wombatRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wombatBasePool\",\"type\":\"address\"}],\"internalType\":\"struct StrategyAuraDaiUsdcUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatBasePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatRouter\",\"outputs\":[{\"internalType\":\"contract IWombatRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dai/StrategyAuraDaiUsdcUsdt.sol\":\"StrategyAuraDaiUsdcUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Aura.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\ninterface AuraBoosterLite {\\r\\n\\r\\n    /**\\r\\n * @notice Basically a hugely pivotal function.\\r\\n     *         Responsible for collecting the crv from gauge, and then redistributing to the correct place.\\r\\n     *         Pays the caller a fee to process this.\\r\\n     */\\r\\n    function earmarkRewards(uint256 _pid, address _zroPaymentAddress) external returns (bool);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\ninterface AuraBaseRewardPool {\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5e028789c2a05a746d756acfe4938094be935e14265bcb7df38c48211cea981f\"},\"@overnight-contracts/connectors/contracts/stuff/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract BalancerExchange {\\r\\n\\r\\n    int256 public constant MAX_VALUE = 10 ** 27;\\r\\n\\r\\n    IVault private balancerVault;\\r\\n\\r\\n    function setBalancerVault(address _balancerVault) internal {\\r\\n        balancerVault = IVault(_balancerVault);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 limit\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        bytes32 poolId1,\\r\\n        bytes32 poolId2,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenMid,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap1;\\r\\n        batchSwap1.poolId = poolId1;\\r\\n        batchSwap1.assetInIndex = 0;\\r\\n        batchSwap1.assetOutIndex = 1;\\r\\n        batchSwap1.amount = amount;\\r\\n        swaps[0] = batchSwap1;\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap2;\\r\\n        batchSwap2.poolId = poolId2;\\r\\n        batchSwap2.assetInIndex = 1;\\r\\n        batchSwap2.assetOutIndex = 2;\\r\\n        batchSwap2.amount = 0;\\r\\n        swaps[1] = batchSwap2;\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = tokenIn;\\r\\n        assets[1] = tokenMid;\\r\\n        assets[2] = tokenOut;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = recipient;\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\r\\n            limits[0] = MAX_VALUE;\\r\\n            limits[1] = MAX_VALUE;\\r\\n            limits[2] = MAX_VALUE;\\r\\n        } else {\\r\\n            limits[0] = 0;\\r\\n            limits[1] = 0;\\r\\n            limits[2] = 0;\\r\\n        }\\r\\n\\r\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\r\\n    }\\r\\n\\r\\n    function onSwap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 balance\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = balance;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountToSwap(\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\r\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\r\\n        }\\r\\n\\r\\n        return amount0ToSwap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountLpTokensToWithdraw(\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < 1; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\r\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n        return lpBalance;\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IBalancerPool {\\r\\n\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    function getPoolId() external view returns (bytes32);\\r\\n\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view returns (uint256 amount);\\r\\n\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256 currentBalanceTokenIn,\\r\\n        uint256 currentBalanceTokenOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\\r\\ninterface IPoolSwapStructs {\\r\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\r\\n    // IMinimalSwapInfoPool.\\r\\n    //\\r\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\r\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\r\\n    //\\r\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\r\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\r\\n    //\\r\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\r\\n    // some Pools.\\r\\n    //\\r\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\r\\n    // one Pool.\\r\\n    //\\r\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\r\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\r\\n    //    balance.\\r\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\r\\n    //\\r\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\r\\n    // where the Pool sends the outgoing tokens.\\r\\n    //\\r\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IBasePool is IPoolSwapStructs {\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\r\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\r\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\r\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\r\\n     *\\r\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\r\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\r\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as minting pool shares.\\r\\n     */\\r\\n    function onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\r\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\r\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\r\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\r\\n     * `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\r\\n     *\\r\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\r\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\r\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as burning pool shares.\\r\\n     */\\r\\n    function onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    function getPoolId() external view returns (bytes32);\\r\\n\\r\\n    function getRate() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IDistributorCallback {\\r\\n    function distributorCallback(bytes calldata callbackData) external;\\r\\n}\\r\\n\\r\\ninterface IGeneralPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\\r\\ninterface IMinimalSwapInfoPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256 currentBalanceTokenIn,\\r\\n        uint256 currentBalanceTokenOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user's Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 cash,\\r\\n        uint256 managed,\\r\\n        uint256 lastChangeBlock,\\r\\n        address assetManager\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    enum JoinKind {\\r\\n        INIT,\\r\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\r\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\r\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    enum ExitKind {\\r\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\r\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\r\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\r\\n        MANAGEMENT_FEE_TOKENS_OUT // for InvestmentPool\\r\\n    }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool's internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\r\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\r\\n     *\\r\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\r\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\r\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\r\\n     *\\r\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\r\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\r\\n     * approve them for the Vault, or even know a user's address.\\r\\n     *\\r\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\r\\n     * eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n    function queryBatchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds\\r\\n    ) external returns (int256[] memory assetDeltas);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\r\\n */\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\r\\n        bytes32 computedHash = leaf;\\r\\n\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n\\r\\n            if (computedHash <= proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Check if the computed hash (root) is equal to the provided root\\r\\n        return computedHash == root;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract MerkleOrchard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Recorded distributions\\r\\n    // channelId > distributionId\\r\\n    mapping(bytes32 => uint256) private _nextDistributionId;\\r\\n    // channelId > distributionId > root\\r\\n    mapping(bytes32 => mapping(uint256 => bytes32)) private _distributionRoot;\\r\\n    // channelId > claimer > distributionId / 256 (word index) -> bitmap\\r\\n    mapping(bytes32 => mapping(address => mapping(uint256 => uint256))) private _claimedBitmap;\\r\\n    // channelId > balance\\r\\n    mapping(bytes32 => uint256) private _remainingBalance;\\r\\n\\r\\n    event DistributionAdded(\\r\\n        address indexed distributor,\\r\\n        IERC20 indexed token,\\r\\n        uint256 distributionId,\\r\\n        bytes32 merkleRoot,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event DistributionClaimed(\\r\\n        address indexed distributor,\\r\\n        IERC20 indexed token,\\r\\n        uint256 distributionId,\\r\\n        address indexed claimer,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    IVault private immutable _vault;\\r\\n\\r\\n    constructor(IVault vault) {\\r\\n        _vault = vault;\\r\\n    }\\r\\n\\r\\n    struct Claim {\\r\\n        uint256 distributionId;\\r\\n        uint256 balance;\\r\\n        address distributor;\\r\\n        uint256 tokenIndex;\\r\\n        bytes32[] merkleProof;\\r\\n    }\\r\\n\\r\\n    // Getters\\r\\n    function getVault() public view returns (IVault) {\\r\\n        return _vault;\\r\\n    }\\r\\n\\r\\n    function getDistributionRoot(\\r\\n        IERC20 token,\\r\\n        address distributor,\\r\\n        uint256 distributionId\\r\\n    ) external view returns (bytes32) {\\r\\n        bytes32 channelId = _getChannelId(token, distributor);\\r\\n        return _distributionRoot[channelId][distributionId];\\r\\n    }\\r\\n\\r\\n    function getRemainingBalance(IERC20 token, address distributor) external view returns (uint256) {\\r\\n        bytes32 channelId = _getChannelId(token, distributor);\\r\\n        return _remainingBalance[channelId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice distribution ids must be sequential and can have an optional offset\\r\\n     */\\r\\n    function getNextDistributionId(IERC20 token, address distributor) external view returns (uint256) {\\r\\n        bytes32 channelId = _getChannelId(token, distributor);\\r\\n        return _nextDistributionId[channelId];\\r\\n    }\\r\\n\\r\\n    function isClaimed(\\r\\n        IERC20 token,\\r\\n        address distributor,\\r\\n        uint256 distributionId,\\r\\n        address claimer\\r\\n    ) public view returns (bool) {\\r\\n        (uint256 distributionWordIndex, uint256 distributionBitIndex) = _getIndices(distributionId);\\r\\n\\r\\n        bytes32 channelId = _getChannelId(token, distributor);\\r\\n        return (_claimedBitmap[channelId][claimer][distributionWordIndex] & (1 << distributionBitIndex)) != 0;\\r\\n    }\\r\\n\\r\\n    function verifyClaim(\\r\\n        IERC20 token,\\r\\n        address distributor,\\r\\n        uint256 distributionId,\\r\\n        address claimer,\\r\\n        uint256 claimedBalance,\\r\\n        bytes32[] memory merkleProof\\r\\n    ) external view returns (bool) {\\r\\n        bytes32 channelId = _getChannelId(token, distributor);\\r\\n        return _verifyClaim(channelId, distributionId, claimer, claimedBalance, merkleProof);\\r\\n    }\\r\\n\\r\\n    // Claim functions\\r\\n\\r\\n    /**\\r\\n     * @notice Allows anyone to claim multiple distributions for a claimer.\\r\\n     */\\r\\n    function claimDistributions(\\r\\n        address claimer,\\r\\n        Claim[] memory claims,\\r\\n        IERC20[] memory tokens\\r\\n    ) external {\\r\\n        _processClaims(claimer, claimer, claims, tokens, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim their own multiple distributions to internal balance.\\r\\n     */\\r\\n    function claimDistributionsToInternalBalance(\\r\\n        address claimer,\\r\\n        Claim[] memory claims,\\r\\n        IERC20[] memory tokens\\r\\n    ) external {\\r\\n        require(msg.sender == claimer, \\\"user must claim own balance\\\");\\r\\n        _processClaims(claimer, claimer, claims, tokens, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim their own several distributions to a callback.\\r\\n     */\\r\\n    function claimDistributionsWithCallback(\\r\\n        address claimer,\\r\\n        Claim[] memory claims,\\r\\n        IERC20[] memory tokens,\\r\\n        IDistributorCallback callbackContract,\\r\\n        bytes calldata callbackData\\r\\n    ) external {\\r\\n        require(msg.sender == claimer, \\\"user must claim own balance\\\");\\r\\n        _processClaims(claimer, address(callbackContract), claims, tokens, true);\\r\\n        callbackContract.distributorCallback(callbackData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a distributor to add funds to the contract as a merkle tree.\\r\\n     */\\r\\n    function createDistribution(\\r\\n        IERC20 token,\\r\\n        bytes32 merkleRoot,\\r\\n        uint256 amount,\\r\\n        uint256 distributionId\\r\\n    ) external {\\r\\n        address distributor = msg.sender;\\r\\n\\r\\n        bytes32 channelId = _getChannelId(token, distributor);\\r\\n        require(\\r\\n            _nextDistributionId[channelId] == distributionId || _nextDistributionId[channelId] == 0,\\r\\n            \\\"invalid distribution ID\\\"\\r\\n        );\\r\\n        token.safeTransferFrom(distributor, address(this), amount);\\r\\n\\r\\n        token.approve(address(getVault()), amount);\\r\\n        IVault.UserBalanceOp[] memory ops = new IVault.UserBalanceOp[](1);\\r\\n\\r\\n        ops[0] = IVault.UserBalanceOp({\\r\\n        asset: IAsset(address(token)),\\r\\n        amount: amount,\\r\\n        sender: address(this),\\r\\n        recipient: payable(address(this)),\\r\\n        kind: IVault.UserBalanceOpKind.DEPOSIT_INTERNAL\\r\\n        });\\r\\n\\r\\n        getVault().manageUserBalance(ops);\\r\\n\\r\\n        _remainingBalance[channelId] += amount;\\r\\n        _distributionRoot[channelId][distributionId] = merkleRoot;\\r\\n        _nextDistributionId[channelId] = distributionId + 1;\\r\\n        emit DistributionAdded(distributor, token, distributionId, merkleRoot, amount);\\r\\n    }\\r\\n\\r\\n    // Helper functions\\r\\n\\r\\n    function _getChannelId(IERC20 token, address distributor) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(token, distributor));\\r\\n    }\\r\\n\\r\\n    function _processClaims(\\r\\n        address claimer,\\r\\n        address recipient,\\r\\n        Claim[] memory claims,\\r\\n        IERC20[] memory tokens,\\r\\n        bool asInternalBalance\\r\\n    ) internal {\\r\\n        uint256[] memory amounts = new uint256[](tokens.length);\\r\\n\\r\\n        // To save gas when setting claimed statuses in storage, we group claims for each channel and word index\\r\\n        // (referred to as a 'claims set'), aggregating the claim bits to set and total claimed amount, only committing\\r\\n        // to storage when changing claims sets (or when processing the last claim).\\r\\n        // This means that callers should sort claims by grouping distribution channels and distributions with the same\\r\\n        // word index in order to achieve reduced gas costs.\\r\\n\\r\\n        // Variables to support claims set aggregation\\r\\n        bytes32 currentChannelId; // Since channel ids are a hash, the initial zero id can be safely considered invalid\\r\\n        uint256 currentWordIndex;\\r\\n\\r\\n        uint256 currentBits; // The accumulated claimed bits to set in storage\\r\\n        uint256 currentClaimAmount; // The accumulated tokens to be claimed from the current channel (not claims set!)\\r\\n\\r\\n        Claim memory claim;\\r\\n        for (uint256 i = 0; i < claims.length; i++) {\\r\\n            claim = claims[i];\\r\\n\\r\\n            // New scope to avoid stack-too-deep issues\\r\\n            {\\r\\n                (uint256 distributionWordIndex, uint256 distributionBitIndex) = _getIndices(claim.distributionId);\\r\\n\\r\\n                if (currentChannelId == _getChannelId(tokens[claim.tokenIndex], claim.distributor)) {\\r\\n                    if (currentWordIndex == distributionWordIndex) {\\r\\n                        // Same claims set as the previous one: simply track the new bit to set.\\r\\n                        currentBits |= 1 << distributionBitIndex;\\r\\n                    } else {\\r\\n                        // This case is an odd exception: the claims set is not the same, but the channel id is. This\\r\\n                        // happens for example when there are so many distributions that they don't fit in a single 32\\r\\n                        // byte bitmap.\\r\\n                        // Since the channel is the same, we can continue accumulating the claim amount, but must commit\\r\\n                        // the previous claim bits as they correspond to a different word index.\\r\\n                        _setClaimedBits(currentChannelId, claimer, currentWordIndex, currentBits);\\r\\n\\r\\n                        // Start a new claims set, except channel id is the same as the previous one, and amount is not\\r\\n                        // reset.\\r\\n                        currentWordIndex = distributionWordIndex;\\r\\n                        currentBits = 1 << distributionBitIndex;\\r\\n                    }\\r\\n\\r\\n                    // Amounts are always accumulated for the same channel id\\r\\n                    currentClaimAmount += claim.balance;\\r\\n                } else {\\r\\n                    // Skip initial invalid claims set\\r\\n                    if (currentChannelId != bytes32(0)) {\\r\\n                        // Commit previous claims set\\r\\n                        _setClaimedBits(currentChannelId, claimer, currentWordIndex, currentBits);\\r\\n                        _deductClaimedBalance(currentChannelId, currentClaimAmount);\\r\\n                    }\\r\\n\\r\\n                    // Start a new claims set\\r\\n                    currentChannelId = _getChannelId(tokens[claim.tokenIndex], claim.distributor);\\r\\n                    currentWordIndex = distributionWordIndex;\\r\\n                    currentBits = 1 << distributionBitIndex;\\r\\n                    currentClaimAmount = claim.balance;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Since a claims set is only committed if the next one is not part of the same set, the last claims set\\r\\n            // must be manually committed always.\\r\\n            if (i == claims.length - 1) {\\r\\n                _setClaimedBits(currentChannelId, claimer, currentWordIndex, currentBits);\\r\\n                _deductClaimedBalance(currentChannelId, currentClaimAmount);\\r\\n            }\\r\\n\\r\\n            require(\\r\\n                _verifyClaim(currentChannelId, claim.distributionId, claimer, claim.balance, claim.merkleProof),\\r\\n                \\\"incorrect merkle proof\\\"\\r\\n            );\\r\\n\\r\\n            // Note that balances to claim are here accumulated *per token*, independent of the distribution channel and\\r\\n            // claims set accounting.\\r\\n            amounts[claim.tokenIndex] += claim.balance;\\r\\n\\r\\n            emit DistributionClaimed(\\r\\n                claim.distributor,\\r\\n                tokens[claim.tokenIndex],\\r\\n                claim.distributionId,\\r\\n                claimer,\\r\\n                recipient,\\r\\n                claim.balance\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IVault.UserBalanceOpKind kind = asInternalBalance\\r\\n        ? IVault.UserBalanceOpKind.TRANSFER_INTERNAL\\r\\n        : IVault.UserBalanceOpKind.WITHDRAW_INTERNAL;\\r\\n        IVault.UserBalanceOp[] memory ops = new IVault.UserBalanceOp[](tokens.length);\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            ops[i] = IVault.UserBalanceOp({\\r\\n            asset: IAsset(address(tokens[i])),\\r\\n            amount: amounts[i],\\r\\n            sender: address(this),\\r\\n            recipient: payable(recipient),\\r\\n            kind: kind\\r\\n            });\\r\\n        }\\r\\n        getVault().manageUserBalance(ops);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the bits set in `newClaimsBitmap` for the corresponding distribution.\\r\\n     */\\r\\n    function _setClaimedBits(\\r\\n        bytes32 channelId,\\r\\n        address claimer,\\r\\n        uint256 wordIndex,\\r\\n        uint256 newClaimsBitmap\\r\\n    ) private {\\r\\n        uint256 currentBitmap = _claimedBitmap[channelId][claimer][wordIndex];\\r\\n\\r\\n        // All newly set bits must not have been previously set\\r\\n        require((newClaimsBitmap & currentBitmap) == 0, \\\"cannot claim twice\\\");\\r\\n\\r\\n        _claimedBitmap[channelId][claimer][wordIndex] = currentBitmap | newClaimsBitmap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deducts `balanceBeingClaimed` from a distribution channel's allocation. This isolates tokens accross\\r\\n     * distribution channels, and prevents claims for one channel from using the tokens of another one.\\r\\n     */\\r\\n    function _deductClaimedBalance(bytes32 channelId, uint256 balanceBeingClaimed) private {\\r\\n        require(\\r\\n            _remainingBalance[channelId] >= balanceBeingClaimed,\\r\\n            \\\"distributor hasn't provided sufficient tokens for claim\\\"\\r\\n        );\\r\\n        _remainingBalance[channelId] -= balanceBeingClaimed;\\r\\n    }\\r\\n\\r\\n    function _verifyClaim(\\r\\n        bytes32 channelId,\\r\\n        uint256 distributionId,\\r\\n        address claimer,\\r\\n        uint256 claimedBalance,\\r\\n        bytes32[] memory merkleProof\\r\\n    ) internal view returns (bool) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(claimer, claimedBalance));\\r\\n        return MerkleProof.verify(merkleProof, _distributionRoot[channelId][distributionId], leaf);\\r\\n    }\\r\\n\\r\\n    function _getIndices(uint256 distributionId)\\r\\n    private\\r\\n    pure\\r\\n    returns (uint256 distributionWordIndex, uint256 distributionBitIndex)\\r\\n    {\\r\\n        distributionWordIndex = distributionId / 256;\\r\\n        distributionBitIndex = distributionId % 256;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IBalancerMinter {\\r\\n    function mint(address gauge) external returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary BalancerLibrary {\\r\\n\\r\\n    function onSwap(\\r\\n        IVault vault,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        bytes32 poolId,\\r\\n        uint256 amount\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = amount;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances, ) = vault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = vault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function queryBatchSwap(\\r\\n        IVault vault,\\r\\n        IVault.SwapKind kind,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes32 poolId0,\\r\\n        uint256 amount,\\r\\n        address sender,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](1);\\r\\n        swaps[0] = IVault.BatchSwapStep(poolId0, 0, 1, amount, new bytes(0));\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](2);\\r\\n        assets[0] = IAsset(token0);\\r\\n        assets[1] = IAsset(token1);\\r\\n\\r\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(sender, false, payable(recipient), false);\\r\\n\\r\\n        return uint256(- vault.queryBatchSwap(kind, swaps, assets, fundManagement)[1]);\\r\\n    }\\r\\n\\r\\n    function queryBatchSwap(\\r\\n        IVault vault,\\r\\n        IVault.SwapKind kind,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address token2,\\r\\n        bytes32 poolId0,\\r\\n        bytes32 poolId1,\\r\\n        uint256 amount,\\r\\n        address sender,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n        swaps[0] = IVault.BatchSwapStep(poolId0, 0, 1, amount, new bytes(0));\\r\\n        swaps[1] = IVault.BatchSwapStep(poolId1, 1, 2, 0, new bytes(0));\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = IAsset(token0);\\r\\n        assets[1] = IAsset(token1);\\r\\n        assets[2] = IAsset(token2);\\r\\n\\r\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(sender, false, payable(recipient), false);\\r\\n\\r\\n        return uint256(- vault.queryBatchSwap(kind, swaps, assets, fundManagement)[2]);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        IVault vault,\\r\\n        IVault.SwapKind kind,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes32 poolId,\\r\\n        uint256 amount,\\r\\n        uint256 limit,\\r\\n        address sender,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(token0).approve(address(vault), amount);\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(poolId, kind, IAsset(token0), IAsset(token1), amount, new bytes(0));\\r\\n\\r\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(sender, false, payable(recipient), false);\\r\\n\\r\\n        return vault.swap(singleSwap, fundManagement, limit, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        IVault vault,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes32 poolId0,\\r\\n        uint256 amount,\\r\\n        uint256 amountOutMin,\\r\\n        address sender\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n\\r\\n        IERC20(token0).approve(address(vault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](1);\\r\\n        swaps[0] = IVault.BatchSwapStep(poolId0, 0, 1, amount, new bytes(0));\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](2);\\r\\n        assets[0] = IAsset(token0);\\r\\n        assets[1] = IAsset(token1);\\r\\n\\r\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(sender, false, payable(sender), false);\\r\\n\\r\\n        int256[] memory limits = new int256[](2);\\r\\n        limits[0] = int256(amount);\\r\\n        limits[1] = - int256(amountOutMin);\\r\\n\\r\\n        amountOut = uint256(- vault.batchSwap(IVault.SwapKind.GIVEN_IN, swaps, assets, fundManagement, limits, block.timestamp)[1]);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        IVault vault,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address token2,\\r\\n        bytes32 poolId0,\\r\\n        bytes32 poolId1,\\r\\n        uint256 amount,\\r\\n        uint256 amountOutMin,\\r\\n        address sender\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n\\r\\n        IERC20(token0).approve(address(vault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n        swaps[0] = IVault.BatchSwapStep(poolId0, 0, 1, amount, new bytes(0));\\r\\n        swaps[1] = IVault.BatchSwapStep(poolId1, 1, 2, 0, new bytes(0));\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = IAsset(token0);\\r\\n        assets[1] = IAsset(token1);\\r\\n        assets[2] = IAsset(token2);\\r\\n\\r\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(sender, false, payable(sender), false);\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        limits[0] = int256(amount);\\r\\n        limits[1] = 0;\\r\\n        limits[2] = - int256(amountOutMin);\\r\\n\\r\\n        amountOut = uint256(- vault.batchSwap(IVault.SwapKind.GIVEN_IN, swaps, assets, fundManagement, limits, block.timestamp)[2]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmount1InToken0(\\r\\n        IVault vault,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes32 poolId0,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal returns (uint256 amount1InToken0) {\\r\\n        amount1InToken0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = queryBatchSwap(\\r\\n                vault,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                token0,\\r\\n                token1,\\r\\n                poolId0,\\r\\n                amount1InToken0,\\r\\n                address(this),\\r\\n                address(this)\\r\\n            );\\r\\n            amount1InToken0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount1InToken0 + reserve1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        IVault vault,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes32 poolId0,\\r\\n        uint256 amount0Total,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal returns (uint256 lpBalance) {\\r\\n        lpBalance = (totalLpBalance * amount0Total) / (reserve0 + reserve1 * denominator0 / denominator1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = queryBatchSwap(\\r\\n                vault,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                token1,\\r\\n                token0,\\r\\n                poolId0,\\r\\n                amount1,\\r\\n                address(this),\\r\\n                address(this)\\r\\n            );\\r\\n            lpBalance = (totalLpBalance * amount0Total) / (reserve0 + reserve1 * amount0 / amount1);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IBptToken is IERC20 {\\r\\n\\r\\n    function getActualSupply() external view returns (uint256);\\r\\n\\r\\n    function getRate() external view returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IGauge {\\r\\n\\r\\n    function balanceOf(address account) view external returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n\\r\\n    function claim_rewards() external;\\r\\n}\",\"keccak256\":\"0x2e9d1b1c5e904a44571096353149ab31717182e8534bcf2015c7f3cbd6fc688b\",\"license\":\"GPL-3.0-or-later\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n\\r\\n    function latestRound() external view returns (uint256);\\r\\n\\r\\n    function getAnswer(uint256 roundId) external view returns (int256);\\r\\n\\r\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n    // if they do not have data to report, instead of returning unset values\\r\\n    // which could be misinterpreted as actual reported values.\\r\\n    function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n    function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nlibrary ChainlinkLibrary {\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * price / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / price;\\r\\n    }\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        IPriceFeed oracle0,\\r\\n        IPriceFeed oracle1\\r\\n    ) internal view returns (uint256 amount1) {\\r\\n        uint256 price0 = getPrice(oracle0);\\r\\n        uint256 price1 = getPrice(oracle1);\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function getPrice(IPriceFeed oracle) internal view returns (uint256){\\r\\n        (uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = oracle.latestRoundData();\\r\\n        require(answeredInRound >= roundID, \\\"Old data\\\");\\r\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\r\\n        return uint256(price);\\r\\n\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * getPrice(oracle) / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / getPrice(oracle);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfacfe79aec4b4149ea003967cc78b66f8f667ea592bae768273a80a5edec9422\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/UniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface INonfungiblePositionManager {\\r\\n    /// @notice Emitted when liquidity is increased for a position NFT\\r\\n    /// @dev Also emitted when a token is minted\\r\\n    /// @param tokenId The ID of the token for which liquidity was increased\\r\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\r\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\r\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\r\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\r\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\r\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\r\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\r\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\r\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n    /// @notice Emitted when tokens are collected for a position NFT\\r\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\r\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\r\\n    /// @param recipient The address of the account that received the collected tokens\\r\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\r\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\r\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice Returns the position information associated with a given token ID.\\r\\n    /// @dev Throws if the token ID is not valid.\\r\\n    /// @param tokenId The ID of the token that represents the position\\r\\n    /// @return nonce The nonce for permits\\r\\n    /// @return operator The address that is approved for spending\\r\\n    /// @return token0 The address of the token0 for a specific pool\\r\\n    /// @return token1 The address of the token1 for a specific pool\\r\\n    /// @return fee The fee associated with the pool\\r\\n    /// @return tickLower The lower end of the tick range for the position\\r\\n    /// @return tickUpper The higher end of the tick range for the position\\r\\n    /// @return liquidity The liquidity of the position\\r\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\r\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\r\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\r\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\r\\n    function positions(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint96 nonce,\\r\\n        address operator,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 fee,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 feeGrowthInside0LastX128,\\r\\n        uint256 feeGrowthInside1LastX128,\\r\\n        uint128 tokensOwed0,\\r\\n        uint128 tokensOwed1\\r\\n    );\\r\\n\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a new position wrapped in a NFT\\r\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\r\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\r\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\r\\n    /// @return tokenId The ID of the token that represents the minted position\\r\\n    /// @return liquidity The amount of liquidity for this position\\r\\n    /// @return amount0 The amount of token0\\r\\n    /// @return amount1 The amount of token1\\r\\n    function mint(MintParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint256 tokenId,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\r\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\r\\n    /// amount0Desired The desired amount of token0 to be spent,\\r\\n    /// amount1Desired The desired amount of token1 to be spent,\\r\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\r\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\r\\n    /// deadline The time by which the transaction must be included to effect the change\\r\\n    /// @return liquidity The new liquidity amount as a result of the increase\\r\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\r\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\r\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\r\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\r\\n    /// amount The amount by which liquidity will be decreased,\\r\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\r\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\r\\n    /// deadline The time by which the transaction must be included to effect the change\\r\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\r\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\r\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\r\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\r\\n    /// recipient The account that should receive the tokens,\\r\\n    /// amount0Max The maximum amount of token0 to collect,\\r\\n    /// amount1Max The maximum amount of token1 to collect\\r\\n    /// @return amount0 The amount of fees collected in token0\\r\\n    /// @return amount1 The amount of fees collected in token1\\r\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\r\\n    /// must be collected first.\\r\\n    /// @param tokenId The ID of the token that is being burned\\r\\n    function burn(uint256 tokenId) external payable;\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Callback for IUniswapV3PoolActions#swap\\r\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\r\\ninterface IUniswapV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\r\\n    function uniswapV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV3Pool {\\r\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\r\\n    /// @return The contract address\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @notice The first of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /// @notice The second of the two tokens of the pool, sorted by address\\r\\n    /// @return The token contract address\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\r\\n    /// @return The fee\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    /// @notice The pool tick spacing\\r\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\r\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\r\\n    /// This value is an int24 to avoid casting even though it is always positive.\\r\\n    /// @return The tick spacing\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n    /// @return The max amount of liquidity per tick\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n\\r\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\r\\n    /// when accessed externally.\\r\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\r\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\r\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\r\\n    /// boundary.\\r\\n    /// observationIndex The index of the last oracle observation that was written,\\r\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\r\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\r\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\r\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\r\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\r\\n    /// unlocked Whether the pool is currently locked to reentrancy\\r\\n    function slot0()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint160 sqrtPriceX96,\\r\\n        int24 tick,\\r\\n        uint16 observationIndex,\\r\\n        uint16 observationCardinality,\\r\\n        uint16 observationCardinalityNext,\\r\\n        uint8 feeProtocol,\\r\\n        bool unlocked\\r\\n    );\\r\\n\\r\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n\\r\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\r\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\r\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\r\\n\\r\\n    /// @notice The currently in range liquidity available to the pool\\r\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    /// @notice Look up information about a specific tick in the pool\\r\\n    /// @param tick The tick to look up\\r\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\r\\n    /// tick upper,\\r\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\r\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\r\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\r\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\r\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\r\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\r\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\r\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\r\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n    /// a specific position.\\r\\n    function ticks(int24 tick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint128 liquidityGross,\\r\\n        int128 liquidityNet,\\r\\n        uint256 feeGrowthOutside0X128,\\r\\n        uint256 feeGrowthOutside1X128,\\r\\n        int56 tickCumulativeOutside,\\r\\n        uint160 secondsPerLiquidityOutsideX128,\\r\\n        uint32 secondsOutside,\\r\\n        bool initialized\\r\\n    );\\r\\n\\r\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\r\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns the information about a position by the position's key\\r\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\r\\n    /// @return _liquidity The amount of liquidity in the position,\\r\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\r\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\r\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\r\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n    function positions(bytes32 key)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint128 _liquidity,\\r\\n        uint256 feeGrowthInside0LastX128,\\r\\n        uint256 feeGrowthInside1LastX128,\\r\\n        uint128 tokensOwed0,\\r\\n        uint128 tokensOwed1\\r\\n    );\\r\\n\\r\\n    /// @notice Returns data about a specific observation index\\r\\n    /// @param index The element of the observations array to fetch\\r\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\r\\n    /// ago, rather than at a specific index in the array.\\r\\n    /// @return blockTimestamp The timestamp of the observation,\\r\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\r\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\r\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\r\\n    function observations(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint32 blockTimestamp,\\r\\n        int56 tickCumulative,\\r\\n        uint160 secondsPerLiquidityCumulativeX128,\\r\\n        bool initialized\\r\\n    );\\r\\n\\r\\n    function observe(uint32[] calldata secondsAgos)\\r\\n    external\\r\\n    view\\r\\n    returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // 512-bit multiply [prod1 prod0] = a * b\\r\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n        // then use the Chinese Remainder Theorem to reconstruct\\r\\n        // the 512 bit result. The result is stored in two 256\\r\\n        // variables such that product = prod1 * 2**256 + prod0\\r\\n        uint256 prod0; // Least significant 256 bits of the product\\r\\n        uint256 prod1; // Most significant 256 bits of the product\\r\\n        assembly {\\r\\n            let mm := mulmod(a, b, not(0))\\r\\n            prod0 := mul(a, b)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        // Handle non-overflow cases, 256 by 256 division\\r\\n        if (prod1 == 0) {\\r\\n            require(denominator > 0);\\r\\n            assembly {\\r\\n                result := div(prod0, denominator)\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        // Make sure the result is less than 2**256.\\r\\n        // Also prevents denominator == 0\\r\\n        require(denominator > prod1);\\r\\n\\r\\n        ///////////////////////////////////////////////\\r\\n        // 512 by 256 division.\\r\\n        ///////////////////////////////////////////////\\r\\n\\r\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n        // Compute remainder using mulmod\\r\\n        uint256 remainder;\\r\\n        assembly {\\r\\n            remainder := mulmod(a, b, denominator)\\r\\n        }\\r\\n        // Subtract 256 bit number from 512 bit number\\r\\n        assembly {\\r\\n            prod1 := sub(prod1, gt(remainder, prod0))\\r\\n            prod0 := sub(prod0, remainder)\\r\\n        }\\r\\n\\r\\n        // Factor powers of two out of denominator\\r\\n        // Compute largest power of two divisor of denominator.\\r\\n        // Always >= 1.\\r\\n        unchecked {\\r\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\r\\n            // Divide denominator by power of two\\r\\n            assembly {\\r\\n                denominator := div(denominator, twos)\\r\\n            }\\r\\n\\r\\n            // Divide [prod1 prod0] by the factors of two\\r\\n            assembly {\\r\\n                prod0 := div(prod0, twos)\\r\\n            }\\r\\n            // Shift in bits from prod1 into prod0. For this we need\\r\\n            // to flip `twos` such that it is 2**256 / twos.\\r\\n            // If twos is zero, then it becomes one\\r\\n            assembly {\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2**256\\r\\n            // Now that denominator is an odd number, it has an inverse\\r\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n            // Compute the inverse by starting with a seed that is correct\\r\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n            uint256 inv = (3 * denominator) ^ 2;\\r\\n            // Now use Newton-Raphson iteration to improve the precision.\\r\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n            // arithmetic, doubling the correct bits in each step.\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying\\r\\n            // with the modular inverse of denominator. This will give us the\\r\\n            // correct result modulo 2**256. Since the precoditions guarantee\\r\\n            // that the outcome is less than 2**256, this is the final result.\\r\\n            // We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inv;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    function mulDivRoundingUp(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n            require(result < type(uint256).max);\\r\\n            result++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary FixedPoint96 {\\r\\n    uint8 internal constant RESOLUTION = 96;\\r\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\r\\n}\\r\\n\\r\\n/// @title Liquidity amount functions\\r\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\r\\nlibrary LiquidityAmounts {\\r\\n    /// @notice Downcasts uint256 to uint128\\r\\n    /// @param x The uint258 to be downcasted\\r\\n    /// @return y The passed value, downcasted to uint128\\r\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\r\\n        require((y = uint128(x)) == x);\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\r\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount0 The amount0 being sent in\\r\\n    /// @return liquidity The amount of returned liquidity\\r\\n    function getLiquidityForAmount0(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount0\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\r\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\r\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount1 The amount1 being sent in\\r\\n    /// @return liquidity The amount of returned liquidity\\r\\n    function getLiquidityForAmount1(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount1\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\r\\n    /// pool prices and the prices at the tick boundaries\\r\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param amount0 The amount of token0 being sent in\\r\\n    /// @param amount1 The amount of token1 being sent in\\r\\n    /// @return liquidity The maximum amount of liquidity received\\r\\n    function getLiquidityForAmounts(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    ) internal pure returns (uint128 liquidity) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\r\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\r\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\r\\n\\r\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\r\\n        } else {\\r\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount0 The amount of token0\\r\\n    function getAmount0ForLiquidity(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount0) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return\\r\\n        FullMath.mulDiv(\\r\\n            uint256(liquidity) << FixedPoint96.RESOLUTION,\\r\\n            sqrtRatioBX96 - sqrtRatioAX96,\\r\\n            sqrtRatioBX96\\r\\n        ) / sqrtRatioAX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount1 The amount of token1\\r\\n    function getAmount1ForLiquidity(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\r\\n    }\\r\\n\\r\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\r\\n    /// pool prices and the prices at the tick boundaries\\r\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\r\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\r\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\r\\n    /// @param liquidity The liquidity being valued\\r\\n    /// @return amount0 The amount of token0\\r\\n    /// @return amount1 The amount of token1\\r\\n    function getAmountsForLiquidity(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity\\r\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\r\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\r\\n        } else {\\r\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n// TODO Updated -> see below TODO breakpoints\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n        //        require(absTick <= uint256(MAX_TICK), 'T'); //TODO Need convert int24 to uint256\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\r\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeCast {\\r\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\r\\n    /// @param y The uint256 to be downcasted\\r\\n    /// @return z The downcasted integer, now type uint160\\r\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\r\\n        require((z = uint160(y)) == y);\\r\\n    }\\r\\n\\r\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\r\\n    /// @param y The int256 to be downcasted\\r\\n    /// @return z The downcasted integer, now type int128\\r\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\r\\n        require((z = int128(y)) == y);\\r\\n    }\\r\\n\\r\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\r\\n    /// @param y The uint256 to be casted\\r\\n    /// @return z The casted integer, now type int256\\r\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\r\\n        require(y < 2**255);\\r\\n        z = int256(y);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary LowGasSafeMath {\\r\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x * y, reverts if overflows\\r\\n    /// @param x The multiplicand\\r\\n    /// @param y The multiplier\\r\\n    /// @return z The product of x and y\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(x == 0 || (z = x * y) / x == y);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x + y, reverts if overflows or underflows\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x + y) >= x == (y >= 0));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if overflows or underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x - y) <= x == (y >= 0));\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary UnsafeMath {\\r\\n    /// @notice Returns ceil(x / y)\\r\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n    /// @param x The dividend\\r\\n    /// @param y The divisor\\r\\n    /// @return z The quotient, ceil(x / y)\\r\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            z := add(div(x, y), gt(mod(x, y), 0))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SqrtPriceMath {\\r\\n    using LowGasSafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n\\r\\n    /// @notice Gets the next sqrt price given a delta of token0\\r\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\r\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\r\\n    /// price less in order to not send too much output.\\r\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\r\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\r\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\r\\n    /// @param liquidity The amount of usable liquidity\\r\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\r\\n    /// @param add Whether to add or remove the amount of token0\\r\\n    /// @return The price after adding or removing amount, depending on add\\r\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\r\\n        uint160 sqrtPX96,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount,\\r\\n        bool add\\r\\n    ) internal pure returns (uint160) {\\r\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\r\\n        if (amount == 0) return sqrtPX96;\\r\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\r\\n\\r\\n        if (add) {\\r\\n            uint256 product;\\r\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\r\\n                uint256 denominator = numerator1 + product;\\r\\n                if (denominator >= numerator1)\\r\\n                    // always fits in 160 bits\\r\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\r\\n            }\\r\\n\\r\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\r\\n        } else {\\r\\n            uint256 product;\\r\\n            // if the product overflows, we know the denominator underflows\\r\\n            // in addition, we must check that the denominator does not underflow\\r\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\r\\n            uint256 denominator = numerator1 - product;\\r\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the next sqrt price given a delta of token1\\r\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\r\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\r\\n    /// price less in order to not send too much output.\\r\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\r\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\r\\n    /// @param liquidity The amount of usable liquidity\\r\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\r\\n    /// @param add Whether to add, or remove, the amount of token1\\r\\n    /// @return The price after adding or removing `amount`\\r\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\r\\n        uint160 sqrtPX96,\\r\\n        uint128 liquidity,\\r\\n        uint256 amount,\\r\\n        bool add\\r\\n    ) internal pure returns (uint160) {\\r\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\r\\n        // in both cases, avoid a mulDiv for most inputs\\r\\n        if (add) {\\r\\n            uint256 quotient =\\r\\n                (\\r\\n                    amount <= type(uint160).max\\r\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\r\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\r\\n                );\\r\\n\\r\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\r\\n        } else {\\r\\n            uint256 quotient =\\r\\n                (\\r\\n                    amount <= type(uint160).max\\r\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\r\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\r\\n                );\\r\\n\\r\\n            require(sqrtPX96 > quotient);\\r\\n            // always fits 160 bits\\r\\n            return uint160(sqrtPX96 - quotient);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\r\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\r\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\r\\n    /// @param liquidity The amount of usable liquidity\\r\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\r\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\r\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\r\\n    function getNextSqrtPriceFromInput(\\r\\n        uint160 sqrtPX96,\\r\\n        uint128 liquidity,\\r\\n        uint256 amountIn,\\r\\n        bool zeroForOne\\r\\n    ) internal pure returns (uint160 sqrtQX96) {\\r\\n        require(sqrtPX96 > 0);\\r\\n        require(liquidity > 0);\\r\\n\\r\\n        // round to make sure that we don't pass the target price\\r\\n        return\\r\\n            zeroForOne\\r\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\r\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\r\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\r\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\r\\n    /// @param liquidity The amount of usable liquidity\\r\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\r\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\r\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\r\\n    function getNextSqrtPriceFromOutput(\\r\\n        uint160 sqrtPX96,\\r\\n        uint128 liquidity,\\r\\n        uint256 amountOut,\\r\\n        bool zeroForOne\\r\\n    ) internal pure returns (uint160 sqrtQX96) {\\r\\n        require(sqrtPX96 > 0);\\r\\n        require(liquidity > 0);\\r\\n\\r\\n        // round to make sure that we pass the target price\\r\\n        return\\r\\n            zeroForOne\\r\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\r\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the amount0 delta between two prices\\r\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\r\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\r\\n    /// @param sqrtRatioAX96 A sqrt price\\r\\n    /// @param sqrtRatioBX96 Another sqrt price\\r\\n    /// @param liquidity The amount of usable liquidity\\r\\n    /// @param roundUp Whether to round the amount up or down\\r\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\r\\n    function getAmount0Delta(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity,\\r\\n        bool roundUp\\r\\n    ) internal pure returns (uint256 amount0) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\r\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\r\\n\\r\\n        require(sqrtRatioAX96 > 0);\\r\\n\\r\\n        return\\r\\n            roundUp\\r\\n                ? UnsafeMath.divRoundingUp(\\r\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\r\\n                    sqrtRatioAX96\\r\\n                )\\r\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the amount1 delta between two prices\\r\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\r\\n    /// @param sqrtRatioAX96 A sqrt price\\r\\n    /// @param sqrtRatioBX96 Another sqrt price\\r\\n    /// @param liquidity The amount of usable liquidity\\r\\n    /// @param roundUp Whether to round the amount up, or down\\r\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\r\\n    function getAmount1Delta(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        uint128 liquidity,\\r\\n        bool roundUp\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n\\r\\n        return\\r\\n            roundUp\\r\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\r\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\r\\n    }\\r\\n\\r\\n    /// @notice Helper that gets signed token0 delta\\r\\n    /// @param sqrtRatioAX96 A sqrt price\\r\\n    /// @param sqrtRatioBX96 Another sqrt price\\r\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\r\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\r\\n    function getAmount0Delta(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        int128 liquidity\\r\\n    ) internal pure returns (int256 amount0) {\\r\\n        return\\r\\n            liquidity < 0\\r\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\r\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\r\\n    }\\r\\n\\r\\n    /// @notice Helper that gets signed token1 delta\\r\\n    /// @param sqrtRatioAX96 A sqrt price\\r\\n    /// @param sqrtRatioBX96 Another sqrt price\\r\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\r\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\r\\n    function getAmount1Delta(\\r\\n        uint160 sqrtRatioAX96,\\r\\n        uint160 sqrtRatioBX96,\\r\\n        int128 liquidity\\r\\n    ) internal pure returns (int256 amount1) {\\r\\n        return\\r\\n            liquidity < 0\\r\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\r\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary UniswapV3Library {\\r\\n\\r\\n    function singleSwap(\\r\\n        ISwapRouter swapRouter,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        address recipient,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMinimum\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n\\r\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\r\\n\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\r\\n            tokenIn: tokenIn,\\r\\n            tokenOut: tokenOut,\\r\\n            fee: fee,\\r\\n            recipient: recipient,\\r\\n            amountIn: amountIn,\\r\\n            amountOutMinimum: amountOutMinimum,\\r\\n            sqrtPriceLimitX96: 0\\r\\n        });\\r\\n\\r\\n        amountOut = swapRouter.exactInputSingle(params);\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        ISwapRouter swapRouter,\\r\\n        address tokenIn,\\r\\n        address tokenMid,\\r\\n        address tokenOut,\\r\\n        uint24 fee0,\\r\\n        uint24 fee1,\\r\\n        address recipient,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMinimum\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n\\r\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\r\\n\\r\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\r\\n            path: abi.encodePacked(tokenIn, fee0, tokenMid, fee1, tokenOut),\\r\\n            recipient: recipient,\\r\\n            amountIn: amountIn,\\r\\n            amountOutMinimum: amountOutMinimum\\r\\n        });\\r\\n\\r\\n        amountOut = swapRouter.exactInput(params);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IUniswapV3Pair {\\r\\n\\r\\n    function flash(\\r\\n        address recipient,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb486780b093deb7b177cf73dfb18bb4300a812f4afa1c03d4164230d54e50e04\",\"license\":\"GPL-2.0-or-later\"},\"@overnight-contracts/connectors/contracts/stuff/Wombat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface IWombatPool {\\r\\n    function getTokens() external view returns (address[] memory);\\r\\n\\r\\n    function addressOfAsset(address token) external view returns (address);\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 minimumLiquidity,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool shouldStake\\r\\n    ) external returns (uint256 liquidity);\\r\\n\\r\\n    function withdraw(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function withdrawFromOtherAsset(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function swap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\r\\n\\r\\n    function quotePotentialDeposit(address token, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 liquidity, uint256 reward);\\r\\n\\r\\n    function quotePotentialSwap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        int256 fromAmount\\r\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\r\\n\\r\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 amount, uint256 fee);\\r\\n\\r\\n    function quoteAmountIn(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        int256 toAmount\\r\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IWombatAsset is IERC20 {\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function cash() external view returns (uint120);\\r\\n\\r\\n    function liability() external view returns (uint120);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function underlyingTokenDecimals() external view returns (uint8);\\r\\n\\r\\n    function setPool(address pool_) external;\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address to, uint256 amount) external;\\r\\n\\r\\n    function addCash(uint256 amount) external;\\r\\n\\r\\n    function removeCash(uint256 amount) external;\\r\\n\\r\\n    function addLiability(uint256 amount) external;\\r\\n\\r\\n    function removeLiability(uint256 amount) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IMasterWombatV2 {\\r\\n    function userInfo(uint256 _pid, address account) external view returns(uint128 amount, uint128 factor, uint128 rewardDebt, uint128 pendingWom);\\r\\n\\r\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function pendingTokens(uint256 _pid, address _user)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 pendingRewards,\\r\\n        IERC20[] memory bonusTokenAddresses,\\r\\n        string[] memory bonusTokenSymbols,\\r\\n        uint256[] memory pendingBonusRewards\\r\\n    );\\r\\n\\r\\n    function rewarderBonusTokenInfo(uint256 _pid)\\r\\n    external\\r\\n    view\\r\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\r\\n\\r\\n    function massUpdatePools() external;\\r\\n\\r\\n    function updatePool(uint256 _pid) external;\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\r\\n\\r\\n    function multiClaim(uint256[] memory _pids)\\r\\n    external\\r\\n    returns (\\r\\n        uint256 transfered,\\r\\n        uint256[] memory rewards,\\r\\n        uint256[][] memory additionalRewards\\r\\n    );\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) external;\\r\\n\\r\\n    function migrate(uint256[] calldata _pids) external;\\r\\n\\r\\n    function depositFor(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _user\\r\\n    ) external;\\r\\n\\r\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IWombatRouter {\\r\\n    function getAmountOut(\\r\\n        address[] calldata tokenPath,\\r\\n        address[] calldata poolPath,\\r\\n        int256 amountIn\\r\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\r\\n     * (accounting for fees and slippage)\\r\\n     * Note: This function should be used as estimation only. The actual swap amount might\\r\\n     * be different due to precision error (the error is typically under 1e-6)\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        address[] calldata tokenPath,\\r\\n        address[] calldata poolPath,\\r\\n        uint256 amountOut\\r\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address[] calldata tokenPath,\\r\\n        address[] calldata poolPath,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    function swapExactNativeForTokens(\\r\\n        address[] calldata tokenPath, // the first address should be WBNB\\r\\n        address[] calldata poolPath,\\r\\n        uint256 minimumamountOut,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function swapExactTokensForNative(\\r\\n        address[] calldata tokenPath, // the last address should be WBNB\\r\\n        address[] calldata poolPath,\\r\\n        uint256 amountIn,\\r\\n        uint256 minimumamountOut,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    function addLiquidityNative(\\r\\n        IWombatPool pool,\\r\\n        uint256 minimumLiquidity,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool shouldStake\\r\\n    ) external payable returns (uint256 liquidity);\\r\\n\\r\\n    function removeLiquidityNative(\\r\\n        IWombatPool pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function removeLiquidityFromOtherAssetAsNative(\\r\\n        IWombatPool pool,\\r\\n        address fromToken,\\r\\n        uint256 liquidity,\\r\\n        uint256 minimumAmount,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amount);\\r\\n}\\r\\n\\r\\n\\r\\nlibrary WombatLibrary {\\r\\n\\r\\n    struct CalculateParams {\\r\\n        IWombatRouter wombatRouter;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address token2;\\r\\n        address pool0;\\r\\n        uint256 amount0Total;\\r\\n        uint256 totalAmountLpTokens;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 reserve2;\\r\\n        uint256 denominator0;\\r\\n        uint256 denominator1;\\r\\n        uint256 denominator2;\\r\\n        uint256 precision;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 amountIn\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory tokenPath = new address[](2);\\r\\n        tokenPath[0] = token0;\\r\\n        tokenPath[1] = token1;\\r\\n\\r\\n        address[] memory poolPath = new address[](1);\\r\\n        poolPath[0] = pool0;\\r\\n\\r\\n        (uint256 amountOut,) = wombatRouter.getAmountOut(\\r\\n            tokenPath,\\r\\n            poolPath,\\r\\n            int256(amountIn)\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function getMultiAmountOut(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address[] memory tokens,\\r\\n        address[] memory paths,\\r\\n        uint256 amountIn\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        (uint256 amountOut,) = wombatRouter.getAmountOut(\\r\\n            tokens,\\r\\n            paths,\\r\\n            int256(amountIn)\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address[] memory tokens,\\r\\n        address[] memory paths,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(tokens[0]).approve(address(wombatRouter), fromAmount);\\r\\n\\r\\n        return wombatRouter.swapExactTokensForTokens(\\r\\n            tokens,\\r\\n            paths,\\r\\n            fromAmount,\\r\\n            minimumToAmount,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 fromAmount,\\r\\n        uint256 minimumToAmount,\\r\\n        address to\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(token0).approve(address(wombatRouter), fromAmount);\\r\\n\\r\\n        address[] memory tokenPath = new address[](2);\\r\\n        tokenPath[0] = token0;\\r\\n        tokenPath[1] = token1;\\r\\n\\r\\n        address[] memory poolPath = new address[](1);\\r\\n        poolPath[0] = pool0;\\r\\n\\r\\n        return wombatRouter.swapExactTokensForTokens(\\r\\n            tokenPath,\\r\\n            poolPath,\\r\\n            fromAmount,\\r\\n            minimumToAmount,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountToSwap(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1\\r\\n    ) internal view returns (uint256 amount0) {\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        uint256 amount1 = getAmountOut(wombatRouter, token0, token1, pool0, amount0);\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        IWombatRouter wombatRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address pool0,\\r\\n        uint256 amount0Total,\\r\\n        uint256 totalAmountLpTokens,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\r\\n        uint256 amount0 = getAmountOut(wombatRouter, token1, token0, pool0, amount1);\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 and token2 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountToSwap(CalculateParams memory params) internal view returns (uint256 amount1InToken0, uint256 amount2InToken0) {\\r\\n        uint256 amount01 = getAmountOut(params.wombatRouter, params.token0, params.token1, params.pool0, params.denominator0);\\r\\n        uint256 amount02 = getAmountOut(params.wombatRouter, params.token0, params.token2, params.pool0, params.denominator0);\\r\\n        amount1InToken0 = (params.amount0Total * params.reserve1) / (params.reserve0 * amount01 / params.denominator0\\r\\n                + params.reserve1 + params.reserve2 * amount01 / amount02);\\r\\n        amount2InToken0 = (params.amount0Total * params.reserve2) / (params.reserve0 * amount02 / params.denominator0\\r\\n                + params.reserve1 * amount02 / amount01 + params.reserve2);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     */\\r\\n    function getAmountLpTokens(CalculateParams memory params) internal view returns (uint256 amountLpTokens) {\\r\\n        uint256 amount10 = getAmountOut(params.wombatRouter, params.token1, params.token0, params.pool0, params.denominator1);\\r\\n        uint256 amount20 = getAmountOut(params.wombatRouter, params.token2, params.token0, params.pool0, params.denominator2);\\r\\n        amountLpTokens = (params.totalAmountLpTokens * params.amount0Total) / (params.reserve0\\r\\n                + params.reserve1 * amount10 / params.denominator1 + params.reserve2 * amount20 / params.denominator2);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x213ed6c62886f146d923a6820f6842a64711b874ed61f435afacef115f93852f\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IControlRole.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n    uint256 public swapSlippageBP;\\r\\n    uint256 public navSlippageBP;\\r\\n    uint256 public stakeSlippageBP;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        swapSlippageBP = 20;\\r\\n        navSlippageBP = 20;\\r\\n        stakeSlippageBP = 4;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortfolioAgent() {\\r\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\r\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setSlippages(\\r\\n        uint256 _swapSlippageBP,\\r\\n        uint256 _navSlippageBP,\\r\\n        uint256 _stakeSlippageBP\\r\\n    ) public onlyPortfolioAgent {\\r\\n        swapSlippageBP = _swapSlippageBP;\\r\\n        navSlippageBP = _navSlippageBP;\\r\\n        stakeSlippageBP = _stakeSlippageBP;\\r\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        uint256 withdrawAmount;\\r\\n        uint256 rewardAmount;\\r\\n        if (_targetIsZero) {\\r\\n            rewardAmount = _claimRewards(_beneficiary);\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 rewardAmount = _claimRewards(_to);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xdad1bb1765b23745141b982d10052842e49f7c0e2b81077bf4a15fa09896a425\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IControlRole {\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf45e3261bc0e319aeffb0f00b6843bb6398a044dd710794a5f8088a426ca84c\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf24a033c2df4207da5f2cdcf30ae65632f0063483573ddaeb92a766f8d6556d0\",\"license\":\"GPL-3.0\"},\"contracts/dai/StrategyAuraDaiUsdcUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Balancer.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Aura.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Wombat.sol\\\";\\r\\nimport \\\"./../libraries/AuraRewardUsdcUsdtDaiLibrary.sol\\\";\\r\\n\\r\\ncontract StrategyAuraDaiUsdcUsdt is Strategy {\\r\\n\\r\\n    uint256 public constant MAX_UINT_VALUE = type(uint256).max;\\r\\n\\r\\n    // --- params\\r\\n\\r\\n    IERC20 public dai;\\r\\n    IERC20 public usdc;\\r\\n    IERC20 public usdt;\\r\\n\\r\\n    IBptToken public bbamDai;\\r\\n    IBptToken public bbamUsdc;\\r\\n    IBptToken public bbamUsdt;\\r\\n    IBptToken public bpt;\\r\\n\\r\\n    IVault public vault;\\r\\n\\r\\n    bytes32 public bbamDaiPoolId;\\r\\n    bytes32 public bbamUsdcPoolId;\\r\\n    bytes32 public bbamUsdtPoolId;\\r\\n    bytes32 public poolId;\\r\\n\\r\\n    IPriceFeed public oracleDai;\\r\\n    IPriceFeed public oracleUsdc;\\r\\n    IPriceFeed public oracleUsdt;\\r\\n\\r\\n    IERC20 public auraLp;\\r\\n    AuraBoosterLite public auraBoosterLite;\\r\\n    AuraBaseRewardPool public auraBaseRewardPool;\\r\\n\\r\\n    IWombatRouter public wombatRouter;\\r\\n    address public wombatBasePool;\\r\\n\\r\\n    uint256 public daiDm;\\r\\n    uint256 public usdcDm;\\r\\n    uint256 public usdtDm;\\r\\n\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address dai;\\r\\n        address usdc;\\r\\n        address usdt;\\r\\n        address bbamDai;\\r\\n        address bbamUsdc;\\r\\n        address bbamUsdt;\\r\\n        address bpt;\\r\\n        address vault;\\r\\n        bytes32 bbamDaiPoolId;\\r\\n        bytes32 bbamUsdcPoolId;\\r\\n        bytes32 bbamUsdtPoolId;\\r\\n        bytes32 poolId;\\r\\n        address oracleDai;\\r\\n        address oracleUsdc;\\r\\n        address oracleUsdt;\\r\\n        address auraLp;\\r\\n        address auraBoosterLite;\\r\\n        address auraBaseRewardPool;\\r\\n        address wombatRouter;\\r\\n        address wombatBasePool;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- Setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        dai = IERC20(params.dai);\\r\\n        usdc = IERC20(params.usdc);\\r\\n        usdt = IERC20(params.usdt);\\r\\n\\r\\n        bbamDai = IBptToken(params.bbamDai);\\r\\n        bbamUsdc = IBptToken(params.bbamUsdc);\\r\\n        bbamUsdt = IBptToken(params.bbamUsdt);\\r\\n        bpt = IBptToken(params.bpt);\\r\\n\\r\\n        vault = IVault(params.vault);\\r\\n\\r\\n        bbamDaiPoolId = params.bbamDaiPoolId;\\r\\n        bbamUsdcPoolId = params.bbamUsdcPoolId;\\r\\n        bbamUsdtPoolId = params.bbamUsdtPoolId;\\r\\n        poolId = params.poolId;\\r\\n\\r\\n        oracleDai = IPriceFeed(params.oracleDai);\\r\\n        oracleUsdc = IPriceFeed(params.oracleUsdc);\\r\\n        oracleUsdt = IPriceFeed(params.oracleUsdt);\\r\\n\\r\\n        auraLp = IERC20(params.auraLp);\\r\\n        auraBoosterLite = AuraBoosterLite(params.auraBoosterLite);\\r\\n        auraBaseRewardPool = AuraBaseRewardPool(params.auraBaseRewardPool);\\r\\n\\r\\n        wombatRouter = IWombatRouter(params.wombatRouter);\\r\\n        wombatBasePool = params.wombatBasePool;\\r\\n\\r\\n        daiDm = 10 ** IERC20Metadata(params.dai).decimals();\\r\\n        usdcDm = 10 ** IERC20Metadata(params.usdc).decimals();\\r\\n        usdtDm = 10 ** IERC20Metadata(params.usdt).decimals();\\r\\n\\r\\n        bbamDai.approve(address(vault), MAX_UINT_VALUE);\\r\\n        bbamUsdc.approve(address(vault), MAX_UINT_VALUE);\\r\\n        bbamUsdt.approve(address(vault), MAX_UINT_VALUE);\\r\\n        bpt.approve(address(auraBoosterLite), MAX_UINT_VALUE);\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n\\r\\n        (uint256 amountUsdcInDai, uint256 amountUsdtInDai) = _calcAmountsToSwap(dai.balanceOf(address(this)));\\r\\n\\r\\n        _swapDaiToTokens(amountUsdcInDai, amountUsdtInDai);\\r\\n\\r\\n        _swapAssetToBptToken(dai, bbamDai, bbamDaiPoolId, 1e18);\\r\\n        _swapAssetToBptToken(usdc, bbamUsdc, bbamUsdcPoolId, 1e30);\\r\\n        _swapAssetToBptToken(usdt, bbamUsdt, bbamUsdtPoolId, 1e30);\\r\\n\\r\\n        (IERC20[] memory tokens,,) = vault.getPoolTokens(poolId);\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](4);\\r\\n        uint256[] memory maxAmountsIn = new uint256[](4);\\r\\n\\r\\n        // Must be without bpt fantom token\\r\\n        uint256[] memory amountsIn = new uint256[](3);\\r\\n\\r\\n        for (uint256 i; i < tokens.length; i++) {\\r\\n            assets[i] = IAsset(address(tokens[i]));\\r\\n\\r\\n            if (address(tokens[i]) == address(bbamDai)) {\\r\\n                amountsIn[i] = bbamDai.balanceOf(address(this));\\r\\n                maxAmountsIn[i] = MAX_UINT_VALUE;\\r\\n            } else if (address(tokens[i]) == address(bbamUsdc)) {\\r\\n                amountsIn[i] = bbamUsdc.balanceOf(address(this));\\r\\n                maxAmountsIn[i] = MAX_UINT_VALUE;\\r\\n            } else if (address(tokens[i]) == address(bbamUsdt)) {\\r\\n                amountsIn[i] = bbamUsdt.balanceOf(address(this));\\r\\n                maxAmountsIn[i] = MAX_UINT_VALUE;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 EXACT_TOKENS_IN_FOR_BPT_OUT = 1;\\r\\n        uint256 minimumBPT = 1;\\r\\n        bytes memory userData = abi.encode(EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT);\\r\\n\\r\\n        IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest(assets, maxAmountsIn, userData, false);\\r\\n\\r\\n        // 2. Put into Stable pool\\r\\n        vault.joinPool(poolId, address(this), address(this), request);\\r\\n\\r\\n        // 3. Put bpt tokens to Aura\\r\\n        uint256 bptAmount = bpt.balanceOf(address(this));\\r\\n        auraBoosterLite.deposit(2, bptAmount, true);\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        _unstakeDai(_amount);\\r\\n\\r\\n        return dai.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        if (auraLp.balanceOf(address(this)) > 0) {\\r\\n            _unstakeDai(_totalValue());\\r\\n        }\\r\\n\\r\\n        return dai.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeDai(uint256 amount) internal {\\r\\n        (uint256 daiBptAmount, uint256 usdcBptAmount, uint256 usdtBptAmount) = _getBptAmounts(OvnMath.addBasisPoints(amount, swapSlippageBP));\\r\\n\\r\\n        uint256 totalBpt = daiBptAmount + usdcBptAmount + usdtBptAmount;\\r\\n\\r\\n        uint256 bptBalance = auraLp.balanceOf(address(this));\\r\\n        if (totalBpt > bptBalance) {\\r\\n            totalBpt = bptBalance;\\r\\n        }\\r\\n\\r\\n        auraBaseRewardPool.withdrawAndUnwrap(totalBpt, false);\\r\\n\\r\\n        BalancerLibrary.batchSwap(\\r\\n            vault,\\r\\n            address(bpt),\\r\\n            address(bbamDai),\\r\\n            address(dai),\\r\\n            poolId,\\r\\n            bbamDaiPoolId,\\r\\n            daiBptAmount,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        BalancerLibrary.batchSwap(\\r\\n            vault,\\r\\n            address(bpt),\\r\\n            address(bbamUsdc),\\r\\n            address(usdc),\\r\\n            poolId,\\r\\n            bbamUsdcPoolId,\\r\\n            usdcBptAmount,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        if (totalBpt == bptBalance) {\\r\\n            usdtBptAmount = bpt.balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        BalancerLibrary.batchSwap(\\r\\n            vault,\\r\\n            address(bpt),\\r\\n            address(bbamUsdt),\\r\\n            address(usdt),\\r\\n            poolId,\\r\\n            bbamUsdtPoolId,\\r\\n            usdtBptAmount,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        _swapTokensToDai();\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function _totalValue() internal view returns (uint256){\\r\\n        uint256 daiBalance = dai.balanceOf(address(this));\\r\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n\\r\\n        uint256 bptAmount = auraLp.balanceOf(address(this));\\r\\n        if (bptAmount > 0) {\\r\\n            // total used tokens\\r\\n            uint256 totalActualSupply = bpt.getActualSupply();\\r\\n\\r\\n            (IERC20[] memory tokens, uint256[] memory balances,) = vault.getPoolTokens(poolId);\\r\\n\\r\\n            for (uint256 i = 0; i < tokens.length; i++) {\\r\\n\\r\\n                address token = address(tokens[i]);\\r\\n\\r\\n                // calculate share\\r\\n                uint256 amountToken = balances[i] * bptAmount / totalActualSupply;\\r\\n\\r\\n                if (token == address(bbamDai)) {\\r\\n                    // bpt token convert to underlying tokens by Rate\\r\\n                    // e18 + e18 - e30 = e6\\r\\n                    daiBalance += amountToken * bbamDai.getRate() / 1e18;\\r\\n                } else if (token == address(bbamUsdc)) {\\r\\n                    // bpt token convert to underlying tokens by Rate\\r\\n                    // e18 + e18 - e30 = e6\\r\\n                    usdcBalance += amountToken * bbamUsdc.getRate() / 1e30;\\r\\n                } else if (token == address(bbamUsdt)) {\\r\\n                    // bpt token convert to underlying tokens by Rate\\r\\n                    // e18 + e18 - e18 = e18\\r\\n                    usdtBalance = amountToken * bbamUsdt.getRate() / 1e30;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        daiBalance += _oracleUsdcToDai(usdcBalance);\\r\\n        daiBalance += _oracleUsdtToDai(usdtBalance);\\r\\n\\r\\n        return daiBalance;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        // claim rewards\\r\\n\\r\\n        if(auraLp.balanceOf(address(this)) == 0){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        auraBaseRewardPool.getReward();\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 balanceBefore = dai.balanceOf(address(this));\\r\\n        AuraRewardUsdcUsdtDaiLibrary.swapBalToDai();\\r\\n        AuraRewardUsdcUsdtDaiLibrary.swapAuraToDai();\\r\\n        uint256 totalDai = dai.balanceOf(address(this)) - balanceBefore;\\r\\n\\r\\n        if (totalDai > 0) {\\r\\n            dai.transfer(_to, totalDai);\\r\\n        }\\r\\n\\r\\n        return totalDai;\\r\\n    }\\r\\n\\r\\n    function _calcAmountsToSwap(uint256 amountDaiTotal) internal returns (uint256 amountUsdcInDai, uint256 amountUsdtInDai) {\\r\\n\\r\\n        uint256 reserveDai;\\r\\n        uint256 reserveUsdc;\\r\\n        uint256 reserveUsdt;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances,) = vault.getPoolTokens(poolId);\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n\\r\\n            address token = address(tokens[i]);\\r\\n\\r\\n            if (token == address(bbamDai)) {\\r\\n                reserveDai = balances[i] * bbamDai.getRate() / 1e18;\\r\\n            } else if (token == address(bbamUsdc)) {\\r\\n                reserveUsdc = balances[i] * bbamUsdc.getRate() / 1e30;\\r\\n            } else if (token == address(bbamUsdt)) {\\r\\n                reserveUsdt = balances[i] * bbamUsdt.getRate() / 1e30;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        uint256 amountDaiUsdc = _oracleDaiToUsdc(daiDm);\\r\\n        uint256 amountDaiUsdt = _oracleDaiToUsdt(daiDm);\\r\\n\\r\\n        amountUsdcInDai = (amountDaiTotal * reserveUsdc) / (reserveDai * amountDaiUsdc / daiDm\\r\\n                + reserveUsdc + reserveUsdt * amountDaiUsdc / amountDaiUsdt);\\r\\n        amountUsdtInDai = (amountDaiTotal * reserveUsdt) / (reserveDai * amountDaiUsdt / daiDm\\r\\n                + reserveUsdc * amountDaiUsdt / amountDaiUsdc + reserveUsdt);\\r\\n    }\\r\\n\\r\\n    function _swapTokensToDai() internal {\\r\\n\\r\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\r\\n        WombatLibrary.swapExactTokensForTokens(\\r\\n            wombatRouter,\\r\\n            address(usdc),\\r\\n            address(dai),\\r\\n            wombatBasePool,\\r\\n            usdcBalance,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        WombatLibrary.swapExactTokensForTokens(\\r\\n            wombatRouter,\\r\\n            address(usdt),\\r\\n            address(dai),\\r\\n            wombatBasePool,\\r\\n            usdtBalance,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapDaiToTokens(uint256 amountUsdcInDai, uint256 amountUsdtInDai) internal {\\r\\n\\r\\n        WombatLibrary.swapExactTokensForTokens(\\r\\n            wombatRouter,\\r\\n            address(dai),\\r\\n            address(usdc),\\r\\n            wombatBasePool,\\r\\n            amountUsdcInDai,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        WombatLibrary.swapExactTokensForTokens(\\r\\n            wombatRouter,\\r\\n            address(dai),\\r\\n            address(usdt),\\r\\n            wombatBasePool,\\r\\n            amountUsdtInDai,\\r\\n            0,\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapAssetToBptToken(IERC20 asset, IBptToken bptToken, bytes32 poolId, uint256 decimals) internal {\\r\\n\\r\\n        uint256 assetBalance = asset.balanceOf(address(this));\\r\\n        uint256 minAmount = OvnMath.subBasisPoints(assetBalance * decimals / bptToken.getRate(), swapSlippageBP);\\r\\n        BalancerLibrary.swap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            address(asset),\\r\\n            address(bptToken),\\r\\n            poolId,\\r\\n            assetBalance,\\r\\n            minAmount,\\r\\n            address(this),\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getBptAmounts(uint256 amount) internal view returns (uint256 daiBptAmount, uint256 usdcBptAmount, uint256 usdtBptAmount){\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances,) = vault.getPoolTokens(poolId);\\r\\n\\r\\n        uint256 reserveDai;\\r\\n        uint256 reserveUsdc;\\r\\n        uint256 reserveUsdt;\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n\\r\\n            address token = address(tokens[i]);\\r\\n\\r\\n            if (token == address(bbamDai)) {\\r\\n                reserveDai = balances[i] * bbamDai.getRate() / 1e18;\\r\\n            } else if (token == address(bbamUsdc)) {\\r\\n                reserveUsdc = balances[i] * bbamUsdc.getRate() / 1e30;\\r\\n            } else if (token == address(bbamUsdt)) {\\r\\n                reserveUsdt = balances[i] * bbamUsdt.getRate() / 1e30;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        uint256 amountDaiUsdc = _oracleDaiToUsdc(daiDm);\\r\\n        uint256 amountDaiUsdt = _oracleDaiToUsdt(daiDm);\\r\\n\\r\\n        // with decimals\\r\\n        uint256 usdcAmount = (amount * reserveUsdc) / (reserveDai\\r\\n                + reserveUsdc * daiDm / amountDaiUsdc + reserveUsdt * daiDm / amountDaiUsdt);\\r\\n        uint256 usdtAmount = (amount * reserveUsdt) / (reserveDai\\r\\n                + reserveUsdc * daiDm / amountDaiUsdc + reserveUsdt * daiDm / amountDaiUsdt);\\r\\n        uint256 daiAmount = usdcAmount * reserveDai / reserveUsdc;\\r\\n\\r\\n        daiBptAmount = daiAmount * 1e18 / bbamDai.getRate();\\r\\n        usdcBptAmount = usdcAmount * 1e30 / bbamUsdc.getRate();\\r\\n        usdtBptAmount = usdtAmount * 1e30 / bbamUsdt.getRate();\\r\\n    }\\r\\n\\r\\n    function _oracleUsdcToDai(uint256 usdcAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdc = ChainlinkLibrary.getPrice(oracleUsdc);\\r\\n        uint256 priceDai = ChainlinkLibrary.getPrice(oracleDai);\\r\\n        return ChainlinkLibrary.convertTokenToToken(usdcAmount, usdcDm, daiDm, priceUsdc, priceDai);\\r\\n    }\\r\\n\\r\\n    function _oracleUsdtToDai(uint256 usdtAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdt = ChainlinkLibrary.getPrice(oracleUsdt);\\r\\n        uint256 priceDai = ChainlinkLibrary.getPrice(oracleDai);\\r\\n        return ChainlinkLibrary.convertTokenToToken(usdtAmount, usdtDm, daiDm, priceUsdt, priceDai);\\r\\n    }\\r\\n\\r\\n    function _oracleDaiToUsdc(uint256 daiAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdc = ChainlinkLibrary.getPrice(oracleUsdc);\\r\\n        uint256 priceDai = ChainlinkLibrary.getPrice(oracleDai);\\r\\n        return ChainlinkLibrary.convertTokenToToken(daiAmount, daiDm, usdcDm, priceDai, priceUsdc);\\r\\n    }\\r\\n\\r\\n    function _oracleDaiToUsdt(uint256 daiAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdt = ChainlinkLibrary.getPrice(oracleUsdt);\\r\\n        uint256 priceDai = ChainlinkLibrary.getPrice(oracleDai);\\r\\n        return ChainlinkLibrary.convertTokenToToken(daiAmount, daiDm, usdtDm, priceDai, priceUsdt);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x88add5e767f6451b03004e75459a9c42239f9d37bfe9afa025449332025e01c0\",\"license\":\"MIT\"},\"contracts/libraries/AuraRewardUsdcUsdtDaiLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/UniswapV3.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Balancer.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary AuraRewardUsdcUsdtDaiLibrary {\\r\\n\\r\\n    function swapAuraToUsdc() public returns (uint256) {\\r\\n\\r\\n        IVault vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\r\\n        ISwapRouter uniswapV3Router = ISwapRouter(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\r\\n\\r\\n        IERC20 aura = IERC20(0x1509706a6c66CA549ff0cB464de88231DDBe213B);\\r\\n        IERC20 arb = IERC20(0x912CE59144191C1204E64559FE8253a0e49E6548);\\r\\n        IERC20 usdc = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\\r\\n\\r\\n        bytes32 auraArbPoolId = 0xbcaa6c053cab3dd73a2e898d89a4f84a180ae1ca000100000000000000000458;\\r\\n\\r\\n        uint256 auraBalance = aura.balanceOf(address(this));\\r\\n        if (auraBalance > 0) {\\r\\n            BalancerLibrary.swap(\\r\\n                vault,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                address(aura),\\r\\n                address(arb),\\r\\n                auraArbPoolId,\\r\\n                auraBalance,\\r\\n                0,\\r\\n                address(this),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 arbBalance = arb.balanceOf(address(this));\\r\\n        uint256 amountOut;\\r\\n        if (arbBalance > 1e9) {\\r\\n            amountOut = UniswapV3Library.singleSwap(\\r\\n                uniswapV3Router,\\r\\n                address(arb),\\r\\n                address(usdc),\\r\\n                500,\\r\\n                address(this),\\r\\n                arbBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function swapAuraToDai() public returns (uint256) {\\r\\n\\r\\n        IVault vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\r\\n        ISwapRouter uniswapV3Router = ISwapRouter(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\r\\n\\r\\n        IERC20 aura = IERC20(0x1509706a6c66CA549ff0cB464de88231DDBe213B);\\r\\n        IERC20 arb = IERC20(0x912CE59144191C1204E64559FE8253a0e49E6548);\\r\\n        IERC20 usdc = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\\r\\n        IERC20 dai = IERC20(0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1);\\r\\n\\r\\n        bytes32 auraArbPoolId = 0xbcaa6c053cab3dd73a2e898d89a4f84a180ae1ca000100000000000000000458;\\r\\n\\r\\n        uint256 auraBalance = aura.balanceOf(address(this));\\r\\n        if (auraBalance > 0) {\\r\\n            BalancerLibrary.swap(\\r\\n                vault,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                address(aura),\\r\\n                address(arb),\\r\\n                auraArbPoolId,\\r\\n                auraBalance,\\r\\n                0,\\r\\n                address(this),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 arbBalance = arb.balanceOf(address(this));\\r\\n        uint256 amountOut;\\r\\n        if (arbBalance > 1e9) {\\r\\n            amountOut = UniswapV3Library.multiSwap(\\r\\n                uniswapV3Router,\\r\\n                address(arb),\\r\\n                address(usdc),\\r\\n                address(dai),\\r\\n                500,\\r\\n                100,\\r\\n                address(this),\\r\\n                arbBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function swapBalToUsdc() public returns (uint256){\\r\\n\\r\\n        IERC20 bal = IERC20(0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8);\\r\\n        IERC20 weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\\r\\n        IERC20 usdc = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\\r\\n\\r\\n        bytes32 balWethPoolId = 0xcc65a812ce382ab909a11e434dbf75b34f1cc59d000200000000000000000001;\\r\\n\\r\\n        ISwapRouter uniswapV3Router = ISwapRouter(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\r\\n        IVault vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\r\\n\\r\\n        uint256 balBalance = bal.balanceOf(address(this));\\r\\n        if (balBalance > 0) {\\r\\n            BalancerLibrary.swap(\\r\\n                vault,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                address(bal),\\r\\n                address(weth),\\r\\n                balWethPoolId,\\r\\n                balBalance,\\r\\n                0,\\r\\n                address(this),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 wethBalance = weth.balanceOf(address(this));\\r\\n        uint256 amountOut;\\r\\n        if (wethBalance > 1e9) {\\r\\n            amountOut = UniswapV3Library.singleSwap(\\r\\n                uniswapV3Router,\\r\\n                address(weth),\\r\\n                address(usdc),\\r\\n                500,\\r\\n                address(this),\\r\\n                wethBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function swapBalToDai() public returns (uint256){\\r\\n\\r\\n        IERC20 bal = IERC20(0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8);\\r\\n        IERC20 weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\\r\\n        IERC20 usdc = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\\r\\n        IERC20 dai = IERC20(0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1);\\r\\n\\r\\n        bytes32 balWethPoolId = 0xcc65a812ce382ab909a11e434dbf75b34f1cc59d000200000000000000000001;\\r\\n\\r\\n        ISwapRouter uniswapV3Router = ISwapRouter(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\r\\n        IVault vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\r\\n\\r\\n        uint256 balBalance = bal.balanceOf(address(this));\\r\\n        if (balBalance > 0) {\\r\\n            BalancerLibrary.swap(\\r\\n                vault,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                address(bal),\\r\\n                address(weth),\\r\\n                balWethPoolId,\\r\\n                balBalance,\\r\\n                0,\\r\\n                address(this),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 wethBalance = weth.balanceOf(address(this));\\r\\n        uint256 amountOut;\\r\\n        if (wethBalance > 1e9) {\\r\\n            amountOut = UniswapV3Library.multiSwap(\\r\\n                uniswapV3Router,\\r\\n                address(weth),\\r\\n                address(usdc),\\r\\n                address(dai),\\r\\n                500,\\r\\n                100,\\r\\n                address(this),\\r\\n                wethBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbaa6af6107a55f2fc54372eae39f4bd8777a771bde04f93a51867423a6135791\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b62001cb11760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c615e496200018e60003960008181610984015281816109c4015281816111fe0152818161123e01526112cd0152615e496000f3fe6080604052600436106102ae5760003560e01c8063612c87df11610175578063adc9772e116100dc578063ebc09def11610095578063f4b9fa751161006f578063f4b9fa751461080e578063f6f6b8811461082f578063fb24974a1461084f578063fbfa77cf1461086557600080fd5b8063ebc09def146107c0578063ed37b369146107d7578063ef5cfb8c146107ee57600080fd5b8063adc9772e14610712578063ae30c11014610732578063bf52e08014610752578063cc6522c314610768578063d547741f14610789578063dc279b73146107a957600080fd5b8063811766fa1161012e578063811766fa146106915780638129fc1c146106a857806391d14854146106bd578063a217fddf146106dd578063a3673b38146103c4578063a440b21a146106f257600080fd5b8063612c87df146105cb578063620b75df146105ec57806376db82c11461060c57806378f9b56d1461062d5780637d5f58021461064e5780637e7316381461067057600080fd5b80633659cfe611610219578063546af3c3116101d2578063546af3c3146104fd5780635ca558f81461051e5780635dbd733a146105345780635f07c5f3146105685780635fea9cbb1461058957806360896184146105aa57600080fd5b80633659cfe61461045d5780633e0dc34e1461047d5780633e413bee146104945780634e13f313146104b55780634f1ef286146104d557806352d1902d146104e857600080fd5b8063248a9ca31161026b578063248a9ca3146103945780632576e65a146103c45780632b37dc81146103d95780632f2ff15d146103fa5780632f48ab7d1461041c57806336568abe1461043d57600080fd5b806301ffc9a7146102b35780630f9033f7146102e8578063119cd8791461030d57806315b3a0de146103235780631b1e7ddc1461035c578063244e59da14610373575b600080fd5b3480156102bf57600080fd5b506102d36102ce3660046154b8565b610886565b60405190151581526020015b60405180910390f35b3480156102f457600080fd5b506102ff6101435481565b6040519081526020016102df565b34801561031957600080fd5b506102ff60fd5481565b34801561032f57600080fd5b5061013e54610344906001600160a01b031681565b6040516001600160a01b0390911681526020016102df565b34801561036857600080fd5b506102ff6101425481565b34801561037f57600080fd5b5061014054610344906001600160a01b031681565b3480156103a057600080fd5b506102ff6103af366004615456565b60009081526065602052604090206001015490565b3480156103d057600080fd5b506102ff6108bd565b3480156103e557600080fd5b5061013c54610344906001600160a01b031681565b34801561040657600080fd5b5061041a610415366004615488565b6108cc565b005b34801561042857600080fd5b5061012f54610344906001600160a01b031681565b34801561044957600080fd5b5061041a610458366004615488565b6108f6565b34801561046957600080fd5b5061041a610478366004615188565b610979565b34801561048957600080fd5b506102ff6101385481565b3480156104a057600080fd5b5061012e54610344906001600160a01b031681565b3480156104c157600080fd5b5061041a6104d03660046154e2565b610a59565b61041a6104e33660046151a5565b6111f3565b3480156104f457600080fd5b506102ff6112c0565b34801561050957600080fd5b5061013354610344906001600160a01b031681565b34801561052a57600080fd5b506102ff60fe5481565b34801561054057600080fd5b506102ff7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561057457600080fd5b5061013954610344906001600160a01b031681565b34801561059557600080fd5b5061013a54610344906001600160a01b031681565b3480156105b657600080fd5b5061013054610344906001600160a01b031681565b3480156105d757600080fd5b5061013f54610344906001600160a01b031681565b3480156105f857600080fd5b5060fb54610344906001600160a01b031681565b34801561061857600080fd5b5061013d54610344906001600160a01b031681565b34801561063957600080fd5b5061013154610344906001600160a01b031681565b34801561065a57600080fd5b506102ff600080516020615dad83398151915281565b34801561067c57600080fd5b5061013254610344906001600160a01b031681565b34801561069d57600080fd5b506102ff6101415481565b3480156106b457600080fd5b5061041a611373565b3480156106c957600080fd5b506102d36106d8366004615488565b61143d565b3480156106e957600080fd5b506102ff600081565b3480156106fe57600080fd5b5061041a61070d366004615188565b611468565b34801561071e57600080fd5b5061041a61072d36600461524d565b611597565b34801561073e57600080fd5b5061041a61074d3660046154fb565b6117c7565b34801561075e57600080fd5b506102ff60fc5481565b34801561077457600080fd5b5061013b54610344906001600160a01b031681565b34801561079557600080fd5b5061041a6107a4366004615488565b61193c565b3480156107b557600080fd5b506102ff6101375481565b3480156107cc57600080fd5b506102ff6101355481565b3480156107e357600080fd5b506102ff6101365481565b3480156107fa57600080fd5b506102ff610809366004615188565b611961565b34801561081a57600080fd5b5061012d54610344906001600160a01b031681565b34801561083b57600080fd5b506102ff61084a366004615279565b6119e6565b34801561085b57600080fd5b506102ff60001981565b34801561087157600080fd5b5061013454610344906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806108b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006108c7611cc0565b905090565b6000828152606560205260409020600101546108e7816122c5565b6108f183836122cf565b505050565b6001600160a01b038116331461096b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6109758282612355565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109c25760405162461bcd60e51b815260040161096290615939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a0b600080516020615dcd833981519152546001600160a01b031690565b6001600160a01b031614610a315760405162461bcd60e51b815260040161096290615985565b610a3a816123bc565b60408051600080825260208201909252610a56918391906123c7565b50565b610a6460003361143d565b610aa75760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610962565b610ab46020820182615188565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610ae56040820160208301615188565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610b166060820160408301615188565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610b476080820160608301615188565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610b7860a0820160808301615188565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610ba960c0820160a08301615188565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610bda60e0820160c08301615188565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610c0c610100820160e08301615188565b61013480546001600160a01b0319166001600160a01b039290921691909117905561010081013561013555610120810135610136556101408101356101375561016081013561013855610c676101a082016101808301615188565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610c9a6101c082016101a08301615188565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610ccd6101e082016101c08301615188565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055610d0061020082016101e08301615188565b61013c80546001600160a01b0319166001600160a01b0392909216919091179055610d3361022082016102008301615188565b61013d80546001600160a01b0319166001600160a01b0392909216919091179055610d6661024082016102208301615188565b61013e80546001600160a01b0319166001600160a01b0392909216919091179055610d9961026082016102408301615188565b61013f80546001600160a01b0319166001600160a01b0392909216919091179055610dcc61028082016102608301615188565b61014080546001600160a01b0319166001600160a01b0392909216919091179055610dfa6020820182615188565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3257600080fd5b505afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190615577565b610e7590600a615bd5565b61014155610e896040820160208301615188565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec157600080fd5b505afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef99190615577565b610f0490600a615bd5565b61014255610f186060820160408301615188565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190615577565b610f9390600a615bd5565b61014355610130546101345460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015610fea57600080fd5b505af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190615439565b50610131546101345460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190615439565b50610132546101345460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561110257600080fd5b505af1158015611116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113a9190615439565b506101335461013d5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561118e57600080fd5b505af11580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190615439565b506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561123c5760405162461bcd60e51b815260040161096290615939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611285600080516020615dcd833981519152546001600160a01b031690565b6001600160a01b0316146112ab5760405162461bcd60e51b815260040161096290615985565b6112b4826123bc565b610975828260016123c7565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113605760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610962565b50600080516020615dcd83398151915290565b600054610100900460ff16158080156113935750600054600160ff909116105b806113ad5750303b1580156113ad575060005460ff166001145b6113c95760405162461bcd60e51b8152600401610962906159d1565b6000805460ff1916600117905580156113ec576000805461ff0019166101001790555b6113f4612541565b8015610a56576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61147360003361143d565b6114b65760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610962565b6001600160a01b03811661150c5760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610962565b60fb5461153190600080516020615dad833981519152906001600160a01b031661193c565b611549600080516020615dad833981519152826108cc565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001611432565b6115af600080516020615dad8339815191523361143d565b6115cb5760405162461bcd60e51b815260040161096290615902565b6000611649306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611641919061546f565b60fd54612626565b6040516370a0823160e01b81523060048201529091506116ce9084906001600160a01b038216906370a082319060240160206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c9919061546f565b612650565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561170857600080fd5b505afa15801561171c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611740919061546f565b101561178e5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610962565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6117f17fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde91373361143d565b80611898575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561186057600080fd5b505afa158015611874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118989190615439565b6118ef5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b6064820152608401610962565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a906060016117ba565b600082815260656020526040902060010154611957816122c5565b6108f18383612355565b600061197b600080516020615dad8339815191523361143d565b6119975760405162461bcd60e51b815260040161096290615902565b60006119a283612cd0565b905080156119de576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b6000611a00600080516020615dad8339815191523361143d565b611a1c5760405162461bcd60e51b815260040161096290615902565b6000611a5a306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561160957600080fd5b90506000808415611a8157611a6e86612cd0565b9050611a7a888761305f565b9150611af0565b611a8c888888613172565b915086821015611af05760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610962565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2a57600080fd5b505afa158015611b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b62919061546f565b1015611bb05760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610962565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb90604401602060405180830381600087803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c329190615439565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611ca6576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611d0957600080fd5b505afa158015611d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d41919061546f565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611d8b57600080fd5b505afa158015611d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc3919061546f565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e45919061546f565b61013c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec7919061546f565b9050801561229457610133546040805163876f303b60e01b815290516000926001600160a01b03169163876f303b916004808301926020929190829003018186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4d919061546f565b6101345461013854604051631f29a8cd60e31b8152600481019190915291925060009182916001600160a01b03169063f94d46689060240160006040518083038186803b158015611f9d57600080fd5b505afa158015611fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fd991908101906152cc565b509150915060005b825181101561228f576000838281518110611ffe57611ffe615d5d565b602002602001015190506000858785858151811061201e5761201e615d5d565b60200260200101516120309190615c80565b61203a9190615b70565b610130549091506001600160a01b03838116911614156120fe5761013054604080516333cd77e760e11b81529051670de0b6b3a7640000926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156120a157600080fd5b505afa1580156120b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d9919061546f565b6120e39083615c80565b6120ed9190615b70565b6120f7908b615b58565b995061227a565b610131546001600160a01b03838116911614156121c35761013154604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561216657600080fd5b505afa15801561217a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219e919061546f565b6121a89083615c80565b6121b29190615b70565b6121bc908a615b58565b985061227a565b610132546001600160a01b038381169116141561227a5761013254604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561222b57600080fd5b505afa15801561223f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612263919061546f565b61226d9083615c80565b6122779190615b70565b97505b5050808061228790615cf9565b915050611fe1565b505050505b61229d83613201565b6122a79085615b58565b93506122b28261324d565b6122bc9085615b58565b95945050505050565b610a568133613299565b6122d9828261143d565b6109755760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123113390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61235f828261143d565b156109755760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610975816122c5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156123fa576108f1836132f2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b505afa925050508015612463575060408051601f3d908101601f191682019092526124609181019061546f565b60015b6124c65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610962565b600080516020615dcd83398151915281146125355760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610962565b506108f183838361338e565b600054610100900460ff16158080156125615750600054600160ff909116105b8061257b5750303b15801561257b575060005460ff166001145b6125975760405162461bcd60e51b8152600401610962906159d1565b6000805460ff1916600117905580156125ba576000805461ff0019166101001790555b6125c26133b9565b6125ca6133b9565b6125d56000336122cf565b601460fc81905560fd55600460fe558015610a56576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611432565b60006127106126358382615c9f565b61263f9085615c80565b6126499190615b70565b9392505050565b61012d546040516370a0823160e01b815230600482015260009182916126d8916001600160a01b0316906370a082319060240160206040518083038186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d3919061546f565b613426565b915091506126e68282613854565b61012d546101305461013554612712926001600160a01b03908116921690670de0b6b3a76400006138b5565b61012e546101315461013654612742926001600160a01b0390811692169068327cb2734119d3b7a9601e1b6138b5565b61012f546101325461013754612772926001600160a01b0390811692169068327cb2734119d3b7a9601e1b6138b5565b6101345461013854604051631f29a8cd60e31b815260048101919091526000916001600160a01b03169063f94d46689060240160006040518083038186803b1580156127bd57600080fd5b505afa1580156127d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f991908101906152cc565b505060408051600480825260a082019092529192506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833750506040805160038082526080820190925292935060009291506020820160608036833701905050905060005b8451811015612b205784818151811061288857612888615d5d565b60200260200101518482815181106128a2576128a2615d5d565b6001600160a01b0392831660209182029290920101526101305486519116908690839081106128d3576128d3615d5d565b60200260200101516001600160a01b031614156129ab57610130546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b15801561292f57600080fd5b505afa158015612943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612967919061546f565b82828151811061297957612979615d5d565b60200260200101818152505060001983828151811061299a5761299a615d5d565b602002602001018181525050612b0e565b6101315485516001600160a01b03909116908690839081106129cf576129cf615d5d565b60200260200101516001600160a01b03161415612a1757610131546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612917565b6101325485516001600160a01b0390911690869083908110612a3b57612a3b615d5d565b60200260200101516001600160a01b03161415612b0e57610132546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612a9657600080fd5b505afa158015612aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ace919061546f565b828281518110612ae057612ae0615d5d565b602002602001018181525050600019838281518110612b0157612b01615d5d565b6020026020010181815250505b80612b1881615cf9565b91505061286d565b506040516001908190600090612b3e90839086908290602001615ada565b60408051601f1981840301815260808301825288835260208301889052828201819052600060608401526101345461013854925163172b958560e31b81529194506001600160a01b03169163b95cac2891612ba29190309081908790600401615741565b600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b5050610133546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612c1b57600080fd5b505afa158015612c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c53919061546f565b61013d546040516321d0683360e11b81526002600482015260248101839052600160448201529192506001600160a01b0316906343a0d06690606401600060405180830381600087803b158015612ca957600080fd5b505af1158015612cbd573d6000803e3d6000fd5b5050505050505050505050505050505050565b61013c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d1557600080fd5b505afa158015612d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4d919061546f565b612d5957506000919050565b61013e60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612daa57600080fd5b505af1158015612dbe573d6000803e3d6000fd5b505061012d546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612e0957600080fd5b505afa158015612e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e41919061546f565b905073__$1e0a0e1dc704688c094f02620037e329cc$__63a6e464806040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8757600080fd5b505af4158015612e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebf919061546f565b5073__$1e0a0e1dc704688c094f02620037e329cc$__63388002bb6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0457600080fd5b505af4158015612f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3c919061546f565b5061012d546040516370a0823160e01b815230600482015260009183916001600160a01b03909116906370a082319060240160206040518083038186803b158015612f8657600080fd5b505afa158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe919061546f565b612fc89190615c9f565b905080156126495761012d5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561301f57600080fd5b505af1158015613033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130579190615439565b509392505050565b61013c546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156130a857600080fd5b505afa1580156130bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e0919061546f565b11156130f6576130f66130f1611cc0565b6139ee565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561313a57600080fd5b505afa15801561314e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612649919061546f565b600061317d836139ee565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156131c157600080fd5b505afa1580156131d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f9919061546f565b949350505050565b61013a54600090819061321c906001600160a01b0316613c67565b61013954909150600090613238906001600160a01b0316613c67565b90506131f98461014254610141548585613d8b565b61013b546000908190613268906001600160a01b0316613c67565b61013954909150600090613284906001600160a01b0316613c67565b90506131f98461014354610141548585613d8b565b6132a3828261143d565b610975576132b081613dc0565b6132bb836020613dd2565b6040516020016132cc929190615678565b60408051601f198184030181529082905262461bcd60e51b8252610962916004016158ef565b6001600160a01b0381163b61335f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610962565b600080516020615dcd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61339783613f6e565b6000825111806133a45750805b156108f1576133b38383613fae565b50505050565b600054610100900460ff166134245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610962565b565b6101345461013854604051631f29a8cd60e31b815260048101919091526000918291829182918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561347d57600080fd5b505afa158015613491573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134b991908101906152cc565b509150915060005b82518110156137765760008382815181106134de576134de615d5d565b6020908102919091010151610130549091506001600160a01b03808316911614156135bd5761013054604080516333cd77e760e11b81529051670de0b6b3a7640000926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561355057600080fd5b505afa158015613564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613588919061546f565b84848151811061359a5761359a615d5d565b60200260200101516135ac9190615c80565b6135b69190615b70565b9650613763565b610131546001600160a01b03828116911614156136925761013154604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561362557600080fd5b505afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d919061546f565b84848151811061366f5761366f615d5d565b60200260200101516136819190615c80565b61368b9190615b70565b9550613763565b610132546001600160a01b03828116911614156137635761013254604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156136fa57600080fd5b505afa15801561370e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613732919061546f565b84848151811061374457613744615d5d565b60200260200101516137569190615c80565b6137609190615b70565b94505b508061376e81615cf9565b9150506134c1565b50600061378561014154614099565b90506000613795610141546140e5565b9050806137a28387615c80565b6137ac9190615b70565b6101415487906137bc858b615c80565b6137c69190615b70565b6137d09190615b58565b6137da9190615b58565b6137e4878c615c80565b6137ee9190615b70565b985084826137fc8389615c80565b6138069190615b70565b61014154613814848b615c80565b61381e9190615b70565b6138289190615b58565b6138329190615b58565b61383c868c615c80565b6138469190615b70565b975050505050505050915091565b61013f5461012d5461012e5461014054613884936001600160a01b03908116938116928116911686600030614131565b5061013f5461012d5461012f54610140546108f1936001600160a01b03908116938116928116911685600030614131565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b1580156138f757600080fd5b505afa15801561390b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392f919061546f565b905060006139c3856001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b15801561396f57600080fd5b505afa158015613983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a7919061546f565b6139b18585615c80565b6139bb9190615b70565b60fc54612626565b610134549091506139e5906001600160a01b0316600088888887873080614317565b50505050505050565b6000806000613a07613a028560fc546144d1565b6144e0565b91945092509050600081613a1b8486615b58565b613a259190615b58565b61013c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015613a6f57600080fd5b505afa158015613a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa7919061546f565b905080821115613ab5578091505b61013e54604051636197390160e11b815260048101849052600060248201526001600160a01b039091169063c32e720290604401600060405180830381600087803b158015613b0357600080fd5b505af1158015613b17573d6000803e3d6000fd5b505061013454610133546101305461012d546101385461013554613b5997506001600160a01b039586169650938516949283169392909116918b600030614b31565b5061013454610133546101315461012e546101385461013654613b94956001600160a01b03908116958116948116931691908a600030614b31565b5080821415613c1c57610133546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613be157600080fd5b505afa158015613bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c19919061546f565b92505b61013454610133546101325461012f546101385461013754613c56956001600160a01b039081169581169481169316919089600030614b31565b50613c5f614f59565b505050505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015613ca857600080fd5b505afa158015613cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce09190615527565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff161015613d3c5760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b6044820152606401610962565b60008211613d815760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606401610962565b5090949350505050565b6000613d978286615c80565b83613da28689615c80565b613dac9190615c80565b613db69190615b70565b9695505050505050565b60606108b76001600160a01b03831660145b60606000613de1836002615c80565b613dec906002615b58565b67ffffffffffffffff811115613e0457613e04615d73565b6040519080825280601f01601f191660200182016040528015613e2e576020820181803683370190505b509050600360fc1b81600081518110613e4957613e49615d5d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613e7857613e78615d5d565b60200101906001600160f81b031916908160001a9053506000613e9c846002615c80565b613ea7906001615b58565b90505b6001811115613f1f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613edb57613edb615d5d565b1a60f81b828281518110613ef157613ef1615d5d565b60200101906001600160f81b031916908160001a90535060049490941c93613f1881615ce2565b9050613eaa565b5083156126495760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610962565b613f77816132f2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6140165760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610962565b600080846001600160a01b031684604051614031919061565c565b600060405180830381855af49150503d806000811461406c576040519150601f19603f3d011682016040523d82523d6000602084013e614071565b606091505b50915091506122bc8282604051806060016040528060278152602001615ded602791396150be565b61013a5460009081906140b4906001600160a01b0316613c67565b610139549091506000906140d0906001600160a01b0316613c67565b90506131f98461014154610142548486613d8b565b61013b546000908190614100906001600160a01b0316613c67565b6101395490915060009061411c906001600160a01b0316613c67565b90506131f98461014154610143548486613d8b565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018590526000919088169063095ea7b390604401602060405180830381600087803b15801561417f57600080fd5b505af1158015614193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b79190615439565b5060408051600280825260608201835260009260208301908036833701905050905087816000815181106141ed576141ed615d5d565b60200260200101906001600160a01b031690816001600160a01b031681525050868160018151811061422157614221615d5d565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050868160008151811061427257614272615d5d565b6001600160a01b03928316602091820292909201015260405163351041e960e21b8152908b169063d44107a4906142b790859085908b908b908b9042906004016156ed565b602060405180830381600087803b1580156142d157600080fd5b505af11580156142e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614309919061546f565b9a9950505050505050505050565b60405163095ea7b360e01b81526001600160a01b038a81166004830152602482018690526000919089169063095ea7b390604401602060405180830381600087803b15801561436557600080fd5b505af1158015614379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061439d9190615439565b5060006040518060c001604052808881526020018b60018111156143c3576143c3615d47565b81526001600160a01b03808c1660208301528a1660408201526060810188905260800160006040519080825280601f01601f191660200182016040528015614412576020820181803683370190505b509052604080516080810182526001600160a01b03808816825260006020830181905287821683850152606083015291516352bbbe2960e01b815292935091908d16906352bbbe299061446f90859085908b904290600401615a1f565b602060405180830381600087803b15801561448957600080fd5b505af115801561449d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c1919061546f565b9c9b505050505050505050505050565b60006127106126358382615b58565b6101345461013854604051631f29a8cd60e31b8152600481019190915260009182918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561453357600080fd5b505afa158015614547573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261456f91908101906152cc565b50909250905060008080805b855181101561483057600086828151811061459857614598615d5d565b6020908102919091010151610130549091506001600160a01b03808316911614156146775761013054604080516333cd77e760e11b81529051670de0b6b3a7640000926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561460a57600080fd5b505afa15801561461e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614642919061546f565b87848151811061465457614654615d5d565b60200260200101516146669190615c80565b6146709190615b70565b945061481d565b610131546001600160a01b038281169116141561474c5761013154604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156146df57600080fd5b505afa1580156146f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614717919061546f565b87848151811061472957614729615d5d565b602002602001015161473b9190615c80565b6147459190615b70565b935061481d565b610132546001600160a01b038281169116141561481d5761013254604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156147b457600080fd5b505afa1580156147c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ec919061546f565b8784815181106147fe576147fe615d5d565b60200260200101516148109190615c80565b61481a9190615b70565b92505b508061482881615cf9565b91505061457b565b50600061483f61014154614099565b9050600061484f610141546140e5565b905060008161014154856148639190615c80565b61486d9190615b70565b83610141548761487d9190615c80565b6148879190615b70565b6148919088615b58565b61489b9190615b58565b6148a5868e615c80565b6148af9190615b70565b905060008261014154866148c39190615c80565b6148cd9190615b70565b8461014154886148dd9190615c80565b6148e79190615b70565b6148f19089615b58565b6148fb9190615b58565b614905868f615c80565b61490f9190615b70565b905060008661491e8985615c80565b6149289190615b70565b905061013060009054906101000a90046001600160a01b03166001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b15801561497957600080fd5b505afa15801561498d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149b1919061546f565b6149c382670de0b6b3a7640000615c80565b6149cd9190615b70565b9c5061013160009054906101000a90046001600160a01b03166001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a1e57600080fd5b505afa158015614a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a56919061546f565b614a6c8468327cb2734119d3b7a9601e1b615c80565b614a769190615b70565b9b5061013260009054906101000a90046001600160a01b03166001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b158015614ac757600080fd5b505afa158015614adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aff919061546f565b614b158368327cb2734119d3b7a9601e1b615c80565b614b1f9190615b70565b9c9e9b9d505050505050505050505050565b60405163095ea7b360e01b81526001600160a01b038a8116600483015260248201859052600091908a169063095ea7b390604401602060405180830381600087803b158015614b7f57600080fd5b505af1158015614b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb79190615439565b5060408051600280825260608201909252600091816020015b614c056040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b815260200190600190039081614bd05790505090506040518060a001604052808881526020016000815260200160018152602001868152602001600067ffffffffffffffff811115614c5957614c59615d73565b6040519080825280601f01601f191660200182016040528015614c83576020820181803683370190505b5081525081600081518110614c9a57614c9a615d5d565b60200260200101819052506040518060a00160405280878152602001600181526020016002815260200160008152602001600067ffffffffffffffff811115614ce557614ce5615d73565b6040519080825280601f01601f191660200182016040528015614d0f576020820181803683370190505b5081525081600181518110614d2657614d26615d5d565b6020908102919091010152604080516003808252608082019092526000918160200160208202803683370190505090508a81600081518110614d6a57614d6a615d5d565b60200260200101906001600160a01b031690816001600160a01b0316815250508981600181518110614d9e57614d9e615d5d565b60200260200101906001600160a01b031690816001600160a01b0316815250508881600281518110614dd257614dd2615d5d565b6001600160a01b0392831660209182029290920181019190915260408051608080820183529388168082526000938201849052818301526060810183905281516003808252948101909252928160200160208202803683370190505090508781600081518110614e4457614e44615d5d565b602002602001018181525050600081600181518110614e6557614e65615d5d565b6020908102919091010152614e7987615d14565b81600281518110614e8c57614e8c615d5d565b602090810291909101015260405163945bcec960e01b81526001600160a01b038f169063945bcec990614ece90600090889088908890889042906004016157d6565b600060405180830381600087803b158015614ee857600080fd5b505af1158015614efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614f2491908101906153a1565b600281518110614f3657614f36615d5d565b6020026020010151614f4790615d14565b9e9d5050505050505050505050505050565b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015614f9e57600080fd5b505afa158015614fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fd6919061546f565b61013f5461012e5461012d546101405493945061500b936001600160a01b039384169392831692918216911685600030614131565b5061012f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561505157600080fd5b505afa158015615065573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615089919061546f565b61013f5461012f5461012d54610140549394506108f1936001600160a01b039384169392831692918216911685600030614131565b606083156150cd575081612649565b61264983838151156150e25781518083602001fd5b8060405162461bcd60e51b815260040161096291906158ef565b600082601f83011261510d57600080fd5b8151602061512261511d83615b34565b615b03565b80838252828201915082860187848660051b890101111561514257600080fd5b60005b8581101561516157815184529284019290840190600101615145565b5090979650505050505050565b805169ffffffffffffffffffff811681146119e157600080fd5b60006020828403121561519a57600080fd5b813561264981615d89565b600080604083850312156151b857600080fd5b82356151c381615d89565b915060208381013567ffffffffffffffff808211156151e157600080fd5b818601915086601f8301126151f557600080fd5b81358181111561520757615207615d73565b615219601f8201601f19168501615b03565b9150808252878482850101111561522f57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561526057600080fd5b823561526b81615d89565b946020939093013593505050565b6000806000806080858703121561528f57600080fd5b843561529a81615d89565b93506020850135925060408501356152b181615d89565b915060608501356152c181615d9e565b939692955090935050565b6000806000606084860312156152e157600080fd5b835167ffffffffffffffff808211156152f957600080fd5b818601915086601f83011261530d57600080fd5b8151602061531d61511d83615b34565b8083825282820191508286018b848660051b890101111561533d57600080fd5b600096505b8487101561536957805161535581615d89565b835260019690960195918301918301615342565b509189015191975090935050508082111561538357600080fd5b50615390868287016150fc565b925050604084015190509250925092565b600060208083850312156153b457600080fd5b825167ffffffffffffffff8111156153cb57600080fd5b8301601f810185136153dc57600080fd5b80516153ea61511d82615b34565b80828252848201915084840188868560051b870101111561540a57600080fd5b600094505b8385101561542d57805183526001949094019391850191850161540f565b50979650505050505050565b60006020828403121561544b57600080fd5b815161264981615d9e565b60006020828403121561546857600080fd5b5035919050565b60006020828403121561548157600080fd5b5051919050565b6000806040838503121561549b57600080fd5b8235915060208301356154ad81615d89565b809150509250929050565b6000602082840312156154ca57600080fd5b81356001600160e01b03198116811461264957600080fd5b600061028082840312156154f557600080fd5b50919050565b60008060006060848603121561551057600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561553f57600080fd5b6155488661516e565b945060208601519350604086015192506060860151915061556b6080870161516e565b90509295509295909350565b60006020828403121561558957600080fd5b815160ff8116811461264957600080fd5b600081518084526020808501945080840160005b838110156155d35781516001600160a01b0316875295820195908201906001016155ae565b509495945050505050565b600081518084526020808501945080840160005b838110156155d3578151875295820195908201906001016155f2565b60008151808452615626816020860160208601615cb6565b601f01601f19169290920160200192915050565b6002811061565857634e487b7160e01b600052602160045260246000fd5b9052565b6000825161566e818460208701615cb6565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516156b0816017850160208801615cb6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516156e1816028840160208801615cb6565b01602801949350505050565b60c08152600061570060c083018961559a565b8281036020840152615712818961559a565b6040840197909752505060608101939093526001600160a01b0391909116608083015260a09091015292915050565b8481526001600160a01b0384811660208301528316604082015260806060820181905282518183019190915260009061577e61010084018261559a565b90506020840151607f19808584030160a086015261579c83836155de565b925060408601519150808584030160c0860152506157ba828261560e565b9150506060840151151560e08401528091505095945050505050565b60006101208083016157e8848b61563a565b60208481019290925288519081905261014080850192600583901b8601909101918a820160005b828110156158725787850361013f190186528151805186528481015185870152604080820151908701526060808201519087015260809081015160a09187018290529061585e8188018361560e565b97860197965050509083019060010161580f565b505050508381036040850152615888818961559a565b9150506158c8606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e08401526158da81866155de565b91505082610100830152979650505050505050565b602081526000612649602083018461560e565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60e08152845160e082015260006020860151615a3f61010084018261563a565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615a886101a084018261560e565b915050615ac8602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b838152606060208201526000615af360608301856155de565b9050826040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615b2c57615b2c615d73565b604052919050565b600067ffffffffffffffff821115615b4e57615b4e615d73565b5060051b60200190565b60008219821115615b6b57615b6b615d31565b500190565b600082615b8d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115615bcd578160001904821115615bb357615bb3615d31565b80851615615bc057918102915b93841c9390800290615b97565b509250929050565b600061264960ff841683600082615bee575060016108b7565b81615bfb575060006108b7565b8160018114615c115760028114615c1b57615c37565b60019150506108b7565b60ff841115615c2c57615c2c615d31565b50506001821b6108b7565b5060208310610133831016604e8410600b8410161715615c5a575081810a6108b7565b615c648383615b92565b8060001904821115615c7857615c78615d31565b029392505050565b6000816000190483118215151615615c9a57615c9a615d31565b500290565b600082821015615cb157615cb1615d31565b500390565b60005b83811015615cd1578181015183820152602001615cb9565b838111156133b35750506000910152565b600081615cf157615cf1615d31565b506000190190565b6000600019821415615d0d57615d0d615d31565b5060010190565b6000600160ff1b821415615d2a57615d2a615d31565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a5657600080fd5b8015158114610a5657600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220300ea7b485c7f92432087ed6ce1973801ef2df5bda90c600866c4875fe860d7f64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102ae5760003560e01c8063612c87df11610175578063adc9772e116100dc578063ebc09def11610095578063f4b9fa751161006f578063f4b9fa751461080e578063f6f6b8811461082f578063fb24974a1461084f578063fbfa77cf1461086557600080fd5b8063ebc09def146107c0578063ed37b369146107d7578063ef5cfb8c146107ee57600080fd5b8063adc9772e14610712578063ae30c11014610732578063bf52e08014610752578063cc6522c314610768578063d547741f14610789578063dc279b73146107a957600080fd5b8063811766fa1161012e578063811766fa146106915780638129fc1c146106a857806391d14854146106bd578063a217fddf146106dd578063a3673b38146103c4578063a440b21a146106f257600080fd5b8063612c87df146105cb578063620b75df146105ec57806376db82c11461060c57806378f9b56d1461062d5780637d5f58021461064e5780637e7316381461067057600080fd5b80633659cfe611610219578063546af3c3116101d2578063546af3c3146104fd5780635ca558f81461051e5780635dbd733a146105345780635f07c5f3146105685780635fea9cbb1461058957806360896184146105aa57600080fd5b80633659cfe61461045d5780633e0dc34e1461047d5780633e413bee146104945780634e13f313146104b55780634f1ef286146104d557806352d1902d146104e857600080fd5b8063248a9ca31161026b578063248a9ca3146103945780632576e65a146103c45780632b37dc81146103d95780632f2ff15d146103fa5780632f48ab7d1461041c57806336568abe1461043d57600080fd5b806301ffc9a7146102b35780630f9033f7146102e8578063119cd8791461030d57806315b3a0de146103235780631b1e7ddc1461035c578063244e59da14610373575b600080fd5b3480156102bf57600080fd5b506102d36102ce3660046154b8565b610886565b60405190151581526020015b60405180910390f35b3480156102f457600080fd5b506102ff6101435481565b6040519081526020016102df565b34801561031957600080fd5b506102ff60fd5481565b34801561032f57600080fd5b5061013e54610344906001600160a01b031681565b6040516001600160a01b0390911681526020016102df565b34801561036857600080fd5b506102ff6101425481565b34801561037f57600080fd5b5061014054610344906001600160a01b031681565b3480156103a057600080fd5b506102ff6103af366004615456565b60009081526065602052604090206001015490565b3480156103d057600080fd5b506102ff6108bd565b3480156103e557600080fd5b5061013c54610344906001600160a01b031681565b34801561040657600080fd5b5061041a610415366004615488565b6108cc565b005b34801561042857600080fd5b5061012f54610344906001600160a01b031681565b34801561044957600080fd5b5061041a610458366004615488565b6108f6565b34801561046957600080fd5b5061041a610478366004615188565b610979565b34801561048957600080fd5b506102ff6101385481565b3480156104a057600080fd5b5061012e54610344906001600160a01b031681565b3480156104c157600080fd5b5061041a6104d03660046154e2565b610a59565b61041a6104e33660046151a5565b6111f3565b3480156104f457600080fd5b506102ff6112c0565b34801561050957600080fd5b5061013354610344906001600160a01b031681565b34801561052a57600080fd5b506102ff60fe5481565b34801561054057600080fd5b506102ff7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561057457600080fd5b5061013954610344906001600160a01b031681565b34801561059557600080fd5b5061013a54610344906001600160a01b031681565b3480156105b657600080fd5b5061013054610344906001600160a01b031681565b3480156105d757600080fd5b5061013f54610344906001600160a01b031681565b3480156105f857600080fd5b5060fb54610344906001600160a01b031681565b34801561061857600080fd5b5061013d54610344906001600160a01b031681565b34801561063957600080fd5b5061013154610344906001600160a01b031681565b34801561065a57600080fd5b506102ff600080516020615dad83398151915281565b34801561067c57600080fd5b5061013254610344906001600160a01b031681565b34801561069d57600080fd5b506102ff6101415481565b3480156106b457600080fd5b5061041a611373565b3480156106c957600080fd5b506102d36106d8366004615488565b61143d565b3480156106e957600080fd5b506102ff600081565b3480156106fe57600080fd5b5061041a61070d366004615188565b611468565b34801561071e57600080fd5b5061041a61072d36600461524d565b611597565b34801561073e57600080fd5b5061041a61074d3660046154fb565b6117c7565b34801561075e57600080fd5b506102ff60fc5481565b34801561077457600080fd5b5061013b54610344906001600160a01b031681565b34801561079557600080fd5b5061041a6107a4366004615488565b61193c565b3480156107b557600080fd5b506102ff6101375481565b3480156107cc57600080fd5b506102ff6101355481565b3480156107e357600080fd5b506102ff6101365481565b3480156107fa57600080fd5b506102ff610809366004615188565b611961565b34801561081a57600080fd5b5061012d54610344906001600160a01b031681565b34801561083b57600080fd5b506102ff61084a366004615279565b6119e6565b34801561085b57600080fd5b506102ff60001981565b34801561087157600080fd5b5061013454610344906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806108b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006108c7611cc0565b905090565b6000828152606560205260409020600101546108e7816122c5565b6108f183836122cf565b505050565b6001600160a01b038116331461096b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6109758282612355565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109c25760405162461bcd60e51b815260040161096290615939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a0b600080516020615dcd833981519152546001600160a01b031690565b6001600160a01b031614610a315760405162461bcd60e51b815260040161096290615985565b610a3a816123bc565b60408051600080825260208201909252610a56918391906123c7565b50565b610a6460003361143d565b610aa75760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610962565b610ab46020820182615188565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610ae56040820160208301615188565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610b166060820160408301615188565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610b476080820160608301615188565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610b7860a0820160808301615188565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610ba960c0820160a08301615188565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610bda60e0820160c08301615188565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610c0c610100820160e08301615188565b61013480546001600160a01b0319166001600160a01b039290921691909117905561010081013561013555610120810135610136556101408101356101375561016081013561013855610c676101a082016101808301615188565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610c9a6101c082016101a08301615188565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610ccd6101e082016101c08301615188565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055610d0061020082016101e08301615188565b61013c80546001600160a01b0319166001600160a01b0392909216919091179055610d3361022082016102008301615188565b61013d80546001600160a01b0319166001600160a01b0392909216919091179055610d6661024082016102208301615188565b61013e80546001600160a01b0319166001600160a01b0392909216919091179055610d9961026082016102408301615188565b61013f80546001600160a01b0319166001600160a01b0392909216919091179055610dcc61028082016102608301615188565b61014080546001600160a01b0319166001600160a01b0392909216919091179055610dfa6020820182615188565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3257600080fd5b505afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190615577565b610e7590600a615bd5565b61014155610e896040820160208301615188565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec157600080fd5b505afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef99190615577565b610f0490600a615bd5565b61014255610f186060820160408301615188565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190615577565b610f9390600a615bd5565b61014355610130546101345460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015610fea57600080fd5b505af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190615439565b50610131546101345460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190615439565b50610132546101345460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561110257600080fd5b505af1158015611116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113a9190615439565b506101335461013d5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561118e57600080fd5b505af11580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190615439565b506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561123c5760405162461bcd60e51b815260040161096290615939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611285600080516020615dcd833981519152546001600160a01b031690565b6001600160a01b0316146112ab5760405162461bcd60e51b815260040161096290615985565b6112b4826123bc565b610975828260016123c7565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113605760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610962565b50600080516020615dcd83398151915290565b600054610100900460ff16158080156113935750600054600160ff909116105b806113ad5750303b1580156113ad575060005460ff166001145b6113c95760405162461bcd60e51b8152600401610962906159d1565b6000805460ff1916600117905580156113ec576000805461ff0019166101001790555b6113f4612541565b8015610a56576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61147360003361143d565b6114b65760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610962565b6001600160a01b03811661150c5760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610962565b60fb5461153190600080516020615dad833981519152906001600160a01b031661193c565b611549600080516020615dad833981519152826108cc565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001611432565b6115af600080516020615dad8339815191523361143d565b6115cb5760405162461bcd60e51b815260040161096290615902565b6000611649306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611641919061546f565b60fd54612626565b6040516370a0823160e01b81523060048201529091506116ce9084906001600160a01b038216906370a082319060240160206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c9919061546f565b612650565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561170857600080fd5b505afa15801561171c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611740919061546f565b101561178e5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610962565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6117f17fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde91373361143d565b80611898575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561186057600080fd5b505afa158015611874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118989190615439565b6118ef5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b6064820152608401610962565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a906060016117ba565b600082815260656020526040902060010154611957816122c5565b6108f18383612355565b600061197b600080516020615dad8339815191523361143d565b6119975760405162461bcd60e51b815260040161096290615902565b60006119a283612cd0565b905080156119de576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b6000611a00600080516020615dad8339815191523361143d565b611a1c5760405162461bcd60e51b815260040161096290615902565b6000611a5a306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561160957600080fd5b90506000808415611a8157611a6e86612cd0565b9050611a7a888761305f565b9150611af0565b611a8c888888613172565b915086821015611af05760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610962565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2a57600080fd5b505afa158015611b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b62919061546f565b1015611bb05760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610962565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb90604401602060405180830381600087803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c329190615439565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611ca6576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611d0957600080fd5b505afa158015611d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d41919061546f565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611d8b57600080fd5b505afa158015611d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc3919061546f565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e45919061546f565b61013c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec7919061546f565b9050801561229457610133546040805163876f303b60e01b815290516000926001600160a01b03169163876f303b916004808301926020929190829003018186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4d919061546f565b6101345461013854604051631f29a8cd60e31b8152600481019190915291925060009182916001600160a01b03169063f94d46689060240160006040518083038186803b158015611f9d57600080fd5b505afa158015611fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fd991908101906152cc565b509150915060005b825181101561228f576000838281518110611ffe57611ffe615d5d565b602002602001015190506000858785858151811061201e5761201e615d5d565b60200260200101516120309190615c80565b61203a9190615b70565b610130549091506001600160a01b03838116911614156120fe5761013054604080516333cd77e760e11b81529051670de0b6b3a7640000926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156120a157600080fd5b505afa1580156120b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d9919061546f565b6120e39083615c80565b6120ed9190615b70565b6120f7908b615b58565b995061227a565b610131546001600160a01b03838116911614156121c35761013154604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561216657600080fd5b505afa15801561217a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219e919061546f565b6121a89083615c80565b6121b29190615b70565b6121bc908a615b58565b985061227a565b610132546001600160a01b038381169116141561227a5761013254604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561222b57600080fd5b505afa15801561223f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612263919061546f565b61226d9083615c80565b6122779190615b70565b97505b5050808061228790615cf9565b915050611fe1565b505050505b61229d83613201565b6122a79085615b58565b93506122b28261324d565b6122bc9085615b58565b95945050505050565b610a568133613299565b6122d9828261143d565b6109755760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123113390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61235f828261143d565b156109755760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610975816122c5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156123fa576108f1836132f2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b505afa925050508015612463575060408051601f3d908101601f191682019092526124609181019061546f565b60015b6124c65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610962565b600080516020615dcd83398151915281146125355760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610962565b506108f183838361338e565b600054610100900460ff16158080156125615750600054600160ff909116105b8061257b5750303b15801561257b575060005460ff166001145b6125975760405162461bcd60e51b8152600401610962906159d1565b6000805460ff1916600117905580156125ba576000805461ff0019166101001790555b6125c26133b9565b6125ca6133b9565b6125d56000336122cf565b601460fc81905560fd55600460fe558015610a56576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611432565b60006127106126358382615c9f565b61263f9085615c80565b6126499190615b70565b9392505050565b61012d546040516370a0823160e01b815230600482015260009182916126d8916001600160a01b0316906370a082319060240160206040518083038186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d3919061546f565b613426565b915091506126e68282613854565b61012d546101305461013554612712926001600160a01b03908116921690670de0b6b3a76400006138b5565b61012e546101315461013654612742926001600160a01b0390811692169068327cb2734119d3b7a9601e1b6138b5565b61012f546101325461013754612772926001600160a01b0390811692169068327cb2734119d3b7a9601e1b6138b5565b6101345461013854604051631f29a8cd60e31b815260048101919091526000916001600160a01b03169063f94d46689060240160006040518083038186803b1580156127bd57600080fd5b505afa1580156127d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f991908101906152cc565b505060408051600480825260a082019092529192506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833750506040805160038082526080820190925292935060009291506020820160608036833701905050905060005b8451811015612b205784818151811061288857612888615d5d565b60200260200101518482815181106128a2576128a2615d5d565b6001600160a01b0392831660209182029290920101526101305486519116908690839081106128d3576128d3615d5d565b60200260200101516001600160a01b031614156129ab57610130546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b15801561292f57600080fd5b505afa158015612943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612967919061546f565b82828151811061297957612979615d5d565b60200260200101818152505060001983828151811061299a5761299a615d5d565b602002602001018181525050612b0e565b6101315485516001600160a01b03909116908690839081106129cf576129cf615d5d565b60200260200101516001600160a01b03161415612a1757610131546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612917565b6101325485516001600160a01b0390911690869083908110612a3b57612a3b615d5d565b60200260200101516001600160a01b03161415612b0e57610132546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612a9657600080fd5b505afa158015612aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ace919061546f565b828281518110612ae057612ae0615d5d565b602002602001018181525050600019838281518110612b0157612b01615d5d565b6020026020010181815250505b80612b1881615cf9565b91505061286d565b506040516001908190600090612b3e90839086908290602001615ada565b60408051601f1981840301815260808301825288835260208301889052828201819052600060608401526101345461013854925163172b958560e31b81529194506001600160a01b03169163b95cac2891612ba29190309081908790600401615741565b600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b5050610133546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612c1b57600080fd5b505afa158015612c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c53919061546f565b61013d546040516321d0683360e11b81526002600482015260248101839052600160448201529192506001600160a01b0316906343a0d06690606401600060405180830381600087803b158015612ca957600080fd5b505af1158015612cbd573d6000803e3d6000fd5b5050505050505050505050505050505050565b61013c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d1557600080fd5b505afa158015612d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4d919061546f565b612d5957506000919050565b61013e60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612daa57600080fd5b505af1158015612dbe573d6000803e3d6000fd5b505061012d546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612e0957600080fd5b505afa158015612e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e41919061546f565b905073__$1e0a0e1dc704688c094f02620037e329cc$__63a6e464806040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8757600080fd5b505af4158015612e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebf919061546f565b5073__$1e0a0e1dc704688c094f02620037e329cc$__63388002bb6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0457600080fd5b505af4158015612f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3c919061546f565b5061012d546040516370a0823160e01b815230600482015260009183916001600160a01b03909116906370a082319060240160206040518083038186803b158015612f8657600080fd5b505afa158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe919061546f565b612fc89190615c9f565b905080156126495761012d5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561301f57600080fd5b505af1158015613033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130579190615439565b509392505050565b61013c546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156130a857600080fd5b505afa1580156130bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e0919061546f565b11156130f6576130f66130f1611cc0565b6139ee565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561313a57600080fd5b505afa15801561314e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612649919061546f565b600061317d836139ee565b61012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156131c157600080fd5b505afa1580156131d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f9919061546f565b949350505050565b61013a54600090819061321c906001600160a01b0316613c67565b61013954909150600090613238906001600160a01b0316613c67565b90506131f98461014254610141548585613d8b565b61013b546000908190613268906001600160a01b0316613c67565b61013954909150600090613284906001600160a01b0316613c67565b90506131f98461014354610141548585613d8b565b6132a3828261143d565b610975576132b081613dc0565b6132bb836020613dd2565b6040516020016132cc929190615678565b60408051601f198184030181529082905262461bcd60e51b8252610962916004016158ef565b6001600160a01b0381163b61335f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610962565b600080516020615dcd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61339783613f6e565b6000825111806133a45750805b156108f1576133b38383613fae565b50505050565b600054610100900460ff166134245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610962565b565b6101345461013854604051631f29a8cd60e31b815260048101919091526000918291829182918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561347d57600080fd5b505afa158015613491573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134b991908101906152cc565b509150915060005b82518110156137765760008382815181106134de576134de615d5d565b6020908102919091010151610130549091506001600160a01b03808316911614156135bd5761013054604080516333cd77e760e11b81529051670de0b6b3a7640000926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561355057600080fd5b505afa158015613564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613588919061546f565b84848151811061359a5761359a615d5d565b60200260200101516135ac9190615c80565b6135b69190615b70565b9650613763565b610131546001600160a01b03828116911614156136925761013154604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561362557600080fd5b505afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d919061546f565b84848151811061366f5761366f615d5d565b60200260200101516136819190615c80565b61368b9190615b70565b9550613763565b610132546001600160a01b03828116911614156137635761013254604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156136fa57600080fd5b505afa15801561370e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613732919061546f565b84848151811061374457613744615d5d565b60200260200101516137569190615c80565b6137609190615b70565b94505b508061376e81615cf9565b9150506134c1565b50600061378561014154614099565b90506000613795610141546140e5565b9050806137a28387615c80565b6137ac9190615b70565b6101415487906137bc858b615c80565b6137c69190615b70565b6137d09190615b58565b6137da9190615b58565b6137e4878c615c80565b6137ee9190615b70565b985084826137fc8389615c80565b6138069190615b70565b61014154613814848b615c80565b61381e9190615b70565b6138289190615b58565b6138329190615b58565b61383c868c615c80565b6138469190615b70565b975050505050505050915091565b61013f5461012d5461012e5461014054613884936001600160a01b03908116938116928116911686600030614131565b5061013f5461012d5461012f54610140546108f1936001600160a01b03908116938116928116911685600030614131565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b1580156138f757600080fd5b505afa15801561390b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392f919061546f565b905060006139c3856001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b15801561396f57600080fd5b505afa158015613983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a7919061546f565b6139b18585615c80565b6139bb9190615b70565b60fc54612626565b610134549091506139e5906001600160a01b0316600088888887873080614317565b50505050505050565b6000806000613a07613a028560fc546144d1565b6144e0565b91945092509050600081613a1b8486615b58565b613a259190615b58565b61013c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015613a6f57600080fd5b505afa158015613a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa7919061546f565b905080821115613ab5578091505b61013e54604051636197390160e11b815260048101849052600060248201526001600160a01b039091169063c32e720290604401600060405180830381600087803b158015613b0357600080fd5b505af1158015613b17573d6000803e3d6000fd5b505061013454610133546101305461012d546101385461013554613b5997506001600160a01b039586169650938516949283169392909116918b600030614b31565b5061013454610133546101315461012e546101385461013654613b94956001600160a01b03908116958116948116931691908a600030614b31565b5080821415613c1c57610133546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613be157600080fd5b505afa158015613bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c19919061546f565b92505b61013454610133546101325461012f546101385461013754613c56956001600160a01b039081169581169481169316919089600030614b31565b50613c5f614f59565b505050505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015613ca857600080fd5b505afa158015613cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce09190615527565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff161015613d3c5760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b6044820152606401610962565b60008211613d815760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606401610962565b5090949350505050565b6000613d978286615c80565b83613da28689615c80565b613dac9190615c80565b613db69190615b70565b9695505050505050565b60606108b76001600160a01b03831660145b60606000613de1836002615c80565b613dec906002615b58565b67ffffffffffffffff811115613e0457613e04615d73565b6040519080825280601f01601f191660200182016040528015613e2e576020820181803683370190505b509050600360fc1b81600081518110613e4957613e49615d5d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613e7857613e78615d5d565b60200101906001600160f81b031916908160001a9053506000613e9c846002615c80565b613ea7906001615b58565b90505b6001811115613f1f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613edb57613edb615d5d565b1a60f81b828281518110613ef157613ef1615d5d565b60200101906001600160f81b031916908160001a90535060049490941c93613f1881615ce2565b9050613eaa565b5083156126495760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610962565b613f77816132f2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6140165760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610962565b600080846001600160a01b031684604051614031919061565c565b600060405180830381855af49150503d806000811461406c576040519150601f19603f3d011682016040523d82523d6000602084013e614071565b606091505b50915091506122bc8282604051806060016040528060278152602001615ded602791396150be565b61013a5460009081906140b4906001600160a01b0316613c67565b610139549091506000906140d0906001600160a01b0316613c67565b90506131f98461014154610142548486613d8b565b61013b546000908190614100906001600160a01b0316613c67565b6101395490915060009061411c906001600160a01b0316613c67565b90506131f98461014154610143548486613d8b565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018590526000919088169063095ea7b390604401602060405180830381600087803b15801561417f57600080fd5b505af1158015614193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b79190615439565b5060408051600280825260608201835260009260208301908036833701905050905087816000815181106141ed576141ed615d5d565b60200260200101906001600160a01b031690816001600160a01b031681525050868160018151811061422157614221615d5d565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050868160008151811061427257614272615d5d565b6001600160a01b03928316602091820292909201015260405163351041e960e21b8152908b169063d44107a4906142b790859085908b908b908b9042906004016156ed565b602060405180830381600087803b1580156142d157600080fd5b505af11580156142e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614309919061546f565b9a9950505050505050505050565b60405163095ea7b360e01b81526001600160a01b038a81166004830152602482018690526000919089169063095ea7b390604401602060405180830381600087803b15801561436557600080fd5b505af1158015614379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061439d9190615439565b5060006040518060c001604052808881526020018b60018111156143c3576143c3615d47565b81526001600160a01b03808c1660208301528a1660408201526060810188905260800160006040519080825280601f01601f191660200182016040528015614412576020820181803683370190505b509052604080516080810182526001600160a01b03808816825260006020830181905287821683850152606083015291516352bbbe2960e01b815292935091908d16906352bbbe299061446f90859085908b904290600401615a1f565b602060405180830381600087803b15801561448957600080fd5b505af115801561449d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c1919061546f565b9c9b505050505050505050505050565b60006127106126358382615b58565b6101345461013854604051631f29a8cd60e31b8152600481019190915260009182918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561453357600080fd5b505afa158015614547573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261456f91908101906152cc565b50909250905060008080805b855181101561483057600086828151811061459857614598615d5d565b6020908102919091010151610130549091506001600160a01b03808316911614156146775761013054604080516333cd77e760e11b81529051670de0b6b3a7640000926001600160a01b03169163679aefce916004808301926020929190829003018186803b15801561460a57600080fd5b505afa15801561461e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614642919061546f565b87848151811061465457614654615d5d565b60200260200101516146669190615c80565b6146709190615b70565b945061481d565b610131546001600160a01b038281169116141561474c5761013154604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156146df57600080fd5b505afa1580156146f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614717919061546f565b87848151811061472957614729615d5d565b602002602001015161473b9190615c80565b6147459190615b70565b935061481d565b610132546001600160a01b038281169116141561481d5761013254604080516333cd77e760e11b8152905168327cb2734119d3b7a9601e1b926001600160a01b03169163679aefce916004808301926020929190829003018186803b1580156147b457600080fd5b505afa1580156147c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ec919061546f565b8784815181106147fe576147fe615d5d565b60200260200101516148109190615c80565b61481a9190615b70565b92505b508061482881615cf9565b91505061457b565b50600061483f61014154614099565b9050600061484f610141546140e5565b905060008161014154856148639190615c80565b61486d9190615b70565b83610141548761487d9190615c80565b6148879190615b70565b6148919088615b58565b61489b9190615b58565b6148a5868e615c80565b6148af9190615b70565b905060008261014154866148c39190615c80565b6148cd9190615b70565b8461014154886148dd9190615c80565b6148e79190615b70565b6148f19089615b58565b6148fb9190615b58565b614905868f615c80565b61490f9190615b70565b905060008661491e8985615c80565b6149289190615b70565b905061013060009054906101000a90046001600160a01b03166001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b15801561497957600080fd5b505afa15801561498d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149b1919061546f565b6149c382670de0b6b3a7640000615c80565b6149cd9190615b70565b9c5061013160009054906101000a90046001600160a01b03166001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a1e57600080fd5b505afa158015614a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a56919061546f565b614a6c8468327cb2734119d3b7a9601e1b615c80565b614a769190615b70565b9b5061013260009054906101000a90046001600160a01b03166001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b158015614ac757600080fd5b505afa158015614adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aff919061546f565b614b158368327cb2734119d3b7a9601e1b615c80565b614b1f9190615b70565b9c9e9b9d505050505050505050505050565b60405163095ea7b360e01b81526001600160a01b038a8116600483015260248201859052600091908a169063095ea7b390604401602060405180830381600087803b158015614b7f57600080fd5b505af1158015614b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb79190615439565b5060408051600280825260608201909252600091816020015b614c056040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b815260200190600190039081614bd05790505090506040518060a001604052808881526020016000815260200160018152602001868152602001600067ffffffffffffffff811115614c5957614c59615d73565b6040519080825280601f01601f191660200182016040528015614c83576020820181803683370190505b5081525081600081518110614c9a57614c9a615d5d565b60200260200101819052506040518060a00160405280878152602001600181526020016002815260200160008152602001600067ffffffffffffffff811115614ce557614ce5615d73565b6040519080825280601f01601f191660200182016040528015614d0f576020820181803683370190505b5081525081600181518110614d2657614d26615d5d565b6020908102919091010152604080516003808252608082019092526000918160200160208202803683370190505090508a81600081518110614d6a57614d6a615d5d565b60200260200101906001600160a01b031690816001600160a01b0316815250508981600181518110614d9e57614d9e615d5d565b60200260200101906001600160a01b031690816001600160a01b0316815250508881600281518110614dd257614dd2615d5d565b6001600160a01b0392831660209182029290920181019190915260408051608080820183529388168082526000938201849052818301526060810183905281516003808252948101909252928160200160208202803683370190505090508781600081518110614e4457614e44615d5d565b602002602001018181525050600081600181518110614e6557614e65615d5d565b6020908102919091010152614e7987615d14565b81600281518110614e8c57614e8c615d5d565b602090810291909101015260405163945bcec960e01b81526001600160a01b038f169063945bcec990614ece90600090889088908890889042906004016157d6565b600060405180830381600087803b158015614ee857600080fd5b505af1158015614efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614f2491908101906153a1565b600281518110614f3657614f36615d5d565b6020026020010151614f4790615d14565b9e9d5050505050505050505050505050565b61012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015614f9e57600080fd5b505afa158015614fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fd6919061546f565b61013f5461012e5461012d546101405493945061500b936001600160a01b039384169392831692918216911685600030614131565b5061012f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561505157600080fd5b505afa158015615065573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615089919061546f565b61013f5461012f5461012d54610140549394506108f1936001600160a01b039384169392831692918216911685600030614131565b606083156150cd575081612649565b61264983838151156150e25781518083602001fd5b8060405162461bcd60e51b815260040161096291906158ef565b600082601f83011261510d57600080fd5b8151602061512261511d83615b34565b615b03565b80838252828201915082860187848660051b890101111561514257600080fd5b60005b8581101561516157815184529284019290840190600101615145565b5090979650505050505050565b805169ffffffffffffffffffff811681146119e157600080fd5b60006020828403121561519a57600080fd5b813561264981615d89565b600080604083850312156151b857600080fd5b82356151c381615d89565b915060208381013567ffffffffffffffff808211156151e157600080fd5b818601915086601f8301126151f557600080fd5b81358181111561520757615207615d73565b615219601f8201601f19168501615b03565b9150808252878482850101111561522f57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561526057600080fd5b823561526b81615d89565b946020939093013593505050565b6000806000806080858703121561528f57600080fd5b843561529a81615d89565b93506020850135925060408501356152b181615d89565b915060608501356152c181615d9e565b939692955090935050565b6000806000606084860312156152e157600080fd5b835167ffffffffffffffff808211156152f957600080fd5b818601915086601f83011261530d57600080fd5b8151602061531d61511d83615b34565b8083825282820191508286018b848660051b890101111561533d57600080fd5b600096505b8487101561536957805161535581615d89565b835260019690960195918301918301615342565b509189015191975090935050508082111561538357600080fd5b50615390868287016150fc565b925050604084015190509250925092565b600060208083850312156153b457600080fd5b825167ffffffffffffffff8111156153cb57600080fd5b8301601f810185136153dc57600080fd5b80516153ea61511d82615b34565b80828252848201915084840188868560051b870101111561540a57600080fd5b600094505b8385101561542d57805183526001949094019391850191850161540f565b50979650505050505050565b60006020828403121561544b57600080fd5b815161264981615d9e565b60006020828403121561546857600080fd5b5035919050565b60006020828403121561548157600080fd5b5051919050565b6000806040838503121561549b57600080fd5b8235915060208301356154ad81615d89565b809150509250929050565b6000602082840312156154ca57600080fd5b81356001600160e01b03198116811461264957600080fd5b600061028082840312156154f557600080fd5b50919050565b60008060006060848603121561551057600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561553f57600080fd5b6155488661516e565b945060208601519350604086015192506060860151915061556b6080870161516e565b90509295509295909350565b60006020828403121561558957600080fd5b815160ff8116811461264957600080fd5b600081518084526020808501945080840160005b838110156155d35781516001600160a01b0316875295820195908201906001016155ae565b509495945050505050565b600081518084526020808501945080840160005b838110156155d3578151875295820195908201906001016155f2565b60008151808452615626816020860160208601615cb6565b601f01601f19169290920160200192915050565b6002811061565857634e487b7160e01b600052602160045260246000fd5b9052565b6000825161566e818460208701615cb6565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516156b0816017850160208801615cb6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516156e1816028840160208801615cb6565b01602801949350505050565b60c08152600061570060c083018961559a565b8281036020840152615712818961559a565b6040840197909752505060608101939093526001600160a01b0391909116608083015260a09091015292915050565b8481526001600160a01b0384811660208301528316604082015260806060820181905282518183019190915260009061577e61010084018261559a565b90506020840151607f19808584030160a086015261579c83836155de565b925060408601519150808584030160c0860152506157ba828261560e565b9150506060840151151560e08401528091505095945050505050565b60006101208083016157e8848b61563a565b60208481019290925288519081905261014080850192600583901b8601909101918a820160005b828110156158725787850361013f190186528151805186528481015185870152604080820151908701526060808201519087015260809081015160a09187018290529061585e8188018361560e565b97860197965050509083019060010161580f565b505050508381036040850152615888818961559a565b9150506158c8606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e08401526158da81866155de565b91505082610100830152979650505050505050565b602081526000612649602083018461560e565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60e08152845160e082015260006020860151615a3f61010084018261563a565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615a886101a084018261560e565b915050615ac8602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b838152606060208201526000615af360608301856155de565b9050826040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615b2c57615b2c615d73565b604052919050565b600067ffffffffffffffff821115615b4e57615b4e615d73565b5060051b60200190565b60008219821115615b6b57615b6b615d31565b500190565b600082615b8d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115615bcd578160001904821115615bb357615bb3615d31565b80851615615bc057918102915b93841c9390800290615b97565b509250929050565b600061264960ff841683600082615bee575060016108b7565b81615bfb575060006108b7565b8160018114615c115760028114615c1b57615c37565b60019150506108b7565b60ff841115615c2c57615c2c615d31565b50506001821b6108b7565b5060208310610133831016604e8410600b8410161715615c5a575081810a6108b7565b615c648383615b92565b8060001904821115615c7857615c78615d31565b029392505050565b6000816000190483118215151615615c9a57615c9a615d31565b500290565b600082821015615cb157615cb1615d31565b500390565b60005b83811015615cd1578181015183820152602001615cb9565b838111156133b35750506000910152565b600081615cf157615cf1615d31565b506000190190565b6000600019821415615d0d57615d0d615d31565b5060010190565b6000600160ff1b821415615d2a57615d2a615d31565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a5657600080fd5b8015158114610a5657600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220300ea7b485c7f92432087ed6ce1973801ef2df5bda90c600866c4875fe860d7f64736f6c63430008060033",
  "implementation": "0xa699bBc50c64DC215e5D8550799b5A0eCEbc4D5f",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10703,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 10705,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 10707,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 10709,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 11094,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 14758,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "dai",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 14761,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "usdc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 14764,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "usdt",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 14767,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bbamDai",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IBptToken)6978"
      },
      {
        "astId": 14770,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bbamUsdc",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IBptToken)6978"
      },
      {
        "astId": 14773,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bbamUsdt",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IBptToken)6978"
      },
      {
        "astId": 14776,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bpt",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IBptToken)6978"
      },
      {
        "astId": 14779,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "vault",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IVault)4893"
      },
      {
        "astId": 14781,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bbamDaiPoolId",
        "offset": 0,
        "slot": "309",
        "type": "t_bytes32"
      },
      {
        "astId": 14783,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bbamUsdcPoolId",
        "offset": 0,
        "slot": "310",
        "type": "t_bytes32"
      },
      {
        "astId": 14785,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "bbamUsdtPoolId",
        "offset": 0,
        "slot": "311",
        "type": "t_bytes32"
      },
      {
        "astId": 14787,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "poolId",
        "offset": 0,
        "slot": "312",
        "type": "t_bytes32"
      },
      {
        "astId": 14790,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "oracleDai",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IPriceFeed)7074"
      },
      {
        "astId": 14793,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "314",
        "type": "t_contract(IPriceFeed)7074"
      },
      {
        "astId": 14796,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "oracleUsdt",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IPriceFeed)7074"
      },
      {
        "astId": 14799,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "auraLp",
        "offset": 0,
        "slot": "316",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 14802,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "auraBoosterLite",
        "offset": 0,
        "slot": "317",
        "type": "t_contract(AuraBoosterLite)3473"
      },
      {
        "astId": 14805,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "auraBaseRewardPool",
        "offset": 0,
        "slot": "318",
        "type": "t_contract(AuraBaseRewardPool)3484"
      },
      {
        "astId": 14808,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "wombatRouter",
        "offset": 0,
        "slot": "319",
        "type": "t_contract(IWombatRouter)10096"
      },
      {
        "astId": 14810,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "wombatBasePool",
        "offset": 0,
        "slot": "320",
        "type": "t_address"
      },
      {
        "astId": 14812,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "daiDm",
        "offset": 0,
        "slot": "321",
        "type": "t_uint256"
      },
      {
        "astId": 14814,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "usdcDm",
        "offset": 0,
        "slot": "322",
        "type": "t_uint256"
      },
      {
        "astId": 14816,
        "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
        "label": "usdtDm",
        "offset": 0,
        "slot": "323",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AuraBaseRewardPool)3484": {
        "encoding": "inplace",
        "label": "contract AuraBaseRewardPool",
        "numberOfBytes": "20"
      },
      "t_contract(AuraBoosterLite)3473": {
        "encoding": "inplace",
        "label": "contract AuraBoosterLite",
        "numberOfBytes": "20"
      },
      "t_contract(IBptToken)6978": {
        "encoding": "inplace",
        "label": "contract IBptToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2662": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)7074": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)4893": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_contract(IWombatRouter)10096": {
        "encoding": "inplace",
        "label": "contract IWombatRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/dai/StrategyAuraDaiUsdcUsdt.sol:StrategyAuraDaiUsdcUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}