{
  "address": "0x0B287606f1867Be9D0435089CB08FAa16109d31D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve3Pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IStablePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miniChefV2",
      "outputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "op",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdt",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "op",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sushi",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bentoBox",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tridentRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "miniChefV2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "oracleUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curve3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "velodromeRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardWallet",
              "type": "address"
            }
          ],
          "internalType": "struct StrategySushiswapUsdcUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tridentRouter",
      "outputs": [
        {
          "internalType": "contract ITridentRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "velodromeRouter",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "9367f81c2af49b1572dd8a6977dfa9fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3Pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IStablePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniChefV2\",\"outputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"op\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdt\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bentoBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tridentRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miniChefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"velodromeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"}],\"internalType\":\"struct StrategySushiswapUsdcUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tridentRouter\",\"outputs\":[{\"internalType\":\"contract ITridentRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"velodromeRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategySushiswapUsdcUsdt.sol\":\"StrategySushiswapUsdcUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\\n\\nlibrary ChainlinkLibrary {\\n\\n    function convertTokenToToken(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToToken(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n\\n    function convertTokenToToken(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        IPriceFeed oracle0,\\n        IPriceFeed oracle1\\n    ) internal view returns (uint256 amount1) {\\n        uint256 price0 = getPrice(oracle0);\\n        uint256 price1 = getPrice(oracle1);\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function getPrice(IPriceFeed oracle) internal view returns (uint256){\\n        (uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = oracle.latestRoundData();\\n        require(answeredInRound >= roundID, \\\"Old data\\\");\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\n        return uint256(price);\\n\\n    }\\n\\n    function convertTokenToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        IPriceFeed oracle\\n    ) internal view returns (uint256 amountUsd) {\\n        amountUsd = amount * getPrice(oracle) / tokenDenominator;\\n    }\\n\\n    function convertUsdToToken(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        IPriceFeed oracle\\n    ) internal view returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / getPrice(oracle);\\n    }\\n}\\n\",\"keccak256\":\"0x1b5450dda2109d0cb5b5d17d78b4c9a75b018a996417b5be3efb08c43aad1003\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ICurveExchange {\\n\\n    /**\\n        @notice Perform an exchange using the pool that offers the best rate\\n        @dev Prior to calling this function, the caller must approve\\n        this contract to transfer `_amount` coins from `_from`\\n        Does NOT check rates in factory-deployed pools\\n        @param _from Address of coin being sent\\n        @param _to Address of coin being received\\n        @param _amount Quantity of `_from` being sent\\n        @param _expected Minimum quantity of `_from` received\\n        in order for the transaction to succeed\\n        @param _receiver Address to transfer the received tokens to\\n        @return uint256 Amount received\\n    */\\n    function exchange_with_best_rate(address _from, address _to, uint256 _amount, uint256 _expected, address _receiver) external returns (uint256);\\n\\n    function exchange_with_best_rate(address _from, address _to, uint256 _amount, uint256 _expected) external returns (uint256);\\n\\n    /**\\n        @notice Perform an exchange using a specific pool\\n        @dev Prior to calling this function, the caller must approve\\n             this contract to transfer `_amount` coins from `_from`\\n             Works for both regular and factory-deployed pools\\n        @param _pool Address of the pool to use for the swap\\n        @param _from Address of coin being sent\\n        @param _to Address of coin being received\\n        @param _amount Quantity of `_from` being sent\\n        @param _expected Minimum quantity of `_from` received\\n               in order for the transaction to succeed\\n        @param _receiver Address to transfer the received tokens to\\n        @return uint256 Amount received\\n    */\\n    function exchange(address _pool, address _from, address _to, uint256 _amount, uint256 _expected, address _receiver) external returns (uint256);\\n\\n    function exchange(address _pool, address _from, address _to, uint256 _amount, uint256 _expected) external returns (uint256);\\n\\n    /**\\n        @notice Perform up to four swaps in a single transaction\\n        @dev Routing and swap params must be determined off-chain. This\\n             functionality is designed for gas efficiency over ease-of-use.\\n        @param _route Array of [initial token, pool, token, pool, token, ...]\\n                      The array is iterated until a pool address of 0x00, then the last\\n                      given token is transferred to `_receiver`\\n        @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\\n                            values for the n'th pool in `_route`. The swap type should be\\n                            1 for a stableswap `exchange`,\\n                            2 for stableswap `exchange_underlying`,\\n                            3 for a cryptoswap `exchange`,\\n                            4 for a cryptoswap `exchange_underlying`,\\n                            5 for factory metapools with lending base pool `exchange_underlying`,\\n                            6 for factory crypto-meta pools underlying exchange (`exchange` method in zap),\\n                            7-11 for wrapped coin (underlying for lending or fake pool) -> LP token \\\"exchange\\\" (actually `add_liquidity`),\\n                            12-14 for LP token -> wrapped coin (underlying for lending pool) \\\"exchange\\\" (actually `remove_liquidity_one_coin`)\\n                            15 for WETH -> ETH \\\"exchange\\\" (actually deposit/withdraw)\\n        @param _amount The amount of `_route[0]` token being sent.\\n        @param _expected The minimum amount received after the final swap.\\n        @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\\n                      Polygon meta-factories underlying swaps.\\n        @param _receiver Address to transfer the final output token to.\\n        @return Received amount of the final output token\\n    */\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected, address[4] memory _pools, address _receiver) external returns (uint256);\\n\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected, address[4] memory _pools) external returns (uint256);\\n\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected) external returns (uint256);\\n\\n    /**\\n        @notice Find the pool offering the best rate for a given swap.\\n        @dev Checks rates for regular and factory pools\\n        @param _from Address of coin being sent\\n        @param _to Address of coin being received\\n        @param _amount Quantity of `_from` being sent\\n        @param _exclude_pools A list of up to 8 addresses which shouldn't be returned\\n        @return Pool address, amount received\\n    */\\n    function get_best_rate(address _from, address _to, uint256 _amount, address[8] memory _exclude_pools) external returns (address, uint256);\\n\\n    function get_best_rate(address _from, address _to, uint256 _amount) external returns (address, uint256);\\n\\n    /**\\n        @notice Get the current number of coins received in an exchange\\n        @dev Works for both regular and factory-deployed pools\\n        @param _pool Pool address\\n        @param _from Address of coin to be sent\\n        @param _to Address of coin to be received\\n        @param _amount Quantity of `_from` to be sent\\n        @return Quantity of `_to` to be received\\n    */\\n    function get_exchange_amount(address _pool, address _from, address _to, uint256 _amount) external returns (uint256);\\n\\n    /**\\n        @notice Get the current number of coins required to receive the given amount in an exchange\\n        @param _pool Pool address\\n        @param _from Address of coin to be sent\\n        @param _to Address of coin to be received\\n        @param _amount Quantity of `_to` to be received\\n        @return Quantity of `_from` to be sent\\n    */\\n    function get_input_amount(address _pool, address _from, address _to, uint256 _amount) external returns (uint256);\\n\\n    /**\\n        @notice Get the current number of coins required to receive the given amount in an exchange\\n        @param _pool Pool address\\n        @param _from Address of coin to be sent\\n        @param _to Address of coin to be received\\n        @param _amounts Quantity of `_to` to be received\\n        @return Quantity of `_from` to be sent\\n    */\\n    function get_exchange_amounts(address _pool, address _from, address _to, uint256[100] memory _amounts) external returns (uint256[100] memory);\\n\\n    /**\\n        @notice Get the current number the final output tokens received in an exchange\\n        @dev Routing and swap params must be determined off-chain. This\\n             functionality is designed for gas efficiency over ease-of-use.\\n        @param _route Array of [initial token, pool, token, pool, token, ...]\\n                      The array is iterated until a pool address of 0x00, then the last\\n                      given token is transferred to `_receiver`\\n        @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\\n                            values for the n'th pool in `_route`. The swap type should be\\n                            1 for a stableswap `exchange`,\\n                            2 for stableswap `exchange_underlying`,\\n                            3 for a cryptoswap `exchange`,\\n                            4 for a cryptoswap `exchange_underlying`,\\n                            5 for factory metapools with lending base pool `exchange_underlying`,\\n                            6 for factory crypto-meta pools underlying exchange (`exchange` method in zap),\\n                            7-11 for wrapped coin (underlying for lending pool) -> LP token \\\"exchange\\\" (actually `add_liquidity`),\\n                            12-14 for LP token -> wrapped coin (underlying for lending or fake pool) \\\"exchange\\\" (actually `remove_liquidity_one_coin`)\\n                            15 for WETH -> ETH \\\"exchange\\\" (actually deposit/withdraw)\\n        @param _amount The amount of `_route[0]` token to be sent.\\n        @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\\n                      Polygon meta-factories underlying swaps.\\n        @return Expected amount of the final output token\\n    */\\n    function get_exchange_multiple_amount(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, address[4] memory _pools) external returns (uint256);\\n\\n    function get_exchange_multiple_amount(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount) external returns (uint256);\\n\\n}\\n\\ninterface IStableSwapPool {\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory);\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\n    function get_dy(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    function get_dy_underlying(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    //Perform an exchange between two coins.\\n    // i: Index value for the coin to send\\n    // j: Index value of the coin to receive\\n    // _dx: Amount of i being exchanged\\n    // _min_dy: Minimum amount of j to receive\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    function exchange(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function exchange_underlying(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount, bool _use_underlying) external returns (uint256);\\n\\n}\\n\\ninterface IMetaSwapPool {\\n\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\n    function get_dy(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    function get_dy_underlying(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    //Perform an exchange between two coins.\\n    // i: Index value for the coin to send\\n    // j: Index value of the coin to receive\\n    // _dx: Amount of i being exchanged\\n    // _min_dy: Minimum amount of j to receive\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    function exchange(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function exchange_underlying(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n}\\n\\ninterface IRewardsOnlyGauge is IERC20 {\\n\\n    function deposit(uint256 _value, address _addr, bool _claim_rewards) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function deposit(uint256 _value, bool _claim_rewards) external;\\n\\n    function deposit(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool _claim_rewards) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function lp_token() external returns (address);\\n\\n    function claim_rewards(address _addr, address _receiver) external;\\n\\n    function claim_rewards(address _addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimed_reward(address _addr, address _token) external returns (uint256);\\n\\n    function claimable_reward(address _addr, address _token) external returns (uint256);\\n\\n    function claimable_reward_write(address _addr, address _token) external returns (uint256);\\n}\\n\\nlibrary CurveMetaLibrary {\\n\\n    function swapByIndex(\\n        int128  indexIn,\\n        int128  indexOut,\\n        bool isUnderlying,\\n        uint256 amountIn,\\n        uint256 amountMinOut,\\n        address meta,\\n        address pool\\n    ) internal returns (uint256) {\\n\\n        uint256 backAmount;\\n        if (isUnderlying) {\\n            backAmount = IMetaSwapPool(meta).exchange_underlying(\\n                pool,\\n                indexIn,\\n                indexOut,\\n                amountIn,\\n                amountMinOut\\n            );\\n        } else {\\n            backAmount = IMetaSwapPool(meta).exchange(\\n                pool,\\n                indexIn,\\n                indexOut,\\n                amountIn,\\n                amountMinOut\\n            );\\n        }\\n\\n        return backAmount;\\n    }\\n\\n    function getAmountOutByIndex(\\n        int128 indexIn,\\n        int128 indexOut,\\n        bool isUnderlying,\\n        uint256 amountIn,\\n        address meta,\\n        address pool\\n    ) internal view returns (uint256) {\\n        if (isUnderlying) {\\n            return IMetaSwapPool(meta).get_dy_underlying(pool,indexIn, indexOut, amountIn);\\n        } else {\\n            return IMetaSwapPool(meta).get_dy(pool,indexIn, indexOut, amountIn);\\n        }\\n    }\\n}\\n\\nlibrary CurveLibrary {\\n\\n    function singleSwap(\\n        address curveExchange,\\n        address token0,\\n        address pool0,\\n        address token1,\\n        uint256 amount0,\\n        uint256 amount1Out\\n    ) internal returns (uint256) {\\n        IERC20(token0).approve(curveExchange, amount0);\\n        return ICurveExchange(curveExchange).exchange(pool0, token0, token1, amount0, amount1Out);\\n    }\\n\\n    function multiSwap(\\n        address curveExchange,\\n        address token0,\\n        address pool0,\\n        address token1,\\n        address pool1,\\n        address token2,\\n        uint256 amount0,\\n        uint256 amount2Out\\n    ) internal returns (uint256) {\\n        IERC20(token0).approve(curveExchange, amount0);\\n        address[9] memory route;\\n        route[0] = token0;\\n        route[1] = pool0;\\n        route[2] = token1;\\n        route[3] = pool1;\\n        route[4] = token2;\\n        uint256[3][4] memory swap_params;\\n        return ICurveExchange(curveExchange).exchange_multiple(route, swap_params, amount0, amount2Out);\\n    }\\n\\n    function swap(\\n        address pool,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountMinOut\\n    ) internal returns (uint256) {\\n        IERC20(tokenIn).approve(pool, amountIn);\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(pool, tokenIn, tokenOut);\\n\\n        uint256 backAmount;\\n        if (isUnderlying) {\\n            backAmount = IStableSwapPool(pool).exchange_underlying(\\n                indexIn,\\n                indexOut,\\n                amountIn,\\n                amountMinOut\\n            );\\n        } else {\\n            backAmount = IStableSwapPool(pool).exchange(\\n                indexIn,\\n                indexOut,\\n                amountIn,\\n                amountMinOut\\n            );\\n        }\\n\\n        return backAmount;\\n    }\\n\\n    function getAmountOut(\\n        address pool,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) internal view returns (uint256) {\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(pool, tokenIn, tokenOut);\\n        if (isUnderlying) {\\n            return IStableSwapPool(pool).get_dy_underlying(indexIn, indexOut, amountIn);\\n        } else {\\n            return IStableSwapPool(pool).get_dy(indexIn, indexOut, amountIn);\\n        }\\n    }\\n\\n    function getIndexes(\\n        address pool,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (int128, int128, bool) {\\n        int128 indexIn = type(int128).max;\\n        int128 indexOut = type(int128).max;\\n\\n        // search in coins list\\n        uint256 i;\\n        while (true) {\\n            address token = getCoin(pool, i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n\\n            if (token == tokenIn) {\\n                indexIn = int128(uint128(i));\\n            } else if (token == tokenOut) {\\n                indexOut = int128(uint128(i));\\n            }\\n            i++;\\n        }\\n\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\n            return (indexIn, indexOut, false);\\n        }\\n\\n        if (indexIn != type(int128).max || indexOut != type(int128).max) {\\n            // one of tokens found in coins but not found another - it is incorrect\\n            // setup case for token pairs\\n            revert(\\\"CurveSP: incorrect token pair setup\\\");\\n        }\\n\\n        // search in underlying coins list\\n        i = 0;\\n        while (true) {\\n            address token = getUnderlyingCoin(pool, i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n\\n            if (token == tokenIn) {\\n                indexIn = int128(uint128(i));\\n            } else if (token == tokenOut) {\\n                indexOut = int128(uint128(i));\\n            }\\n            i++;\\n        }\\n\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\n            return (indexIn, indexOut, true);\\n        }\\n\\n        revert(\\\"CurveSP: Can't find index for tokens in pool\\\");\\n    }\\n\\n    function getCoin(address pool, uint256 index) internal view returns (address) {\\n        try IStableSwapPool(pool).coins(index) returns (address tokenAddress) {\\n            return tokenAddress;\\n        } catch {}\\n        return address(0);\\n    }\\n\\n    function getUnderlyingCoin(address pool, uint256 index) internal view returns (address) {\\n        try IStableSwapPool(pool).underlying_coins(index) returns (address tokenAddress) {\\n            return tokenAddress;\\n        } catch {}\\n        return address(0);\\n    }\\n\\n    /**\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmountToSwap(\\n        address pool,\\n        address token0,\\n        address token1,\\n        uint256 amount0Total,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision\\n    ) internal view returns (uint256 amount0) {\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = getAmountOut(pool, token0, token1, amount0);\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\n        }\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmountLpTokens(\\n        address pool,\\n        address token0,\\n        address token1,\\n        uint256 amount0Total,\\n        uint256 totalAmountLpTokens,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision\\n    ) internal view returns (uint256 amountLpTokens) {\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\n            uint256 amount0 = getAmountOut(pool, token1, token0, amount1);\\n            amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbfbe0c9f1baae912b8a11a50a3ae800132cf5e35701149d2ceac76d125a798b7\",\"license\":\"GPL-3.0-or-later\"},\"@overnight-contracts/connectors/contracts/stuff/Sushiswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITridentRouter {\\n\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops.\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps token A to token B directly. It's the same as `exactInputSingle` except\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function exactInputSingleWithNativeToken(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    function exactInputWithNativeToken(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function complexPath(ComplexPathParams calldata params) external payable;\\n\\n    /// @notice Add liquidity to a pool.\\n    /// @param tokenInput Token address and amount to add as liquidity.\\n    /// @param pool Pool address to add liquidity to.\\n    /// @param minLiquidity Minimum output liquidity - caps slippage.\\n    /// @param data Data required by the pool to add liquidity.\\n    function addLiquidity(\\n        TokenInput[] calldata tokenInput,\\n        address pool,\\n        uint256 minLiquidity,\\n        bytes calldata data\\n    ) external payable returns (uint256 liquidity);\\n\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\n    /// @param pool Pool address.\\n    /// @param liquidity Amount of liquidity tokens to burn.\\n    /// @param data Data required by the pool to burn liquidity.\\n    /// @param minWithdrawals Minimum amount of `bento` tokens to be returned.\\n    function burnLiquidity(\\n        address pool,\\n        uint256 liquidity,\\n        bytes calldata data,\\n        TokenAmount[] calldata minWithdrawals\\n    ) external payable;\\n\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\n    /// @dev The tokens are swapped automatically and the output is in a single token.\\n    /// @param pool Pool address.\\n    /// @param liquidity Amount of liquidity tokens to burn.\\n    /// @param data Data required by the pool to burn liquidity.\\n    /// @param minWithdrawal Minimum amount of tokens to be returned.\\n    function burnLiquiditySingle(\\n        address pool,\\n        uint256 liquidity,\\n        bytes calldata data,\\n        uint256 minWithdrawal\\n    ) external payable;\\n\\n    function approveMasterContract(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\\n/// @notice The (older) MasterChef contract gives out a constant number of SUSHI tokens per block.\\n/// It is the only address with minting rights for SUSHI.\\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\\n/// that is deposited into the MasterChef V1 (MCV1) contract.\\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.\\ninterface IMiniChefV2 {\\n\\n    /// @notice Info of each MCV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of SUSHI entitled to the user.\\n    /// @notice Info of each user that stakes LP tokens.\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    /// @notice Deposit LP tokens to MCV2 for SUSHI allocation.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to deposit.\\n    /// @param to The receiver of `amount` deposit benefit.\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\n\\n    /// @notice Withdraw LP tokens from MCV2.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to withdraw.\\n    /// @param to Receiver of the LP tokens.\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\n\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of SUSHI rewards.\\n    function harvest(uint256 pid, address to) external;\\n\\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to withdraw.\\n    /// @param to Receiver of the LP tokens and SUSHI rewards.\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of the LP tokens.\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\\ninterface IStablePool is IERC20 {\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function skim() external;\\n\\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1);\\n\\n    function getNativeReserves() external view returns (uint256 _nativeReserve0, uint256 _nativeReserve1);\\n\\n}\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ninterface IBentoBox {\\n\\n    struct Rebase {\\n        uint128 elastic;\\n        uint128 base;\\n    }\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    function totals(IERC20 token) external view returns (Rebase memory rebase);\\n\\n    function strategyData(IERC20 token) external view returns (StrategyData memory rebase);\\n\\n    // Balance per token per address/contract in shares\\n    function balanceOf(\\n        IERC20 token,\\n        address from\\n    ) external view returns (uint256 amount);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40b42bf3c616f137c7a176754fffcfd0365c4cc896309e225cc08622405f3e0f\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Velodrome.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface WrappedExternalBribe {\\n\\n    function notifyRewardAmount(address token, uint256 amount) external;\\n}\\n\\ninterface VelodromePool {\\n    function sync() external;\\n    function skim(address to) external;\\n}\\n\\ninterface IRouter {\\n\\n    struct route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(uint amountIn, route[] memory routes) external view returns (uint[] memory amounts);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) external view returns (uint amountA, uint amountB);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, route[] calldata routes, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, route[] calldata routes, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n}\\n\\ninterface IPair {\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function totalSupply() external view returns (uint);\\n    function token0() external view returns (address);\\n}\\n\\ninterface IGauge {\\n    function deposit(uint amount, uint tokenId) external;\\n    function withdraw(uint amount) external;\\n    function balanceOf(address) external view returns (uint);\\n    function getReward(address account, address[] memory tokens) external;\\n}\\n\\nlibrary VelodromeLibrary {\\n\\n    function getAmountsOut(\\n        IRouter velodromeRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IRouter.route[] memory routes = new IRouter.route[](1);\\n        routes[0].from = inputToken;\\n        routes[0].to = outputToken;\\n        routes[0].stable = isStablePair0;\\n\\n        uint[] memory amounts = velodromeRouter.getAmountsOut(amountInput, routes);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IRouter velodromeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IRouter.route[] memory routes = new IRouter.route[](2);\\n        routes[0].from = inputToken;\\n        routes[0].to = middleToken;\\n        routes[0].stable = isStablePair0;\\n        routes[1].from = middleToken;\\n        routes[1].to = outputToken;\\n        routes[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = velodromeRouter.getAmountsOut(amountInput, routes);\\n\\n        return amounts[2];\\n    }\\n\\n    function singleSwap(\\n        IRouter velodromeRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(velodromeRouter), amountInput);\\n\\n        IRouter.route[] memory routes = new IRouter.route[](1);\\n        routes[0].from = inputToken;\\n        routes[0].to = outputToken;\\n        routes[0].stable = isStablePair0;\\n\\n        uint[] memory amounts = velodromeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            routes,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function multiSwap(\\n        IRouter velodromeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(velodromeRouter), amountInput);\\n\\n        IRouter.route[] memory routes = new IRouter.route[](2);\\n        routes[0].from = inputToken;\\n        routes[0].to = middleToken;\\n        routes[0].stable = isStablePair0;\\n        routes[1].from = middleToken;\\n        routes[1].to = outputToken;\\n        routes[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = velodromeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            routes,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function getMultiAmount0(\\n        IRouter velodromeRouter,\\n        address token0,\\n        address token1,\\n        address token2,\\n        uint256 amount0Total,\\n        bool    isStable0,\\n        bool    isStable1,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 denominator0,\\n        uint256 denominator1,\\n        uint256 precision\\n    ) internal view returns (uint256 amount0) {\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\n        for (uint i = 0; i < precision; i++) {\\n            uint256 amount1 = getAmountsOut(velodromeRouter, token0, token1, token2,  isStable0, isStable1, amount0);\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\n        }\\n    }\\n\\n\\n    struct CalculateMultiParams {\\n        IRouter velodromeRouter;\\n        address token0;\\n        address token1;\\n        address token2;\\n        uint256 amount0Total;\\n        uint256 totalAmountLpTokens;\\n        bool isStable0;\\n        bool isStable1;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 denominator0;\\n        uint256 denominator1;\\n        uint256 precision;\\n    }\\n\\n    /**\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\n     *\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\n     */\\n    function getAmountLpTokens(\\n        CalculateMultiParams memory params\\n    ) internal view returns (uint256 amountLpTokens) {\\n        amountLpTokens = (params.totalAmountLpTokens * params.amount0Total * params.denominator1) / (params.reserve0 * params.denominator1 + params.reserve1 * params.denominator0);\\n        for (uint i = 0; i < params.precision; i++) {\\n            uint256 amount1 = params.reserve1 * amountLpTokens / params.totalAmountLpTokens;\\n\\n            uint256 amount0 = getAmountsOut(params.velodromeRouter, params.token2, params.token1, params.token0,  params.isStable1, params.isStable0, amount1);\\n            amountLpTokens = (params.totalAmountLpTokens * params.amount0Total * amount1) / (params.reserve0 * amount1 + params.reserve1 * amount0);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x228edb8c9a92dcafc92dd024a5766cf5205a5a6e07aeec4482c71cf0c4eb9340\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IControlRole.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n\\n    address public portfolioManager;\\n\\n    uint256 public swapSlippageBP;\\n    uint256 public navSlippageBP;\\n    uint256 public stakeSlippageBP;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        swapSlippageBP = 20;\\n        navSlippageBP = 20;\\n        stakeSlippageBP = 4;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n    function setSlippages(\\n        uint256 _swapSlippageBP,\\n        uint256 _navSlippageBP,\\n        uint256 _stakeSlippageBP\\n    ) public onlyPortfolioAgent {\\n        swapSlippageBP = _swapSlippageBP;\\n        navSlippageBP = _navSlippageBP;\\n        stakeSlippageBP = _stakeSlippageBP;\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\n    }\\n\\n\\n    // --- logic\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyPortfolioManager {\\n\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\n\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\n\\n        emit Stake(_amount);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\n\\n        uint256 withdrawAmount;\\n        uint256 rewardAmount;\\n        if (_targetIsZero) {\\n            rewardAmount = _claimRewards(_beneficiary);\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n\\n        emit Unstake(_amount, withdrawAmount);\\n        if (rewardAmount > 0) {\\n            emit Reward(rewardAmount);\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 rewardAmount = _claimRewards(_to);\\n        if (rewardAmount > 0) {\\n            emit Reward(rewardAmount);\\n        }\\n        return rewardAmount;\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xcfca69ef3b7b2fcff94ea5cbfadfa7ac590092cca584f08c56d1a951b29b95bc\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IControlRole {\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x56462b7ec495babaced741ff66e35afc5e720c0aca7378ae19d68032130a0399\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x208e31d3c88723ee5ff528e6c9983651a8bd747062acb628c6d54fd9b12fc386\",\"license\":\"GPL-3.0\"},\"contracts/StrategySushiswapUsdcUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Sushiswap.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Curve.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Velodrome.sol\\\";\\n\\n\\ncontract StrategySushiswapUsdcUsdt is Strategy {\\n\\n    // --- params\\n\\n    IERC20 public usdc;\\n    IERC20 public usdt;\\n    IERC20 public op;\\n    IERC20 public sushi;\\n\\n    IBentoBox public bentoBox;\\n    ITridentRouter public tridentRouter;\\n    IMiniChefV2 public miniChefV2;\\n    IStablePool public lpToken;\\n    uint256 public pid;\\n\\n    IPriceFeed public oracleUsdc;\\n    IPriceFeed public oracleUsdt;\\n\\n    address public curve3Pool;\\n    IRouter public velodromeRouter;\\n    address public rewardWallet;\\n\\n    uint256 public usdcDm;\\n    uint256 public usdtDm;\\n\\n    // --- events\\n\\n    event StrategyUpdatedParams();\\n\\n    // --- structs\\n\\n    struct StrategyParams {\\n        address usdc;\\n        address usdt;\\n        address op;\\n        address sushi;\\n        address bentoBox;\\n        address tridentRouter;\\n        address miniChefV2;\\n        address lpToken;\\n        uint256 pid;\\n        address oracleUsdc;\\n        address oracleUsdt;\\n        address curve3Pool;\\n        address velodromeRouter;\\n        address rewardWallet;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n    // --- Setters\\n\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\n        usdc = IERC20(params.usdc);\\n        usdt = IERC20(params.usdt);\\n        op = IERC20(params.op);\\n        sushi = IERC20(params.sushi);\\n\\n        bentoBox = IBentoBox(params.bentoBox);\\n        tridentRouter = ITridentRouter(params.tridentRouter);\\n        miniChefV2 = IMiniChefV2(params.miniChefV2);\\n        lpToken = IStablePool(params.lpToken);\\n        pid = params.pid;\\n\\n        oracleUsdc = IPriceFeed(params.oracleUsdc);\\n        oracleUsdt = IPriceFeed(params.oracleUsdt);\\n\\n        curve3Pool = params.curve3Pool;\\n        velodromeRouter = IRouter(params.velodromeRouter);\\n        rewardWallet = params.rewardWallet;\\n\\n        usdcDm = 10 ** IERC20Metadata(params.usdc).decimals();\\n        usdtDm = 10 ** IERC20Metadata(params.usdt).decimals();\\n\\n        bentoBox.setMasterContractApproval(address(this), address(tridentRouter), true, 0, '', '');\\n\\n        emit StrategyUpdatedParams();\\n    }\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        // swap needed amount usdc to usdt\\n        uint256 totalLpBalance = lpToken.totalSupply();\\n        (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getNativeReserves();\\n        require(reserveUsdc > 10 ** 3 && reserveUsdt > 10 ** 3, 'Liquidity lpToken reserves too low');\\n\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n\\n        uint256 amountUsdc = CurveLibrary.getAmountToSwap(\\n            curve3Pool,\\n            address(usdc),\\n            address(usdt),\\n            usdcBalance,\\n            reserveUsdc,\\n            reserveUsdt,\\n            usdcDm,\\n            usdtDm,\\n            1\\n        );\\n\\n        CurveLibrary.swap(\\n            curve3Pool,\\n            address(usdc),\\n            address(usdt),\\n            amountUsdc,\\n            OvnMath.subBasisPoints(_oracleUsdcToUsdt(amountUsdc), swapSlippageBP)\\n        );\\n\\n        // create params and calculate min liquidity\\n        usdcBalance = usdc.balanceOf(address(this));\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\n\\n        ITridentRouter.TokenInput memory usdcInput;\\n        usdcInput.token = address(usdc);\\n        usdcInput.native = true;\\n        usdcInput.amount = usdcBalance;\\n\\n        ITridentRouter.TokenInput memory usdtInput;\\n        usdtInput.token = address(usdt);\\n        usdtInput.native = true;\\n        usdtInput.amount = usdtBalance;\\n\\n        ITridentRouter.TokenInput[] memory tokenInput = new ITridentRouter.TokenInput[](2);\\n        tokenInput[0] = usdcInput;\\n        tokenInput[1] = usdtInput;\\n\\n        uint256 minLiquidity = OvnMath.subBasisPoints(usdcBalance * totalLpBalance / reserveUsdc, stakeSlippageBP);\\n\\n        // add liquidity\\n        usdc.approve(address(bentoBox), usdcBalance);\\n        usdt.approve(address(bentoBox), usdtBalance);\\n        tridentRouter.addLiquidity(\\n            tokenInput,\\n            address(lpToken),\\n            minLiquidity,\\n            abi.encode(address(this))\\n        );\\n\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\n        lpToken.approve(address(miniChefV2), lpTokenBalance);\\n        miniChefV2.deposit(pid, lpTokenBalance, address(this));\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        // get lpToken amount to unstake\\n        uint256 totalLpBalance = lpToken.totalSupply();\\n        (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getNativeReserves();\\n        uint256 amountLp = CurveLibrary.getAmountLpTokens(\\n            curve3Pool,\\n            address(usdc),\\n            address(usdt),\\n            // add 1 basis point and 0.001 usdc to unstake more than required\\n            OvnMath.addBasisPoints(_amount, 1) + 1000,\\n            totalLpBalance,\\n            reserveUsdc,\\n            reserveUsdt,\\n            usdcDm,\\n            usdtDm,\\n            1\\n        );\\n\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\n        if (amountLp > lpTokenBalance) {\\n            amountLp = lpTokenBalance;\\n        }\\n\\n        // unstake\\n        miniChefV2.withdraw(pid, amountLp, address(this));\\n\\n        // calculate min amounts\\n        uint256 amountUsdc = OvnMath.subBasisPoints(reserveUsdc * amountLp / totalLpBalance, stakeSlippageBP);\\n        uint256 amountUsdt = OvnMath.subBasisPoints(reserveUsdt * amountLp / totalLpBalance, stakeSlippageBP);\\n\\n        ITridentRouter.TokenAmount memory usdcAmount;\\n        usdcAmount.token = address(usdc);\\n        usdcAmount.amount = amountUsdc;\\n\\n        ITridentRouter.TokenAmount memory usdtAmount;\\n        usdtAmount.token = address(usdt);\\n        usdtAmount.amount = amountUsdt;\\n\\n        ITridentRouter.TokenAmount[] memory minWithdrawals = new ITridentRouter.TokenAmount[](2);\\n        minWithdrawals[0] = usdcAmount;\\n        minWithdrawals[1] = usdtAmount;\\n\\n        // remove liquidity\\n        lpToken.approve(address(tridentRouter), amountLp);\\n        tridentRouter.burnLiquidity(\\n            address(lpToken),\\n            amountLp,\\n            abi.encode(address(this), true),\\n            minWithdrawals\\n        );\\n\\n        // swap usdt to usdc\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\n        CurveLibrary.swap(\\n            curve3Pool,\\n            address(usdt),\\n            address(usdc),\\n            usdtBalance,\\n            OvnMath.subBasisPoints(_oracleUsdtToUsdc(usdtBalance), swapSlippageBP)\\n        );\\n\\n        return usdc.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        // get lpToken amount to unstake\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\n        if (lpTokenBalance == 0) {\\n            return usdc.balanceOf(address(this));\\n        }\\n\\n        // unstake\\n        miniChefV2.withdraw(pid, lpTokenBalance, address(this));\\n\\n        // calculate min amounts\\n        uint256 totalLpBalance = lpToken.totalSupply();\\n        (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getNativeReserves();\\n        uint256 amountUsdc = OvnMath.subBasisPoints(reserveUsdc * lpTokenBalance / totalLpBalance, stakeSlippageBP);\\n        uint256 amountUsdt = OvnMath.subBasisPoints(reserveUsdt * lpTokenBalance / totalLpBalance, stakeSlippageBP);\\n\\n        ITridentRouter.TokenAmount memory usdcAmount;\\n        usdcAmount.token = address(usdc);\\n        usdcAmount.amount = amountUsdc;\\n\\n        ITridentRouter.TokenAmount memory usdtAmount;\\n        usdtAmount.token = address(usdt);\\n        usdtAmount.amount = amountUsdt;\\n\\n        ITridentRouter.TokenAmount[] memory minWithdrawals = new ITridentRouter.TokenAmount[](2);\\n        minWithdrawals[0] = usdcAmount;\\n        minWithdrawals[1] = usdtAmount;\\n\\n        // remove liquidity\\n        lpToken.approve(address(tridentRouter), lpTokenBalance);\\n        tridentRouter.burnLiquidity(\\n            address(lpToken),\\n            lpTokenBalance,\\n            abi.encode(address(this), true),\\n            minWithdrawals\\n        );\\n\\n        // swap usdt to usdc\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\n        CurveLibrary.swap(\\n            curve3Pool,\\n            address(usdt),\\n            address(usdc),\\n            usdtBalance,\\n            OvnMath.subBasisPoints(_oracleUsdtToUsdc(usdtBalance), swapSlippageBP)\\n        );\\n\\n        return usdc.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        return _totalValue(true);\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n        return _totalValue(false);\\n    }\\n\\n    function _totalValue(bool nav) internal view returns (uint256) {\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\n\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\n        if (lpTokenBalance > 0) {\\n            uint256 totalLpBalance = lpToken.totalSupply();\\n            (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getNativeReserves();\\n            usdcBalance += reserveUsdc * lpTokenBalance / totalLpBalance;\\n            usdtBalance += reserveUsdt * lpTokenBalance / totalLpBalance;\\n        }\\n\\n        if (usdtBalance > 0) {\\n            if (nav) {\\n                usdcBalance += _oracleUsdtToUsdc(usdtBalance);\\n            } else {\\n                usdcBalance += CurveLibrary.getAmountOut(curve3Pool, address(usdt), address(usdc), usdtBalance);\\n            }\\n        }\\n\\n        return usdcBalance;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n\\n        // claim rewards\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\n        if (lpTokenBalance > 0) {\\n            miniChefV2.harvest(pid, address(this));\\n        }\\n\\n        // send sushi to rewardWallet\\n        uint256 sushiBalance = sushi.balanceOf(address(this));\\n        if (sushiBalance > 0) {\\n            sushi.transfer(rewardWallet, sushiBalance);\\n        }\\n\\n        // sell rewards\\n        uint256 totalUsdc;\\n\\n        uint256 opBalance = op.balanceOf(address(this));\\n        if (opBalance > 0) {\\n            uint256 amountOut = VelodromeLibrary.getAmountsOut(\\n                velodromeRouter,\\n                address(op),\\n                address(usdc),\\n                false,\\n                opBalance\\n            );\\n            if (amountOut > 0) {\\n                totalUsdc += VelodromeLibrary.singleSwap(\\n                    velodromeRouter,\\n                    address(op),\\n                    address(usdc),\\n                    false,\\n                    opBalance,\\n                    amountOut * 99 / 100,\\n                    address(this)\\n                );\\n            }\\n        }\\n\\n        if (totalUsdc > 0) {\\n            usdc.transfer(_to, totalUsdc);\\n        }\\n\\n        return totalUsdc;\\n    }\\n\\n    function _oracleUsdtToUsdc(uint256 usdtAmount) internal view returns (uint256) {\\n        uint256 priceUsdt = ChainlinkLibrary.getPrice(oracleUsdt);\\n        uint256 priceUsdc = ChainlinkLibrary.getPrice(oracleUsdc);\\n        return ChainlinkLibrary.convertTokenToToken(usdtAmount, usdtDm, usdcDm, priceUsdt, priceUsdc);\\n    }\\n\\n    function _oracleUsdcToUsdt(uint256 usdcAmount) internal view returns (uint256) {\\n        uint256 priceUsdt = ChainlinkLibrary.getPrice(oracleUsdt);\\n        uint256 priceUsdc = ChainlinkLibrary.getPrice(oracleUsdc);\\n        return ChainlinkLibrary.convertTokenToToken(usdcAmount, usdcDm, usdtDm, priceUsdc, priceUsdt);\\n    }\\n}\\n\",\"keccak256\":\"0x27ec8c1171c2afe4f8104c2cbdeec5c87420f6accaf9ae0a177e0a402361404e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620018a61760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6152d66200018e6000396000818161085e0152818161089e0152818161093e0152818161097e0152610a0d01526152d66000f3fe6080604052600436106102465760003560e01c8063620b75df11610139578063adc9772e116100b6578063d57074631161007a578063d5707463146106a5578063ec1f1f69146106c5578063ef5cfb8c146106e6578063f106845414610706578063f6f6b8811461071d578063fb75b2c71461073d57600080fd5b8063adc9772e1461060e578063ae30c1101461062e578063bf52e0801461064e578063cc6522c314610664578063d547741f1461068557600080fd5b80638129fc1c116100fd5780638129fc1c1461058f57806391d14854146105a4578063a217fddf146105c4578063a3673b38146105d9578063a440b21a146105ee57600080fd5b8063620b75df146104ea57806363a6b1da1461050a57806364b5528a1461052b5780636b2ace871461054c5780637d5f58021461056d57600080fd5b80633659cfe6116101c757806352d1902d1161018b57806352d1902d146104495780635ca558f81461045e5780635dbd733a146104745780635fcbd285146104a85780635fea9cbb146104c957600080fd5b80633659cfe6146103b3578063366ac47c146103d35780633e413bee146103f45780634b7f6363146104155780634f1ef2861461043657600080fd5b8063248a9ca31161020e578063248a9ca31461030b5780632576e65a1461033b5780632f2ff15d146103505780632f48ab7d1461037257806336568abe1461039357600080fd5b806301ffc9a71461024b5780630a087903146102805780630f9033f7146102b9578063119cd879146102de5780631b1e7ddc146102f4575b600080fd5b34801561025757600080fd5b5061026b610266366004614b1f565b61075e565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b50610130546102a1906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156102c557600080fd5b506102d061013c5481565b604051908152602001610277565b3480156102ea57600080fd5b506102d060fd5481565b34801561030057600080fd5b506102d061013b5481565b34801561031757600080fd5b506102d0610326366004614abd565b60009081526065602052604090206001015490565b34801561034757600080fd5b506102d0610795565b34801561035c57600080fd5b5061037061036b366004614aef565b6107a6565b005b34801561037e57600080fd5b5061012e546102a1906001600160a01b031681565b34801561039f57600080fd5b506103706103ae366004614aef565b6107d0565b3480156103bf57600080fd5b506103706103ce366004614892565b610853565b3480156103df57600080fd5b50610139546102a1906001600160a01b031681565b34801561040057600080fd5b5061012d546102a1906001600160a01b031681565b34801561042157600080fd5b50610133546102a1906001600160a01b031681565b6103706104443660046148cc565b610933565b34801561045557600080fd5b506102d0610a00565b34801561046a57600080fd5b506102d060fe5481565b34801561048057600080fd5b506102d07fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156104b457600080fd5b50610134546102a1906001600160a01b031681565b3480156104d557600080fd5b50610136546102a1906001600160a01b031681565b3480156104f657600080fd5b5060fb546102a1906001600160a01b031681565b34801561051657600080fd5b50610138546102a1906001600160a01b031681565b34801561053757600080fd5b50610132546102a1906001600160a01b031681565b34801561055857600080fd5b50610131546102a1906001600160a01b031681565b34801561057957600080fd5b506102d060008051602061523a83398151915281565b34801561059b57600080fd5b50610370610ab3565b3480156105b057600080fd5b5061026b6105bf366004614aef565b610b7d565b3480156105d057600080fd5b506102d0600081565b3480156105e557600080fd5b506102d0610ba8565b3480156105fa57600080fd5b50610370610609366004614892565b610bb4565b34801561061a57600080fd5b50610370610629366004614974565b610ce3565b34801561063a57600080fd5b50610370610649366004614b86565b610f13565b34801561065a57600080fd5b506102d060fc5481565b34801561067057600080fd5b50610137546102a1906001600160a01b031681565b34801561069157600080fd5b506103706106a0366004614aef565b611088565b3480156106b157600080fd5b506103706106c0366004614b49565b6110ad565b3480156106d157600080fd5b5061012f546102a1906001600160a01b031681565b3480156106f257600080fd5b506102d0610701366004614892565b611556565b34801561071257600080fd5b506102d06101355481565b34801561072957600080fd5b506102d06107383660046149a0565b6115db565b34801561074957600080fd5b5061013a546102a1906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061078f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107a160006118b5565b905090565b6000828152606560205260409020600101546107c181611bf8565b6107cb8383611c02565b505050565b6001600160a01b03811633146108455760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61084f8282611c88565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561089c5760405162461bcd60e51b815260040161083c90614eac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108e560008051602061525a833981519152546001600160a01b031690565b6001600160a01b03161461090b5760405162461bcd60e51b815260040161083c90614ef8565b61091481611cef565b6040805160008082526020820190925261093091839190611cfa565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561097c5760405162461bcd60e51b815260040161083c90614eac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c560008051602061525a833981519152546001600160a01b031690565b6001600160a01b0316146109eb5760405162461bcd60e51b815260040161083c90614ef8565b6109f482611cef565b61084f82826001611cfa565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610aa05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161083c565b5060008051602061525a83398151915290565b600054610100900460ff1615808015610ad35750600054600160ff909116105b80610aed5750303b158015610aed575060005460ff166001145b610b095760405162461bcd60e51b815260040161083c90614f44565b6000805460ff191660011790558015610b2c576000805461ff0019166101001790555b610b34611e74565b8015610930576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107a160016118b5565b610bbf600033610b7d565b610c025760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161083c565b6001600160a01b038116610c585760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161083c565b60fb54610c7d9060008051602061523a833981519152906001600160a01b0316611088565b610c9560008051602061523a833981519152826107a6565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610b72565b610cfb60008051602061523a83398151915233610b7d565b610d175760405162461bcd60e51b815260040161083c90614e75565b6000610d95306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d9190614ad6565b60fd54611f59565b6040516370a0823160e01b8152306004820152909150610e1a9084906001600160a01b038216906370a082319060240160206040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190614ad6565b611f83565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5457600080fd5b505afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190614ad6565b1015610eda5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161083c565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b610f3d7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610b7d565b80610fe4575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190614aa0565b61103b5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b606482015260840161083c565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a90606001610f06565b6000828152606560205260409020600101546110a381611bf8565b6107cb8383611c88565b6110b8600033610b7d565b6110fb5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161083c565b6111086020820182614892565b61012d80546001600160a01b0319166001600160a01b03929092169190911790556111396040820160208301614892565b61012e80546001600160a01b0319166001600160a01b039290921691909117905561116a6060820160408301614892565b61012f80546001600160a01b0319166001600160a01b039290921691909117905561119b6080820160608301614892565b61013080546001600160a01b0319166001600160a01b03929092169190911790556111cc60a0820160808301614892565b61013180546001600160a01b0319166001600160a01b03929092169190911790556111fd60c0820160a08301614892565b61013280546001600160a01b0319166001600160a01b039290921691909117905561122e60e0820160c08301614892565b61013380546001600160a01b0319166001600160a01b0392909216919091179055611260610100820160e08301614892565b61013480546001600160a01b0319166001600160a01b03929092169190911790556101008101356101355561129d61014082016101208301614892565b61013680546001600160a01b0319166001600160a01b03929092169190911790556112d061016082016101408301614892565b61013780546001600160a01b0319166001600160a01b039290921691909117905561130361018082016101608301614892565b61013880546001600160a01b0319166001600160a01b03929092169190911790556113366101a082016101808301614892565b61013980546001600160a01b0319166001600160a01b03929092169190911790556113696101c082016101a08301614892565b61013a80546001600160a01b0319166001600160a01b03929092169190911790556113976020820182614892565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cf57600080fd5b505afa1580156113e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114079190614c02565b61141290600a615095565b61013b556114266040820160208301614892565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561145e57600080fd5b505afa158015611472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114969190614c02565b6114a190600a615095565b61013c55610131546101325460405163c0a47c9360e01b81523060048201526001600160a01b039182166024820152600160448201526000606482018190526084820181905260a482015291169063c0a47c939060c401600060405180830381600087803b15801561151257600080fd5b505af1158015611526573d6000803e3d6000fd5b50506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea5925060009150a150565b600061157060008051602061523a83398151915233610b7d565b61158c5760405162461bcd60e51b815260040161083c90614e75565b60006115978361275a565b905080156115d3576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b60006115f560008051602061523a83398151915233610b7d565b6116115760405162461bcd60e51b815260040161083c90614e75565b600061164f306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5557600080fd5b90506000808415611676576116638661275a565b905061166f8887612b0c565b91506116e5565b6116818888886130fa565b9150868210156116e55760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161083c565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190614ad6565b10156117a55760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161083c565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906117d39089908690600401614d41565b602060405180830381600087803b1580156117ed57600080fd5b505af1158015611801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118259190614aa0565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611899576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509150505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156118fe57600080fd5b505afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119369190614ad6565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561198057600080fd5b505afa158015611994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b89190614ad6565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015611a0d57600080fd5b505afa158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a459190614b62565b5090508015611b965761013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611a9457600080fd5b505afa158015611aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acc9190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b158015611b1357600080fd5b505afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b9190614b62565b909250905082611b5b8584615140565b611b659190615030565b611b6f9087615018565b955082611b7c8583615140565b611b869190615030565b611b909086615018565b94505050505b8115611bef578415611bbc57611bab826136bf565b611bb59084615018565b9250611bef565b6101385461012e5461012d54611be2926001600160a01b0390811692811691168561370b565b611bec9084615018565b92505b50909392505050565b61093081336137fc565b611c0c8282610b7d565b61084f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c443390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c928282610b7d565b1561084f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061084f81611bf8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d2d576107cb83613855565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6657600080fd5b505afa925050508015611d96575060408051601f3d908101601f19168201909252611d9391810190614ad6565b60015b611df95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161083c565b60008051602061525a8339815191528114611e685760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161083c565b506107cb8383836138f1565b600054610100900460ff1615808015611e945750600054600160ff909116105b80611eae5750303b158015611eae575060005460ff166001145b611eca5760405162461bcd60e51b815260040161083c90614f44565b6000805460ff191660011790558015611eed576000805461ff0019166101001790555b611ef561391c565b611efd61391c565b611f08600033611c02565b601460fc81905560fd55600460fe558015610930576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b72565b6000612710611f68838261515f565b611f729085615140565b611f7c9190615030565b9392505050565b61013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611fc957600080fd5b505afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b15801561204857600080fd5b505afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190614b62565b915091506103e88211801561209657506103e881115b6120ed5760405162461bcd60e51b815260206004820152602260248201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6044820152616f7760f01b606482015260840161083c565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561213257600080fd5b505afa158015612146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216a9190614ad6565b6101385461012d5461012e5461013b5461013c549495506000946121a6946001600160a01b0390811694811693169187918a918a916001613989565b6101385461012d5461012e549293506121e4926001600160a01b03928316929182169116846121df6121d782613a34565b60fc54611f59565b613a80565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561222957600080fd5b505afa15801561223d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122619190614ad6565b61012e546040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156122ab57600080fd5b505afa1580156122bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e39190614ad6565b9050612308604080516060810182526000808252602082018190529181019190915290565b61012d546001600160a01b031681526001602082015260408101849052612348604080516060810182526000808252602082018190529181019190915290565b61012e546001600160a01b031681526001602082015260408082018490528051600280825260608201909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161237c57905050905082816000815181106123bf576123bf6151ea565b602002602001018190525081816001815181106123de576123de6151ea565b6020908102919091010152600061240b896123f98c8a615140565b6124039190615030565b60fe54611f59565b61012d546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926124459216908b90600401614d41565b602060405180830381600087803b15801561245f57600080fd5b505af1158015612473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124979190614aa0565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926124d0929116908990600401614d41565b602060405180830381600087803b1580156124ea57600080fd5b505af11580156124fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125229190614aa0565b506101325461013454604080513060208201526001600160a01b0393841693632cfcb94f9387939116918691016040516020818303038152906040526040518563ffffffff1660e01b815260040161257d9493929190614dd3565b602060405180830381600087803b15801561259757600080fd5b505af11580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf9190614ad6565b50610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561261557600080fd5b505afa158015612629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264d9190614ad6565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926126879216908590600401614d41565b602060405180830381600087803b1580156126a157600080fd5b505af11580156126b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d99190614aa0565b506101335461013554604051638dbdbe6d60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401600060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b5050505050505050505050505050505050565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156127ae57600080fd5b505afa1580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e69190614b62565b509050801561285a576101335461013554604051630c7e663b60e11b815260048101919091523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b15801561284157600080fd5b505af1158015612855573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561289f57600080fd5b505afa1580156128b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d79190614ad6565b9050801561296b576101305461013a5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612917929116908590600401614d41565b602060405180830381600087803b15801561293157600080fd5b505af1158015612945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129699190614aa0565b505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156129b457600080fd5b505afa1580156129c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ec9190614ad6565b90508015612a76576101395461012f5461012d54600092612a1f926001600160a01b039182169290821691168486613c5f565b90508015612a74576101395461012f5461012d54612a67926001600160a01b0390811692811691166000866064612a57886063615140565b612a619190615030565b30613ded565b612a719084615018565b92505b505b8115612b035761012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612aaf9089908690600401614d41565b602060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190614aa0565b505b50949350505050565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612b6057600080fd5b505afa158015612b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b989190614b62565b50905080612c245761012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612be457600080fd5b505afa158015612bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1c9190614ad6565b91505061078f565b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b158015612c7d57600080fd5b505af1158015612c91573d6000803e3d6000fd5b50505050600061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ce657600080fd5b505afa158015612cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1e9190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b158015612d6557600080fd5b505afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d9190614b62565b90925090506000612db2846123f98786615140565b90506000612dc4856123f98886615140565b9050612de0604080518082019091526000808252602082015290565b61012d546001600160a01b0316815260208101839052612e10604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081612e3e5790505090508281600081518110612e7b57612e7b6151ea565b60200260200101819052508181600181518110612e9a57612e9a6151ea565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612edd929116908d90600401614d41565b602060405180830381600087803b158015612ef757600080fd5b505af1158015612f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2f9190614aa0565b50610132546101345460408051306020820152600181830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d993612f8a939116918e91908790606401614d5a565b600060405180830381600087803b158015612fa457600080fd5b505af1158015612fb8573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561300357600080fd5b505afa158015613017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303b9190614ad6565b6101385461012e5461012d5492935061306c926001600160a01b03928316929182169116846121df6121d7826136bf565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156130b157600080fd5b505afa1580156130c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e99190614ad6565b9d9c50505050505050505050505050565b60008061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561314c57600080fd5b505afa158015613160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131849190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b1580156131cb57600080fd5b505afa1580156131df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132039190614b62565b6101385461012d5461012e54939550919350600092613256926001600160a01b039283169290811691166132388b6001614006565b613244906103e8615018565b88888861013b5461013c546001614015565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156132ab57600080fd5b505afa1580156132bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e39190614b62565b509050808211156132f2578091505b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b15801561334b57600080fd5b505af115801561335f573d6000803e3d6000fd5b5050505060006133758684876123f99190615140565b90506000613387876123f98688615140565b90506133a3604080518082019091526000808252602082015290565b61012d546001600160a01b03168152602081018390526133d3604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081613401579050509050828160008151811061343e5761343e6151ea565b6020026020010181905250818160018151811061345d5761345d6151ea565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926134a0929116908b90600401614d41565b602060405180830381600087803b1580156134ba57600080fd5b505af11580156134ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f29190614aa0565b50610132546101345460408051306020820152600181830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d99361354d939116918c91908790606401614d5a565b600060405180830381600087803b15801561356757600080fd5b505af115801561357b573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156135c657600080fd5b505afa1580156135da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fe9190614ad6565b6101385461012e5461012d5492935061362f926001600160a01b03928316929182169116846121df6121d7826136bf565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561367457600080fd5b505afa158015613688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ac9190614ad6565b9f9e505050505050505050505050505050565b6101375460009081906136da906001600160a01b03166140ed565b610136549091506000906136f6906001600160a01b03166140ed565b905061189e8461013c5461013b548585614211565b60008060008061371c888888614246565b92509250925080156137bd576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b038916906307211ef7906064015b60206040518083038186803b15801561377b57600080fd5b505afa15801561378f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b39190614ad6565b935050505061189e565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b03891690635e0d443f90606401613763565b6138068282610b7d565b61084f576138138161449b565b61381e8360206144ad565b60405160200161382f929190614ccc565b60408051601f198184030181529082905262461bcd60e51b825261083c91600401614e62565b6001600160a01b0381163b6138c25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161083c565b60008051602061525a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6138fa83614649565b6000825111806139075750805b156107cb576139168383614689565b50505050565b600054610100900460ff166139875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161083c565b565b600084846139978589615140565b6139a19190615030565b6139ab9190615018565b6139b58689615140565b6139bf9190615030565b905060005b82811015613a265760006139da8c8c8c8661370b565b905086836139e8838b615140565b6139f29190615030565b6139fc9190615018565b613a06888b615140565b613a109190615030565b9250508080613a1e906151b9565b9150506139c4565b509998505050505050505050565b610137546000908190613a4f906001600160a01b03166140ed565b61013654909150600090613a6b906001600160a01b03166140ed565b905061189e8461013b5461013c548486614211565b60405163095ea7b360e01b81526000906001600160a01b0386169063095ea7b390613ab19089908790600401614d41565b602060405180830381600087803b158015613acb57600080fd5b505af1158015613adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b039190614aa0565b506000806000613b14898989614246565b92509250925060008115613bbc57604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b169063a6417ed690608401602060405180830381600087803b158015613b7d57600080fd5b505af1158015613b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb59190614ad6565b9050613c52565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b1690633df0212490608401602060405180830381600087803b158015613c1757600080fd5b505af1158015613c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4f9190614ad6565b90505b9998505050505050505050565b604080516001808252818301909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613c795790505090508581600081518110613cbc57613cbc6151ea565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508481600081518110613cf457613cf46151ea565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600081518110613d2c57613d2c6151ea565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b03891690639881fcb490613d6f9087908690600401614f92565b60006040518083038186803b158015613d8757600080fd5b505afa158015613d9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dc391908101906149f3565b905080600181518110613dd857613dd86151ea565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b390613e1e908b908890600401614d41565b602060405180830381600087803b158015613e3857600080fd5b505af1158015613e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e709190614aa0565b50604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613e885790505090508781600081518110613ecb57613ecb6151ea565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110613f0357613f036151ea565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600081518110613f3b57613f3b6151ea565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038b169063f41766d890613f84908990899087908a904290600401614fab565b600060405180830381600087803b158015613f9e57600080fd5b505af1158015613fb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613fda91908101906149f3565b905080600181518110613fef57613fef6151ea565b602002602001015192505050979650505050505050565b6000612710611f688382615018565b60006140218486615140565b61402b8488615140565b6140359190615018565b836140408a8a615140565b61404a9190615140565b6140549190615030565b905060005b828110156140de5760008861406e8489615140565b6140789190615030565b905060006140888e8d8f8561370b565b90506140948189615140565b61409e838b615140565b6140a89190615018565b826140b38d8d615140565b6140bd9190615140565b6140c79190615030565b9350505080806140d6906151b9565b915050614059565b509a9950505050505050505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561412e57600080fd5b505afa158015614142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141669190614bb2565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff1610156141c25760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b604482015260640161083c565b600082116142075760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b604482015260640161083c565b5090949350505050565b600061421d8286615140565b836142288689615140565b6142329190615140565b61423c9190615030565b9695505050505050565b6000808060016001607f1b0380825b60006142618a8361477d565b90506001600160a01b03811661427757506142ca565b886001600160a01b0316816001600160a01b03161415614299578193506142b7565b876001600160a01b0316816001600160a01b031614156142b7578192505b816142c1816151b9565b92505050614255565b600f83900b60016001607f1b03148015906142f05750600f82900b60016001607f1b0314155b156143045750909350915060009050614492565b600f83900b60016001607f1b031415806143295750600f82900b60016001607f1b0314155b156143825760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b606482015260840161083c565b5060005b60006143928a8361480a565b90506001600160a01b0381166143a857506143fb565b886001600160a01b0316816001600160a01b031614156143ca578193506143e8565b876001600160a01b0316816001600160a01b031614156143e8578192505b816143f2816151b9565b92505050614386565b600f83900b60016001607f1b03148015906144215750600f82900b60016001607f1b0314155b156144355750909350915060019050614492565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b606482015260840161083c565b93509350939050565b606061078f6001600160a01b03831660145b606060006144bc836002615140565b6144c7906002615018565b67ffffffffffffffff8111156144df576144df615200565b6040519080825280601f01601f191660200182016040528015614509576020820181803683370190505b509050600360fc1b81600081518110614524576145246151ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614553576145536151ea565b60200101906001600160f81b031916908160001a9053506000614577846002615140565b614582906001615018565b90505b60018111156145fa576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106145b6576145b66151ea565b1a60f81b8282815181106145cc576145cc6151ea565b60200101906001600160f81b031916908160001a90535060049490941c936145f3816151a2565b9050614585565b508315611f7c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161083c565b61465281613855565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6146f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161083c565b600080846001600160a01b03168460405161470c9190614cb0565b600060405180830381855af49150503d8060008114614747576040519150601f19603f3d011682016040523d82523d6000602084013e61474c565b606091505b5091509150614774828260405180606001604052806027815260200161527a6027913961483a565b95945050505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b1580156147c157600080fd5b505afa9250505080156147f1575060408051601f3d908101601f191682019092526147ee918101906148af565b60015b6147fa57614801565b905061078f565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb0906024016147a9565b60608315614849575081611f7c565b611f7c838381511561485e5781518083602001fd5b8060405162461bcd60e51b815260040161083c9190614e62565b805169ffffffffffffffffffff811681146115d657600080fd5b6000602082840312156148a457600080fd5b8135611f7c81615216565b6000602082840312156148c157600080fd5b8151611f7c81615216565b600080604083850312156148df57600080fd5b82356148ea81615216565b915060208381013567ffffffffffffffff8082111561490857600080fd5b818601915086601f83011261491c57600080fd5b81358181111561492e5761492e615200565b614940601f8201601f19168501614fe7565b9150808252878482850101111561495657600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561498757600080fd5b823561499281615216565b946020939093013593505050565b600080600080608085870312156149b657600080fd5b84356149c181615216565b93506020850135925060408501356149d881615216565b915060608501356149e88161522b565b939692955090935050565b60006020808385031215614a0657600080fd5b825167ffffffffffffffff80821115614a1e57600080fd5b818501915085601f830112614a3257600080fd5b815181811115614a4457614a44615200565b8060051b9150614a55848301614fe7565b8181528481019084860184860187018a1015614a7057600080fd5b600095505b83861015614a93578051835260019590950194918601918601614a75565b5098975050505050505050565b600060208284031215614ab257600080fd5b8151611f7c8161522b565b600060208284031215614acf57600080fd5b5035919050565b600060208284031215614ae857600080fd5b5051919050565b60008060408385031215614b0257600080fd5b823591506020830135614b1481615216565b809150509250929050565b600060208284031215614b3157600080fd5b81356001600160e01b031981168114611f7c57600080fd5b60006101c08284031215614b5c57600080fd5b50919050565b60008060408385031215614b7557600080fd5b505080516020909101519092909150565b600080600060608486031215614b9b57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614bca57600080fd5b614bd386614878565b9450602086015193506040860151925060608601519150614bf660808701614878565b90509295509295909350565b600060208284031215614c1457600080fd5b815160ff81168114611f7c57600080fd5b600081518084526020808501945080840160005b83811015614c7957815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614c39565b509495945050505050565b60008151808452614c9c816020860160208601615176565b601f01601f19169290920160200192915050565b60008251614cc2818460208701615176565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d04816017850160208801615176565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614d35816028840160208801615176565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038087168352602086818501526040608081860152614d846080860188614c84565b858103606087015286518082528388019184019060005b81811015614dc2578351805188168452860151868401529285019291840191600101614d9b565b50909b9a5050505050505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614e2d57815180516001600160a01b03168552858101511515868601526040908101519085015260609093019290840190600101614df0565b5050506001600160a01b038716848301528560408501528381036060850152614e568186614c84565b98975050505050505050565b602081526000611f7c6020830184614c84565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b82815260406020820152600061189e6040830184614c25565b85815284602082015260a060408201526000614fca60a0830186614c25565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561501057615010615200565b604052919050565b6000821982111561502b5761502b6151d4565b500190565b60008261504d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561508d578160001904821115615073576150736151d4565b8085161561508057918102915b93841c9390800290615057565b509250929050565b6000611f7c60ff8416836000826150ae5750600161078f565b816150bb5750600061078f565b81600181146150d157600281146150db576150f7565b600191505061078f565b60ff8411156150ec576150ec6151d4565b50506001821b61078f565b5060208310610133831016604e8410600b841016171561511a575081810a61078f565b6151248383615052565b8060001904821115615138576151386151d4565b029392505050565b600081600019048311821515161561515a5761515a6151d4565b500290565b600082821015615171576151716151d4565b500390565b60005b83811015615191578181015183820152602001615179565b838111156139165750506000910152565b6000816151b1576151b16151d4565b506000190190565b60006000198214156151cd576151cd6151d4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461093057600080fd5b801515811461093057600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203e789d26fa07122ea6c456c3d84f1efaddf1789f5872f60edfc6cf2e8cc8e66964736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c8063620b75df11610139578063adc9772e116100b6578063d57074631161007a578063d5707463146106a5578063ec1f1f69146106c5578063ef5cfb8c146106e6578063f106845414610706578063f6f6b8811461071d578063fb75b2c71461073d57600080fd5b8063adc9772e1461060e578063ae30c1101461062e578063bf52e0801461064e578063cc6522c314610664578063d547741f1461068557600080fd5b80638129fc1c116100fd5780638129fc1c1461058f57806391d14854146105a4578063a217fddf146105c4578063a3673b38146105d9578063a440b21a146105ee57600080fd5b8063620b75df146104ea57806363a6b1da1461050a57806364b5528a1461052b5780636b2ace871461054c5780637d5f58021461056d57600080fd5b80633659cfe6116101c757806352d1902d1161018b57806352d1902d146104495780635ca558f81461045e5780635dbd733a146104745780635fcbd285146104a85780635fea9cbb146104c957600080fd5b80633659cfe6146103b3578063366ac47c146103d35780633e413bee146103f45780634b7f6363146104155780634f1ef2861461043657600080fd5b8063248a9ca31161020e578063248a9ca31461030b5780632576e65a1461033b5780632f2ff15d146103505780632f48ab7d1461037257806336568abe1461039357600080fd5b806301ffc9a71461024b5780630a087903146102805780630f9033f7146102b9578063119cd879146102de5780631b1e7ddc146102f4575b600080fd5b34801561025757600080fd5b5061026b610266366004614b1f565b61075e565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b50610130546102a1906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156102c557600080fd5b506102d061013c5481565b604051908152602001610277565b3480156102ea57600080fd5b506102d060fd5481565b34801561030057600080fd5b506102d061013b5481565b34801561031757600080fd5b506102d0610326366004614abd565b60009081526065602052604090206001015490565b34801561034757600080fd5b506102d0610795565b34801561035c57600080fd5b5061037061036b366004614aef565b6107a6565b005b34801561037e57600080fd5b5061012e546102a1906001600160a01b031681565b34801561039f57600080fd5b506103706103ae366004614aef565b6107d0565b3480156103bf57600080fd5b506103706103ce366004614892565b610853565b3480156103df57600080fd5b50610139546102a1906001600160a01b031681565b34801561040057600080fd5b5061012d546102a1906001600160a01b031681565b34801561042157600080fd5b50610133546102a1906001600160a01b031681565b6103706104443660046148cc565b610933565b34801561045557600080fd5b506102d0610a00565b34801561046a57600080fd5b506102d060fe5481565b34801561048057600080fd5b506102d07fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156104b457600080fd5b50610134546102a1906001600160a01b031681565b3480156104d557600080fd5b50610136546102a1906001600160a01b031681565b3480156104f657600080fd5b5060fb546102a1906001600160a01b031681565b34801561051657600080fd5b50610138546102a1906001600160a01b031681565b34801561053757600080fd5b50610132546102a1906001600160a01b031681565b34801561055857600080fd5b50610131546102a1906001600160a01b031681565b34801561057957600080fd5b506102d060008051602061523a83398151915281565b34801561059b57600080fd5b50610370610ab3565b3480156105b057600080fd5b5061026b6105bf366004614aef565b610b7d565b3480156105d057600080fd5b506102d0600081565b3480156105e557600080fd5b506102d0610ba8565b3480156105fa57600080fd5b50610370610609366004614892565b610bb4565b34801561061a57600080fd5b50610370610629366004614974565b610ce3565b34801561063a57600080fd5b50610370610649366004614b86565b610f13565b34801561065a57600080fd5b506102d060fc5481565b34801561067057600080fd5b50610137546102a1906001600160a01b031681565b34801561069157600080fd5b506103706106a0366004614aef565b611088565b3480156106b157600080fd5b506103706106c0366004614b49565b6110ad565b3480156106d157600080fd5b5061012f546102a1906001600160a01b031681565b3480156106f257600080fd5b506102d0610701366004614892565b611556565b34801561071257600080fd5b506102d06101355481565b34801561072957600080fd5b506102d06107383660046149a0565b6115db565b34801561074957600080fd5b5061013a546102a1906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061078f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107a160006118b5565b905090565b6000828152606560205260409020600101546107c181611bf8565b6107cb8383611c02565b505050565b6001600160a01b03811633146108455760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61084f8282611c88565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561089c5760405162461bcd60e51b815260040161083c90614eac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108e560008051602061525a833981519152546001600160a01b031690565b6001600160a01b03161461090b5760405162461bcd60e51b815260040161083c90614ef8565b61091481611cef565b6040805160008082526020820190925261093091839190611cfa565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561097c5760405162461bcd60e51b815260040161083c90614eac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c560008051602061525a833981519152546001600160a01b031690565b6001600160a01b0316146109eb5760405162461bcd60e51b815260040161083c90614ef8565b6109f482611cef565b61084f82826001611cfa565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610aa05760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161083c565b5060008051602061525a83398151915290565b600054610100900460ff1615808015610ad35750600054600160ff909116105b80610aed5750303b158015610aed575060005460ff166001145b610b095760405162461bcd60e51b815260040161083c90614f44565b6000805460ff191660011790558015610b2c576000805461ff0019166101001790555b610b34611e74565b8015610930576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107a160016118b5565b610bbf600033610b7d565b610c025760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161083c565b6001600160a01b038116610c585760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161083c565b60fb54610c7d9060008051602061523a833981519152906001600160a01b0316611088565b610c9560008051602061523a833981519152826107a6565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610b72565b610cfb60008051602061523a83398151915233610b7d565b610d175760405162461bcd60e51b815260040161083c90614e75565b6000610d95306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d9190614ad6565b60fd54611f59565b6040516370a0823160e01b8152306004820152909150610e1a9084906001600160a01b038216906370a082319060240160206040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190614ad6565b611f83565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5457600080fd5b505afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190614ad6565b1015610eda5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161083c565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b610f3d7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610b7d565b80610fe4575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190614aa0565b61103b5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b606482015260840161083c565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a90606001610f06565b6000828152606560205260409020600101546110a381611bf8565b6107cb8383611c88565b6110b8600033610b7d565b6110fb5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161083c565b6111086020820182614892565b61012d80546001600160a01b0319166001600160a01b03929092169190911790556111396040820160208301614892565b61012e80546001600160a01b0319166001600160a01b039290921691909117905561116a6060820160408301614892565b61012f80546001600160a01b0319166001600160a01b039290921691909117905561119b6080820160608301614892565b61013080546001600160a01b0319166001600160a01b03929092169190911790556111cc60a0820160808301614892565b61013180546001600160a01b0319166001600160a01b03929092169190911790556111fd60c0820160a08301614892565b61013280546001600160a01b0319166001600160a01b039290921691909117905561122e60e0820160c08301614892565b61013380546001600160a01b0319166001600160a01b0392909216919091179055611260610100820160e08301614892565b61013480546001600160a01b0319166001600160a01b03929092169190911790556101008101356101355561129d61014082016101208301614892565b61013680546001600160a01b0319166001600160a01b03929092169190911790556112d061016082016101408301614892565b61013780546001600160a01b0319166001600160a01b039290921691909117905561130361018082016101608301614892565b61013880546001600160a01b0319166001600160a01b03929092169190911790556113366101a082016101808301614892565b61013980546001600160a01b0319166001600160a01b03929092169190911790556113696101c082016101a08301614892565b61013a80546001600160a01b0319166001600160a01b03929092169190911790556113976020820182614892565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cf57600080fd5b505afa1580156113e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114079190614c02565b61141290600a615095565b61013b556114266040820160208301614892565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561145e57600080fd5b505afa158015611472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114969190614c02565b6114a190600a615095565b61013c55610131546101325460405163c0a47c9360e01b81523060048201526001600160a01b039182166024820152600160448201526000606482018190526084820181905260a482015291169063c0a47c939060c401600060405180830381600087803b15801561151257600080fd5b505af1158015611526573d6000803e3d6000fd5b50506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea5925060009150a150565b600061157060008051602061523a83398151915233610b7d565b61158c5760405162461bcd60e51b815260040161083c90614e75565b60006115978361275a565b905080156115d3576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b60006115f560008051602061523a83398151915233610b7d565b6116115760405162461bcd60e51b815260040161083c90614e75565b600061164f306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5557600080fd5b90506000808415611676576116638661275a565b905061166f8887612b0c565b91506116e5565b6116818888886130fa565b9150868210156116e55760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b606482015260840161083c565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190614ad6565b10156117a55760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e20657870656374656400604482015260640161083c565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906117d39089908690600401614d41565b602060405180830381600087803b1580156117ed57600080fd5b505af1158015611801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118259190614aa0565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611899576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509150505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156118fe57600080fd5b505afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119369190614ad6565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561198057600080fd5b505afa158015611994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b89190614ad6565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015611a0d57600080fd5b505afa158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a459190614b62565b5090508015611b965761013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611a9457600080fd5b505afa158015611aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acc9190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b158015611b1357600080fd5b505afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b9190614b62565b909250905082611b5b8584615140565b611b659190615030565b611b6f9087615018565b955082611b7c8583615140565b611b869190615030565b611b909086615018565b94505050505b8115611bef578415611bbc57611bab826136bf565b611bb59084615018565b9250611bef565b6101385461012e5461012d54611be2926001600160a01b0390811692811691168561370b565b611bec9084615018565b92505b50909392505050565b61093081336137fc565b611c0c8282610b7d565b61084f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c443390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c928282610b7d565b1561084f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061084f81611bf8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d2d576107cb83613855565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6657600080fd5b505afa925050508015611d96575060408051601f3d908101601f19168201909252611d9391810190614ad6565b60015b611df95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161083c565b60008051602061525a8339815191528114611e685760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161083c565b506107cb8383836138f1565b600054610100900460ff1615808015611e945750600054600160ff909116105b80611eae5750303b158015611eae575060005460ff166001145b611eca5760405162461bcd60e51b815260040161083c90614f44565b6000805460ff191660011790558015611eed576000805461ff0019166101001790555b611ef561391c565b611efd61391c565b611f08600033611c02565b601460fc81905560fd55600460fe558015610930576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b72565b6000612710611f68838261515f565b611f729085615140565b611f7c9190615030565b9392505050565b61013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611fc957600080fd5b505afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b15801561204857600080fd5b505afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190614b62565b915091506103e88211801561209657506103e881115b6120ed5760405162461bcd60e51b815260206004820152602260248201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6044820152616f7760f01b606482015260840161083c565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561213257600080fd5b505afa158015612146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216a9190614ad6565b6101385461012d5461012e5461013b5461013c549495506000946121a6946001600160a01b0390811694811693169187918a918a916001613989565b6101385461012d5461012e549293506121e4926001600160a01b03928316929182169116846121df6121d782613a34565b60fc54611f59565b613a80565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561222957600080fd5b505afa15801561223d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122619190614ad6565b61012e546040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156122ab57600080fd5b505afa1580156122bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e39190614ad6565b9050612308604080516060810182526000808252602082018190529181019190915290565b61012d546001600160a01b031681526001602082015260408101849052612348604080516060810182526000808252602082018190529181019190915290565b61012e546001600160a01b031681526001602082015260408082018490528051600280825260608201909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161237c57905050905082816000815181106123bf576123bf6151ea565b602002602001018190525081816001815181106123de576123de6151ea565b6020908102919091010152600061240b896123f98c8a615140565b6124039190615030565b60fe54611f59565b61012d546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926124459216908b90600401614d41565b602060405180830381600087803b15801561245f57600080fd5b505af1158015612473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124979190614aa0565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926124d0929116908990600401614d41565b602060405180830381600087803b1580156124ea57600080fd5b505af11580156124fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125229190614aa0565b506101325461013454604080513060208201526001600160a01b0393841693632cfcb94f9387939116918691016040516020818303038152906040526040518563ffffffff1660e01b815260040161257d9493929190614dd3565b602060405180830381600087803b15801561259757600080fd5b505af11580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf9190614ad6565b50610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561261557600080fd5b505afa158015612629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264d9190614ad6565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926126879216908590600401614d41565b602060405180830381600087803b1580156126a157600080fd5b505af11580156126b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d99190614aa0565b506101335461013554604051638dbdbe6d60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401600060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b5050505050505050505050505050505050565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156127ae57600080fd5b505afa1580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e69190614b62565b509050801561285a576101335461013554604051630c7e663b60e11b815260048101919091523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b15801561284157600080fd5b505af1158015612855573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561289f57600080fd5b505afa1580156128b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d79190614ad6565b9050801561296b576101305461013a5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612917929116908590600401614d41565b602060405180830381600087803b15801561293157600080fd5b505af1158015612945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129699190614aa0565b505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156129b457600080fd5b505afa1580156129c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ec9190614ad6565b90508015612a76576101395461012f5461012d54600092612a1f926001600160a01b039182169290821691168486613c5f565b90508015612a74576101395461012f5461012d54612a67926001600160a01b0390811692811691166000866064612a57886063615140565b612a619190615030565b30613ded565b612a719084615018565b92505b505b8115612b035761012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612aaf9089908690600401614d41565b602060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190614aa0565b505b50949350505050565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612b6057600080fd5b505afa158015612b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b989190614b62565b50905080612c245761012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612be457600080fd5b505afa158015612bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1c9190614ad6565b91505061078f565b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b158015612c7d57600080fd5b505af1158015612c91573d6000803e3d6000fd5b50505050600061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ce657600080fd5b505afa158015612cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1e9190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b158015612d6557600080fd5b505afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d9190614b62565b90925090506000612db2846123f98786615140565b90506000612dc4856123f98886615140565b9050612de0604080518082019091526000808252602082015290565b61012d546001600160a01b0316815260208101839052612e10604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081612e3e5790505090508281600081518110612e7b57612e7b6151ea565b60200260200101819052508181600181518110612e9a57612e9a6151ea565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612edd929116908d90600401614d41565b602060405180830381600087803b158015612ef757600080fd5b505af1158015612f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2f9190614aa0565b50610132546101345460408051306020820152600181830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d993612f8a939116918e91908790606401614d5a565b600060405180830381600087803b158015612fa457600080fd5b505af1158015612fb8573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561300357600080fd5b505afa158015613017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303b9190614ad6565b6101385461012e5461012d5492935061306c926001600160a01b03928316929182169116846121df6121d7826136bf565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156130b157600080fd5b505afa1580156130c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e99190614ad6565b9d9c50505050505050505050505050565b60008061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561314c57600080fd5b505afa158015613160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131849190614ad6565b61013454604080516365dfc76760e01b8152815193945060009384936001600160a01b0316926365dfc7679260048082019391829003018186803b1580156131cb57600080fd5b505afa1580156131df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132039190614b62565b6101385461012d5461012e54939550919350600092613256926001600160a01b039283169290811691166132388b6001614006565b613244906103e8615018565b88888861013b5461013c546001614015565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156132ab57600080fd5b505afa1580156132bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e39190614b62565b509050808211156132f2578091505b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b15801561334b57600080fd5b505af115801561335f573d6000803e3d6000fd5b5050505060006133758684876123f99190615140565b90506000613387876123f98688615140565b90506133a3604080518082019091526000808252602082015290565b61012d546001600160a01b03168152602081018390526133d3604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081613401579050509050828160008151811061343e5761343e6151ea565b6020026020010181905250818160018151811061345d5761345d6151ea565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926134a0929116908b90600401614d41565b602060405180830381600087803b1580156134ba57600080fd5b505af11580156134ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f29190614aa0565b50610132546101345460408051306020820152600181830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d99361354d939116918c91908790606401614d5a565b600060405180830381600087803b15801561356757600080fd5b505af115801561357b573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156135c657600080fd5b505afa1580156135da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fe9190614ad6565b6101385461012e5461012d5492935061362f926001600160a01b03928316929182169116846121df6121d7826136bf565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561367457600080fd5b505afa158015613688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ac9190614ad6565b9f9e505050505050505050505050505050565b6101375460009081906136da906001600160a01b03166140ed565b610136549091506000906136f6906001600160a01b03166140ed565b905061189e8461013c5461013b548585614211565b60008060008061371c888888614246565b92509250925080156137bd576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b038916906307211ef7906064015b60206040518083038186803b15801561377b57600080fd5b505afa15801561378f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b39190614ad6565b935050505061189e565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b03891690635e0d443f90606401613763565b6138068282610b7d565b61084f576138138161449b565b61381e8360206144ad565b60405160200161382f929190614ccc565b60408051601f198184030181529082905262461bcd60e51b825261083c91600401614e62565b6001600160a01b0381163b6138c25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161083c565b60008051602061525a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6138fa83614649565b6000825111806139075750805b156107cb576139168383614689565b50505050565b600054610100900460ff166139875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161083c565b565b600084846139978589615140565b6139a19190615030565b6139ab9190615018565b6139b58689615140565b6139bf9190615030565b905060005b82811015613a265760006139da8c8c8c8661370b565b905086836139e8838b615140565b6139f29190615030565b6139fc9190615018565b613a06888b615140565b613a109190615030565b9250508080613a1e906151b9565b9150506139c4565b509998505050505050505050565b610137546000908190613a4f906001600160a01b03166140ed565b61013654909150600090613a6b906001600160a01b03166140ed565b905061189e8461013b5461013c548486614211565b60405163095ea7b360e01b81526000906001600160a01b0386169063095ea7b390613ab19089908790600401614d41565b602060405180830381600087803b158015613acb57600080fd5b505af1158015613adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b039190614aa0565b506000806000613b14898989614246565b92509250925060008115613bbc57604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b169063a6417ed690608401602060405180830381600087803b158015613b7d57600080fd5b505af1158015613b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb59190614ad6565b9050613c52565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b1690633df0212490608401602060405180830381600087803b158015613c1757600080fd5b505af1158015613c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4f9190614ad6565b90505b9998505050505050505050565b604080516001808252818301909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613c795790505090508581600081518110613cbc57613cbc6151ea565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508481600081518110613cf457613cf46151ea565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600081518110613d2c57613d2c6151ea565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b03891690639881fcb490613d6f9087908690600401614f92565b60006040518083038186803b158015613d8757600080fd5b505afa158015613d9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dc391908101906149f3565b905080600181518110613dd857613dd86151ea565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b390613e1e908b908890600401614d41565b602060405180830381600087803b158015613e3857600080fd5b505af1158015613e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e709190614aa0565b50604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613e885790505090508781600081518110613ecb57613ecb6151ea565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110613f0357613f036151ea565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600081518110613f3b57613f3b6151ea565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038b169063f41766d890613f84908990899087908a904290600401614fab565b600060405180830381600087803b158015613f9e57600080fd5b505af1158015613fb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613fda91908101906149f3565b905080600181518110613fef57613fef6151ea565b602002602001015192505050979650505050505050565b6000612710611f688382615018565b60006140218486615140565b61402b8488615140565b6140359190615018565b836140408a8a615140565b61404a9190615140565b6140549190615030565b905060005b828110156140de5760008861406e8489615140565b6140789190615030565b905060006140888e8d8f8561370b565b90506140948189615140565b61409e838b615140565b6140a89190615018565b826140b38d8d615140565b6140bd9190615140565b6140c79190615030565b9350505080806140d6906151b9565b915050614059565b509a9950505050505050505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561412e57600080fd5b505afa158015614142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141669190614bb2565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff1610156141c25760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b604482015260640161083c565b600082116142075760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b604482015260640161083c565b5090949350505050565b600061421d8286615140565b836142288689615140565b6142329190615140565b61423c9190615030565b9695505050505050565b6000808060016001607f1b0380825b60006142618a8361477d565b90506001600160a01b03811661427757506142ca565b886001600160a01b0316816001600160a01b03161415614299578193506142b7565b876001600160a01b0316816001600160a01b031614156142b7578192505b816142c1816151b9565b92505050614255565b600f83900b60016001607f1b03148015906142f05750600f82900b60016001607f1b0314155b156143045750909350915060009050614492565b600f83900b60016001607f1b031415806143295750600f82900b60016001607f1b0314155b156143825760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b606482015260840161083c565b5060005b60006143928a8361480a565b90506001600160a01b0381166143a857506143fb565b886001600160a01b0316816001600160a01b031614156143ca578193506143e8565b876001600160a01b0316816001600160a01b031614156143e8578192505b816143f2816151b9565b92505050614386565b600f83900b60016001607f1b03148015906144215750600f82900b60016001607f1b0314155b156144355750909350915060019050614492565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b606482015260840161083c565b93509350939050565b606061078f6001600160a01b03831660145b606060006144bc836002615140565b6144c7906002615018565b67ffffffffffffffff8111156144df576144df615200565b6040519080825280601f01601f191660200182016040528015614509576020820181803683370190505b509050600360fc1b81600081518110614524576145246151ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614553576145536151ea565b60200101906001600160f81b031916908160001a9053506000614577846002615140565b614582906001615018565b90505b60018111156145fa576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106145b6576145b66151ea565b1a60f81b8282815181106145cc576145cc6151ea565b60200101906001600160f81b031916908160001a90535060049490941c936145f3816151a2565b9050614585565b508315611f7c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161083c565b61465281613855565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6146f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161083c565b600080846001600160a01b03168460405161470c9190614cb0565b600060405180830381855af49150503d8060008114614747576040519150601f19603f3d011682016040523d82523d6000602084013e61474c565b606091505b5091509150614774828260405180606001604052806027815260200161527a6027913961483a565b95945050505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b1580156147c157600080fd5b505afa9250505080156147f1575060408051601f3d908101601f191682019092526147ee918101906148af565b60015b6147fa57614801565b905061078f565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb0906024016147a9565b60608315614849575081611f7c565b611f7c838381511561485e5781518083602001fd5b8060405162461bcd60e51b815260040161083c9190614e62565b805169ffffffffffffffffffff811681146115d657600080fd5b6000602082840312156148a457600080fd5b8135611f7c81615216565b6000602082840312156148c157600080fd5b8151611f7c81615216565b600080604083850312156148df57600080fd5b82356148ea81615216565b915060208381013567ffffffffffffffff8082111561490857600080fd5b818601915086601f83011261491c57600080fd5b81358181111561492e5761492e615200565b614940601f8201601f19168501614fe7565b9150808252878482850101111561495657600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561498757600080fd5b823561499281615216565b946020939093013593505050565b600080600080608085870312156149b657600080fd5b84356149c181615216565b93506020850135925060408501356149d881615216565b915060608501356149e88161522b565b939692955090935050565b60006020808385031215614a0657600080fd5b825167ffffffffffffffff80821115614a1e57600080fd5b818501915085601f830112614a3257600080fd5b815181811115614a4457614a44615200565b8060051b9150614a55848301614fe7565b8181528481019084860184860187018a1015614a7057600080fd5b600095505b83861015614a93578051835260019590950194918601918601614a75565b5098975050505050505050565b600060208284031215614ab257600080fd5b8151611f7c8161522b565b600060208284031215614acf57600080fd5b5035919050565b600060208284031215614ae857600080fd5b5051919050565b60008060408385031215614b0257600080fd5b823591506020830135614b1481615216565b809150509250929050565b600060208284031215614b3157600080fd5b81356001600160e01b031981168114611f7c57600080fd5b60006101c08284031215614b5c57600080fd5b50919050565b60008060408385031215614b7557600080fd5b505080516020909101519092909150565b600080600060608486031215614b9b57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614bca57600080fd5b614bd386614878565b9450602086015193506040860151925060608601519150614bf660808701614878565b90509295509295909350565b600060208284031215614c1457600080fd5b815160ff81168114611f7c57600080fd5b600081518084526020808501945080840160005b83811015614c7957815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614c39565b509495945050505050565b60008151808452614c9c816020860160208601615176565b601f01601f19169290920160200192915050565b60008251614cc2818460208701615176565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d04816017850160208801615176565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614d35816028840160208801615176565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038087168352602086818501526040608081860152614d846080860188614c84565b858103606087015286518082528388019184019060005b81811015614dc2578351805188168452860151868401529285019291840191600101614d9b565b50909b9a5050505050505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614e2d57815180516001600160a01b03168552858101511515868601526040908101519085015260609093019290840190600101614df0565b5050506001600160a01b038716848301528560408501528381036060850152614e568186614c84565b98975050505050505050565b602081526000611f7c6020830184614c84565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b82815260406020820152600061189e6040830184614c25565b85815284602082015260a060408201526000614fca60a0830186614c25565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561501057615010615200565b604052919050565b6000821982111561502b5761502b6151d4565b500190565b60008261504d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561508d578160001904821115615073576150736151d4565b8085161561508057918102915b93841c9390800290615057565b509250929050565b6000611f7c60ff8416836000826150ae5750600161078f565b816150bb5750600061078f565b81600181146150d157600281146150db576150f7565b600191505061078f565b60ff8411156150ec576150ec6151d4565b50506001821b61078f565b5060208310610133831016604e8410600b841016171561511a575081810a61078f565b6151248383615052565b8060001904821115615138576151386151d4565b029392505050565b600081600019048311821515161561515a5761515a6151d4565b500290565b600082821015615171576151716151d4565b500390565b60005b83811015615191578181015183820152602001615179565b838111156139165750506000910152565b6000816151b1576151b16151d4565b506000190190565b60006000198214156151cd576151cd6151d4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461093057600080fd5b801515811461093057600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203e789d26fa07122ea6c456c3d84f1efaddf1789f5872f60edfc6cf2e8cc8e66964736f6c63430008060033",
  "implementation": "0xBCe871E9623f22D6D199A65dFdA9516b5652Be45",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14705,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 14707,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 14709,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 14711,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 15096,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 25057,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdc",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 25060,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdt",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 25063,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "op",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 25066,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "sushi",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)3249"
      },
      {
        "astId": 25069,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "bentoBox",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IBentoBox)10425"
      },
      {
        "astId": 25072,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "tridentRouter",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(ITridentRouter)10091"
      },
      {
        "astId": 25075,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "miniChefV2",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IMiniChefV2)10151"
      },
      {
        "astId": 25078,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "lpToken",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IStablePool)10194"
      },
      {
        "astId": 25080,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "pid",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 25083,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IPriceFeed)7026"
      },
      {
        "astId": 25086,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "oracleUsdt",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPriceFeed)7026"
      },
      {
        "astId": 25088,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "curve3Pool",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 25091,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "velodromeRouter",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IRouter)14037"
      },
      {
        "astId": 25093,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "rewardWallet",
        "offset": 0,
        "slot": "314",
        "type": "t_address"
      },
      {
        "astId": 25095,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdcDm",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      },
      {
        "astId": 25097,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdtDm",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBentoBox)10425": {
        "encoding": "inplace",
        "label": "contract IBentoBox",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3249": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMiniChefV2)10151": {
        "encoding": "inplace",
        "label": "contract IMiniChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)7026": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)14037": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IStablePool)10194": {
        "encoding": "inplace",
        "label": "contract IStablePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITridentRouter)10091": {
        "encoding": "inplace",
        "label": "contract ITridentRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}