{
  "address": "0x0B287606f1867Be9D0435089CB08FAa16109d31D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve3Pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IStablePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miniChefV2",
      "outputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "op",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdt",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "op",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sushi",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bentoBox",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tridentRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "miniChefV2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "oracleUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curve3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "velodromeRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardWallet",
              "type": "address"
            }
          ],
          "internalType": "struct StrategySushiswapUsdcUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "test_stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "test_unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tridentRouter",
      "outputs": [
        {
          "internalType": "contract ITridentRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "velodromeRouter",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8e16fb18bf020111979de9d7362b1ac0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3Pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IStablePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniChefV2\",\"outputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"op\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdt\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bentoBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tridentRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miniChefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracleUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"velodromeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"}],\"internalType\":\"struct StrategySushiswapUsdcUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"test_stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"test_unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tridentRouter\",\"outputs\":[{\"internalType\":\"contract ITridentRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"velodromeRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategySushiswapUsdcUsdt.sol\":\"StrategySushiswapUsdcUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n\\r\\n    function latestRound() external view returns (uint256);\\r\\n\\r\\n    function getAnswer(uint256 roundId) external view returns (int256);\\r\\n\\r\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n    // if they do not have data to report, instead of returning unset values\\r\\n    // which could be misinterpreted as actual reported values.\\r\\n    function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n    function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nlibrary ChainlinkLibrary {\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * price / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / price;\\r\\n    }\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        IPriceFeed oracle0,\\r\\n        IPriceFeed oracle1\\r\\n    ) internal view returns (uint256 amount1) {\\r\\n        uint256 price0 = getPrice(oracle0);\\r\\n        uint256 price1 = getPrice(oracle1);\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function getPrice(IPriceFeed oracle) internal view returns (uint256){\\r\\n        (uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = oracle.latestRoundData();\\r\\n        require(answeredInRound >= roundID, \\\"Old data\\\");\\r\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\r\\n        return uint256(price);\\r\\n\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * getPrice(oracle) / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / getPrice(oracle);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfacfe79aec4b4149ea003967cc78b66f8f667ea592bae768273a80a5edec9422\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface ICurveExchange {\\r\\n\\r\\n    /**\\r\\n        @notice Perform an exchange using the pool that offers the best rate\\r\\n        @dev Prior to calling this function, the caller must approve\\r\\n        this contract to transfer `_amount` coins from `_from`\\r\\n        Does NOT check rates in factory-deployed pools\\r\\n        @param _from Address of coin being sent\\r\\n        @param _to Address of coin being received\\r\\n        @param _amount Quantity of `_from` being sent\\r\\n        @param _expected Minimum quantity of `_from` received\\r\\n        in order for the transaction to succeed\\r\\n        @param _receiver Address to transfer the received tokens to\\r\\n        @return uint256 Amount received\\r\\n    */\\r\\n    function exchange_with_best_rate(address _from, address _to, uint256 _amount, uint256 _expected, address _receiver) external returns (uint256);\\r\\n\\r\\n    function exchange_with_best_rate(address _from, address _to, uint256 _amount, uint256 _expected) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Perform an exchange using a specific pool\\r\\n        @dev Prior to calling this function, the caller must approve\\r\\n             this contract to transfer `_amount` coins from `_from`\\r\\n             Works for both regular and factory-deployed pools\\r\\n        @param _pool Address of the pool to use for the swap\\r\\n        @param _from Address of coin being sent\\r\\n        @param _to Address of coin being received\\r\\n        @param _amount Quantity of `_from` being sent\\r\\n        @param _expected Minimum quantity of `_from` received\\r\\n               in order for the transaction to succeed\\r\\n        @param _receiver Address to transfer the received tokens to\\r\\n        @return uint256 Amount received\\r\\n    */\\r\\n    function exchange(address _pool, address _from, address _to, uint256 _amount, uint256 _expected, address _receiver) external returns (uint256);\\r\\n\\r\\n    function exchange(address _pool, address _from, address _to, uint256 _amount, uint256 _expected) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Perform up to four swaps in a single transaction\\r\\n        @dev Routing and swap params must be determined off-chain. This\\r\\n             functionality is designed for gas efficiency over ease-of-use.\\r\\n        @param _route Array of [initial token, pool, token, pool, token, ...]\\r\\n                      The array is iterated until a pool address of 0x00, then the last\\r\\n                      given token is transferred to `_receiver`\\r\\n        @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\\r\\n                            values for the n'th pool in `_route`. The swap type should be\\r\\n                            1 for a stableswap `exchange`,\\r\\n                            2 for stableswap `exchange_underlying`,\\r\\n                            3 for a cryptoswap `exchange`,\\r\\n                            4 for a cryptoswap `exchange_underlying`,\\r\\n                            5 for factory metapools with lending base pool `exchange_underlying`,\\r\\n                            6 for factory crypto-meta pools underlying exchange (`exchange` method in zap),\\r\\n                            7-11 for wrapped coin (underlying for lending or fake pool) -> LP token \\\"exchange\\\" (actually `add_liquidity`),\\r\\n                            12-14 for LP token -> wrapped coin (underlying for lending pool) \\\"exchange\\\" (actually `remove_liquidity_one_coin`)\\r\\n                            15 for WETH -> ETH \\\"exchange\\\" (actually deposit/withdraw)\\r\\n        @param _amount The amount of `_route[0]` token being sent.\\r\\n        @param _expected The minimum amount received after the final swap.\\r\\n        @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\\r\\n                      Polygon meta-factories underlying swaps.\\r\\n        @param _receiver Address to transfer the final output token to.\\r\\n        @return Received amount of the final output token\\r\\n    */\\r\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected, address[4] memory _pools, address _receiver) external returns (uint256);\\r\\n\\r\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected, address[4] memory _pools) external returns (uint256);\\r\\n\\r\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Find the pool offering the best rate for a given swap.\\r\\n        @dev Checks rates for regular and factory pools\\r\\n        @param _from Address of coin being sent\\r\\n        @param _to Address of coin being received\\r\\n        @param _amount Quantity of `_from` being sent\\r\\n        @param _exclude_pools A list of up to 8 addresses which shouldn't be returned\\r\\n        @return Pool address, amount received\\r\\n    */\\r\\n    function get_best_rate(address _from, address _to, uint256 _amount, address[8] memory _exclude_pools) external returns (address, uint256);\\r\\n\\r\\n    function get_best_rate(address _from, address _to, uint256 _amount) external returns (address, uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number of coins received in an exchange\\r\\n        @dev Works for both regular and factory-deployed pools\\r\\n        @param _pool Pool address\\r\\n        @param _from Address of coin to be sent\\r\\n        @param _to Address of coin to be received\\r\\n        @param _amount Quantity of `_from` to be sent\\r\\n        @return Quantity of `_to` to be received\\r\\n    */\\r\\n    function get_exchange_amount(address _pool, address _from, address _to, uint256 _amount) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number of coins required to receive the given amount in an exchange\\r\\n        @param _pool Pool address\\r\\n        @param _from Address of coin to be sent\\r\\n        @param _to Address of coin to be received\\r\\n        @param _amount Quantity of `_to` to be received\\r\\n        @return Quantity of `_from` to be sent\\r\\n    */\\r\\n    function get_input_amount(address _pool, address _from, address _to, uint256 _amount) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number of coins required to receive the given amount in an exchange\\r\\n        @param _pool Pool address\\r\\n        @param _from Address of coin to be sent\\r\\n        @param _to Address of coin to be received\\r\\n        @param _amounts Quantity of `_to` to be received\\r\\n        @return Quantity of `_from` to be sent\\r\\n    */\\r\\n    function get_exchange_amounts(address _pool, address _from, address _to, uint256[100] memory _amounts) external returns (uint256[100] memory);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number the final output tokens received in an exchange\\r\\n        @dev Routing and swap params must be determined off-chain. This\\r\\n             functionality is designed for gas efficiency over ease-of-use.\\r\\n        @param _route Array of [initial token, pool, token, pool, token, ...]\\r\\n                      The array is iterated until a pool address of 0x00, then the last\\r\\n                      given token is transferred to `_receiver`\\r\\n        @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\\r\\n                            values for the n'th pool in `_route`. The swap type should be\\r\\n                            1 for a stableswap `exchange`,\\r\\n                            2 for stableswap `exchange_underlying`,\\r\\n                            3 for a cryptoswap `exchange`,\\r\\n                            4 for a cryptoswap `exchange_underlying`,\\r\\n                            5 for factory metapools with lending base pool `exchange_underlying`,\\r\\n                            6 for factory crypto-meta pools underlying exchange (`exchange` method in zap),\\r\\n                            7-11 for wrapped coin (underlying for lending pool) -> LP token \\\"exchange\\\" (actually `add_liquidity`),\\r\\n                            12-14 for LP token -> wrapped coin (underlying for lending or fake pool) \\\"exchange\\\" (actually `remove_liquidity_one_coin`)\\r\\n                            15 for WETH -> ETH \\\"exchange\\\" (actually deposit/withdraw)\\r\\n        @param _amount The amount of `_route[0]` token to be sent.\\r\\n        @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\\r\\n                      Polygon meta-factories underlying swaps.\\r\\n        @return Expected amount of the final output token\\r\\n    */\\r\\n    function get_exchange_multiple_amount(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, address[4] memory _pools) external returns (uint256);\\r\\n\\r\\n    function get_exchange_multiple_amount(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount) external returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IStableSwapPool {\\r\\n\\r\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory);\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\\r\\n\\r\\n    function underlying_coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function lp_token() external view returns (address);\\r\\n\\r\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\r\\n\\r\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit) external view returns (uint256);\\r\\n\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\r\\n    function get_dy(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    //Perform an exchange between two coins.\\r\\n    // i: Index value for the coin to send\\r\\n    // j: Index value of the coin to receive\\r\\n    // _dx: Amount of i being exchanged\\r\\n    // _min_dy: Minimum amount of j to receive\\r\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\r\\n    function exchange(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n\\r\\n    function exchange_underlying(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount, bool _use_underlying) external returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IMetaSwapPool {\\r\\n\\r\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\r\\n    function get_dy(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    //Perform an exchange between two coins.\\r\\n    // i: Index value for the coin to send\\r\\n    // j: Index value of the coin to receive\\r\\n    // _dx: Amount of i being exchanged\\r\\n    // _min_dy: Minimum amount of j to receive\\r\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\r\\n    function exchange(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n\\r\\n    function exchange_underlying(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IRewardsOnlyGauge is IERC20 {\\r\\n\\r\\n    function deposit(uint256 _value, address _addr, bool _claim_rewards) external;\\r\\n\\r\\n    function deposit(uint256 _value, address _addr) external;\\r\\n\\r\\n    function deposit(uint256 _value, bool _claim_rewards) external;\\r\\n\\r\\n    function deposit(uint256 _value) external;\\r\\n\\r\\n    function withdraw(uint256 _value, bool _claim_rewards) external;\\r\\n\\r\\n    function withdraw(uint256 _value) external;\\r\\n\\r\\n    function lp_token() external returns (address);\\r\\n\\r\\n    function claim_rewards(address _addr, address _receiver) external;\\r\\n\\r\\n    function claim_rewards(address _addr) external;\\r\\n\\r\\n    function claim_rewards() external;\\r\\n\\r\\n    function claimed_reward(address _addr, address _token) external returns (uint256);\\r\\n\\r\\n    function claimable_reward(address _addr, address _token) external returns (uint256);\\r\\n\\r\\n    function claimable_reward_write(address _addr, address _token) external returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary CurveMetaLibrary {\\r\\n\\r\\n    function swapByIndex(\\r\\n        int128  indexIn,\\r\\n        int128  indexOut,\\r\\n        bool isUnderlying,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountMinOut,\\r\\n        address meta,\\r\\n        address pool\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 backAmount;\\r\\n        if (isUnderlying) {\\r\\n            backAmount = IMetaSwapPool(meta).exchange_underlying(\\r\\n                pool,\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        } else {\\r\\n            backAmount = IMetaSwapPool(meta).exchange(\\r\\n                pool,\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return backAmount;\\r\\n    }\\r\\n\\r\\n    function getAmountOutByIndex(\\r\\n        int128 indexIn,\\r\\n        int128 indexOut,\\r\\n        bool isUnderlying,\\r\\n        uint256 amountIn,\\r\\n        address meta,\\r\\n        address pool\\r\\n    ) internal view returns (uint256) {\\r\\n        if (isUnderlying) {\\r\\n            return IMetaSwapPool(meta).get_dy_underlying(pool,indexIn, indexOut, amountIn);\\r\\n        } else {\\r\\n            return IMetaSwapPool(meta).get_dy(pool,indexIn, indexOut, amountIn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary CurveLibrary {\\r\\n\\r\\n    function singleSwap(\\r\\n        address curveExchange,\\r\\n        address token0,\\r\\n        address pool0,\\r\\n        address token1,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1Out\\r\\n    ) internal returns (uint256) {\\r\\n        IERC20(token0).approve(curveExchange, amount0);\\r\\n        return ICurveExchange(curveExchange).exchange(pool0, token0, token1, amount0, amount1Out);\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        address curveExchange,\\r\\n        address token0,\\r\\n        address pool0,\\r\\n        address token1,\\r\\n        address pool1,\\r\\n        address token2,\\r\\n        uint256 amount0,\\r\\n        uint256 amount2Out\\r\\n    ) internal returns (uint256) {\\r\\n        IERC20(token0).approve(curveExchange, amount0);\\r\\n        address[9] memory route;\\r\\n        route[0] = token0;\\r\\n        route[1] = pool0;\\r\\n        route[2] = token1;\\r\\n        route[3] = pool1;\\r\\n        route[4] = token2;\\r\\n        uint256[3][4] memory swap_params;\\r\\n        return ICurveExchange(curveExchange).exchange_multiple(route, swap_params, amount0, amount2Out);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountMinOut\\r\\n    ) internal returns (uint256) {\\r\\n        IERC20(tokenIn).approve(pool, amountIn);\\r\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(pool, tokenIn, tokenOut);\\r\\n\\r\\n        uint256 backAmount;\\r\\n        if (isUnderlying) {\\r\\n            backAmount = IStableSwapPool(pool).exchange_underlying(\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        } else {\\r\\n            backAmount = IStableSwapPool(pool).exchange(\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return backAmount;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn\\r\\n    ) internal view returns (uint256) {\\r\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(pool, tokenIn, tokenOut);\\r\\n        if (isUnderlying) {\\r\\n            return IStableSwapPool(pool).get_dy_underlying(indexIn, indexOut, amountIn);\\r\\n        } else {\\r\\n            return IStableSwapPool(pool).get_dy(indexIn, indexOut, amountIn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getIndexes(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        address tokenOut\\r\\n    ) internal view returns (int128, int128, bool) {\\r\\n        int128 indexIn = type(int128).max;\\r\\n        int128 indexOut = type(int128).max;\\r\\n\\r\\n        // search in coins list\\r\\n        uint256 i;\\r\\n        while (true) {\\r\\n            address token = getCoin(pool, i);\\r\\n            if (token == address(0)) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            if (token == tokenIn) {\\r\\n                indexIn = int128(uint128(i));\\r\\n            } else if (token == tokenOut) {\\r\\n                indexOut = int128(uint128(i));\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n\\r\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\r\\n            return (indexIn, indexOut, false);\\r\\n        }\\r\\n\\r\\n        if (indexIn != type(int128).max || indexOut != type(int128).max) {\\r\\n            // one of tokens found in coins but not found another - it is incorrect\\r\\n            // setup case for token pairs\\r\\n            revert(\\\"CurveSP: incorrect token pair setup\\\");\\r\\n        }\\r\\n\\r\\n        // search in underlying coins list\\r\\n        i = 0;\\r\\n        while (true) {\\r\\n            address token = getUnderlyingCoin(pool, i);\\r\\n            if (token == address(0)) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            if (token == tokenIn) {\\r\\n                indexIn = int128(uint128(i));\\r\\n            } else if (token == tokenOut) {\\r\\n                indexOut = int128(uint128(i));\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n\\r\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\r\\n            return (indexIn, indexOut, true);\\r\\n        }\\r\\n\\r\\n        revert(\\\"CurveSP: Can't find index for tokens in pool\\\");\\r\\n    }\\r\\n\\r\\n    function getCoin(address pool, uint256 index) internal view returns (address) {\\r\\n        try IStableSwapPool(pool).coins(index) returns (address tokenAddress) {\\r\\n            return tokenAddress;\\r\\n        } catch {}\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getUnderlyingCoin(address pool, uint256 index) internal view returns (address) {\\r\\n        try IStableSwapPool(pool).underlying_coins(index) returns (address tokenAddress) {\\r\\n            return tokenAddress;\\r\\n        } catch {}\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountToSwap(\\r\\n        address pool,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amount0) {\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = getAmountOut(pool, token0, token1, amount0);\\r\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        address pool,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Total,\\r\\n        uint256 totalAmountLpTokens,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\r\\n            uint256 amount0 = getAmountOut(pool, token1, token0, amount1);\\r\\n            amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x89b1fc2bf1e020fdd02fbf8c7e3ef0da8990369cc6f826b66e616037bc1b652f\",\"license\":\"GPL-3.0-or-later\"},\"@overnight-contracts/connectors/contracts/stuff/Sushiswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITridentRouter {\\r\\n\\r\\n    struct Path {\\r\\n        address pool;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct ExactInputSingleParams {\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        address pool;\\r\\n        address tokenIn;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        address tokenIn;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        Path[] path;\\r\\n    }\\r\\n\\r\\n    struct TokenInput {\\r\\n        address token;\\r\\n        bool native;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct InitialPath {\\r\\n        address tokenIn;\\r\\n        address pool;\\r\\n        bool native;\\r\\n        uint256 amount;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct PercentagePath {\\r\\n        address tokenIn;\\r\\n        address pool;\\r\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct Output {\\r\\n        address token;\\r\\n        address to;\\r\\n        bool unwrapBento;\\r\\n        uint256 minAmount;\\r\\n    }\\r\\n\\r\\n    struct ComplexPathParams {\\r\\n        InitialPath[] initialPath;\\r\\n        PercentagePath[] percentagePath;\\r\\n        Output[] output;\\r\\n    }\\r\\n\\r\\n    /// @dev This struct frames output tokens for burns.\\r\\n    struct TokenAmount {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\r\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\r\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\r\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Swaps token A to token B indirectly by using multiple hops.\\r\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\r\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\r\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Swaps token A to token B directly. It's the same as `exactInputSingle` except\\r\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\r\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\r\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\r\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\r\\n    function exactInputSingleWithNativeToken(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except\\r\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\r\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\r\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\r\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\r\\n    function exactInputWithNativeToken(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\r\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\r\\n    /// @param params This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details.\\r\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\r\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\r\\n    function complexPath(ComplexPathParams calldata params) external payable;\\r\\n\\r\\n    /// @notice Add liquidity to a pool.\\r\\n    /// @param tokenInput Token address and amount to add as liquidity.\\r\\n    /// @param pool Pool address to add liquidity to.\\r\\n    /// @param minLiquidity Minimum output liquidity - caps slippage.\\r\\n    /// @param data Data required by the pool to add liquidity.\\r\\n    function addLiquidity(\\r\\n        TokenInput[] calldata tokenInput,\\r\\n        address pool,\\r\\n        uint256 minLiquidity,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256 liquidity);\\r\\n\\r\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\r\\n    /// @param pool Pool address.\\r\\n    /// @param liquidity Amount of liquidity tokens to burn.\\r\\n    /// @param data Data required by the pool to burn liquidity.\\r\\n    /// @param minWithdrawals Minimum amount of `bento` tokens to be returned.\\r\\n    function burnLiquidity(\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        bytes calldata data,\\r\\n        TokenAmount[] calldata minWithdrawals\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\r\\n    /// @dev The tokens are swapped automatically and the output is in a single token.\\r\\n    /// @param pool Pool address.\\r\\n    /// @param liquidity Amount of liquidity tokens to burn.\\r\\n    /// @param data Data required by the pool to burn liquidity.\\r\\n    /// @param minWithdrawal Minimum amount of tokens to be returned.\\r\\n    function burnLiquiditySingle(\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        bytes calldata data,\\r\\n        uint256 minWithdrawal\\r\\n    ) external payable;\\r\\n\\r\\n    function approveMasterContract(\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\n/// @notice The (older) MasterChef contract gives out a constant number of SUSHI tokens per block.\\r\\n/// It is the only address with minting rights for SUSHI.\\r\\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\\r\\n/// that is deposited into the MasterChef V1 (MCV1) contract.\\r\\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.\\r\\ninterface IMiniChefV2 {\\r\\n\\r\\n    /// @notice Info of each MCV2 user.\\r\\n    /// `amount` LP token amount the user has provided.\\r\\n    /// `rewardDebt` The amount of SUSHI entitled to the user.\\r\\n    /// @notice Info of each user that stakes LP tokens.\\r\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    /// @notice Deposit LP tokens to MCV2 for SUSHI allocation.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param amount LP token amount to deposit.\\r\\n    /// @param to The receiver of `amount` deposit benefit.\\r\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\r\\n\\r\\n    /// @notice Withdraw LP tokens from MCV2.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param amount LP token amount to withdraw.\\r\\n    /// @param to Receiver of the LP tokens.\\r\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\r\\n\\r\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param to Receiver of SUSHI rewards.\\r\\n    function harvest(uint256 pid, address to) external;\\r\\n\\r\\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param amount LP token amount to withdraw.\\r\\n    /// @param to Receiver of the LP tokens and SUSHI rewards.\\r\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\r\\n\\r\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param to Receiver of the LP tokens.\\r\\n    function emergencyWithdraw(uint256 pid, address to) external;\\r\\n}\\r\\n\\r\\ninterface IStablePool is IERC20 {\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\r\\n\\r\\n    function getAssets() external view returns (address[] memory assets);\\r\\n\\r\\n    function skim() external;\\r\\n\\r\\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1);\\r\\n\\r\\n    function getNativeReserves() external view returns (uint256 _nativeReserve0, uint256 _nativeReserve1);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IFlashBorrower {\\r\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\r\\n    /// @param sender The address of the invoker of this flashloan.\\r\\n    /// @param token The address of the token that is loaned.\\r\\n    /// @param amount of the `token` that is loaned.\\r\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\r\\n    /// @param data Additional data that was passed to the flashloan function.\\r\\n    function onFlashLoan(\\r\\n        address sender,\\r\\n        IERC20 token,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IBatchFlashBorrower {\\r\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\r\\n    /// @param sender The address of the invoker of this flashloan.\\r\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\r\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\r\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\r\\n    /// @param data Additional data that was passed to the flashloan function.\\r\\n    function onBatchFlashLoan(\\r\\n        address sender,\\r\\n        IERC20[] calldata tokens,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata fees,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n/// @title BentoBox\\r\\n/// @author BoringCrypto, Keno\\r\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\r\\n/// Yield from this will go to the token depositors.\\r\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\r\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\r\\ninterface IBentoBox {\\r\\n\\r\\n    struct Rebase {\\r\\n        uint128 elastic;\\r\\n        uint128 base;\\r\\n    }\\r\\n\\r\\n    struct StrategyData {\\r\\n        uint64 strategyStartDate;\\r\\n        uint64 targetPercentage;\\r\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\r\\n    }\\r\\n\\r\\n    function totals(IERC20 token) external view returns (Rebase memory rebase);\\r\\n\\r\\n    function strategyData(IERC20 token) external view returns (StrategyData memory rebase);\\r\\n\\r\\n    // Balance per token per address/contract in shares\\r\\n    function balanceOf(\\r\\n        IERC20 token,\\r\\n        address from\\r\\n    ) external view returns (uint256 amount);\\r\\n\\r\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\r\\n    /// @param token The ERC-20 token.\\r\\n    /// @param amount The `token` amount.\\r\\n    /// @param roundUp If the result `share` should be rounded up.\\r\\n    /// @return share The token amount represented in shares.\\r\\n    function toShare(\\r\\n        IERC20 token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n\\r\\n    /// @dev Helper function represent shares back into the `token` amount.\\r\\n    /// @param token The ERC-20 token.\\r\\n    /// @param share The amount of shares.\\r\\n    /// @param roundUp If the result should be rounded up.\\r\\n    /// @return amount The share amount back into native representation.\\r\\n    function toAmount(\\r\\n        IERC20 token,\\r\\n        uint256 share,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 amount);\\r\\n\\r\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\r\\n    /// @param token_ The ERC-20 token to deposit.\\r\\n    /// @param from which account to pull the tokens.\\r\\n    /// @param to which account to push the tokens.\\r\\n    /// @param amount Token amount in native representation to deposit.\\r\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\r\\n    /// @return amountOut The amount deposited.\\r\\n    /// @return shareOut The deposited amount repesented in shares.\\r\\n    function deposit(\\r\\n        IERC20 token_,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    /// @notice Withdraws an amount of `token` from a user account.\\r\\n    /// @param token_ The ERC-20 token to withdraw.\\r\\n    /// @param from which user to pull the tokens.\\r\\n    /// @param to which user to push the tokens.\\r\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\r\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\r\\n    function withdraw(\\r\\n        IERC20 token_,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    /// @notice Transfer shares from a user account to another one.\\r\\n    /// @param token The ERC-20 token to transfer.\\r\\n    /// @param from which user to pull the tokens.\\r\\n    /// @param to which user to push the tokens.\\r\\n    /// @param share The amount of `token` in shares.\\r\\n    // Clones of master contracts can transfer from any account that has approved them\\r\\n    // F3 - Can it be combined with another similar function?\\r\\n    // F3: This isn't combined with transferMultiple for gas optimization\\r\\n    function transfer(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Transfer shares from a user account to multiple other ones.\\r\\n    /// @param token The ERC-20 token to transfer.\\r\\n    /// @param from which user to pull the tokens.\\r\\n    /// @param tos The receivers of the tokens.\\r\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\r\\n    // F3 - Can it be combined with another similar function?\\r\\n    // F3: This isn't combined with transfer for gas optimization\\r\\n    function transferMultiple(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address[] calldata tos,\\r\\n        uint256[] calldata shares\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Flashloan ability.\\r\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\r\\n    /// @param receiver Address of the token receiver.\\r\\n    /// @param token The address of the token to receive.\\r\\n    /// @param amount of the tokens to receive.\\r\\n    /// @param data The calldata to pass to the `borrower` contract.\\r\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\r\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\r\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\r\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\r\\n    function flashLoan(\\r\\n        IFlashBorrower borrower,\\r\\n        address receiver,\\r\\n        IERC20 token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\r\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\r\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\r\\n    /// @param tokens The addresses of the tokens.\\r\\n    /// @param amounts of the tokens for each receiver.\\r\\n    /// @param data The calldata to pass to the `borrower` contract.\\r\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\r\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\r\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\r\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\r\\n    function batchFlashLoan(\\r\\n        IBatchFlashBorrower borrower,\\r\\n        address[] calldata receivers,\\r\\n        IERC20[] calldata tokens,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\r\\n    /// Optionally does housekeeping if `balance` is true.\\r\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\r\\n    /// @param token The address of the token for which a strategy is deployed.\\r\\n    /// @param balance True if housekeeping should be done.\\r\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\r\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\r\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\r\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\r\\n    function harvest(\\r\\n        IERC20 token,\\r\\n        bool balance,\\r\\n        uint256 maxChangeAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\r\\n    /// @param user The address of the user that approves or revokes access.\\r\\n    /// @param masterContract The address who gains or loses access.\\r\\n    /// @param approved If True approves access. If False revokes access.\\r\\n    /// @param v Part of the signature. (See EIP-191)\\r\\n    /// @param r Part of the signature. (See EIP-191)\\r\\n    /// @param s Part of the signature. (See EIP-191)\\r\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\r\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\r\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\r\\n    function setMasterContractApproval(\\r\\n        address user,\\r\\n        address masterContract,\\r\\n        bool approved,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x21e55d31dbe316453bb7002724b958ea22ce22f7fa46f31338dea791f512c68f\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Velodrome.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface WrappedExternalBribe {\\r\\n\\r\\n    function notifyRewardAmount(address token, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface VelodromePool {\\r\\n    function sync() external;\\r\\n    function skim(address to) external;\\r\\n}\\r\\n\\r\\ninterface IRouter {\\r\\n\\r\\n    struct route {\\r\\n        address from;\\r\\n        address to;\\r\\n        bool stable;\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(uint amountIn, route[] memory routes) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function quoteAddLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired\\r\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function quoteRemoveLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity\\r\\n    ) external view returns (uint amountA, uint amountB);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSimple(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        bool stable,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, route[] calldata routes, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, route[] calldata routes, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IPair {\\r\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\r\\n    function getAmountOut(uint, address) external view returns (uint);\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function token0() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IGauge {\\r\\n    function deposit(uint amount, uint tokenId) external;\\r\\n    function withdraw(uint amount) external;\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function getReward(address account, address[] memory tokens) external;\\r\\n}\\r\\n\\r\\nlibrary VelodromeLibrary {\\r\\n\\r\\n    function getAmountsOut(\\r\\n        IRouter velodromeRouter,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IRouter.route[] memory routes = new IRouter.route[](1);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = outputToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n\\r\\n        uint[] memory amounts = velodromeRouter.getAmountsOut(amountInput, routes);\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(\\r\\n        IRouter velodromeRouter,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        bool isStablePair1,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IRouter.route[] memory routes = new IRouter.route[](2);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = middleToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n        routes[1].from = middleToken;\\r\\n        routes[1].to = outputToken;\\r\\n        routes[1].stable = isStablePair1;\\r\\n\\r\\n        uint[] memory amounts = velodromeRouter.getAmountsOut(amountInput, routes);\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function singleSwap(\\r\\n        IRouter velodromeRouter,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(velodromeRouter), amountInput);\\r\\n\\r\\n        IRouter.route[] memory routes = new IRouter.route[](1);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = outputToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n\\r\\n        uint[] memory amounts = velodromeRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            routes,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        IRouter velodromeRouter,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        bool isStablePair1,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(velodromeRouter), amountInput);\\r\\n\\r\\n        IRouter.route[] memory routes = new IRouter.route[](2);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = middleToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n        routes[1].from = middleToken;\\r\\n        routes[1].to = outputToken;\\r\\n        routes[1].stable = isStablePair1;\\r\\n\\r\\n        uint[] memory amounts = velodromeRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            routes,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function getMultiAmount0(\\r\\n        IRouter velodromeRouter,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address token2,\\r\\n        uint256 amount0Total,\\r\\n        bool    isStable0,\\r\\n        bool    isStable1,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amount0) {\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = getAmountsOut(velodromeRouter, token0, token1, token2,  isStable0, isStable1, amount0);\\r\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    struct CalculateMultiParams {\\r\\n        IRouter velodromeRouter;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address token2;\\r\\n        uint256 amount0Total;\\r\\n        uint256 totalAmountLpTokens;\\r\\n        bool isStable0;\\r\\n        bool isStable1;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 denominator0;\\r\\n        uint256 denominator1;\\r\\n        uint256 precision;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        CalculateMultiParams memory params\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = (params.totalAmountLpTokens * params.amount0Total * params.denominator1) / (params.reserve0 * params.denominator1 + params.reserve1 * params.denominator0);\\r\\n        for (uint i = 0; i < params.precision; i++) {\\r\\n            uint256 amount1 = params.reserve1 * amountLpTokens / params.totalAmountLpTokens;\\r\\n\\r\\n            uint256 amount0 = getAmountsOut(params.velodromeRouter, params.token2, params.token1, params.token0,  params.isStable1, params.isStable0, amount1);\\r\\n            amountLpTokens = (params.totalAmountLpTokens * params.amount0Total * amount1) / (params.reserve0 * amount1 + params.reserve1 * amount0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc7637033008e461e6a35e269583a2017653f2e38dc7d91a11977fbeec139d8a0\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IControlRole.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n    uint256 public swapSlippageBP;\\r\\n    uint256 public navSlippageBP;\\r\\n    uint256 public stakeSlippageBP;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        swapSlippageBP = 20;\\r\\n        navSlippageBP = 20;\\r\\n        stakeSlippageBP = 4;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortfolioAgent() {\\r\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\r\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setSlippages(\\r\\n        uint256 _swapSlippageBP,\\r\\n        uint256 _navSlippageBP,\\r\\n        uint256 _stakeSlippageBP\\r\\n    ) public onlyPortfolioAgent {\\r\\n        swapSlippageBP = _swapSlippageBP;\\r\\n        navSlippageBP = _navSlippageBP;\\r\\n        stakeSlippageBP = _stakeSlippageBP;\\r\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        uint256 withdrawAmount;\\r\\n        uint256 rewardAmount;\\r\\n        if (_targetIsZero) {\\r\\n            rewardAmount = _claimRewards(_beneficiary);\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 rewardAmount = _claimRewards(_to);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xdad1bb1765b23745141b982d10052842e49f7c0e2b81077bf4a15fa09896a425\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IControlRole {\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf45e3261bc0e319aeffb0f00b6843bb6398a044dd710794a5f8088a426ca84c\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf24a033c2df4207da5f2cdcf30ae65632f0063483573ddaeb92a766f8d6556d0\",\"license\":\"GPL-3.0\"},\"contracts/StrategySushiswapUsdcUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Sushiswap.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Curve.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Velodrome.sol\\\";\\r\\n\\r\\n\\r\\ncontract StrategySushiswapUsdcUsdt is Strategy {\\r\\n\\r\\n    // --- params\\r\\n\\r\\n    IERC20 public usdc;\\r\\n    IERC20 public usdt;\\r\\n    IERC20 public op;\\r\\n    IERC20 public sushi;\\r\\n\\r\\n    IBentoBox public bentoBox;\\r\\n    ITridentRouter public tridentRouter;\\r\\n    IMiniChefV2 public miniChefV2;\\r\\n    IStablePool public lpToken;\\r\\n    uint256 public pid;\\r\\n\\r\\n    IPriceFeed public oracleUsdc;\\r\\n    IPriceFeed public oracleUsdt;\\r\\n\\r\\n    address public curve3Pool;\\r\\n    IRouter public velodromeRouter;\\r\\n    address public rewardWallet;\\r\\n\\r\\n    uint256 public usdcDm;\\r\\n    uint256 public usdtDm;\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address usdc;\\r\\n        address usdt;\\r\\n        address op;\\r\\n        address sushi;\\r\\n        address bentoBox;\\r\\n        address tridentRouter;\\r\\n        address miniChefV2;\\r\\n        address lpToken;\\r\\n        uint256 pid;\\r\\n        address oracleUsdc;\\r\\n        address oracleUsdt;\\r\\n        address curve3Pool;\\r\\n        address velodromeRouter;\\r\\n        address rewardWallet;\\r\\n    }\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n    // --- Setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        usdc = IERC20(params.usdc);\\r\\n        usdt = IERC20(params.usdt);\\r\\n        op = IERC20(params.op);\\r\\n        sushi = IERC20(params.sushi);\\r\\n\\r\\n        bentoBox = IBentoBox(params.bentoBox);\\r\\n        tridentRouter = ITridentRouter(params.tridentRouter);\\r\\n        miniChefV2 = IMiniChefV2(params.miniChefV2);\\r\\n        lpToken = IStablePool(params.lpToken);\\r\\n        pid = params.pid;\\r\\n\\r\\n        oracleUsdc = IPriceFeed(params.oracleUsdc);\\r\\n        oracleUsdt = IPriceFeed(params.oracleUsdt);\\r\\n\\r\\n        curve3Pool = params.curve3Pool;\\r\\n        velodromeRouter = IRouter(params.velodromeRouter);\\r\\n        rewardWallet = params.rewardWallet;\\r\\n\\r\\n        usdcDm = 10 ** IERC20Metadata(params.usdc).decimals();\\r\\n        usdtDm = 10 ** IERC20Metadata(params.usdt).decimals();\\r\\n\\r\\n        bentoBox.setMasterContractApproval(address(this), address(tridentRouter), true, 0, '', '');\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        test_stake(_asset, _amount);\\r\\n    }\\r\\n\\r\\n    function test_stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n\\r\\n        // swap needed amount usdc to usdt\\r\\n        uint256 totalLpBalance = lpToken.totalSupply();\\r\\n        (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getReserves();\\r\\n        require(reserveUsdc > 10 ** 3 && reserveUsdt > 10 ** 3, 'Liquidity lpToken reserves too low');\\r\\n\\r\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\r\\n\\r\\n        uint256 amountUsdc = CurveLibrary.getAmountToSwap(\\r\\n            curve3Pool,\\r\\n            address(usdc),\\r\\n            address(usdt),\\r\\n            usdcBalance,\\r\\n            reserveUsdc,\\r\\n            reserveUsdt,\\r\\n            usdcDm,\\r\\n            usdtDm,\\r\\n            1\\r\\n        );\\r\\n\\r\\n        CurveLibrary.swap(\\r\\n            curve3Pool,\\r\\n            address(usdc),\\r\\n            address(usdt),\\r\\n            amountUsdc,\\r\\n            OvnMath.subBasisPoints(_oracleUsdcToUsdt(amountUsdc), swapSlippageBP)\\r\\n        );\\r\\n\\r\\n        // create params and calculate min liquidity\\r\\n        usdcBalance = usdc.balanceOf(address(this));\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n\\r\\n        ITridentRouter.TokenInput memory usdcInput;\\r\\n        usdcInput.token = address(usdc);\\r\\n        usdcInput.native = true;\\r\\n        usdcInput.amount = usdcBalance;\\r\\n\\r\\n        ITridentRouter.TokenInput memory usdtInput;\\r\\n        usdtInput.token = address(usdt);\\r\\n        usdcInput.native = true;\\r\\n        usdtInput.amount = usdtBalance;\\r\\n\\r\\n        ITridentRouter.TokenInput[] memory tokenInput = new ITridentRouter.TokenInput[](2);\\r\\n        tokenInput[0] = usdcInput;\\r\\n        tokenInput[1] = usdtInput;\\r\\n\\r\\n        uint256 minLiquidity = OvnMath.subBasisPoints(usdcBalance * totalLpBalance / reserveUsdc, stakeSlippageBP);\\r\\n\\r\\n        // add liquidity\\r\\n        usdc.approve(address(bentoBox), usdcBalance);\\r\\n        usdt.approve(address(bentoBox), usdtBalance);\\r\\n        tridentRouter.addLiquidity(\\r\\n            tokenInput,\\r\\n            address(lpToken),\\r\\n            minLiquidity,\\r\\n            abi.encode(address(this))\\r\\n        );\\r\\n\\r\\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\\r\\n        lpToken.approve(address(miniChefV2), lpTokenBalance);\\r\\n        miniChefV2.deposit(pid, lpTokenBalance, address(this));\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n        return test_unstake(_asset, _amount, _beneficiary);\\r\\n    }\\r\\n\\r\\n    function test_unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) public returns (uint256) {\\r\\n\\r\\n        // get lpToken amount to unstake\\r\\n        uint256 totalLpBalance = lpToken.totalSupply();\\r\\n        (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getReserves();\\r\\n        uint256 amountLp = CurveLibrary.getAmountLpTokens(\\r\\n            curve3Pool,\\r\\n            address(usdc),\\r\\n            address(usdt),\\r\\n            OvnMath.addBasisPoints(_amount + 10, 1),\\r\\n            totalLpBalance,\\r\\n            reserveUsdc,\\r\\n            reserveUsdt,\\r\\n            usdcDm,\\r\\n            usdtDm,\\r\\n            1\\r\\n        );\\r\\n\\r\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\r\\n        if (amountLp > lpTokenBalance) {\\r\\n            amountLp = lpTokenBalance;\\r\\n        }\\r\\n\\r\\n        // unstake\\r\\n        miniChefV2.withdraw(pid, amountLp, address(this));\\r\\n\\r\\n        // calculate min amounts\\r\\n        uint256 amountUsdc = OvnMath.subBasisPoints(reserveUsdc * amountLp / totalLpBalance, stakeSlippageBP);\\r\\n        uint256 amountUsdt = OvnMath.subBasisPoints(reserveUsdt * amountLp / totalLpBalance, stakeSlippageBP);\\r\\n\\r\\n        ITridentRouter.TokenAmount memory usdcAmount;\\r\\n        usdcAmount.token = address(usdc);\\r\\n        usdcAmount.amount = amountUsdc;\\r\\n\\r\\n        ITridentRouter.TokenAmount memory usdtAmount;\\r\\n        usdtAmount.token = address(usdt);\\r\\n        usdtAmount.amount = amountUsdt;\\r\\n\\r\\n        ITridentRouter.TokenAmount[] memory minWithdrawals = new ITridentRouter.TokenAmount[](2);\\r\\n        minWithdrawals[0] = usdcAmount;\\r\\n        minWithdrawals[1] = usdtAmount;\\r\\n\\r\\n        // remove liquidity\\r\\n        lpToken.approve(address(tridentRouter), lpTokenBalance);\\r\\n        tridentRouter.burnLiquidity(\\r\\n            address(lpToken),\\r\\n            lpTokenBalance,\\r\\n            abi.encode(address(this), false),\\r\\n            minWithdrawals\\r\\n        );\\r\\n\\r\\n        // swap usdt to usdc\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        CurveLibrary.swap(\\r\\n            curve3Pool,\\r\\n            address(usdt),\\r\\n            address(usdc),\\r\\n            usdtBalance,\\r\\n            OvnMath.subBasisPoints(_oracleUsdtToUsdc(usdtBalance), swapSlippageBP)\\r\\n        );\\r\\n\\r\\n        return usdc.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        // get lpToken amount to unstake\\r\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\r\\n        if (lpTokenBalance == 0) {\\r\\n            return usdc.balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        // unstake\\r\\n        miniChefV2.withdraw(pid, lpTokenBalance, address(this));\\r\\n\\r\\n        // calculate min amounts\\r\\n        uint256 totalLpBalance = lpToken.totalSupply();\\r\\n        (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getReserves();\\r\\n        uint256 amountUsdc = OvnMath.subBasisPoints(reserveUsdc * lpTokenBalance / totalLpBalance, stakeSlippageBP);\\r\\n        uint256 amountUsdt = OvnMath.subBasisPoints(reserveUsdt * lpTokenBalance / totalLpBalance, stakeSlippageBP);\\r\\n\\r\\n        ITridentRouter.TokenAmount memory usdcAmount;\\r\\n        usdcAmount.token = address(usdc);\\r\\n        usdcAmount.amount = amountUsdc;\\r\\n\\r\\n        ITridentRouter.TokenAmount memory usdtAmount;\\r\\n        usdtAmount.token = address(usdt);\\r\\n        usdtAmount.amount = amountUsdt;\\r\\n\\r\\n        ITridentRouter.TokenAmount[] memory minWithdrawals = new ITridentRouter.TokenAmount[](2);\\r\\n        minWithdrawals[0] = usdcAmount;\\r\\n        minWithdrawals[1] = usdtAmount;\\r\\n\\r\\n        // remove liquidity\\r\\n        lpToken.approve(address(tridentRouter), lpTokenBalance);\\r\\n        tridentRouter.burnLiquidity(\\r\\n            address(lpToken),\\r\\n            lpTokenBalance,\\r\\n            abi.encode(address(this), false),\\r\\n            minWithdrawals\\r\\n        );\\r\\n\\r\\n        // swap usdt to usdc\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        CurveLibrary.swap(\\r\\n            curve3Pool,\\r\\n            address(usdt),\\r\\n            address(usdc),\\r\\n            usdtBalance,\\r\\n            OvnMath.subBasisPoints(_oracleUsdtToUsdc(usdtBalance), swapSlippageBP)\\r\\n        );\\r\\n\\r\\n        return usdc.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue(true);\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue(false);\\r\\n    }\\r\\n\\r\\n    function _totalValue(bool nav) internal view returns (uint256) {\\r\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n\\r\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = lpToken.totalSupply();\\r\\n            (uint256 reserveUsdc, uint256 reserveUsdt) = lpToken.getReserves();\\r\\n            usdcBalance += reserveUsdc * lpTokenBalance / totalLpBalance;\\r\\n            usdtBalance += reserveUsdt * lpTokenBalance / totalLpBalance;\\r\\n        }\\r\\n\\r\\n        if (usdtBalance > 0) {\\r\\n            if (nav) {\\r\\n                usdcBalance += _oracleUsdtToUsdc(usdtBalance);\\r\\n            } else {\\r\\n                usdcBalance += CurveLibrary.getAmountOut(curve3Pool, address(usdt), address(usdc), usdtBalance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdcBalance;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        // claim rewards\\r\\n        (uint256 lpTokenBalance,) = miniChefV2.userInfo(pid, address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            miniChefV2.harvest(pid, address(this));\\r\\n        }\\r\\n\\r\\n        // send sushi to rewardWallet\\r\\n        uint256 sushiBalance = sushi.balanceOf(address(this));\\r\\n        if (sushiBalance > 0) {\\r\\n            sushi.transfer(rewardWallet, sushiBalance);\\r\\n        }\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 totalUsdc;\\r\\n\\r\\n        uint256 opBalance = op.balanceOf(address(this));\\r\\n        if (opBalance > 0) {\\r\\n            uint256 amountOut = VelodromeLibrary.getAmountsOut(\\r\\n                velodromeRouter,\\r\\n                address(op),\\r\\n                address(usdc),\\r\\n                false,\\r\\n                opBalance\\r\\n            );\\r\\n            if (amountOut > 0) {\\r\\n                totalUsdc += VelodromeLibrary.singleSwap(\\r\\n                    velodromeRouter,\\r\\n                    address(op),\\r\\n                    address(usdc),\\r\\n                    false,\\r\\n                    opBalance,\\r\\n                    amountOut * 99 / 100,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (totalUsdc > 0) {\\r\\n            usdc.transfer(_to, totalUsdc);\\r\\n        }\\r\\n\\r\\n        return totalUsdc;\\r\\n    }\\r\\n\\r\\n    function _oracleUsdtToUsdc(uint256 usdtAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdt = ChainlinkLibrary.getPrice(oracleUsdt);\\r\\n        uint256 priceUsdc = ChainlinkLibrary.getPrice(oracleUsdc);\\r\\n        return ChainlinkLibrary.convertTokenToToken(usdtAmount, usdtDm, usdcDm, priceUsdt, priceUsdc);\\r\\n    }\\r\\n\\r\\n    function _oracleUsdcToUsdt(uint256 usdcAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdt = ChainlinkLibrary.getPrice(oracleUsdt);\\r\\n        uint256 priceUsdc = ChainlinkLibrary.getPrice(oracleUsdc);\\r\\n        return ChainlinkLibrary.convertTokenToToken(usdcAmount, usdcDm, usdtDm, priceUsdc, priceUsdt);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x455f96cf27bccd8a5bb2e01a0c863fd28a9dd477a8391fc9d359fd7d118a8756\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620026981760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6153726200018e600039600081816108b4015281816108f401528181610994015281816109d40152610a6301526153726000f3fe60806040526004361061025c5760003560e01c806363a6b1da11610144578063ae30c110116100b6578063d57074631161007a578063d5707463146106fb578063ec1f1f691461071b578063ef5cfb8c1461073c578063f10684541461075c578063f6f6b88114610773578063fb75b2c71461079357600080fd5b8063ae30c11014610664578063bf52e08014610684578063c2b2bda61461069a578063cc6522c3146106ba578063d547741f146106db57600080fd5b80638129fc1c116101085780638129fc1c146105c557806391d14854146105da578063a217fddf146105fa578063a3673b381461060f578063a440b21a14610624578063adc9772e1461064457600080fd5b806363a6b1da1461052057806364b5528a1461054157806367185e33146105625780636b2ace87146105825780637d5f5802146105a357600080fd5b80633659cfe6116101dd57806352d1902d116101a157806352d1902d1461045f5780635ca558f8146104745780635dbd733a1461048a5780635fcbd285146104be5780635fea9cbb146104df578063620b75df1461050057600080fd5b80633659cfe6146103c9578063366ac47c146103e95780633e413bee1461040a5780634b7f63631461042b5780634f1ef2861461044c57600080fd5b8063248a9ca311610224578063248a9ca3146103215780632576e65a146103515780632f2ff15d146103665780632f48ab7d1461038857806336568abe146103a957600080fd5b806301ffc9a7146102615780630a087903146102965780630f9033f7146102cf578063119cd879146102f45780631b1e7ddc1461030a575b600080fd5b34801561026d57600080fd5b5061028161027c366004614bbb565b6107b4565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b50610130546102b7906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b3480156102db57600080fd5b506102e661013c5481565b60405190815260200161028d565b34801561030057600080fd5b506102e660fd5481565b34801561031657600080fd5b506102e661013b5481565b34801561032d57600080fd5b506102e661033c366004614b59565b60009081526065602052604090206001015490565b34801561035d57600080fd5b506102e66107eb565b34801561037257600080fd5b50610386610381366004614b8b565b6107fc565b005b34801561039457600080fd5b5061012e546102b7906001600160a01b031681565b3480156103b557600080fd5b506103866103c4366004614b8b565b610826565b3480156103d557600080fd5b506103866103e43660046148ec565b6108a9565b3480156103f557600080fd5b50610139546102b7906001600160a01b031681565b34801561041657600080fd5b5061012d546102b7906001600160a01b031681565b34801561043757600080fd5b50610133546102b7906001600160a01b031681565b61038661045a366004614926565b610989565b34801561046b57600080fd5b506102e6610a56565b34801561048057600080fd5b506102e660fe5481565b34801561049657600080fd5b506102e67fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156104ca57600080fd5b50610134546102b7906001600160a01b031681565b3480156104eb57600080fd5b50610136546102b7906001600160a01b031681565b34801561050c57600080fd5b5060fb546102b7906001600160a01b031681565b34801561052c57600080fd5b50610138546102b7906001600160a01b031681565b34801561054d57600080fd5b50610132546102b7906001600160a01b031681565b34801561056e57600080fd5b506102e661057d3660046149fa565b610b09565b34801561058e57600080fd5b50610131546102b7906001600160a01b031681565b3480156105af57600080fd5b506102e66000805160206152d683398151915281565b3480156105d157600080fd5b506103866110ed565b3480156105e657600080fd5b506102816105f5366004614b8b565b6111b7565b34801561060657600080fd5b506102e6600081565b34801561061b57600080fd5b506102e66111e2565b34801561063057600080fd5b5061038661063f3660046148ec565b6111ee565b34801561065057600080fd5b5061038661065f3660046149ce565b61131d565b34801561067057600080fd5b5061038661067f366004614c22565b61154d565b34801561069057600080fd5b506102e660fc5481565b3480156106a657600080fd5b506103866106b53660046149ce565b6116c2565b3480156106c657600080fd5b50610137546102b7906001600160a01b031681565b3480156106e757600080fd5b506103866106f6366004614b8b565b611e7a565b34801561070757600080fd5b50610386610716366004614be5565b611e9f565b34801561072757600080fd5b5061012f546102b7906001600160a01b031681565b34801561074857600080fd5b506102e66107573660046148ec565b612348565b34801561076857600080fd5b506102e66101355481565b34801561077f57600080fd5b506102e661078e366004614a3c565b6123cd565b34801561079f57600080fd5b5061013a546102b7906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806107e557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107f760006126a7565b905090565b600082815260656020526040902060010154610817816129ea565b61082183836129f4565b505050565b6001600160a01b038116331461089b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6108a58282612a7a565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108f25760405162461bcd60e51b815260040161089290614f48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661093b6000805160206152f6833981519152546001600160a01b031690565b6001600160a01b0316146109615760405162461bcd60e51b815260040161089290614f94565b61096a81612ae1565b6040805160008082526020820190925261098691839190612aec565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109d25760405162461bcd60e51b815260040161089290614f48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a1b6000805160206152f6833981519152546001600160a01b031690565b6001600160a01b031614610a415760405162461bcd60e51b815260040161089290614f94565b610a4a82612ae1565b6108a582826001612aec565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610892565b506000805160206152f683398151915290565b60008061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b158015610bda57600080fd5b505afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190614bfe565b6101385461012d5461012e54939550919350600092610c63926001600160a01b03928316929081169116610c51610c4a8c600a6150b4565b6001612c66565b88888861013b5461013c546001612c89565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf09190614bfe565b50905080821115610cff578091505b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b158015610d5857600080fd5b505af1158015610d6c573d6000803e3d6000fd5b505050506000610d94868487610d8291906151dc565b610d8c91906150cc565b60fe54612d61565b90506000610da687610d8286886151dc565b9050610dc2604080518082019091526000808252602082015290565b61012d546001600160a01b0316815260208101839052610df2604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e205790505090508281600081518110610e5d57610e5d615286565b60200260200101819052508181600181518110610e7c57610e7c615286565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610ebf929116908a90600401614ddd565b602060405180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190614b3c565b50610132546101345460408051306020820152600081830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d993610f6c939116918b91908790606401614df6565b600060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190614b72565b6101385461012e5461012d5492935061105b926001600160a01b039283169291821691168461105661104e82612d70565b60fc54612d61565b612dbc565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156110a057600080fd5b505afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d89190614b72565b9b5050505050505050505050505b9392505050565b600054610100900460ff161580801561110d5750600054600160ff909116105b806111275750303b158015611127575060005460ff166001145b6111435760405162461bcd60e51b815260040161089290614fe0565b6000805460ff191660011790558015611166576000805461ff0019166101001790555b61116e612f9b565b8015610986576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107f760016126a7565b6111f96000336111b7565b61123c5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610892565b6001600160a01b0381166112925760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610892565b60fb546112b7906000805160206152d6833981519152906001600160a01b0316611e7a565b6112cf6000805160206152d6833981519152826107fc565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016111ac565b6113356000805160206152d6833981519152336111b7565b6113515760405162461bcd60e51b815260040161089290614f11565b60006113cf306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561138f57600080fd5b505afa1580156113a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c79190614b72565b60fd54612d61565b6040516370a0823160e01b81523060048201529091506114549084906001600160a01b038216906370a082319060240160206040518083038186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190614b72565b613080565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561148e57600080fd5b505afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c69190614b72565b10156115145760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610892565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6115777fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336111b7565b8061161e575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b1580156115e657600080fd5b505afa1580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e9190614b3c565b6116755760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b6064820152608401610892565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a90606001611540565b61013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561170857600080fd5b505afa15801561171c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117409190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b15801561178757600080fd5b505afa15801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf9190614bfe565b915091506103e8821180156117d557506103e881115b61182c5760405162461bcd60e51b815260206004820152602260248201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6044820152616f7760f01b6064820152608401610892565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561187157600080fd5b505afa158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190614b72565b6101385461012d5461012e5461013b5461013c549495506000946118e5946001600160a01b0390811694811693169187918a918a91600161308a565b6101385461012d5461012e54929350611916926001600160a01b039283169291821691168461105661104e82613135565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561195b57600080fd5b505afa15801561196f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119939190614b72565b61012e546040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156119dd57600080fd5b505afa1580156119f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a159190614b72565b9050611a3a604080516060810182526000808252602082018190529181019190915290565b61012d546001600160a01b031681526001602082015260408101849052611a7a604080516060810182526000808252602082018190529181019190915290565b61012e546001600160a01b031681526001602083015260408082018490528051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611aae5790505090508281600081518110611af157611af1615286565b60200260200101819052508181600181518110611b1057611b10615286565b60209081029190910101526000611b2b89610d828c8a6151dc565b61012d546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392611b659216908b90600401614ddd565b602060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb79190614b3c565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611bf0929116908990600401614ddd565b602060405180830381600087803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614b3c565b506101325461013454604080513060208201526001600160a01b0393841693632cfcb94f9387939116918691016040516020818303038152906040526040518563ffffffff1660e01b8152600401611c9d9493929190614e6f565b602060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef9190614b72565b50610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d3557600080fd5b505afa158015611d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6d9190614b72565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392611da79216908590600401614ddd565b602060405180830381600087803b158015611dc157600080fd5b505af1158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190614b3c565b506101335461013554604051638dbdbe6d60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401600060405180830381600087803b158015611e5357600080fd5b505af1158015611e67573d6000803e3d6000fd5b5050505050505050505050505050505050565b600082815260656020526040902060010154611e95816129ea565b6108218383612a7a565b611eaa6000336111b7565b611eed5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610892565b611efa60208201826148ec565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055611f2b60408201602083016148ec565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055611f5c60608201604083016148ec565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055611f8d60808201606083016148ec565b61013080546001600160a01b0319166001600160a01b0392909216919091179055611fbe60a08201608083016148ec565b61013180546001600160a01b0319166001600160a01b0392909216919091179055611fef60c0820160a083016148ec565b61013280546001600160a01b0319166001600160a01b039290921691909117905561202060e0820160c083016148ec565b61013380546001600160a01b0319166001600160a01b0392909216919091179055612052610100820160e083016148ec565b61013480546001600160a01b0319166001600160a01b03929092169190911790556101008101356101355561208f610140820161012083016148ec565b61013680546001600160a01b0319166001600160a01b03929092169190911790556120c2610160820161014083016148ec565b61013780546001600160a01b0319166001600160a01b03929092169190911790556120f5610180820161016083016148ec565b61013880546001600160a01b0319166001600160a01b03929092169190911790556121286101a0820161018083016148ec565b61013980546001600160a01b0319166001600160a01b039290921691909117905561215b6101c082016101a083016148ec565b61013a80546001600160a01b0319166001600160a01b039290921691909117905561218960208201826148ec565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c157600080fd5b505afa1580156121d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f99190614c9e565b61220490600a615131565b61013b5561221860408201602083016148ec565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561225057600080fd5b505afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190614c9e565b61229390600a615131565b61013c55610131546101325460405163c0a47c9360e01b81523060048201526001600160a01b039182166024820152600160448201526000606482018190526084820181905260a482015291169063c0a47c939060c401600060405180830381600087803b15801561230457600080fd5b505af1158015612318573d6000803e3d6000fd5b50506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea5925060009150a150565b60006123626000805160206152d6833981519152336111b7565b61237e5760405162461bcd60e51b815260040161089290614f11565b600061238983613181565b905080156123c5576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b60006123e76000805160206152d6833981519152336111b7565b6124035760405162461bcd60e51b815260040161089290614f11565b6000612441306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561138f57600080fd5b905060008084156124685761245586613181565b90506124618887613533565b91506124d7565b612473888888613b21565b9150868210156124d75760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610892565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561251157600080fd5b505afa158015612525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125499190614b72565b10156125975760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610892565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906125c59089908690600401614ddd565b602060405180830381600087803b1580156125df57600080fd5b505af11580156125f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126179190614b3c565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a1801561268b576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509150505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156126f057600080fd5b505afa158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190614b72565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561277257600080fd5b505afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190614b72565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156127ff57600080fd5b505afa158015612813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128379190614bfe565b50905080156129885761013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561288657600080fd5b505afa15801561289a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128be9190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b15801561290557600080fd5b505afa158015612919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293d9190614bfe565b90925090508261294d85846151dc565b61295791906150cc565b61296190876150b4565b95508261296e85836151dc565b61297891906150cc565b61298290866150b4565b94505050505b81156129e15784156129ae5761299d82612d70565b6129a790846150b4565b92506129e1565b6101385461012e5461012d546129d4926001600160a01b03908116928116911685613b2e565b6129de90846150b4565b92505b50909392505050565b6109868133613c1f565b6129fe82826111b7565b6108a55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612a363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612a8482826111b7565b156108a55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108a5816129ea565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612b1f5761082183613c83565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5857600080fd5b505afa925050508015612b88575060408051601f3d908101601f19168201909252612b8591810190614b72565b60015b612beb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610892565b6000805160206152f68339815191528114612c5a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610892565b50610821838383613d1f565b6000612710612c7583826150b4565b612c7f90856151dc565b6110e691906150cc565b6000612c9584866151dc565b612c9f84886151dc565b612ca991906150b4565b83612cb48a8a6151dc565b612cbe91906151dc565b612cc891906150cc565b905060005b82811015612d5257600088612ce284896151dc565b612cec91906150cc565b90506000612cfc8e8d8f85613b2e565b9050612d0881896151dc565b612d12838b6151dc565b612d1c91906150b4565b82612d278d8d6151dc565b612d3191906151dc565b612d3b91906150cc565b935050508080612d4a90615255565b915050612ccd565b509a9950505050505050505050565b6000612710612c7583826151fb565b610137546000908190612d8b906001600160a01b0316613d4a565b61013654909150600090612da7906001600160a01b0316613d4a565b90506126908461013c5461013b548585613e6e565b60405163095ea7b360e01b81526000906001600160a01b0386169063095ea7b390612ded9089908790600401614ddd565b602060405180830381600087803b158015612e0757600080fd5b505af1158015612e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3f9190614b3c565b506000806000612e50898989613ea3565b92509250925060008115612ef857604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b169063a6417ed690608401602060405180830381600087803b158015612eb957600080fd5b505af1158015612ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef19190614b72565b9050612f8e565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b1690633df0212490608401602060405180830381600087803b158015612f5357600080fd5b505af1158015612f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b9190614b72565b90505b9998505050505050505050565b600054610100900460ff1615808015612fbb5750600054600160ff909116105b80612fd55750303b158015612fd5575060005460ff166001145b612ff15760405162461bcd60e51b815260040161089290614fe0565b6000805460ff191660011790558015613014576000805461ff0019166101001790555b61301c6140f8565b6130246140f8565b61302f6000336129f4565b601460fc81905560fd55600460fe558015610986576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016111ac565b6108a582826116c2565b6000848461309885896151dc565b6130a291906150cc565b6130ac91906150b4565b6130b686896151dc565b6130c091906150cc565b905060005b828110156131275760006130db8c8c8c86613b2e565b905086836130e9838b6151dc565b6130f391906150cc565b6130fd91906150b4565b613107888b6151dc565b61311191906150cc565b925050808061311f90615255565b9150506130c5565b509998505050505050505050565b610137546000908190613150906001600160a01b0316613d4a565b6101365490915060009061316c906001600160a01b0316613d4a565b90506126908461013b5461013c548486613e6e565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156131d557600080fd5b505afa1580156131e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320d9190614bfe565b5090508015613281576101335461013554604051630c7e663b60e11b815260048101919091523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b15801561326857600080fd5b505af115801561327c573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156132c657600080fd5b505afa1580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe9190614b72565b90508015613392576101305461013a5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261333e929116908590600401614ddd565b602060405180830381600087803b15801561335857600080fd5b505af115801561336c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133909190614b3c565b505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156133db57600080fd5b505afa1580156133ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134139190614b72565b9050801561349d576101395461012f5461012d54600092613446926001600160a01b039182169290821691168486614165565b9050801561349b576101395461012f5461012d5461348e926001600160a01b039081169281169116600086606461347e8860636151dc565b61348891906150cc565b306142f3565b61349890846150b4565b92505b505b811561352a5761012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906134d69089908690600401614ddd565b602060405180830381600087803b1580156134f057600080fd5b505af1158015613504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135289190614b3c565b505b50949350505050565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561358757600080fd5b505afa15801561359b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bf9190614bfe565b5090508061364b5761012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561360b57600080fd5b505afa15801561361f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136439190614b72565b9150506107e5565b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b1580156136a457600080fd5b505af11580156136b8573d6000803e3d6000fd5b50505050600061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561370d57600080fd5b505afa158015613721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137459190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b15801561378c57600080fd5b505afa1580156137a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c49190614bfe565b909250905060006137d984610d8287866151dc565b905060006137eb85610d8288866151dc565b9050613807604080518082019091526000808252602082015290565b61012d546001600160a01b0316815260208101839052613837604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161386557905050905082816000815181106138a2576138a2615286565b602002602001018190525081816001815181106138c1576138c1615286565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613904929116908d90600401614ddd565b602060405180830381600087803b15801561391e57600080fd5b505af1158015613932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139569190614b3c565b50610132546101345460408051306020820152600081830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d9936139b1939116918e91908790606401614df6565b600060405180830381600087803b1580156139cb57600080fd5b505af11580156139df573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015613a2a57600080fd5b505afa158015613a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a629190614b72565b6101385461012e5461012d54929350613a93926001600160a01b039283169291821691168461105661104e82612d70565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613ad857600080fd5b505afa158015613aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b109190614b72565b9d9c50505050505050505050505050565b6000612690848484610b09565b600080600080613b3f888888613ea3565b9250925092508015613be0576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b038916906307211ef7906064015b60206040518083038186803b158015613b9e57600080fd5b505afa158015613bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd69190614b72565b9350505050612690565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b03891690635e0d443f90606401613b86565b613c2982826111b7565b6108a557613c41816001600160a01b0316601461450c565b613c4c83602061450c565b604051602001613c5d929190614d68565b60408051601f198184030181529082905262461bcd60e51b825261089291600401614efe565b6001600160a01b0381163b613cf05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610892565b6000805160206152f683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613d28836146a8565b600082511180613d355750805b1561082157613d4483836146e8565b50505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015613d8b57600080fd5b505afa158015613d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dc39190614c4e565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff161015613e1f5760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b6044820152606401610892565b60008211613e645760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606401610892565b5090949350505050565b6000613e7a82866151dc565b83613e8586896151dc565b613e8f91906151dc565b613e9991906150cc565b9695505050505050565b6000808060016001607f1b0380825b6000613ebe8a836147dc565b90506001600160a01b038116613ed45750613f27565b886001600160a01b0316816001600160a01b03161415613ef657819350613f14565b876001600160a01b0316816001600160a01b03161415613f14578192505b81613f1e81615255565b92505050613eb2565b600f83900b60016001607f1b0314801590613f4d5750600f82900b60016001607f1b0314155b15613f6157509093509150600090506140ef565b600f83900b60016001607f1b03141580613f865750600f82900b60016001607f1b0314155b15613fdf5760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b6064820152608401610892565b5060005b6000613fef8a83614869565b90506001600160a01b0381166140055750614058565b886001600160a01b0316816001600160a01b0316141561402757819350614045565b876001600160a01b0316816001600160a01b03161415614045578192505b8161404f81615255565b92505050613fe3565b600f83900b60016001607f1b031480159061407e5750600f82900b60016001607f1b0314155b1561409257509093509150600190506140ef565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b6064820152608401610892565b93509350939050565b600054610100900460ff166141635760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610892565b565b604080516001808252818301909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161417f57905050905085816000815181106141c2576141c2615286565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505084816000815181106141fa576141fa615286565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160008151811061423257614232615286565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b03891690639881fcb490614275908790869060040161502e565b60006040518083038186803b15801561428d57600080fd5b505afa1580156142a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142c99190810190614a8f565b9050806001815181106142de576142de615286565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b390614324908b908890600401614ddd565b602060405180830381600087803b15801561433e57600080fd5b505af1158015614352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143769190614b3c565b50604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161438e57905050905087816000815181106143d1576143d1615286565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050868160008151811061440957614409615286565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160008151811061444157614441615286565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038b169063f41766d89061448a908990899087908a904290600401615047565b600060405180830381600087803b1580156144a457600080fd5b505af11580156144b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144e09190810190614a8f565b9050806001815181106144f5576144f5615286565b602002602001015192505050979650505050505050565b6060600061451b8360026151dc565b6145269060026150b4565b67ffffffffffffffff81111561453e5761453e61529c565b6040519080825280601f01601f191660200182016040528015614568576020820181803683370190505b509050600360fc1b8160008151811061458357614583615286565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106145b2576145b2615286565b60200101906001600160f81b031916908160001a90535060006145d68460026151dc565b6145e19060016150b4565b90505b6001811115614659576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061461557614615615286565b1a60f81b82828151811061462b5761462b615286565b60200101906001600160f81b031916908160001a90535060049490941c936146528161523e565b90506145e4565b5083156110e65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610892565b6146b181613c83565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6147505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610892565b600080846001600160a01b03168460405161476b9190614d4c565b600060405180830381855af49150503d80600081146147a6576040519150601f19603f3d011682016040523d82523d6000602084013e6147ab565b606091505b50915091506147d3828260405180606001604052806027815260200161531660279139614899565b95945050505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b15801561482057600080fd5b505afa925050508015614850575060408051601f3d908101601f1916820190925261484d91810190614909565b60015b61485957614860565b90506107e5565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb090602401614808565b606083156148a85750816110e6565b8251156148b85782518084602001fd5b8160405162461bcd60e51b81526004016108929190614efe565b805169ffffffffffffffffffff811681146123c857600080fd5b6000602082840312156148fe57600080fd5b81356110e6816152b2565b60006020828403121561491b57600080fd5b81516110e6816152b2565b6000806040838503121561493957600080fd5b8235614944816152b2565b915060208381013567ffffffffffffffff8082111561496257600080fd5b818601915086601f83011261497657600080fd5b8135818111156149885761498861529c565b61499a601f8201601f19168501615083565b915080825287848285010111156149b057600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156149e157600080fd5b82356149ec816152b2565b946020939093013593505050565b600080600060608486031215614a0f57600080fd5b8335614a1a816152b2565b9250602084013591506040840135614a31816152b2565b809150509250925092565b60008060008060808587031215614a5257600080fd5b8435614a5d816152b2565b9350602085013592506040850135614a74816152b2565b91506060850135614a84816152c7565b939692955090935050565b60006020808385031215614aa257600080fd5b825167ffffffffffffffff80821115614aba57600080fd5b818501915085601f830112614ace57600080fd5b815181811115614ae057614ae061529c565b8060051b9150614af1848301615083565b8181528481019084860184860187018a1015614b0c57600080fd5b600095505b83861015614b2f578051835260019590950194918601918601614b11565b5098975050505050505050565b600060208284031215614b4e57600080fd5b81516110e6816152c7565b600060208284031215614b6b57600080fd5b5035919050565b600060208284031215614b8457600080fd5b5051919050565b60008060408385031215614b9e57600080fd5b823591506020830135614bb0816152b2565b809150509250929050565b600060208284031215614bcd57600080fd5b81356001600160e01b0319811681146110e657600080fd5b60006101c08284031215614bf857600080fd5b50919050565b60008060408385031215614c1157600080fd5b505080516020909101519092909150565b600080600060608486031215614c3757600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614c6657600080fd5b614c6f866148d2565b9450602086015193506040860151925060608601519150614c92608087016148d2565b90509295509295909350565b600060208284031215614cb057600080fd5b815160ff811681146110e657600080fd5b600081518084526020808501945080840160005b83811015614d1557815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614cd5565b509495945050505050565b60008151808452614d38816020860160208601615212565b601f01601f19169290920160200192915050565b60008251614d5e818460208701615212565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614da0816017850160208801615212565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614dd1816028840160208801615212565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038087168352602086818501526040608081860152614e206080860188614d20565b858103606087015286518082528388019184019060005b81811015614e5e578351805188168452860151868401529285019291840191600101614e37565b50909b9a5050505050505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614ec957815180516001600160a01b03168552858101511515868601526040908101519085015260609093019290840190600101614e8c565b5050506001600160a01b038716848301528560408501528381036060850152614ef28186614d20565b98975050505050505050565b6020815260006110e66020830184614d20565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8281526040602082015260006126906040830184614cc1565b85815284602082015260a06040820152600061506660a0830186614cc1565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156150ac576150ac61529c565b604052919050565b600082198211156150c7576150c7615270565b500190565b6000826150e957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561512957816000190482111561510f5761510f615270565b8085161561511c57918102915b93841c93908002906150f3565b509250929050565b60006110e660ff84168360008261514a575060016107e5565b81615157575060006107e5565b816001811461516d576002811461517757615193565b60019150506107e5565b60ff84111561518857615188615270565b50506001821b6107e5565b5060208310610133831016604e8410600b84101617156151b6575081810a6107e5565b6151c083836150ee565b80600019048211156151d4576151d4615270565b029392505050565b60008160001904831182151516156151f6576151f6615270565b500290565b60008282101561520d5761520d615270565b500390565b60005b8381101561522d578181015183820152602001615215565b83811115613d445750506000910152565b60008161524d5761524d615270565b506000190190565b600060001982141561526957615269615270565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461098657600080fd5b801515811461098657600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e78702adbf0a9c9b9b2b305ebb58ea369fa8438f520be5ed4d6579ba417c55b364736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c806363a6b1da11610144578063ae30c110116100b6578063d57074631161007a578063d5707463146106fb578063ec1f1f691461071b578063ef5cfb8c1461073c578063f10684541461075c578063f6f6b88114610773578063fb75b2c71461079357600080fd5b8063ae30c11014610664578063bf52e08014610684578063c2b2bda61461069a578063cc6522c3146106ba578063d547741f146106db57600080fd5b80638129fc1c116101085780638129fc1c146105c557806391d14854146105da578063a217fddf146105fa578063a3673b381461060f578063a440b21a14610624578063adc9772e1461064457600080fd5b806363a6b1da1461052057806364b5528a1461054157806367185e33146105625780636b2ace87146105825780637d5f5802146105a357600080fd5b80633659cfe6116101dd57806352d1902d116101a157806352d1902d1461045f5780635ca558f8146104745780635dbd733a1461048a5780635fcbd285146104be5780635fea9cbb146104df578063620b75df1461050057600080fd5b80633659cfe6146103c9578063366ac47c146103e95780633e413bee1461040a5780634b7f63631461042b5780634f1ef2861461044c57600080fd5b8063248a9ca311610224578063248a9ca3146103215780632576e65a146103515780632f2ff15d146103665780632f48ab7d1461038857806336568abe146103a957600080fd5b806301ffc9a7146102615780630a087903146102965780630f9033f7146102cf578063119cd879146102f45780631b1e7ddc1461030a575b600080fd5b34801561026d57600080fd5b5061028161027c366004614bbb565b6107b4565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b50610130546102b7906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b3480156102db57600080fd5b506102e661013c5481565b60405190815260200161028d565b34801561030057600080fd5b506102e660fd5481565b34801561031657600080fd5b506102e661013b5481565b34801561032d57600080fd5b506102e661033c366004614b59565b60009081526065602052604090206001015490565b34801561035d57600080fd5b506102e66107eb565b34801561037257600080fd5b50610386610381366004614b8b565b6107fc565b005b34801561039457600080fd5b5061012e546102b7906001600160a01b031681565b3480156103b557600080fd5b506103866103c4366004614b8b565b610826565b3480156103d557600080fd5b506103866103e43660046148ec565b6108a9565b3480156103f557600080fd5b50610139546102b7906001600160a01b031681565b34801561041657600080fd5b5061012d546102b7906001600160a01b031681565b34801561043757600080fd5b50610133546102b7906001600160a01b031681565b61038661045a366004614926565b610989565b34801561046b57600080fd5b506102e6610a56565b34801561048057600080fd5b506102e660fe5481565b34801561049657600080fd5b506102e67fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156104ca57600080fd5b50610134546102b7906001600160a01b031681565b3480156104eb57600080fd5b50610136546102b7906001600160a01b031681565b34801561050c57600080fd5b5060fb546102b7906001600160a01b031681565b34801561052c57600080fd5b50610138546102b7906001600160a01b031681565b34801561054d57600080fd5b50610132546102b7906001600160a01b031681565b34801561056e57600080fd5b506102e661057d3660046149fa565b610b09565b34801561058e57600080fd5b50610131546102b7906001600160a01b031681565b3480156105af57600080fd5b506102e66000805160206152d683398151915281565b3480156105d157600080fd5b506103866110ed565b3480156105e657600080fd5b506102816105f5366004614b8b565b6111b7565b34801561060657600080fd5b506102e6600081565b34801561061b57600080fd5b506102e66111e2565b34801561063057600080fd5b5061038661063f3660046148ec565b6111ee565b34801561065057600080fd5b5061038661065f3660046149ce565b61131d565b34801561067057600080fd5b5061038661067f366004614c22565b61154d565b34801561069057600080fd5b506102e660fc5481565b3480156106a657600080fd5b506103866106b53660046149ce565b6116c2565b3480156106c657600080fd5b50610137546102b7906001600160a01b031681565b3480156106e757600080fd5b506103866106f6366004614b8b565b611e7a565b34801561070757600080fd5b50610386610716366004614be5565b611e9f565b34801561072757600080fd5b5061012f546102b7906001600160a01b031681565b34801561074857600080fd5b506102e66107573660046148ec565b612348565b34801561076857600080fd5b506102e66101355481565b34801561077f57600080fd5b506102e661078e366004614a3c565b6123cd565b34801561079f57600080fd5b5061013a546102b7906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806107e557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107f760006126a7565b905090565b600082815260656020526040902060010154610817816129ea565b61082183836129f4565b505050565b6001600160a01b038116331461089b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6108a58282612a7a565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108f25760405162461bcd60e51b815260040161089290614f48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661093b6000805160206152f6833981519152546001600160a01b031690565b6001600160a01b0316146109615760405162461bcd60e51b815260040161089290614f94565b61096a81612ae1565b6040805160008082526020820190925261098691839190612aec565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109d25760405162461bcd60e51b815260040161089290614f48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a1b6000805160206152f6833981519152546001600160a01b031690565b6001600160a01b031614610a415760405162461bcd60e51b815260040161089290614f94565b610a4a82612ae1565b6108a582826001612aec565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610892565b506000805160206152f683398151915290565b60008061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b158015610bda57600080fd5b505afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190614bfe565b6101385461012d5461012e54939550919350600092610c63926001600160a01b03928316929081169116610c51610c4a8c600a6150b4565b6001612c66565b88888861013b5461013c546001612c89565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015610cb857600080fd5b505afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf09190614bfe565b50905080821115610cff578091505b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018490523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b158015610d5857600080fd5b505af1158015610d6c573d6000803e3d6000fd5b505050506000610d94868487610d8291906151dc565b610d8c91906150cc565b60fe54612d61565b90506000610da687610d8286886151dc565b9050610dc2604080518082019091526000808252602082015290565b61012d546001600160a01b0316815260208101839052610df2604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e205790505090508281600081518110610e5d57610e5d615286565b60200260200101819052508181600181518110610e7c57610e7c615286565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610ebf929116908a90600401614ddd565b602060405180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190614b3c565b50610132546101345460408051306020820152600081830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d993610f6c939116918b91908790606401614df6565b600060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190614b72565b6101385461012e5461012d5492935061105b926001600160a01b039283169291821691168461105661104e82612d70565b60fc54612d61565b612dbc565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156110a057600080fd5b505afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d89190614b72565b9b5050505050505050505050505b9392505050565b600054610100900460ff161580801561110d5750600054600160ff909116105b806111275750303b158015611127575060005460ff166001145b6111435760405162461bcd60e51b815260040161089290614fe0565b6000805460ff191660011790558015611166576000805461ff0019166101001790555b61116e612f9b565b8015610986576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107f760016126a7565b6111f96000336111b7565b61123c5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610892565b6001600160a01b0381166112925760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610892565b60fb546112b7906000805160206152d6833981519152906001600160a01b0316611e7a565b6112cf6000805160206152d6833981519152826107fc565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016111ac565b6113356000805160206152d6833981519152336111b7565b6113515760405162461bcd60e51b815260040161089290614f11565b60006113cf306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561138f57600080fd5b505afa1580156113a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c79190614b72565b60fd54612d61565b6040516370a0823160e01b81523060048201529091506114549084906001600160a01b038216906370a082319060240160206040518083038186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190614b72565b613080565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561148e57600080fd5b505afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c69190614b72565b10156115145760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610892565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6115777fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137336111b7565b8061161e575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b1580156115e657600080fd5b505afa1580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e9190614b3c565b6116755760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b6064820152608401610892565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a90606001611540565b61013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561170857600080fd5b505afa15801561171c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117409190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b15801561178757600080fd5b505afa15801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf9190614bfe565b915091506103e8821180156117d557506103e881115b61182c5760405162461bcd60e51b815260206004820152602260248201527f4c6971756964697479206c70546f6b656e20726573657276657320746f6f206c6044820152616f7760f01b6064820152608401610892565b61012d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561187157600080fd5b505afa158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190614b72565b6101385461012d5461012e5461013b5461013c549495506000946118e5946001600160a01b0390811694811693169187918a918a91600161308a565b6101385461012d5461012e54929350611916926001600160a01b039283169291821691168461105661104e82613135565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561195b57600080fd5b505afa15801561196f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119939190614b72565b61012e546040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156119dd57600080fd5b505afa1580156119f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a159190614b72565b9050611a3a604080516060810182526000808252602082018190529181019190915290565b61012d546001600160a01b031681526001602082015260408101849052611a7a604080516060810182526000808252602082018190529181019190915290565b61012e546001600160a01b031681526001602083015260408082018490528051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611aae5790505090508281600081518110611af157611af1615286565b60200260200101819052508181600181518110611b1057611b10615286565b60209081029190910101526000611b2b89610d828c8a6151dc565b61012d546101315460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392611b659216908b90600401614ddd565b602060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb79190614b3c565b5061012e546101315460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611bf0929116908990600401614ddd565b602060405180830381600087803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614b3c565b506101325461013454604080513060208201526001600160a01b0393841693632cfcb94f9387939116918691016040516020818303038152906040526040518563ffffffff1660e01b8152600401611c9d9493929190614e6f565b602060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef9190614b72565b50610134546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d3557600080fd5b505afa158015611d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6d9190614b72565b610134546101335460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392611da79216908590600401614ddd565b602060405180830381600087803b158015611dc157600080fd5b505af1158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190614b3c565b506101335461013554604051638dbdbe6d60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401600060405180830381600087803b158015611e5357600080fd5b505af1158015611e67573d6000803e3d6000fd5b5050505050505050505050505050505050565b600082815260656020526040902060010154611e95816129ea565b6108218383612a7a565b611eaa6000336111b7565b611eed5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610892565b611efa60208201826148ec565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055611f2b60408201602083016148ec565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055611f5c60608201604083016148ec565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055611f8d60808201606083016148ec565b61013080546001600160a01b0319166001600160a01b0392909216919091179055611fbe60a08201608083016148ec565b61013180546001600160a01b0319166001600160a01b0392909216919091179055611fef60c0820160a083016148ec565b61013280546001600160a01b0319166001600160a01b039290921691909117905561202060e0820160c083016148ec565b61013380546001600160a01b0319166001600160a01b0392909216919091179055612052610100820160e083016148ec565b61013480546001600160a01b0319166001600160a01b03929092169190911790556101008101356101355561208f610140820161012083016148ec565b61013680546001600160a01b0319166001600160a01b03929092169190911790556120c2610160820161014083016148ec565b61013780546001600160a01b0319166001600160a01b03929092169190911790556120f5610180820161016083016148ec565b61013880546001600160a01b0319166001600160a01b03929092169190911790556121286101a0820161018083016148ec565b61013980546001600160a01b0319166001600160a01b039290921691909117905561215b6101c082016101a083016148ec565b61013a80546001600160a01b0319166001600160a01b039290921691909117905561218960208201826148ec565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c157600080fd5b505afa1580156121d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f99190614c9e565b61220490600a615131565b61013b5561221860408201602083016148ec565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561225057600080fd5b505afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190614c9e565b61229390600a615131565b61013c55610131546101325460405163c0a47c9360e01b81523060048201526001600160a01b039182166024820152600160448201526000606482018190526084820181905260a482015291169063c0a47c939060c401600060405180830381600087803b15801561230457600080fd5b505af1158015612318573d6000803e3d6000fd5b50506040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea5925060009150a150565b60006123626000805160206152d6833981519152336111b7565b61237e5760405162461bcd60e51b815260040161089290614f11565b600061238983613181565b905080156123c5576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b90505b919050565b60006123e76000805160206152d6833981519152336111b7565b6124035760405162461bcd60e51b815260040161089290614f11565b6000612441306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561138f57600080fd5b905060008084156124685761245586613181565b90506124618887613533565b91506124d7565b612473888888613b21565b9150868210156124d75760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610892565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561251157600080fd5b505afa158015612525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125499190614b72565b10156125975760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610892565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906125c59089908690600401614ddd565b602060405180830381600087803b1580156125df57600080fd5b505af11580156125f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126179190614b3c565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a1801561268b576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509150505b949350505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156126f057600080fd5b505afa158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190614b72565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561277257600080fd5b505afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190614b72565b61013354610135546040516393f1a40b60e01b815260048101919091523060248201529192506000916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156127ff57600080fd5b505afa158015612813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128379190614bfe565b50905080156129885761013454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561288657600080fd5b505afa15801561289a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128be9190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b15801561290557600080fd5b505afa158015612919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293d9190614bfe565b90925090508261294d85846151dc565b61295791906150cc565b61296190876150b4565b95508261296e85836151dc565b61297891906150cc565b61298290866150b4565b94505050505b81156129e15784156129ae5761299d82612d70565b6129a790846150b4565b92506129e1565b6101385461012e5461012d546129d4926001600160a01b03908116928116911685613b2e565b6129de90846150b4565b92505b50909392505050565b6109868133613c1f565b6129fe82826111b7565b6108a55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612a363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612a8482826111b7565b156108a55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108a5816129ea565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612b1f5761082183613c83565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5857600080fd5b505afa925050508015612b88575060408051601f3d908101601f19168201909252612b8591810190614b72565b60015b612beb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610892565b6000805160206152f68339815191528114612c5a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610892565b50610821838383613d1f565b6000612710612c7583826150b4565b612c7f90856151dc565b6110e691906150cc565b6000612c9584866151dc565b612c9f84886151dc565b612ca991906150b4565b83612cb48a8a6151dc565b612cbe91906151dc565b612cc891906150cc565b905060005b82811015612d5257600088612ce284896151dc565b612cec91906150cc565b90506000612cfc8e8d8f85613b2e565b9050612d0881896151dc565b612d12838b6151dc565b612d1c91906150b4565b82612d278d8d6151dc565b612d3191906151dc565b612d3b91906150cc565b935050508080612d4a90615255565b915050612ccd565b509a9950505050505050505050565b6000612710612c7583826151fb565b610137546000908190612d8b906001600160a01b0316613d4a565b61013654909150600090612da7906001600160a01b0316613d4a565b90506126908461013c5461013b548585613e6e565b60405163095ea7b360e01b81526000906001600160a01b0386169063095ea7b390612ded9089908790600401614ddd565b602060405180830381600087803b158015612e0757600080fd5b505af1158015612e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3f9190614b3c565b506000806000612e50898989613ea3565b92509250925060008115612ef857604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b169063a6417ed690608401602060405180830381600087803b158015612eb957600080fd5b505af1158015612ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef19190614b72565b9050612f8e565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b1690633df0212490608401602060405180830381600087803b158015612f5357600080fd5b505af1158015612f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b9190614b72565b90505b9998505050505050505050565b600054610100900460ff1615808015612fbb5750600054600160ff909116105b80612fd55750303b158015612fd5575060005460ff166001145b612ff15760405162461bcd60e51b815260040161089290614fe0565b6000805460ff191660011790558015613014576000805461ff0019166101001790555b61301c6140f8565b6130246140f8565b61302f6000336129f4565b601460fc81905560fd55600460fe558015610986576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016111ac565b6108a582826116c2565b6000848461309885896151dc565b6130a291906150cc565b6130ac91906150b4565b6130b686896151dc565b6130c091906150cc565b905060005b828110156131275760006130db8c8c8c86613b2e565b905086836130e9838b6151dc565b6130f391906150cc565b6130fd91906150b4565b613107888b6151dc565b61311191906150cc565b925050808061311f90615255565b9150506130c5565b509998505050505050505050565b610137546000908190613150906001600160a01b0316613d4a565b6101365490915060009061316c906001600160a01b0316613d4a565b90506126908461013b5461013c548486613e6e565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b1580156131d557600080fd5b505afa1580156131e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320d9190614bfe565b5090508015613281576101335461013554604051630c7e663b60e11b815260048101919091523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b15801561326857600080fd5b505af115801561327c573d6000803e3d6000fd5b505050505b610130546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156132c657600080fd5b505afa1580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe9190614b72565b90508015613392576101305461013a5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261333e929116908590600401614ddd565b602060405180830381600087803b15801561335857600080fd5b505af115801561336c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133909190614b3c565b505b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156133db57600080fd5b505afa1580156133ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134139190614b72565b9050801561349d576101395461012f5461012d54600092613446926001600160a01b039182169290821691168486614165565b9050801561349b576101395461012f5461012d5461348e926001600160a01b039081169281169116600086606461347e8860636151dc565b61348891906150cc565b306142f3565b61349890846150b4565b92505b505b811561352a5761012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906134d69089908690600401614ddd565b602060405180830381600087803b1580156134f057600080fd5b505af1158015613504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135289190614b3c565b505b50949350505050565b61013354610135546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561358757600080fd5b505afa15801561359b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bf9190614bfe565b5090508061364b5761012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561360b57600080fd5b505afa15801561361f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136439190614b72565b9150506107e5565b6101335461013554604051630ad58d2f60e01b81526004810191909152602481018390523060448201526001600160a01b0390911690630ad58d2f90606401600060405180830381600087803b1580156136a457600080fd5b505af11580156136b8573d6000803e3d6000fd5b50505050600061013460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561370d57600080fd5b505afa158015613721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137459190614b72565b6101345460408051630240bc6b60e21b8152815193945060009384936001600160a01b031692630902f1ac9260048082019391829003018186803b15801561378c57600080fd5b505afa1580156137a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c49190614bfe565b909250905060006137d984610d8287866151dc565b905060006137eb85610d8288866151dc565b9050613807604080518082019091526000808252602082015290565b61012d546001600160a01b0316815260208101839052613837604080518082019091526000808252602082015290565b61012e546001600160a01b031681526020810183905260408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161386557905050905082816000815181106138a2576138a2615286565b602002602001018190525081816001815181106138c1576138c1615286565b6020908102919091010152610134546101325460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613904929116908d90600401614ddd565b602060405180830381600087803b15801561391e57600080fd5b505af1158015613932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139569190614b3c565b50610132546101345460408051306020820152600081830152815180820383018152606082019283905263783312d960e01b9092526001600160a01b039384169363783312d9936139b1939116918e91908790606401614df6565b600060405180830381600087803b1580156139cb57600080fd5b505af11580156139df573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015613a2a57600080fd5b505afa158015613a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a629190614b72565b6101385461012e5461012d54929350613a93926001600160a01b039283169291821691168461105661104e82612d70565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613ad857600080fd5b505afa158015613aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b109190614b72565b9d9c50505050505050505050505050565b6000612690848484610b09565b600080600080613b3f888888613ea3565b9250925092508015613be0576040516307211ef760e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b038916906307211ef7906064015b60206040518083038186803b158015613b9e57600080fd5b505afa158015613bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd69190614b72565b9350505050612690565b604051635e0d443f60e01b8152600f84810b600483015283900b6024820152604481018690526001600160a01b03891690635e0d443f90606401613b86565b613c2982826111b7565b6108a557613c41816001600160a01b0316601461450c565b613c4c83602061450c565b604051602001613c5d929190614d68565b60408051601f198184030181529082905262461bcd60e51b825261089291600401614efe565b6001600160a01b0381163b613cf05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610892565b6000805160206152f683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613d28836146a8565b600082511180613d355750805b1561082157613d4483836146e8565b50505050565b6000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015613d8b57600080fd5b505afa158015613d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dc39190614c4e565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff161015613e1f5760405162461bcd60e51b81526020600482015260086024820152674f6c64206461746160c01b6044820152606401610892565b60008211613e645760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606401610892565b5090949350505050565b6000613e7a82866151dc565b83613e8586896151dc565b613e8f91906151dc565b613e9991906150cc565b9695505050505050565b6000808060016001607f1b0380825b6000613ebe8a836147dc565b90506001600160a01b038116613ed45750613f27565b886001600160a01b0316816001600160a01b03161415613ef657819350613f14565b876001600160a01b0316816001600160a01b03161415613f14578192505b81613f1e81615255565b92505050613eb2565b600f83900b60016001607f1b0314801590613f4d5750600f82900b60016001607f1b0314155b15613f6157509093509150600090506140ef565b600f83900b60016001607f1b03141580613f865750600f82900b60016001607f1b0314155b15613fdf5760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b6064820152608401610892565b5060005b6000613fef8a83614869565b90506001600160a01b0381166140055750614058565b886001600160a01b0316816001600160a01b0316141561402757819350614045565b876001600160a01b0316816001600160a01b03161415614045578192505b8161404f81615255565b92505050613fe3565b600f83900b60016001607f1b031480159061407e5750600f82900b60016001607f1b0314155b1561409257509093509150600190506140ef565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b6064820152608401610892565b93509350939050565b600054610100900460ff166141635760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610892565b565b604080516001808252818301909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161417f57905050905085816000815181106141c2576141c2615286565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505084816000815181106141fa576141fa615286565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160008151811061423257614232615286565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b03891690639881fcb490614275908790869060040161502e565b60006040518083038186803b15801561428d57600080fd5b505afa1580156142a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142c99190810190614a8f565b9050806001815181106142de576142de615286565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526000906001600160a01b0388169063095ea7b390614324908b908890600401614ddd565b602060405180830381600087803b15801561433e57600080fd5b505af1158015614352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143769190614b3c565b50604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161438e57905050905087816000815181106143d1576143d1615286565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050868160008151811061440957614409615286565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160008151811061444157614441615286565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038b169063f41766d89061448a908990899087908a904290600401615047565b600060405180830381600087803b1580156144a457600080fd5b505af11580156144b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144e09190810190614a8f565b9050806001815181106144f5576144f5615286565b602002602001015192505050979650505050505050565b6060600061451b8360026151dc565b6145269060026150b4565b67ffffffffffffffff81111561453e5761453e61529c565b6040519080825280601f01601f191660200182016040528015614568576020820181803683370190505b509050600360fc1b8160008151811061458357614583615286565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106145b2576145b2615286565b60200101906001600160f81b031916908160001a90535060006145d68460026151dc565b6145e19060016150b4565b90505b6001811115614659576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061461557614615615286565b1a60f81b82828151811061462b5761462b615286565b60200101906001600160f81b031916908160001a90535060049490941c936146528161523e565b90506145e4565b5083156110e65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610892565b6146b181613c83565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6147505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610892565b600080846001600160a01b03168460405161476b9190614d4c565b600060405180830381855af49150503d80600081146147a6576040519150601f19603f3d011682016040523d82523d6000602084013e6147ab565b606091505b50915091506147d3828260405180606001604052806027815260200161531660279139614899565b95945050505050565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b15801561482057600080fd5b505afa925050508015614850575060408051601f3d908101601f1916820190925261484d91810190614909565b60015b61485957614860565b90506107e5565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb090602401614808565b606083156148a85750816110e6565b8251156148b85782518084602001fd5b8160405162461bcd60e51b81526004016108929190614efe565b805169ffffffffffffffffffff811681146123c857600080fd5b6000602082840312156148fe57600080fd5b81356110e6816152b2565b60006020828403121561491b57600080fd5b81516110e6816152b2565b6000806040838503121561493957600080fd5b8235614944816152b2565b915060208381013567ffffffffffffffff8082111561496257600080fd5b818601915086601f83011261497657600080fd5b8135818111156149885761498861529c565b61499a601f8201601f19168501615083565b915080825287848285010111156149b057600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156149e157600080fd5b82356149ec816152b2565b946020939093013593505050565b600080600060608486031215614a0f57600080fd5b8335614a1a816152b2565b9250602084013591506040840135614a31816152b2565b809150509250925092565b60008060008060808587031215614a5257600080fd5b8435614a5d816152b2565b9350602085013592506040850135614a74816152b2565b91506060850135614a84816152c7565b939692955090935050565b60006020808385031215614aa257600080fd5b825167ffffffffffffffff80821115614aba57600080fd5b818501915085601f830112614ace57600080fd5b815181811115614ae057614ae061529c565b8060051b9150614af1848301615083565b8181528481019084860184860187018a1015614b0c57600080fd5b600095505b83861015614b2f578051835260019590950194918601918601614b11565b5098975050505050505050565b600060208284031215614b4e57600080fd5b81516110e6816152c7565b600060208284031215614b6b57600080fd5b5035919050565b600060208284031215614b8457600080fd5b5051919050565b60008060408385031215614b9e57600080fd5b823591506020830135614bb0816152b2565b809150509250929050565b600060208284031215614bcd57600080fd5b81356001600160e01b0319811681146110e657600080fd5b60006101c08284031215614bf857600080fd5b50919050565b60008060408385031215614c1157600080fd5b505080516020909101519092909150565b600080600060608486031215614c3757600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614c6657600080fd5b614c6f866148d2565b9450602086015193506040860151925060608601519150614c92608087016148d2565b90509295509295909350565b600060208284031215614cb057600080fd5b815160ff811681146110e657600080fd5b600081518084526020808501945080840160005b83811015614d1557815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614cd5565b509495945050505050565b60008151808452614d38816020860160208601615212565b601f01601f19169290920160200192915050565b60008251614d5e818460208701615212565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614da0816017850160208801615212565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614dd1816028840160208801615212565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038087168352602086818501526040608081860152614e206080860188614d20565b858103606087015286518082528388019184019060005b81811015614e5e578351805188168452860151868401529285019291840191600101614e37565b50909b9a5050505050505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614ec957815180516001600160a01b03168552858101511515868601526040908101519085015260609093019290840190600101614e8c565b5050506001600160a01b038716848301528560408501528381036060850152614ef28186614d20565b98975050505050505050565b6020815260006110e66020830184614d20565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8281526040602082015260006126906040830184614cc1565b85815284602082015260a06040820152600061506660a0830186614cc1565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156150ac576150ac61529c565b604052919050565b600082198211156150c7576150c7615270565b500190565b6000826150e957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561512957816000190482111561510f5761510f615270565b8085161561511c57918102915b93841c93908002906150f3565b509250929050565b60006110e660ff84168360008261514a575060016107e5565b81615157575060006107e5565b816001811461516d576002811461517757615193565b60019150506107e5565b60ff84111561518857615188615270565b50506001821b6107e5565b5060208310610133831016604e8410600b84101617156151b6575081810a6107e5565b6151c083836150ee565b80600019048211156151d4576151d4615270565b029392505050565b60008160001904831182151516156151f6576151f6615270565b500290565b60008282101561520d5761520d615270565b500390565b60005b8381101561522d578181015183820152602001615215565b83811115613d445750506000910152565b60008161524d5761524d615270565b506000190190565b600060001982141561526957615269615270565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461098657600080fd5b801515811461098657600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e78702adbf0a9c9b9b2b305ebb58ea369fa8438f520be5ed4d6579ba417c55b364736f6c63430008060033",
  "implementation": "0x085c873559359886E33F7469133a820EDccd6A16",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5070,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 5072,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 5074,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 5076,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 5461,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 5553,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdc",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)1793"
      },
      {
        "astId": 5556,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdt",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)1793"
      },
      {
        "astId": 5559,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "op",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)1793"
      },
      {
        "astId": 5562,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "sushi",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)1793"
      },
      {
        "astId": 5565,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "bentoBox",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IBentoBox)4076"
      },
      {
        "astId": 5568,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "tridentRouter",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(ITridentRouter)3742"
      },
      {
        "astId": 5571,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "miniChefV2",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IMiniChefV2)3802"
      },
      {
        "astId": 5574,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "lpToken",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IStablePool)3845"
      },
      {
        "astId": 5576,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "pid",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 5579,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IPriceFeed)2001"
      },
      {
        "astId": 5582,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "oracleUsdt",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPriceFeed)2001"
      },
      {
        "astId": 5584,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "curve3Pool",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 5587,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "velodromeRouter",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IRouter)4402"
      },
      {
        "astId": 5589,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "rewardWallet",
        "offset": 0,
        "slot": "314",
        "type": "t_address"
      },
      {
        "astId": 5591,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdcDm",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      },
      {
        "astId": 5593,
        "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
        "label": "usdtDm",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBentoBox)4076": {
        "encoding": "inplace",
        "label": "contract IBentoBox",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1793": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMiniChefV2)3802": {
        "encoding": "inplace",
        "label": "contract IMiniChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)2001": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)4402": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IStablePool)3845": {
        "encoding": "inplace",
        "label": "contract IStablePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITridentRouter)3742": {
        "encoding": "inplace",
        "label": "contract ITridentRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategySushiswapUsdcUsdt.sol:StrategySushiswapUsdcUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}