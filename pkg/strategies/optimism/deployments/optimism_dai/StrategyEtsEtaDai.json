{
  "address": "0xDD2E9873e4c1402FD81c62b69aaCD4a28112Ed5a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "navSlippageBP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "SlippagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve3Pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hedgeExchanger",
      "outputs": [
        {
          "internalType": "contract IHedgeExchanger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDai",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdt",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rebaseToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "hedgeExchanger",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleDai",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleUsdt",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curve3Pool",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyEtsDaiUsdt.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_navSlippageBP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSlippageBP",
          "type": "uint256"
        }
      ],
      "name": "setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippageBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "b6f7d865be3951f4a8a03a4c8f76b7be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"navSlippageBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"SlippagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3Pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hedgeExchanger\",\"outputs\":[{\"internalType\":\"contract IHedgeExchanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDai\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdt\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rebaseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeExchanger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve3Pool\",\"type\":\"address\"}],\"internalType\":\"struct StrategyEtsDaiUsdt.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_navSlippageBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSlippageBP\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dai/StrategyEtsDaiUsdt.sol\":\"StrategyEtsDaiUsdt\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63ab94a7069030cb3ff3b580cd1e602a1259f3965e9e30c1b85d662c7b96b6e\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n\\r\\n    function latestRound() external view returns (uint256);\\r\\n\\r\\n    function getAnswer(uint256 roundId) external view returns (int256);\\r\\n\\r\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n    // if they do not have data to report, instead of returning unset values\\r\\n    // which could be misinterpreted as actual reported values.\\r\\n    function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n    function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint80 roundId,\\r\\n        int256 answer,\\r\\n        uint256 startedAt,\\r\\n        uint256 updatedAt,\\r\\n        uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nlibrary ChainlinkLibrary {\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * price / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / price;\\r\\n    }\\r\\n\\r\\n    function convertTokenToToken(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        IPriceFeed oracle0,\\r\\n        IPriceFeed oracle1\\r\\n    ) internal view returns (uint256 amount1) {\\r\\n        uint256 price0 = getPrice(oracle0);\\r\\n        uint256 price1 = getPrice(oracle1);\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function getPrice(IPriceFeed oracle) internal view returns (uint256){\\r\\n        (uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = oracle.latestRoundData();\\r\\n        require(answeredInRound >= roundID, \\\"Old data\\\");\\r\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\r\\n        return uint256(price);\\r\\n\\r\\n    }\\r\\n\\r\\n    function convertTokenToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * getPrice(oracle) / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToToken(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        IPriceFeed oracle\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / getPrice(oracle);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfacfe79aec4b4149ea003967cc78b66f8f667ea592bae768273a80a5edec9422\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface ICurveExchange {\\r\\n\\r\\n    /**\\r\\n        @notice Perform an exchange using the pool that offers the best rate\\r\\n        @dev Prior to calling this function, the caller must approve\\r\\n        this contract to transfer `_amount` coins from `_from`\\r\\n        Does NOT check rates in factory-deployed pools\\r\\n        @param _from Address of coin being sent\\r\\n        @param _to Address of coin being received\\r\\n        @param _amount Quantity of `_from` being sent\\r\\n        @param _expected Minimum quantity of `_from` received\\r\\n        in order for the transaction to succeed\\r\\n        @param _receiver Address to transfer the received tokens to\\r\\n        @return uint256 Amount received\\r\\n    */\\r\\n    function exchange_with_best_rate(address _from, address _to, uint256 _amount, uint256 _expected, address _receiver) external returns (uint256);\\r\\n\\r\\n    function exchange_with_best_rate(address _from, address _to, uint256 _amount, uint256 _expected) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Perform an exchange using a specific pool\\r\\n        @dev Prior to calling this function, the caller must approve\\r\\n             this contract to transfer `_amount` coins from `_from`\\r\\n             Works for both regular and factory-deployed pools\\r\\n        @param _pool Address of the pool to use for the swap\\r\\n        @param _from Address of coin being sent\\r\\n        @param _to Address of coin being received\\r\\n        @param _amount Quantity of `_from` being sent\\r\\n        @param _expected Minimum quantity of `_from` received\\r\\n               in order for the transaction to succeed\\r\\n        @param _receiver Address to transfer the received tokens to\\r\\n        @return uint256 Amount received\\r\\n    */\\r\\n    function exchange(address _pool, address _from, address _to, uint256 _amount, uint256 _expected, address _receiver) external returns (uint256);\\r\\n\\r\\n    function exchange(address _pool, address _from, address _to, uint256 _amount, uint256 _expected) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Perform up to four swaps in a single transaction\\r\\n        @dev Routing and swap params must be determined off-chain. This\\r\\n             functionality is designed for gas efficiency over ease-of-use.\\r\\n        @param _route Array of [initial token, pool, token, pool, token, ...]\\r\\n                      The array is iterated until a pool address of 0x00, then the last\\r\\n                      given token is transferred to `_receiver`\\r\\n        @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\\r\\n                            values for the n'th pool in `_route`. The swap type should be\\r\\n                            1 for a stableswap `exchange`,\\r\\n                            2 for stableswap `exchange_underlying`,\\r\\n                            3 for a cryptoswap `exchange`,\\r\\n                            4 for a cryptoswap `exchange_underlying`,\\r\\n                            5 for factory metapools with lending base pool `exchange_underlying`,\\r\\n                            6 for factory crypto-meta pools underlying exchange (`exchange` method in zap),\\r\\n                            7-11 for wrapped coin (underlying for lending or fake pool) -> LP token \\\"exchange\\\" (actually `add_liquidity`),\\r\\n                            12-14 for LP token -> wrapped coin (underlying for lending pool) \\\"exchange\\\" (actually `remove_liquidity_one_coin`)\\r\\n                            15 for WETH -> ETH \\\"exchange\\\" (actually deposit/withdraw)\\r\\n        @param _amount The amount of `_route[0]` token being sent.\\r\\n        @param _expected The minimum amount received after the final swap.\\r\\n        @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\\r\\n                      Polygon meta-factories underlying swaps.\\r\\n        @param _receiver Address to transfer the final output token to.\\r\\n        @return Received amount of the final output token\\r\\n    */\\r\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected, address[4] memory _pools, address _receiver) external returns (uint256);\\r\\n\\r\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected, address[4] memory _pools) external returns (uint256);\\r\\n\\r\\n    function exchange_multiple(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, uint256 _expected) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Find the pool offering the best rate for a given swap.\\r\\n        @dev Checks rates for regular and factory pools\\r\\n        @param _from Address of coin being sent\\r\\n        @param _to Address of coin being received\\r\\n        @param _amount Quantity of `_from` being sent\\r\\n        @param _exclude_pools A list of up to 8 addresses which shouldn't be returned\\r\\n        @return Pool address, amount received\\r\\n    */\\r\\n    function get_best_rate(address _from, address _to, uint256 _amount, address[8] memory _exclude_pools) external returns (address, uint256);\\r\\n\\r\\n    function get_best_rate(address _from, address _to, uint256 _amount) external returns (address, uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number of coins received in an exchange\\r\\n        @dev Works for both regular and factory-deployed pools\\r\\n        @param _pool Pool address\\r\\n        @param _from Address of coin to be sent\\r\\n        @param _to Address of coin to be received\\r\\n        @param _amount Quantity of `_from` to be sent\\r\\n        @return Quantity of `_to` to be received\\r\\n    */\\r\\n    function get_exchange_amount(address _pool, address _from, address _to, uint256 _amount) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number of coins required to receive the given amount in an exchange\\r\\n        @param _pool Pool address\\r\\n        @param _from Address of coin to be sent\\r\\n        @param _to Address of coin to be received\\r\\n        @param _amount Quantity of `_to` to be received\\r\\n        @return Quantity of `_from` to be sent\\r\\n    */\\r\\n    function get_input_amount(address _pool, address _from, address _to, uint256 _amount) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number of coins required to receive the given amount in an exchange\\r\\n        @param _pool Pool address\\r\\n        @param _from Address of coin to be sent\\r\\n        @param _to Address of coin to be received\\r\\n        @param _amounts Quantity of `_to` to be received\\r\\n        @return Quantity of `_from` to be sent\\r\\n    */\\r\\n    function get_exchange_amounts(address _pool, address _from, address _to, uint256[100] memory _amounts) external returns (uint256[100] memory);\\r\\n\\r\\n    /**\\r\\n        @notice Get the current number the final output tokens received in an exchange\\r\\n        @dev Routing and swap params must be determined off-chain. This\\r\\n             functionality is designed for gas efficiency over ease-of-use.\\r\\n        @param _route Array of [initial token, pool, token, pool, token, ...]\\r\\n                      The array is iterated until a pool address of 0x00, then the last\\r\\n                      given token is transferred to `_receiver`\\r\\n        @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\\r\\n                            values for the n'th pool in `_route`. The swap type should be\\r\\n                            1 for a stableswap `exchange`,\\r\\n                            2 for stableswap `exchange_underlying`,\\r\\n                            3 for a cryptoswap `exchange`,\\r\\n                            4 for a cryptoswap `exchange_underlying`,\\r\\n                            5 for factory metapools with lending base pool `exchange_underlying`,\\r\\n                            6 for factory crypto-meta pools underlying exchange (`exchange` method in zap),\\r\\n                            7-11 for wrapped coin (underlying for lending pool) -> LP token \\\"exchange\\\" (actually `add_liquidity`),\\r\\n                            12-14 for LP token -> wrapped coin (underlying for lending or fake pool) \\\"exchange\\\" (actually `remove_liquidity_one_coin`)\\r\\n                            15 for WETH -> ETH \\\"exchange\\\" (actually deposit/withdraw)\\r\\n        @param _amount The amount of `_route[0]` token to be sent.\\r\\n        @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\\r\\n                      Polygon meta-factories underlying swaps.\\r\\n        @return Expected amount of the final output token\\r\\n    */\\r\\n    function get_exchange_multiple_amount(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount, address[4] memory _pools) external returns (uint256);\\r\\n\\r\\n    function get_exchange_multiple_amount(address[9] memory _route, uint256[3][4] memory _swap_params, uint256 _amount) external returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IStableSwapPool {\\r\\n\\r\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory);\\r\\n\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\\r\\n\\r\\n    function underlying_coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function lp_token() external view returns (address);\\r\\n\\r\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\r\\n\\r\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit) external view returns (uint256);\\r\\n\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\r\\n    function get_dy(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    //Perform an exchange between two coins.\\r\\n    // i: Index value for the coin to send\\r\\n    // j: Index value of the coin to receive\\r\\n    // _dx: Amount of i being exchanged\\r\\n    // _min_dy: Minimum amount of j to receive\\r\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\r\\n    function exchange(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n\\r\\n    function exchange_underlying(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount, bool _use_underlying) external returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IMetaSwapPool {\\r\\n\\r\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\r\\n    function get_dy(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\r\\n\\r\\n    //Perform an exchange between two coins.\\r\\n    // i: Index value for the coin to send\\r\\n    // j: Index value of the coin to receive\\r\\n    // _dx: Amount of i being exchanged\\r\\n    // _min_dy: Minimum amount of j to receive\\r\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\r\\n    function exchange(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n\\r\\n    function exchange_underlying(address _pool, int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IRewardsOnlyGauge is IERC20 {\\r\\n\\r\\n    function deposit(uint256 _value, address _addr, bool _claim_rewards) external;\\r\\n\\r\\n    function deposit(uint256 _value, address _addr) external;\\r\\n\\r\\n    function deposit(uint256 _value, bool _claim_rewards) external;\\r\\n\\r\\n    function deposit(uint256 _value) external;\\r\\n\\r\\n    function withdraw(uint256 _value, bool _claim_rewards) external;\\r\\n\\r\\n    function withdraw(uint256 _value) external;\\r\\n\\r\\n    function lp_token() external returns (address);\\r\\n\\r\\n    function claim_rewards(address _addr, address _receiver) external;\\r\\n\\r\\n    function claim_rewards(address _addr) external;\\r\\n\\r\\n    function claim_rewards() external;\\r\\n\\r\\n    function claimed_reward(address _addr, address _token) external returns (uint256);\\r\\n\\r\\n    function claimable_reward(address _addr, address _token) external returns (uint256);\\r\\n\\r\\n    function claimable_reward_write(address _addr, address _token) external returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary CurveMetaLibrary {\\r\\n\\r\\n    function swapByIndex(\\r\\n        int128  indexIn,\\r\\n        int128  indexOut,\\r\\n        bool isUnderlying,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountMinOut,\\r\\n        address meta,\\r\\n        address pool\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 backAmount;\\r\\n        if (isUnderlying) {\\r\\n            backAmount = IMetaSwapPool(meta).exchange_underlying(\\r\\n                pool,\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        } else {\\r\\n            backAmount = IMetaSwapPool(meta).exchange(\\r\\n                pool,\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return backAmount;\\r\\n    }\\r\\n\\r\\n    function getAmountOutByIndex(\\r\\n        int128 indexIn,\\r\\n        int128 indexOut,\\r\\n        bool isUnderlying,\\r\\n        uint256 amountIn,\\r\\n        address meta,\\r\\n        address pool\\r\\n    ) internal view returns (uint256) {\\r\\n        if (isUnderlying) {\\r\\n            return IMetaSwapPool(meta).get_dy_underlying(pool,indexIn, indexOut, amountIn);\\r\\n        } else {\\r\\n            return IMetaSwapPool(meta).get_dy(pool,indexIn, indexOut, amountIn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary CurveLibrary {\\r\\n\\r\\n    function singleSwap(\\r\\n        address curveExchange,\\r\\n        address token0,\\r\\n        address pool0,\\r\\n        address token1,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1Out\\r\\n    ) internal returns (uint256) {\\r\\n        IERC20(token0).approve(curveExchange, amount0);\\r\\n        return ICurveExchange(curveExchange).exchange(pool0, token0, token1, amount0, amount1Out);\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        address curveExchange,\\r\\n        address token0,\\r\\n        address pool0,\\r\\n        address token1,\\r\\n        address pool1,\\r\\n        address token2,\\r\\n        uint256 amount0,\\r\\n        uint256 amount2Out\\r\\n    ) internal returns (uint256) {\\r\\n        IERC20(token0).approve(curveExchange, amount0);\\r\\n        address[9] memory route;\\r\\n        route[0] = token0;\\r\\n        route[1] = pool0;\\r\\n        route[2] = token1;\\r\\n        route[3] = pool1;\\r\\n        route[4] = token2;\\r\\n        uint256[3][4] memory swap_params;\\r\\n        return ICurveExchange(curveExchange).exchange_multiple(route, swap_params, amount0, amount2Out);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountMinOut\\r\\n    ) internal returns (uint256) {\\r\\n        IERC20(tokenIn).approve(pool, amountIn);\\r\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(pool, tokenIn, tokenOut);\\r\\n\\r\\n        uint256 backAmount;\\r\\n        if (isUnderlying) {\\r\\n            backAmount = IStableSwapPool(pool).exchange_underlying(\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        } else {\\r\\n            backAmount = IStableSwapPool(pool).exchange(\\r\\n                indexIn,\\r\\n                indexOut,\\r\\n                amountIn,\\r\\n                amountMinOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return backAmount;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn\\r\\n    ) internal view returns (uint256) {\\r\\n        (int128 indexIn, int128 indexOut, bool isUnderlying) = getIndexes(pool, tokenIn, tokenOut);\\r\\n        if (isUnderlying) {\\r\\n            return IStableSwapPool(pool).get_dy_underlying(indexIn, indexOut, amountIn);\\r\\n        } else {\\r\\n            return IStableSwapPool(pool).get_dy(indexIn, indexOut, amountIn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getIndexes(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        address tokenOut\\r\\n    ) internal view returns (int128, int128, bool) {\\r\\n        int128 indexIn = type(int128).max;\\r\\n        int128 indexOut = type(int128).max;\\r\\n\\r\\n        // search in coins list\\r\\n        uint256 i;\\r\\n        while (true) {\\r\\n            address token = getCoin(pool, i);\\r\\n            if (token == address(0)) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            if (token == tokenIn) {\\r\\n                indexIn = int128(uint128(i));\\r\\n            } else if (token == tokenOut) {\\r\\n                indexOut = int128(uint128(i));\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n\\r\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\r\\n            return (indexIn, indexOut, false);\\r\\n        }\\r\\n\\r\\n        if (indexIn != type(int128).max || indexOut != type(int128).max) {\\r\\n            // one of tokens found in coins but not found another - it is incorrect\\r\\n            // setup case for token pairs\\r\\n            revert(\\\"CurveSP: incorrect token pair setup\\\");\\r\\n        }\\r\\n\\r\\n        // search in underlying coins list\\r\\n        i = 0;\\r\\n        while (true) {\\r\\n            address token = getUnderlyingCoin(pool, i);\\r\\n            if (token == address(0)) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            if (token == tokenIn) {\\r\\n                indexIn = int128(uint128(i));\\r\\n            } else if (token == tokenOut) {\\r\\n                indexOut = int128(uint128(i));\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n\\r\\n        if (indexIn != type(int128).max && indexOut != type(int128).max) {\\r\\n            return (indexIn, indexOut, true);\\r\\n        }\\r\\n\\r\\n        revert(\\\"CurveSP: Can't find index for tokens in pool\\\");\\r\\n    }\\r\\n\\r\\n    function getCoin(address pool, uint256 index) internal view returns (address) {\\r\\n        try IStableSwapPool(pool).coins(index) returns (address tokenAddress) {\\r\\n            return tokenAddress;\\r\\n        } catch {}\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getUnderlyingCoin(address pool, uint256 index) internal view returns (address) {\\r\\n        try IStableSwapPool(pool).underlying_coins(index) returns (address tokenAddress) {\\r\\n            return tokenAddress;\\r\\n        } catch {}\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountToSwap(\\r\\n        address pool,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amount0) {\\r\\n        amount0 = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = getAmountOut(pool, token0, token1, amount0);\\r\\n            amount0 = (amount0Total * reserve1) / (reserve0 * amount1 / amount0 + reserve1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function getAmountLpTokens(\\r\\n        address pool,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Total,\\r\\n        uint256 totalAmountLpTokens,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision\\r\\n    ) internal view returns (uint256 amountLpTokens) {\\r\\n        amountLpTokens = (totalAmountLpTokens * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            uint256 amount1 = reserve1 * amountLpTokens / totalAmountLpTokens;\\r\\n            uint256 amount0 = getAmountOut(pool, token1, token0, amount1);\\r\\n            amountLpTokens = (totalAmountLpTokens * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x89b1fc2bf1e020fdd02fbf8c7e3ef0da8990369cc6f826b66e616037bc1b652f\",\"license\":\"GPL-3.0-or-later\"},\"@overnight-contracts/core/contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IControlRole.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n    uint256 public swapSlippageBP;\\r\\n    uint256 public navSlippageBP;\\r\\n    uint256 public stakeSlippageBP;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        swapSlippageBP = 20;\\r\\n        navSlippageBP = 20;\\r\\n        stakeSlippageBP = 4;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortfolioAgent() {\\r\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) ||\\r\\n            IControlRole(portfolioManager).hasRole(PORTFOLIO_AGENT_ROLE, msg.sender) , \\\"Restricted to PORTFOLIO_AGENT_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n    function setSlippages(\\r\\n        uint256 _swapSlippageBP,\\r\\n        uint256 _navSlippageBP,\\r\\n        uint256 _stakeSlippageBP\\r\\n    ) public onlyPortfolioAgent {\\r\\n        swapSlippageBP = _swapSlippageBP;\\r\\n        navSlippageBP = _navSlippageBP;\\r\\n        stakeSlippageBP = _stakeSlippageBP;\\r\\n        emit SlippagesUpdated(_swapSlippageBP, _navSlippageBP, _stakeSlippageBP);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyPortfolioManager {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        emit Stake(_amount);\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n\\r\\n        uint256 minNavExpected = OvnMath.subBasisPoints(this.netAssetValue(), navSlippageBP);\\r\\n\\r\\n        uint256 withdrawAmount;\\r\\n        uint256 rewardAmount;\\r\\n        if (_targetIsZero) {\\r\\n            rewardAmount = _claimRewards(_beneficiary);\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        require(this.netAssetValue() >= minNavExpected, \\\"Strategy NAV less than expected\\\");\\r\\n\\r\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\r\\n\\r\\n        emit Unstake(_amount, withdrawAmount);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 rewardAmount = _claimRewards(_to);\\r\\n        if (rewardAmount > 0) {\\r\\n            emit Reward(rewardAmount);\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256) {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xdad1bb1765b23745141b982d10052842e49f7c0e2b81077bf4a15fa09896a425\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IControlRole.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IControlRole {\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf45e3261bc0e319aeffb0f00b6843bb6398a044dd710794a5f8088a426ca84c\"},\"@overnight-contracts/core/contracts/interfaces/IHedgeExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IHedgeExchanger {\\r\\n\\r\\n    function buy(uint256 _amount, string calldata referral) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 _amount) external returns (uint256);\\r\\n\\r\\n}\",\"keccak256\":\"0x8908f27ea216aa4ca36f4c0b772bd22815efce9af4b83c83c21c4f391c9e55fa\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool targetIsZero\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function netAssetValue() external view returns (uint256);\\r\\n\\r\\n    function liquidationValue() external view returns (uint256);\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xf24a033c2df4207da5f2cdcf30ae65632f0063483573ddaeb92a766f8d6556d0\",\"license\":\"GPL-3.0\"},\"contracts/dai/StrategyEtsDaiUsdt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@overnight-contracts/core/contracts/Strategy.sol\\\";\\r\\nimport \\\"@overnight-contracts/core/contracts/interfaces/IHedgeExchanger.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Curve.sol\\\";\\r\\n\\r\\n\\r\\ncontract StrategyEtsDaiUsdt is Strategy {\\r\\n\\r\\n    // --- params\\r\\n\\r\\n    IERC20 public dai;\\r\\n    IERC20 public usdt;\\r\\n\\r\\n    IERC20 public rebaseToken;\\r\\n    IHedgeExchanger public hedgeExchanger;\\r\\n\\r\\n    IPriceFeed public oracleDai;\\r\\n    IPriceFeed public oracleUsdt;\\r\\n\\r\\n    uint256 public daiDm;\\r\\n    uint256 public usdtDm;\\r\\n\\r\\n    address public curve3Pool;\\r\\n\\r\\n\\r\\n    // --- events\\r\\n    event StrategyUpdatedParams();\\r\\n\\r\\n\\r\\n    // --- structs\\r\\n\\r\\n    struct StrategyParams {\\r\\n        address dai;\\r\\n        address usdt;\\r\\n        address rebaseToken;\\r\\n        address hedgeExchanger;\\r\\n        address oracleDai;\\r\\n        address oracleUsdt;\\r\\n        address curve3Pool;\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setParams(StrategyParams calldata params) external onlyAdmin {\\r\\n        dai = IERC20(params.dai);\\r\\n        usdt = IERC20(params.usdt);\\r\\n\\r\\n        rebaseToken = IERC20(params.rebaseToken);\\r\\n        hedgeExchanger = IHedgeExchanger(params.hedgeExchanger);\\r\\n\\r\\n        oracleDai = IPriceFeed(params.oracleDai);\\r\\n        oracleUsdt = IPriceFeed(params.oracleUsdt);\\r\\n\\r\\n        daiDm = 10 ** IERC20Metadata(params.dai).decimals();\\r\\n        usdtDm = 10 ** IERC20Metadata(params.usdt).decimals();\\r\\n\\r\\n        curve3Pool = params.curve3Pool;\\r\\n\\r\\n        emit StrategyUpdatedParams();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n\\r\\n        // swap dai to usdt\\r\\n        uint256 usdtMinAmount = OvnMath.subBasisPoints(_oracleDaiToUsdt(_amount), swapSlippageBP) - 10;\\r\\n        CurveLibrary.swap(\\r\\n            curve3Pool,\\r\\n            address(dai),\\r\\n            address(usdt),\\r\\n            _amount,\\r\\n            usdtMinAmount\\r\\n        );\\r\\n\\r\\n        // buy\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        usdt.approve(address(hedgeExchanger), usdtBalance);\\r\\n        hedgeExchanger.buy(usdtBalance, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        // add for unstake more than requested\\r\\n        uint256 rebaseTokenAmount = OvnMath.addBasisPoints(_oracleDaiToUsdt(_amount), swapSlippageBP) + 10;\\r\\n        uint256 rebaseTokenBalance = rebaseToken.balanceOf(address(this));\\r\\n        if (rebaseTokenAmount > rebaseTokenBalance) {\\r\\n            rebaseTokenAmount = rebaseTokenBalance;\\r\\n        }\\r\\n\\r\\n        // redeem\\r\\n        rebaseToken.approve(address(hedgeExchanger), rebaseTokenAmount);\\r\\n        hedgeExchanger.redeem(rebaseTokenAmount);\\r\\n\\r\\n        // swap usdt to dai\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        uint256 daiMinAmount = OvnMath.subBasisPoints(_oracleUsdtToDai(usdtBalance), swapSlippageBP);\\r\\n        CurveLibrary.swap(\\r\\n            curve3Pool,\\r\\n            address(usdt),\\r\\n            address(dai),\\r\\n            usdtBalance,\\r\\n            daiMinAmount\\r\\n        );\\r\\n\\r\\n        return dai.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        // redeem\\r\\n        uint256 rebaseTokenBalance = rebaseToken.balanceOf(address(this));\\r\\n        rebaseToken.approve(address(hedgeExchanger), rebaseTokenBalance);\\r\\n        hedgeExchanger.redeem(rebaseTokenBalance);\\r\\n\\r\\n        // swap usdt to dai\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        uint256 daiMinAmount = OvnMath.subBasisPoints(_oracleUsdtToDai(usdtBalance), swapSlippageBP);\\r\\n        CurveLibrary.swap(\\r\\n            curve3Pool,\\r\\n            address(usdt),\\r\\n            address(dai),\\r\\n            usdtBalance,\\r\\n            daiMinAmount\\r\\n        );\\r\\n\\r\\n        return dai.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external view override returns (uint256) {\\r\\n        return _totalValue(true);\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external view override returns (uint256) {\\r\\n        return _totalValue(false);\\r\\n    }\\r\\n\\r\\n    function _totalValue(bool nav) internal view returns (uint256) {\\r\\n        uint256 daiBalance = dai.balanceOf(address(this));\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this)) + rebaseToken.balanceOf(address(this));\\r\\n\\r\\n        if (usdtBalance > 0) {\\r\\n            if (nav) {\\r\\n                daiBalance += _oracleUsdtToDai(usdtBalance);\\r\\n            } else {\\r\\n                daiBalance += OvnMath.subBasisPoints(_oracleUsdtToDai(usdtBalance), swapSlippageBP);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return daiBalance;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _beneficiary) internal override returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _oracleUsdtToDai(uint256 usdtAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdt = uint256(oracleUsdt.latestAnswer());\\r\\n        uint256 priceDai = uint256(oracleDai.latestAnswer());\\r\\n        return ChainlinkLibrary.convertTokenToToken(usdtAmount, usdtDm, daiDm, priceUsdt, priceDai);\\r\\n    }\\r\\n\\r\\n    function _oracleDaiToUsdt(uint256 daiAmount) internal view returns (uint256) {\\r\\n        uint256 priceUsdt = uint256(oracleUsdt.latestAnswer());\\r\\n        uint256 priceDai = uint256(oracleDai.latestAnswer());\\r\\n        return ChainlinkLibrary.convertTokenToToken(daiAmount, daiDm, usdtDm, priceDai, priceUsdt);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x55f1b767f9eb0f9719aec0966e69add6ef685b14ab514c8a5a31f769a3e9f49f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b6200156c1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6135f86200018e6000396000818161073401528181610774015281816108140152818161085401526108e301526135f86000f3fe6080604052600436106101f95760003560e01c806363a6b1da1161010d578063a440b21a116100a0578063cc6522c31161006f578063cc6522c314610592578063d547741f146105b3578063ef5cfb8c146105d3578063f4b9fa75146105f3578063f6f6b8811461061457600080fd5b8063a440b21a1461051c578063adc9772e1461053c578063ae30c1101461055c578063bf52e0801461057c57600080fd5b80638129fc1c116100dc5780638129fc1c146104bd57806391d14854146104d2578063a217fddf146104f2578063a3673b381461050757600080fd5b806363a6b1da146104435780636ef6b24e146104645780637d5f580214610484578063811766fa146104a657600080fd5b806336568abe1161019057806352d1902d1161015f57806352d1902d146103a35780635ca558f8146103b85780635dbd733a146103ce5780635f07c5f314610402578063620b75df1461042357600080fd5b806336568abe1461032f5780633659cfe61461034f5780633e5e3b801461036f5780634f1ef2861461039057600080fd5b806324ce2735116101cc57806324ce27351461029e5780632576e65a146102d75780632f2ff15d146102ec5780632f48ab7d1461030e57600080fd5b806301ffc9a7146101fe5780630f9033f714610233578063119cd87914610258578063248a9ca31461026e575b600080fd5b34801561020a57600080fd5b5061021e6102193660046130c8565b610634565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061024a6101345481565b60405190815260200161022a565b34801561026457600080fd5b5061024a60fd5481565b34801561027a57600080fd5b5061024a610289366004613066565b60009081526065602052604090206001015490565b3480156102aa57600080fd5b5061012f546102bf906001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b3480156102e357600080fd5b5061024a61066b565b3480156102f857600080fd5b5061030c610307366004613098565b61067c565b005b34801561031a57600080fd5b5061012e546102bf906001600160a01b031681565b34801561033b57600080fd5b5061030c61034a366004613098565b6106a6565b34801561035b57600080fd5b5061030c61036a366004612ecc565b610729565b34801561037b57600080fd5b50610130546102bf906001600160a01b031681565b61030c61039e366004612f06565b610809565b3480156103af57600080fd5b5061024a6108d6565b3480156103c457600080fd5b5061024a60fe5481565b3480156103da57600080fd5b5061024a7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561040e57600080fd5b50610131546102bf906001600160a01b031681565b34801561042f57600080fd5b5060fb546102bf906001600160a01b031681565b34801561044f57600080fd5b50610135546102bf906001600160a01b031681565b34801561047057600080fd5b5061030c61047f3660046130f2565b610989565b34801561049057600080fd5b5061024a60008051602061355c83398151915281565b3480156104b257600080fd5b5061024a6101335481565b3480156104c957600080fd5b5061030c610c72565b3480156104de57600080fd5b5061021e6104ed366004613098565b610d3c565b3480156104fe57600080fd5b5061024a600081565b34801561051357600080fd5b5061024a610d67565b34801561052857600080fd5b5061030c610537366004612ecc565b610d73565b34801561054857600080fd5b5061030c610557366004612fca565b610ea2565b34801561056857600080fd5b5061030c61057736600461310a565b6110d2565b34801561058857600080fd5b5061024a60fc5481565b34801561059e57600080fd5b50610132546102bf906001600160a01b031681565b3480156105bf57600080fd5b5061030c6105ce366004613098565b611247565b3480156105df57600080fd5b5061024a6105ee366004612ecc565b61126c565b3480156105ff57600080fd5b5061012d546102bf906001600160a01b031681565b34801561062057600080fd5b5061024a61062f366004612ff6565b6112a9565b60006001600160e01b03198216637965db0b60e01b148061066557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610677600061157b565b905090565b60008281526065602052604090206001015461069781611754565b6106a1838361175e565b505050565b6001600160a01b038116331461071b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61072582826117e4565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107725760405162461bcd60e51b815260040161071290613254565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107bb60008051602061357c833981519152546001600160a01b031690565b6001600160a01b0316146107e15760405162461bcd60e51b8152600401610712906132a0565b6107ea8161184b565b6040805160008082526020820190925261080691839190611856565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108525760405162461bcd60e51b815260040161071290613254565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089b60008051602061357c833981519152546001600160a01b031690565b6001600160a01b0316146108c15760405162461bcd60e51b8152600401610712906132a0565b6108ca8261184b565b61072582826001611856565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109765760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610712565b5060008051602061357c83398151915290565b610994600033610d3c565b6109d75760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610712565b6109e46020820182612ecc565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610a156040820160208301612ecc565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610a466060820160408301612ecc565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610a776080820160608301612ecc565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610aa860a0820160808301612ecc565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610ad960c0820160a08301612ecc565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610b076020820182612ecc565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b779190613136565b610b8290600a6133b7565b61013355610b966040820160208301612ecc565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c069190613136565b610c1190600a6133b7565b61013455610c2560e0820160c08301612ecc565b61013580546001600160a01b0319166001600160a01b03929092169190911790556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b600054610100900460ff1615808015610c925750600054600160ff909116105b80610cac5750303b158015610cac575060005460ff166001145b610cc85760405162461bcd60e51b8152600401610712906132ec565b6000805460ff191660011790558015610ceb576000805461ff0019166101001790555b610cf36119d0565b8015610806576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610677600161157b565b610d7e600033610d3c565b610dc15760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610712565b6001600160a01b038116610e175760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610712565b60fb54610e3c9060008051602061355c833981519152906001600160a01b0316611247565b610e5460008051602061355c8339815191528261067c565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610d31565b610eba60008051602061355c83398151915233610d3c565b610ed65760405162461bcd60e51b81526004016107129061321d565b6000610f54306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1457600080fd5b505afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c919061307f565b60fd54611ab5565b6040516370a0823160e01b8152306004820152909150610fd99084906001600160a01b038216906370a082319060240160206040518083038186803b158015610f9c57600080fd5b505afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd4919061307f565b611adf565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b919061307f565b10156110995760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610712565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6110fc7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610d3c565b806111a3575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a39190613049565b6111fa5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b6064820152608401610712565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a906060016110c5565b60008281526065602052604090206001015461126281611754565b6106a183836117e4565b600061128660008051602061355c83398151915233610d3c565b6112a25760405162461bcd60e51b81526004016107129061321d565b6000610665565b60006112c360008051602061355c83398151915233610d3c565b6112df5760405162461bcd60e51b81526004016107129061321d565b600061131d306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1457600080fd5b9050600080841561133c575060006113358887611cc5565b91506113ab565b611347888888611f92565b9150868210156113ab5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610712565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d919061307f565b101561146b5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610712565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb90604401602060405180830381600087803b1580156114b557600080fd5b505af11580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190613049565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611561576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115c457600080fd5b505afa1580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc919061307f565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561164657600080fd5b505afa15801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e919061307f565b61012e546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116c257600080fd5b505afa1580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa919061307f565b611704919061333a565b9050801561174d57831561172c5761171b81612290565b611725908361333a565b915061174d565b61174061173882612290565b60fc54611ab5565b61174a908361333a565b91505b5092915050565b61080681336123c2565b6117688282610d3c565b6107255760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117a03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117ee8282610d3c565b156107255760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061072581611754565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611889576106a18361241b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c257600080fd5b505afa9250505080156118f2575060408051601f3d908101601f191682019092526118ef9181019061307f565b60015b6119555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610712565b60008051602061357c83398151915281146119c45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610712565b506106a18383836124b7565b600054610100900460ff16158080156119f05750600054600160ff909116105b80611a0a5750303b158015611a0a575060005460ff166001145b611a265760405162461bcd60e51b8152600401610712906132ec565b6000805460ff191660011790558015611a49576000805461ff0019166101001790555b611a516124e2565b611a596124e2565b611a6460003361175e565b601460fc81905560fd55600460fe558015610806576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610d31565b6000612710611ac48382613481565b611ace9085613462565b611ad89190613352565b9392505050565b6000600a611aef6117388461254f565b611af99190613481565b6101355461012d5461012e54929350611b24926001600160a01b039283169291821691168585612679565b5061012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611b6a57600080fd5b505afa158015611b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba2919061307f565b61012e546101305460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611bf657600080fd5b505af1158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2e9190613049565b5061013054604080516316fb876360e31b8152600481018490526024810191909152600060448201526001600160a01b039091169063b7dc3b1890606401602060405180830381600087803b158015611c8657600080fd5b505af1158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe919061307f565b5050505050565b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d46919061307f565b61012f546101305460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd29190613049565b506101305460405163db006a7560e01b8152600481018390526001600160a01b039091169063db006a7590602401602060405180830381600087803b158015611e1a57600080fd5b505af1158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e52919061307f565b5061012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e9857600080fd5b505afa158015611eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed0919061307f565b90506000611ee061173883612290565b6101355461012e5461012d54929350611f0b926001600160a01b039283169291821691168585612679565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611f5057600080fd5b505afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f88919061307f565b9695505050505050565b600080611fa9611fa18561254f565b60fc5461285b565b611fb490600a61333a565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ffe57600080fd5b505afa158015612012573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612036919061307f565b905080821115612044578091505b61012f546101305460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561209657600080fd5b505af11580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190613049565b506101305460405163db006a7560e01b8152600481018490526001600160a01b039091169063db006a7590602401602060405180830381600087803b15801561211657600080fd5b505af115801561212a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e919061307f565b5061012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc919061307f565b905060006121dc61173883612290565b6101355461012e5461012d54929350612207926001600160a01b039283169291821691168585612679565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561224c57600080fd5b505afa158015612260573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612284919061307f565b98975050505050505050565b60008061013260009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e257600080fd5b505afa1580156122f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231a919061307f565b9050600061013160009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561236d57600080fd5b505afa158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a5919061307f565b90506123ba846101345461013354858561286a565b949350505050565b6123cc8282610d3c565b610725576123d981612895565b6123e48360206128a7565b6040516020016123f5929190613175565b60408051601f198184030181529082905262461bcd60e51b8252610712916004016131ea565b6001600160a01b0381163b6124885760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610712565b60008051602061357c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6124c083612a43565b6000825111806124cd5750805b156106a1576124dc8383612a83565b50505050565b600054610100900460ff1661254d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610712565b565b60008061013260009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a157600080fd5b505afa1580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d9919061307f565b9050600061013160009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262c57600080fd5b505afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612664919061307f565b90506123ba846101335461013454848661286a565b60405163095ea7b360e01b81526001600160a01b038681166004830152602482018490526000919086169063095ea7b390604401602060405180830381600087803b1580156126c757600080fd5b505af11580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff9190613049565b506000806000612710898989612b77565b925092509250600081156127b857604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b169063a6417ed690608401602060405180830381600087803b15801561277957600080fd5b505af115801561278d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b1919061307f565b905061284e565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b1690633df0212490608401602060405180830381600087803b15801561281357600080fd5b505af1158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b919061307f565b90505b9998505050505050505050565b6000612710611ac4838261333a565b60006128768286613462565b836128818689613462565b61288b9190613462565b611f889190613352565b60606106656001600160a01b03831660145b606060006128b6836002613462565b6128c190600261333a565b67ffffffffffffffff8111156128d9576128d9613522565b6040519080825280601f01601f191660200182016040528015612903576020820181803683370190505b509050600360fc1b8160008151811061291e5761291e61350c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061294d5761294d61350c565b60200101906001600160f81b031916908160001a9053506000612971846002613462565b61297c90600161333a565b90505b60018111156129f4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129b0576129b061350c565b1a60f81b8282815181106129c6576129c661350c565b60200101906001600160f81b031916908160001a90535060049490941c936129ed816134c4565b905061297f565b508315611ad85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610712565b612a4c8161241b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612aeb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610712565b600080846001600160a01b031684604051612b069190613159565b600060405180830381855af49150503d8060008114612b41576040519150601f19603f3d011682016040523d82523d6000602084013e612b46565b606091505b5091509150612b6e828260405180606001604052806027815260200161359c60279139612dcc565b95945050505050565b6000808060016001607f1b0380825b6000612b928a83612de5565b90506001600160a01b038116612ba85750612bfb565b886001600160a01b0316816001600160a01b03161415612bca57819350612be8565b876001600160a01b0316816001600160a01b03161415612be8578192505b81612bf2816134db565b92505050612b86565b600f83900b60016001607f1b0314801590612c215750600f82900b60016001607f1b0314155b15612c355750909350915060009050612dc3565b600f83900b60016001607f1b03141580612c5a5750600f82900b60016001607f1b0314155b15612cb35760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b6064820152608401610712565b5060005b6000612cc38a83612e72565b90506001600160a01b038116612cd95750612d2c565b886001600160a01b0316816001600160a01b03161415612cfb57819350612d19565b876001600160a01b0316816001600160a01b03161415612d19578192505b81612d23816134db565b92505050612cb7565b600f83900b60016001607f1b0314801590612d525750600f82900b60016001607f1b0314155b15612d665750909350915060019050612dc3565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b6064820152608401610712565b93509350939050565b60608315612ddb575081611ad8565b611ad88383612ea2565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b158015612e2957600080fd5b505afa925050508015612e59575060408051601f3d908101601f19168201909252612e5691810190612ee9565b60015b612e6257612e69565b9050610665565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb090602401612e11565b815115612eb25781518083602001fd5b8060405162461bcd60e51b815260040161071291906131ea565b600060208284031215612ede57600080fd5b8135611ad881613538565b600060208284031215612efb57600080fd5b8151611ad881613538565b60008060408385031215612f1957600080fd5b8235612f2481613538565b9150602083013567ffffffffffffffff80821115612f4157600080fd5b818501915085601f830112612f5557600080fd5b813581811115612f6757612f67613522565b604051601f8201601f19908116603f01168101908382118183101715612f8f57612f8f613522565b81604052828152886020848701011115612fa857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612fdd57600080fd5b8235612fe881613538565b946020939093013593505050565b6000806000806080858703121561300c57600080fd5b843561301781613538565b935060208501359250604085013561302e81613538565b9150606085013561303e8161354d565b939692955090935050565b60006020828403121561305b57600080fd5b8151611ad88161354d565b60006020828403121561307857600080fd5b5035919050565b60006020828403121561309157600080fd5b5051919050565b600080604083850312156130ab57600080fd5b8235915060208301356130bd81613538565b809150509250929050565b6000602082840312156130da57600080fd5b81356001600160e01b031981168114611ad857600080fd5b600060e0828403121561310457600080fd5b50919050565b60008060006060848603121561311f57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561314857600080fd5b815160ff81168114611ad857600080fd5b6000825161316b818460208701613498565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516131ad816017850160208801613498565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131de816028840160208801613498565b01602801949350505050565b6020815260008251806020840152613209816040850160208701613498565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561334d5761334d6134f6565b500190565b60008261336f57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156133af578160001904821115613395576133956134f6565b808516156133a257918102915b93841c9390800290613379565b509250929050565b6000611ad860ff8416836000826133d057506001610665565b816133dd57506000610665565b81600181146133f357600281146133fd57613419565b6001915050610665565b60ff84111561340e5761340e6134f6565b50506001821b610665565b5060208310610133831016604e8410600b841016171561343c575081810a610665565b6134468383613374565b806000190482111561345a5761345a6134f6565b029392505050565b600081600019048311821515161561347c5761347c6134f6565b500290565b600082821015613493576134936134f6565b500390565b60005b838110156134b357818101518382015260200161349b565b838111156124dc5750506000910152565b6000816134d3576134d36134f6565b506000190190565b60006000198214156134ef576134ef6134f6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461080657600080fd5b801515811461080657600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e0f4c544b66b8b8cdbdc4234e5583851bb4731150e188524664e7781bc0938f664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806363a6b1da1161010d578063a440b21a116100a0578063cc6522c31161006f578063cc6522c314610592578063d547741f146105b3578063ef5cfb8c146105d3578063f4b9fa75146105f3578063f6f6b8811461061457600080fd5b8063a440b21a1461051c578063adc9772e1461053c578063ae30c1101461055c578063bf52e0801461057c57600080fd5b80638129fc1c116100dc5780638129fc1c146104bd57806391d14854146104d2578063a217fddf146104f2578063a3673b381461050757600080fd5b806363a6b1da146104435780636ef6b24e146104645780637d5f580214610484578063811766fa146104a657600080fd5b806336568abe1161019057806352d1902d1161015f57806352d1902d146103a35780635ca558f8146103b85780635dbd733a146103ce5780635f07c5f314610402578063620b75df1461042357600080fd5b806336568abe1461032f5780633659cfe61461034f5780633e5e3b801461036f5780634f1ef2861461039057600080fd5b806324ce2735116101cc57806324ce27351461029e5780632576e65a146102d75780632f2ff15d146102ec5780632f48ab7d1461030e57600080fd5b806301ffc9a7146101fe5780630f9033f714610233578063119cd87914610258578063248a9ca31461026e575b600080fd5b34801561020a57600080fd5b5061021e6102193660046130c8565b610634565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061024a6101345481565b60405190815260200161022a565b34801561026457600080fd5b5061024a60fd5481565b34801561027a57600080fd5b5061024a610289366004613066565b60009081526065602052604090206001015490565b3480156102aa57600080fd5b5061012f546102bf906001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b3480156102e357600080fd5b5061024a61066b565b3480156102f857600080fd5b5061030c610307366004613098565b61067c565b005b34801561031a57600080fd5b5061012e546102bf906001600160a01b031681565b34801561033b57600080fd5b5061030c61034a366004613098565b6106a6565b34801561035b57600080fd5b5061030c61036a366004612ecc565b610729565b34801561037b57600080fd5b50610130546102bf906001600160a01b031681565b61030c61039e366004612f06565b610809565b3480156103af57600080fd5b5061024a6108d6565b3480156103c457600080fd5b5061024a60fe5481565b3480156103da57600080fd5b5061024a7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561040e57600080fd5b50610131546102bf906001600160a01b031681565b34801561042f57600080fd5b5060fb546102bf906001600160a01b031681565b34801561044f57600080fd5b50610135546102bf906001600160a01b031681565b34801561047057600080fd5b5061030c61047f3660046130f2565b610989565b34801561049057600080fd5b5061024a60008051602061355c83398151915281565b3480156104b257600080fd5b5061024a6101335481565b3480156104c957600080fd5b5061030c610c72565b3480156104de57600080fd5b5061021e6104ed366004613098565b610d3c565b3480156104fe57600080fd5b5061024a600081565b34801561051357600080fd5b5061024a610d67565b34801561052857600080fd5b5061030c610537366004612ecc565b610d73565b34801561054857600080fd5b5061030c610557366004612fca565b610ea2565b34801561056857600080fd5b5061030c61057736600461310a565b6110d2565b34801561058857600080fd5b5061024a60fc5481565b34801561059e57600080fd5b50610132546102bf906001600160a01b031681565b3480156105bf57600080fd5b5061030c6105ce366004613098565b611247565b3480156105df57600080fd5b5061024a6105ee366004612ecc565b61126c565b3480156105ff57600080fd5b5061012d546102bf906001600160a01b031681565b34801561062057600080fd5b5061024a61062f366004612ff6565b6112a9565b60006001600160e01b03198216637965db0b60e01b148061066557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610677600061157b565b905090565b60008281526065602052604090206001015461069781611754565b6106a1838361175e565b505050565b6001600160a01b038116331461071b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61072582826117e4565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107725760405162461bcd60e51b815260040161071290613254565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107bb60008051602061357c833981519152546001600160a01b031690565b6001600160a01b0316146107e15760405162461bcd60e51b8152600401610712906132a0565b6107ea8161184b565b6040805160008082526020820190925261080691839190611856565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108525760405162461bcd60e51b815260040161071290613254565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089b60008051602061357c833981519152546001600160a01b031690565b6001600160a01b0316146108c15760405162461bcd60e51b8152600401610712906132a0565b6108ca8261184b565b61072582826001611856565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109765760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610712565b5060008051602061357c83398151915290565b610994600033610d3c565b6109d75760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610712565b6109e46020820182612ecc565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610a156040820160208301612ecc565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610a466060820160408301612ecc565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610a776080820160608301612ecc565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610aa860a0820160808301612ecc565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610ad960c0820160a08301612ecc565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610b076020820182612ecc565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b779190613136565b610b8290600a6133b7565b61013355610b966040820160208301612ecc565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c069190613136565b610c1190600a6133b7565b61013455610c2560e0820160c08301612ecc565b61013580546001600160a01b0319166001600160a01b03929092169190911790556040517fea5646eb3528e525944447a4a97de700dd472298626e5c0481d1c82c3da86ea590600090a150565b600054610100900460ff1615808015610c925750600054600160ff909116105b80610cac5750303b158015610cac575060005460ff166001145b610cc85760405162461bcd60e51b8152600401610712906132ec565b6000805460ff191660011790558015610ceb576000805461ff0019166101001790555b610cf36119d0565b8015610806576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610677600161157b565b610d7e600033610d3c565b610dc15760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610712565b6001600160a01b038116610e175760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f77656400000000000000006044820152606401610712565b60fb54610e3c9060008051602061355c833981519152906001600160a01b0316611247565b610e5460008051602061355c8339815191528261067c565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610d31565b610eba60008051602061355c83398151915233610d3c565b610ed65760405162461bcd60e51b81526004016107129061321d565b6000610f54306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1457600080fd5b505afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c919061307f565b60fd54611ab5565b6040516370a0823160e01b8152306004820152909150610fd99084906001600160a01b038216906370a082319060240160206040518083038186803b158015610f9c57600080fd5b505afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd4919061307f565b611adf565b80306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b919061307f565b10156110995760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610712565b6040518281527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a906020015b60405180910390a1505050565b6110fc7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610d3c565b806111a3575060fb54604051632474521560e21b81527fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913760048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a39190613049565b6111fa5760405162461bcd60e51b815260206004820152602260248201527f5265737472696374656420746f20504f5254464f4c494f5f4147454e545f524f6044820152614c4560f01b6064820152608401610712565b60fc83905560fd82905560fe81905560408051848152602081018490529081018290527f116fbf1e97a2be629ad98abfb6c332733c8996c2dfb174dd2efe8440df381d1a906060016110c5565b60008281526065602052604090206001015461126281611754565b6106a183836117e4565b600061128660008051602061355c83398151915233610d3c565b6112a25760405162461bcd60e51b81526004016107129061321d565b6000610665565b60006112c360008051602061355c83398151915233610d3c565b6112df5760405162461bcd60e51b81526004016107129061321d565b600061131d306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1457600080fd5b9050600080841561133c575060006113358887611cc5565b91506113ab565b611347888888611f92565b9150868210156113ab5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610712565b82306001600160a01b031663a3673b386040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d919061307f565b101561146b5760405162461bcd60e51b815260206004820152601f60248201527f5374726174656779204e4156206c657373207468616e206578706563746564006044820152606401610712565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905289169063a9059cbb90604401602060405180830381600087803b1580156114b557600080fd5b505af11580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190613049565b5060408051888152602081018490527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a18015611561576040518181527f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1349060200160405180910390a15b509695505050505050565b6001600160a01b03163b151590565b61012d546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156115c457600080fd5b505afa1580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc919061307f565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561164657600080fd5b505afa15801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e919061307f565b61012e546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116c257600080fd5b505afa1580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa919061307f565b611704919061333a565b9050801561174d57831561172c5761171b81612290565b611725908361333a565b915061174d565b61174061173882612290565b60fc54611ab5565b61174a908361333a565b91505b5092915050565b61080681336123c2565b6117688282610d3c565b6107255760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117a03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117ee8282610d3c565b156107255760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061072581611754565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611889576106a18361241b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c257600080fd5b505afa9250505080156118f2575060408051601f3d908101601f191682019092526118ef9181019061307f565b60015b6119555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610712565b60008051602061357c83398151915281146119c45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610712565b506106a18383836124b7565b600054610100900460ff16158080156119f05750600054600160ff909116105b80611a0a5750303b158015611a0a575060005460ff166001145b611a265760405162461bcd60e51b8152600401610712906132ec565b6000805460ff191660011790558015611a49576000805461ff0019166101001790555b611a516124e2565b611a596124e2565b611a6460003361175e565b601460fc81905560fd55600460fe558015610806576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610d31565b6000612710611ac48382613481565b611ace9085613462565b611ad89190613352565b9392505050565b6000600a611aef6117388461254f565b611af99190613481565b6101355461012d5461012e54929350611b24926001600160a01b039283169291821691168585612679565b5061012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611b6a57600080fd5b505afa158015611b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba2919061307f565b61012e546101305460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611bf657600080fd5b505af1158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2e9190613049565b5061013054604080516316fb876360e31b8152600481018490526024810191909152600060448201526001600160a01b039091169063b7dc3b1890606401602060405180830381600087803b158015611c8657600080fd5b505af1158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe919061307f565b5050505050565b61012f546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d46919061307f565b61012f546101305460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd29190613049565b506101305460405163db006a7560e01b8152600481018390526001600160a01b039091169063db006a7590602401602060405180830381600087803b158015611e1a57600080fd5b505af1158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e52919061307f565b5061012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611e9857600080fd5b505afa158015611eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed0919061307f565b90506000611ee061173883612290565b6101355461012e5461012d54929350611f0b926001600160a01b039283169291821691168585612679565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611f5057600080fd5b505afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f88919061307f565b9695505050505050565b600080611fa9611fa18561254f565b60fc5461285b565b611fb490600a61333a565b61012f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ffe57600080fd5b505afa158015612012573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612036919061307f565b905080821115612044578091505b61012f546101305460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561209657600080fd5b505af11580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190613049565b506101305460405163db006a7560e01b8152600481018490526001600160a01b039091169063db006a7590602401602060405180830381600087803b15801561211657600080fd5b505af115801561212a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e919061307f565b5061012e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc919061307f565b905060006121dc61173883612290565b6101355461012e5461012d54929350612207926001600160a01b039283169291821691168585612679565b5061012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561224c57600080fd5b505afa158015612260573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612284919061307f565b98975050505050505050565b60008061013260009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e257600080fd5b505afa1580156122f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231a919061307f565b9050600061013160009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561236d57600080fd5b505afa158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a5919061307f565b90506123ba846101345461013354858561286a565b949350505050565b6123cc8282610d3c565b610725576123d981612895565b6123e48360206128a7565b6040516020016123f5929190613175565b60408051601f198184030181529082905262461bcd60e51b8252610712916004016131ea565b6001600160a01b0381163b6124885760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610712565b60008051602061357c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6124c083612a43565b6000825111806124cd5750805b156106a1576124dc8383612a83565b50505050565b600054610100900460ff1661254d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610712565b565b60008061013260009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a157600080fd5b505afa1580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d9919061307f565b9050600061013160009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262c57600080fd5b505afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612664919061307f565b90506123ba846101335461013454848661286a565b60405163095ea7b360e01b81526001600160a01b038681166004830152602482018490526000919086169063095ea7b390604401602060405180830381600087803b1580156126c757600080fd5b505af11580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff9190613049565b506000806000612710898989612b77565b925092509250600081156127b857604051635320bf6b60e11b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b169063a6417ed690608401602060405180830381600087803b15801561277957600080fd5b505af115801561278d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b1919061307f565b905061284e565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101889052606481018790526001600160a01b038b1690633df0212490608401602060405180830381600087803b15801561281357600080fd5b505af1158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b919061307f565b90505b9998505050505050505050565b6000612710611ac4838261333a565b60006128768286613462565b836128818689613462565b61288b9190613462565b611f889190613352565b60606106656001600160a01b03831660145b606060006128b6836002613462565b6128c190600261333a565b67ffffffffffffffff8111156128d9576128d9613522565b6040519080825280601f01601f191660200182016040528015612903576020820181803683370190505b509050600360fc1b8160008151811061291e5761291e61350c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061294d5761294d61350c565b60200101906001600160f81b031916908160001a9053506000612971846002613462565b61297c90600161333a565b90505b60018111156129f4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129b0576129b061350c565b1a60f81b8282815181106129c6576129c661350c565b60200101906001600160f81b031916908160001a90535060049490941c936129ed816134c4565b905061297f565b508315611ad85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610712565b612a4c8161241b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612aeb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610712565b600080846001600160a01b031684604051612b069190613159565b600060405180830381855af49150503d8060008114612b41576040519150601f19603f3d011682016040523d82523d6000602084013e612b46565b606091505b5091509150612b6e828260405180606001604052806027815260200161359c60279139612dcc565b95945050505050565b6000808060016001607f1b0380825b6000612b928a83612de5565b90506001600160a01b038116612ba85750612bfb565b886001600160a01b0316816001600160a01b03161415612bca57819350612be8565b876001600160a01b0316816001600160a01b03161415612be8578192505b81612bf2816134db565b92505050612b86565b600f83900b60016001607f1b0314801590612c215750600f82900b60016001607f1b0314155b15612c355750909350915060009050612dc3565b600f83900b60016001607f1b03141580612c5a5750600f82900b60016001607f1b0314155b15612cb35760405162461bcd60e51b815260206004820152602360248201527f437572766553503a20696e636f727265637420746f6b656e207061697220736560448201526207475760ec1b6064820152608401610712565b5060005b6000612cc38a83612e72565b90506001600160a01b038116612cd95750612d2c565b886001600160a01b0316816001600160a01b03161415612cfb57819350612d19565b876001600160a01b0316816001600160a01b03161415612d19578192505b81612d23816134db565b92505050612cb7565b600f83900b60016001607f1b0314801590612d525750600f82900b60016001607f1b0314155b15612d665750909350915060019050612dc3565b60405162461bcd60e51b815260206004820152602c60248201527f437572766553503a2043616e27742066696e6420696e64657820666f7220746f60448201526b1ad95b9cc81a5b881c1bdbdb60a21b6064820152608401610712565b93509350939050565b60608315612ddb575081611ad8565b611ad88383612ea2565b60405163c661065760e01b8152600481018290526000906001600160a01b0384169063c6610657906024015b60206040518083038186803b158015612e2957600080fd5b505afa925050508015612e59575060408051601f3d908101601f19168201909252612e5691810190612ee9565b60015b612e6257612e69565b9050610665565b50600092915050565b604051630b9947eb60e41b8152600481018290526000906001600160a01b0384169063b9947eb090602401612e11565b815115612eb25781518083602001fd5b8060405162461bcd60e51b815260040161071291906131ea565b600060208284031215612ede57600080fd5b8135611ad881613538565b600060208284031215612efb57600080fd5b8151611ad881613538565b60008060408385031215612f1957600080fd5b8235612f2481613538565b9150602083013567ffffffffffffffff80821115612f4157600080fd5b818501915085601f830112612f5557600080fd5b813581811115612f6757612f67613522565b604051601f8201601f19908116603f01168101908382118183101715612f8f57612f8f613522565b81604052828152886020848701011115612fa857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612fdd57600080fd5b8235612fe881613538565b946020939093013593505050565b6000806000806080858703121561300c57600080fd5b843561301781613538565b935060208501359250604085013561302e81613538565b9150606085013561303e8161354d565b939692955090935050565b60006020828403121561305b57600080fd5b8151611ad88161354d565b60006020828403121561307857600080fd5b5035919050565b60006020828403121561309157600080fd5b5051919050565b600080604083850312156130ab57600080fd5b8235915060208301356130bd81613538565b809150509250929050565b6000602082840312156130da57600080fd5b81356001600160e01b031981168114611ad857600080fd5b600060e0828403121561310457600080fd5b50919050565b60008060006060848603121561311f57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561314857600080fd5b815160ff81168114611ad857600080fd5b6000825161316b818460208701613498565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516131ad816017850160208801613498565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131de816028840160208801613498565b01602801949350505050565b6020815260008251806020840152613209816040850160208701613498565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561334d5761334d6134f6565b500190565b60008261336f57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156133af578160001904821115613395576133956134f6565b808516156133a257918102915b93841c9390800290613379565b509250929050565b6000611ad860ff8416836000826133d057506001610665565b816133dd57506000610665565b81600181146133f357600281146133fd57613419565b6001915050610665565b60ff84111561340e5761340e6134f6565b50506001821b610665565b5060208310610133831016604e8410600b841016171561343c575081810a610665565b6134468383613374565b806000190482111561345a5761345a6134f6565b029392505050565b600081600019048311821515161561347c5761347c6134f6565b500290565b600082821015613493576134936134f6565b500390565b60005b838110156134b357818101518382015260200161349b565b838111156124dc5750506000910152565b6000816134d3576134d36134f6565b506000190190565b60006000198214156134ef576134ef6134f6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461080657600080fd5b801515811461080657600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e0f4c544b66b8b8cdbdc4234e5583851bb4731150e188524664e7781bc0938f664736f6c63430008060033",
  "implementation": "0xC2de28aEAc3d4CA04091468CfE5D6CaB88977694",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4461,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 4463,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "swapSlippageBP",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 4465,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "navSlippageBP",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 4467,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "stakeSlippageBP",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 4852,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 4962,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "dai",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 4965,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "usdt",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 4968,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "rebaseToken",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2662"
      },
      {
        "astId": 4971,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "hedgeExchanger",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IHedgeExchanger)4884"
      },
      {
        "astId": 4974,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "oracleDai",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IPriceFeed)2870"
      },
      {
        "astId": 4977,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "oracleUsdt",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IPriceFeed)2870"
      },
      {
        "astId": 4979,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "daiDm",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 4981,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "usdtDm",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 4983,
        "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
        "label": "curve3Pool",
        "offset": 0,
        "slot": "309",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2662": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHedgeExchanger)4884": {
        "encoding": "inplace",
        "label": "contract IHedgeExchanger",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)2870": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/dai/StrategyEtsDaiUsdt.sol:StrategyEtsDaiUsdt",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}