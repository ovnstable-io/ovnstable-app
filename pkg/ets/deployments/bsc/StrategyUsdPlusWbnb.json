{
  "address": "0xFA8c193168A38911687cFfC511a1ECf465F2E6ee",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TIME_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "borrowed",
              "type": "bool"
            }
          ],
          "internalType": "struct IHedgeStrategy.BalanceItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnbDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busdDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneGauge",
      "outputs": [
        {
          "internalType": "contract IGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conePair",
      "outputs": [
        {
          "internalType": "contract IConePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneRouter",
      "outputs": [
        {
          "internalType": "contract IConeRouter01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coneVoter",
      "outputs": [
        {
          "internalType": "contract IConeVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "control",
      "outputs": [
        {
          "internalType": "contract ControlUsdPlusWbnb",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoBusdWbnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoProxy",
      "outputs": [
        {
          "internalType": "contract IDODOProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "contract IExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippagePercent",
              "type": "uint256"
            }
          ],
          "internalType": "struct Action",
          "name": "action",
          "type": "tuple"
        }
      ],
      "name": "executeAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximillion",
      "outputs": [
        {
          "internalType": "contract Maximillion",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleBusd",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleWbnb",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdPlus",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "busd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wbnb",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vBusdToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vBnbToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unitroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maximillion",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleBusd",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleWbnb",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "conePair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneVoter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneGauge",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coneToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "veCone",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "veConeId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dodoProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dodoBusdWbnb",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dodoApprove",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAssetSlippagePercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "control",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "veDist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "xvsToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pancakeRouter",
              "type": "address"
            }
          ],
          "internalType": "struct StrategyUsdPlusWbnb.SetupParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realHealthFactor",
          "type": "uint256"
        }
      ],
      "name": "setRealHealthFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAssetSlippagePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unitroller",
      "outputs": [
        {
          "internalType": "contract Unitroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPlus",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBnbToken",
      "outputs": [
        {
          "internalType": "contract VenusInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBusdToken",
      "outputs": [
        {
          "internalType": "contract VenusInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veCone",
      "outputs": [
        {
          "internalType": "contract VeCone",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veConeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDist",
      "outputs": [
        {
          "internalType": "contract VeDist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_weights",
          "type": "int256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbnb",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbnbDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xvsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 10,
  "solcInputHash": "a0898c75d788c874d0f200728c0400c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIME_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrowed\",\"type\":\"bool\"}],\"internalType\":\"struct IHedgeStrategy.BalanceItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneGauge\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conePair\",\"outputs\":[{\"internalType\":\"contract IConePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneRouter\",\"outputs\":[{\"internalType\":\"contract IConeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coneVoter\",\"outputs\":[{\"internalType\":\"contract IConeVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"control\",\"outputs\":[{\"internalType\":\"contract ControlUsdPlusWbnb\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoBusdWbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoProxy\",\"outputs\":[{\"internalType\":\"contract IDODOProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippagePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct Action\",\"name\":\"action\",\"type\":\"tuple\"}],\"name\":\"executeAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximillion\",\"outputs\":[{\"internalType\":\"contract Maximillion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleBusd\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleWbnb\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vBusdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vBnbToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unitroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maximillion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleBusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleWbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"conePair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coneToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veCone\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"veConeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoBusdWbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAssetSlippagePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"control\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veDist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xvsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter\",\"type\":\"address\"}],\"internalType\":\"struct StrategyUsdPlusWbnb.SetupParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realHealthFactor\",\"type\":\"uint256\"}],\"name\":\"setRealHealthFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAssetSlippagePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitroller\",\"outputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPlus\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBnbToken\",\"outputs\":[{\"internalType\":\"contract VenusInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBusdToken\",\"outputs\":[{\"internalType\":\"contract VenusInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veCone\",\"outputs\":[{\"internalType\":\"contract VeCone\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veConeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDist\",\"outputs\":[{\"internalType\":\"contract VeDist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xvsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Used for ERC721 safeTransferFrom\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyUsdPlusWbnb.sol\":\"StrategyUsdPlusWbnb\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/AaveBorrowLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/AaveV3.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/UniswapV3.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\\\";\\n\\n\\nlibrary AaveBorrowLibrary {\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider,\\n        uint8 eModeCategoryId\\n    ) internal returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n        IPool(aavePool).setUserEMode(eModeCategoryId);\\n    }\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider\\n    ) internal view returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n    }\\n\\n    function getCollateralAndBorrowForSupplyAndBorrow(\\n        uint256 amount0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 collateral0, uint256 borrow1) {\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        collateral0 = amount0 * HF / (HF + LT * reserve0 / reserve1InToken0);\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        borrow1 = collateral1 * LT / HF;\\n    }\\n\\n    function getBorrowForWithdraw(\\n        uint256 collateral0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 borrow1) {\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        //usdc to usdt\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        //usdt to usdc\\n        borrow1 = (collateral1 * LT * reserve1InToken0) / (HF * reserve1InToken0 + LT * reserve0);\\n    }\\n\\n    // function getBorrowForWithdraw(\\n    //     uint256 collateral0,\\n    //     uint256 totalCollateralUsd,\\n    //     uint256 totalBorrowUsd,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 LT,\\n    //     uint256 HF,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 borrow1) {\\n    //     uint256 totalBorrowUsd1 = convertUsdToTokenAmount(totalBorrowUsd, token1Denominator, price1);   //usd to usdt\\n    //     uint256 totalCollateralUsd1 = convertUsdToTokenAmount(totalCollateralUsd, token1Denominator, price1); //usd to usdt\\n    //     uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1); //usdc to usdt\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0); //usdt to usdc\\n    //     borrow1 = (totalBorrowUsd1 * HF + collateral1 * LT - totalCollateralUsd1 * LT) / (HF + LT * reserve0 / reserve1InToken0);\\n    // }\\n\\n    // function getLpTokensForWithdraw(\\n    //     uint256 totalLpBalance,\\n    //     uint256 borrow1,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 lpTokensToWithdraw) {\\n    //     uint256 borrow0 = convertTokenAmountToTokenAmount(borrow1, token1Denominator, token0Denominator, price1, price0);\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n    //     lpTokensToWithdraw = totalLpBalance * (borrow0 + borrow1 * reserve0 / reserve1) / (reserve0 + reserve1InToken0);\\n    // }\\n\\n    struct GetWithdrawAmountForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n    }\\n\\n    function getWithdrawAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        withdrawAmount = FullMath.mulDivRoundingUp(\\n            params.reserve0,\\n            params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF,\\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function getBorrowIfZeroAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        withdrawAmount = (params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF) / (params.HF);\\n        withdrawAmount = convertUsdToTokenAmount(withdrawAmount, params.token1Denominator, params.price1);\\n    }\\n\\n    struct GetLpTokensForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n        uint256 totalSuply;\\n    }\\n\\n    function getLpTokensForBalance(\\n        GetLpTokensForBalanceParams memory params\\n    ) internal pure returns (uint256 lpTokens) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        lpTokens = FullMath.mulDivRoundingUp(\\n            params.totalSuply,\\n            params.totalBorrowUsd * params.HF - params.totalCollateralUsd * params.LT,\\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function convertTokenAmountToTokenAmount(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenAmountToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToTokenAmount(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0f644f96a4e5f549d01ad562464f8480d7e75a3fd68f6f304615c5854be822df\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/DecimalMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title DecimalMath\\n * @author DODO Breeder\\n *\\n * @notice Functions for fixed point number with 18 decimals\\n */\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    uint256 constant ONE = 10**18;\\n\\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d) / ONE;\\n    }\\n\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d).divCeil(ONE);\\n    }\\n\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(ONE).div(d);\\n    }\\n\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(ONE).divCeil(d);\\n    }\\n}\\n\",\"keccak256\":\"0x883913e8488e851ad58c5b2b37794f82c1e5b20434db2e1590abe8856d06bf0d\",\"license\":\"Apache-2.0\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/SafeMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x377ce54ff6d7546f2f3ec6f2f5b52382937f148523c137fa9159b23f2da08a4a\",\"license\":\"Apache-2.0\"},\"@overnight-contracts/common/contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\n//import {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, 'Errors.MATH_ADDITION_OVERFLOW');\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xfac99582d2db89d9670f7c9c68c0884bc145a558935a90428fd2c4790ff35e67\",\"license\":\"agpl-3.0\"},\"@overnight-contracts/connectors/contracts/stuff/AaveV3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n **/\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   **/\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   **/\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   **/\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n    event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n    event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n    function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 availableBorrowsBase,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n    function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n    function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n    function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n    function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n    function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n    function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\\n\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n    event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n    event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n    event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n    event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n    event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n    event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\\n\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n    /**\\n     * @dev Emitted after the base currency is set\\n   * @param baseCurrency The base currency of used for price quotes\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n    event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n    /**\\n     * @dev Emitted after the price source of an asset is updated\\n   * @param asset The address of the asset\\n   * @param source The price source of the asset\\n   */\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n    /**\\n     * @dev Emitted after the address of fallback oracle is updated\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n    event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Sets or replaces price sources of assets\\n   * @param assets The addresses of the assets\\n   * @param sources The addresses of the price sources\\n   */\\n    function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n    /**\\n     * @notice Sets the fallback oracle\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n    function setFallbackOracle(address fallbackOracle) external;\\n\\n    /**\\n     * @notice Returns a list of prices from a list of assets addresses\\n   * @param assets The list of assets addresses\\n   * @return The prices of the given assets\\n   */\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the address of the source for an asset address\\n   * @param asset The address of the asset\\n   * @return The address of the source\\n   */\\n    function getSourceOfAsset(address asset) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the fallback oracle\\n   * @return The address of the fallback oracle\\n   */\\n    function getFallbackOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x508e669423035b027d9a87168464cbb97a4528c82220ceec73d1902a862fbb19\",\"license\":\"AGPL-3.0\"},\"@overnight-contracts/connectors/contracts/stuff/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x056c9d4cc5faf3fa6115f5033af1eebb3367d2ec747ee1da80a926940083825c\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IConeRouter01 {\\n\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n\\n    function getExactAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint);\\n\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) external view returns (uint amountA, uint amountB);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityMATIC(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountMATIC, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityMATIC(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountMATIC);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityMATICWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMATICMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountMATIC);\\n\\n    function removeLiquidityMATICSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountFTM);\\n\\n    function removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountFTM);\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactMATICForTokens(uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForMATIC(uint amountIn, uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactMATICForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForMATICSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint[] memory amounts,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory);\\n\\n}\\n\\n\\ninterface IGauge {\\n\\n    function bribe() external view returns (address);\\n\\n    function tokenIds(address account) external view returns (uint);\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function depositAll(uint tokenId) external;\\n\\n    function deposit(uint amount, uint tokenId) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint amount) external;\\n\\n    function withdrawToken(uint amount, uint tokenId) external;\\n\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account) external view returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n\\n}\\n\\n\\ninterface IConePair is IERC20 {\\n\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n}\\n\\n\\nlibrary ConeLibrary {\\n\\n    function getAmountOut(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = coneRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = coneRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function swap(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(coneRouter), amountIn);\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = coneRouter.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swap(\\n        IConeRouter01 coneRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(coneRouter), amountIn);\\n\\n        IConeRouter01.Route[] memory route = new IConeRouter01.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = coneRouter.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n}\\n\\ninterface VeCone is IERC721 {\\n\\n    function increaseAmount(uint _tokenId, uint _value) external;\\n    function increaseUnlockTime(uint _tokenId, uint _lockDuration) external;\\n    function balanceOfNFT(uint256 _tokenId) external returns (uint256);\\n}\\n\\ninterface IBribe {\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n\\n}\\n\\ninterface VeDist {\\n\\n    function claimable(uint _tokenId) external view returns (uint);\\n    function claim(uint _tokenId) external returns (uint);\\n}\\n\\ninterface IConeVoter {\\n\\n    function lastVote(uint tokenId) external returns (uint256 lastTime);\\n\\n    function vote(uint tokenId, address[] calldata _poolVote, int256[] calldata _weights) external ;\\n\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens) external;\\n\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n\\n    function claimFees(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n}\\n\",\"keccak256\":\"0xcd8eee1813168426a152cd99dd2db0d292b472db696bb4443e3cfc9c5e1aa9c4\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Dodo.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IDODOMine {\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function claimAllRewards() external;\\n\\n}\\n\\ninterface IDODOProxy {\\n    function dodoSwapV1(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool,\\n        uint256 deadLine\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function dodoSwapV2TokenToToken(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external returns (uint256 returnAmount);\\n}\\n\\ninterface IDODOV1 {\\n    function init(\\n        address owner,\\n        address supervisor,\\n        address maintainer,\\n        address baseToken,\\n        address quoteToken,\\n        address oracle,\\n        uint256 lpFeeRate,\\n        uint256 mtFeeRate,\\n        uint256 k,\\n        uint256 gasPriceLimit\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function claimOwnership() external;\\n\\n    function sellBaseToken(\\n        uint256 amount,\\n        uint256 minReceiveQuote,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function buyBaseToken(\\n        uint256 amount,\\n        uint256 maxPayQuote,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\\n\\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\\n\\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\\n\\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\\n\\n    function withdrawBase(uint256 amount) external returns (uint256);\\n\\n    function withdrawAllBase() external returns (uint256);\\n\\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\\n\\n    function withdrawQuote(uint256 amount) external returns (uint256);\\n\\n    function withdrawAllQuote() external returns (uint256);\\n\\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\\n\\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\\n\\n    function _BASE_TOKEN_() external returns (address);\\n\\n    function _QUOTE_TOKEN_() external returns (address);\\n\\n    function _K_() external view returns (uint256);\\n\\n    function _R_STATUS_() external view returns (RStatus);\\n\\n    function _TARGET_BASE_TOKEN_AMOUNT_() external view returns (uint256);\\n\\n    function _TARGET_QUOTE_TOKEN_AMOUNT_() external view returns (uint256);\\n\\n    function _BASE_BALANCE_() external view returns (uint256);\\n\\n    function _QUOTE_BALANCE_() external view returns (uint256);\\n\\n    function getOraclePrice() external view returns (uint256);\\n\\n    function getWithdrawBasePenalty(uint256 amountLp) external view returns (uint256);\\n\\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\\n\\n}\\n\\ninterface IDODOV1Helper {\\n    function querySellQuoteToken(\\n        address dodoV1Pool,\\n        uint256 quoteAmount\\n    ) external view returns (uint256 receivedBaseAmount);\\n\\n    function querySellBaseToken(\\n        address dodoV1Pool,\\n        uint256 baseAmount\\n    ) external view returns (uint256 receivedQuoteAmount);\\n}\\n\\ninterface IDODOV2 {\\n    function querySellBase(\\n        address trader,\\n        uint256 payBaseAmount\\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\\n\\n    function querySellQuote(\\n        address trader,\\n        uint256 payQuoteAmount\\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\\n}\\n\\n\\nimport \\\"@overnight-contracts/common/contracts/libraries/SafeMath.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/DecimalMath.sol\\\";\\n\\n\\nlibrary StrategyDodoLibrary {\\n    using SafeMath for uint256;\\n\\n\\n    struct Context {\\n        IDODOV1 dodo;\\n        uint256 amountOut;\\n        uint256 fairAmount;\\n        uint256 targetBase;\\n        uint256 dd;\\n        uint256 a;\\n        uint256 b;\\n        uint256 c;\\n        uint256 d;\\n        uint256 e;\\n        uint256 g;\\n        uint256 h;\\n        uint256 i;\\n    }\\n\\n    function _getAmountIn(uint256 amountOut, IDODOV1 dodo) internal view returns (uint256) {\\n        if (dodo._R_STATUS_() != IDODOV1.RStatus.ABOVE_ONE) {\\n            return amountOut;\\n        }\\n\\n        Context memory ctx;\\n        ctx.dodo = dodo;\\n        ctx.amountOut = amountOut;\\n\\n        ctx.fairAmount = _fairAmount(ctx);\\n        ctx.targetBase = _solveQuadraticFunctionForTargetCeil(ctx);\\n\\n        ctx.dd = getDD(ctx);\\n        ctx.a = getA(ctx);\\n        ctx.b = getB(ctx);\\n        ctx.c = getC(ctx);\\n        ctx.d = getD(ctx);\\n        ctx.e = getE(ctx);\\n        ctx.g = getG(ctx);\\n        ctx.h = getH(ctx);\\n        ctx.i = getI(ctx);\\n\\n        uint256 underSqrt = ctx.a.add(ctx.c).add(ctx.d).add(ctx.e).sub(ctx.b);\\n        uint256 sqrt = underSqrt.sqrt();\\n        uint256 t1 = ctx.g.add(sqrt);\\n        uint256 t2 = t1.mul(1e18).div(ctx.i);\\n        uint256 res = ctx.h.sub(t2);\\n\\n        return res;\\n    }\\n\\n\\n    function _fairAmount(Context memory ctx) internal view returns (uint256){\\n        uint256 spareQuote = ctx.dodo._QUOTE_BALANCE_().sub(ctx.dodo._TARGET_QUOTE_TOKEN_AMOUNT_());\\n        uint256 price = ctx.dodo.getOraclePrice();\\n        uint256 fairAmount = DecimalMath.divFloor(spareQuote, price);\\n        return fairAmount;\\n    }\\n\\n    function getDD(Context memory ctx) internal view returns (uint256){\\n        return ctx.dodo._BASE_BALANCE_().mul(2).sub(ctx.amountOut);\\n    }\\n\\n    function getA(Context memory ctx) internal view returns (uint256){\\n        return ctx.fairAmount.mul(ctx.fairAmount).add(ctx.targetBase.mul(ctx.targetBase));\\n    }\\n\\n    function getB(Context memory ctx) internal view returns (uint256){\\n\\n        uint256 t1 = ctx.fairAmount.mul(ctx.dodo._K_()).mul(2).div(1e18);\\n        uint256 t2 = ctx.dd.add(ctx.fairAmount).add(t1);\\n        uint256 t3 = t2.mul(ctx.targetBase).mul(2);\\n\\n        return t3;\\n    }\\n\\n    function getC(Context memory ctx) internal view returns (uint256){\\n        return ctx.dd.mul(ctx.fairAmount).mul(2);\\n    }\\n\\n    function getD(Context memory ctx) internal view returns (uint256){\\n        return ctx.c.mul(ctx.dodo._K_()).mul(2).div(1e18);\\n    }\\n\\n    function getE(Context memory ctx) internal view returns (uint256){\\n        return ctx.dd.mul(ctx.dd);\\n    }\\n\\n    function getG(Context memory ctx) internal view returns (uint256){\\n        return ctx.targetBase.add(ctx.fairAmount).sub(ctx.dd);\\n    }\\n\\n    function getH(Context memory ctx) internal view returns (uint256){\\n        return ctx.targetBase.add(ctx.dodo._BASE_BALANCE_()).sub(ctx.dd);\\n    }\\n\\n    function getI(Context memory ctx) internal view returns (uint256){\\n        return ctx.dodo._K_().mul(2).add(uint256(2).mul(1e18));\\n    }\\n\\n\\n    function _solveQuadraticFunctionForTargetCeil(\\n        Context memory ctx\\n    ) internal view returns (uint256) {\\n        uint256 V1 = ctx.dodo._BASE_BALANCE_();\\n        uint256 k = ctx.dodo._K_();\\n\\n        // V0 = V1+V1*(sqrt-1)/2k\\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mulCeil(k, ctx.fairAmount).mul(4), V1);\\n        sqrt = sqrt.add(DecimalMath.ONE).mul(DecimalMath.ONE).sqrt();\\n        uint256 premium = DecimalMath.divCeil(sqrt.sub(DecimalMath.ONE), k.mul(2));\\n        // V0 is greater than or equal to V1 according to the solution\\n        return DecimalMath.mul(V1, DecimalMath.ONE.add(premium));\\n    }\\n}\\n\\n\\nabstract contract DodoExchange {\\n\\n    IDODOV1Helper private dodoV1Helper;\\n    IDODOProxy private dodoProxy;\\n    address private dodoApprove;\\n\\n    function _setDodoParams(\\n        address _dodoV1Helper,\\n        address _dodoProxy,\\n        address _dodoApprove\\n    ) internal {\\n        dodoV1Helper = IDODOV1Helper(_dodoV1Helper);\\n        dodoProxy = IDODOProxy(_dodoProxy);\\n        dodoApprove = _dodoApprove;\\n    }\\n\\n    /*\\n        The code example assumes user wanting to use the specify DODOV1 pool for swapping\\n\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\n        combination to represent the multi-hop directions to save gas consumption\\n        For example:\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\n    */\\n    function _useDodoSwapV1(\\n        address dodoV1Pool,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 slippage,\\n        uint256 directions\\n    ) internal returns (uint256) {\\n\\n        uint256 minReturnAmount;\\n        if (directions == 0) {\\n            uint256 receivedQuoteAmount = dodoV1Helper.querySellBaseToken(dodoV1Pool, fromTokenAmount);\\n            minReturnAmount = receivedQuoteAmount * (100 - slippage) / 100;\\n        } else {\\n            uint256 receivedBaseAmount = dodoV1Helper.querySellQuoteToken(dodoV1Pool, fromTokenAmount);\\n            minReturnAmount = receivedBaseAmount * (100 - slippage) / 100;\\n        }\\n        if (minReturnAmount == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV1Pool;\\n\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\n\\n        return dodoProxy.dodoSwapV1(\\n            fromToken,\\n            toToken,\\n            fromTokenAmount,\\n            minReturnAmount,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    /*\\n        The code example assumes user wanting to use the specify DODOV2 pool for swapping\\n\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\n        combination to represent the multi-hop directions to save gas consumption\\n        For example:\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\n    */\\n    function _useDodoSwapV2(\\n        address dodoV2Pool,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 slippage,\\n        uint256 directions\\n    ) internal returns (uint256) {\\n\\n        uint256 minReturnAmount;\\n        if (directions == 0) {\\n            (uint256 receiveQuoteAmount,) = IDODOV2(dodoV2Pool).querySellBase(address(this), fromTokenAmount);\\n            minReturnAmount = receiveQuoteAmount * (100 - slippage) / 100;\\n        } else {\\n            (uint256 receiveBaseAmount,) = IDODOV2(dodoV2Pool).querySellQuote(address(this), fromTokenAmount);\\n            minReturnAmount = receiveBaseAmount * (100 - slippage) / 100;\\n        }\\n        if (minReturnAmount == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV2Pool;\\n\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\n\\n        return dodoProxy.dodoSwapV2TokenToToken(\\n            fromToken,\\n            toToken,\\n            fromTokenAmount,\\n            minReturnAmount,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0dacb8b6ab38ad4748c626359f682830aef063682f947169b56eb8952a011330\",\"license\":\"Apache-2.0\"},\"@overnight-contracts/connectors/contracts/stuff/PancakeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary PancakeSwapLibrary {\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[1];\\n    }\\n\\n    function getAmountsOut(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amountInput, path);\\n\\n        return amounts[2];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        IPancakeRouter02 pancakeRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        uint256 amountOutMin,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(pancakeRouter), amountInput);\\n\\n        address[] memory path = new address[](3);\\n        path[0] = inputToken;\\n        path[1] = middleToken;\\n        path[2] = outputToken;\\n\\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function addLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(pancakeRouter), amountADesired);\\n        IERC20(tokenB).approve(address(pancakeRouter), amountBDesired);\\n\\n        return pancakeRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        IPancakeRouter02 pancakeRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(pancakeRouter), liquidity);\\n\\n        return pancakeRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n}\\n\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\n\",\"keccak256\":\"0x4122b8db2402c37c030df8b59936a31bc5adc9bf6cf189df06689b98785b70f1\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/UniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INonfungiblePositionManager {\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n        uint96 nonce,\\n        address operator,\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity,\\n        uint256 feeGrowthInside0LastX128,\\n        uint256 feeGrowthInside1LastX128,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (\\n        uint256 tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\\n\\ninterface IUniswapV3Pool {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n    external\\n    view\\n    returns (\\n        uint160 sqrtPriceX96,\\n        int24 tick,\\n        uint16 observationIndex,\\n        uint16 observationCardinality,\\n        uint16 observationCardinalityNext,\\n        uint8 feeProtocol,\\n        bool unlocked\\n    );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n        uint128 liquidityGross,\\n        int128 liquidityNet,\\n        uint256 feeGrowthOutside0X128,\\n        uint256 feeGrowthOutside1X128,\\n        int56 tickCumulativeOutside,\\n        uint160 secondsPerLiquidityOutsideX128,\\n        uint32 secondsOutside,\\n        bool initialized\\n    );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n        uint128 _liquidity,\\n        uint256 feeGrowthInside0LastX128,\\n        uint256 feeGrowthInside1LastX128,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n        uint32 blockTimestamp,\\n        int56 tickCumulative,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        bool initialized\\n    );\\n}\\n\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n        FullMath.mulDiv(\\n            uint256(liquidity) << FixedPoint96.RESOLUTION,\\n            sqrtRatioBX96 - sqrtRatioAX96,\\n            sqrtRatioBX96\\n        ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\n// TODO Updated -> see below TODO breakpoints\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        //        require(absTick <= uint256(MAX_TICK), 'T'); //TODO Need convert int24 to uint256\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\\nlibrary UniswapV3Library {\\n\\n    function singleSwap(\\n        ISwapRouter swapRouter,\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            fee: fee,\\n            recipient: recipient,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n\\n    function multiSwap(\\n        ISwapRouter swapRouter,\\n        address tokenIn,\\n        address tokenMid,\\n        address tokenOut,\\n        uint24 fee0,\\n        uint24 fee1,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: abi.encodePacked(tokenIn, fee0, tokenMid, fee1, tokenOut),\\n            recipient: recipient,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum\\n        });\\n\\n        amountOut = swapRouter.exactInput(params);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc36334292d8b4ec2db2b418fee8f50bd622051ce9d4afb4351edae72f584d317\",\"license\":\"GPL-2.0-or-later\"},\"@overnight-contracts/connectors/contracts/stuff/Venus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface Unitroller {\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function claimVenus(address holder, address[] memory vTokens) external ;\\n}\\n\\ninterface Maximillion {\\n    function repayBehalfExplicit(address borrower, address vBnb_) external payable;\\n}\\n\\ninterface IWbnb {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\n/**\\n  * @title Venus's InterestRateModel Interface\\n  * @author Venus\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view virtual returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view virtual returns (uint);\\n\\n}\\n\\nabstract contract VBep20Interface {\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    function mint(uint mintAmount) external virtual returns (uint);\\n    function mintBehalf(address receiver, uint mintAmount) external virtual returns (uint);\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external virtual returns (uint);\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external virtual returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external virtual returns (uint);\\n\\n}\\n\\nabstract contract VTokenInterface {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n    function allowance(address owner, address spender) external view virtual returns (uint);\\n    function balanceOf(address owner) external view virtual returns (uint);\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n    function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n    function borrowBalanceCurrent(address account) external virtual returns (uint);\\n    function borrowBalanceStored(address account) public view virtual returns (uint);\\n    function exchangeRateCurrent() public virtual returns (uint);\\n    function exchangeRateStored() public view virtual returns (uint);\\n    function getCash() external view virtual returns (uint);\\n    function accrueInterest() public virtual returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n}\\n\\n\\nabstract contract VenusInterface is VBep20Interface, VTokenInterface {\\n}\\n\\n\",\"keccak256\":\"0x9858da39a9a16833fa9c34e37815a208f6610a5cfc3d8a2131499ae6cf462631\",\"license\":\"MIT\"},\"@overnight-contracts/core/contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IExchange {\\n\\n    function buyFee() external view returns (uint256);\\n\\n    function buyFeeDenominator() external view returns (uint256);\\n\\n    function redeemFee() external view returns (uint256);\\n\\n    function redeemFeeDenominator() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    /**\\n     * @param _asset Asset to spend\\n     * @param _amount Amount of asset to spend\\n     * @return Amount of minted USD+ to caller\\n     */\\n    function buy(address _asset, uint256 _amount) external returns (uint256);\\n\\n    /**\\n     * @param _asset Asset to redeem\\n     * @param _amount Amount of USD+ to burn\\n     * @return Amount of asset unstacked and transferred to caller\\n     */\\n    function redeem(address _asset, uint256 _amount) external returns (uint256);\\n\\n    function payout() external;\\n\\n}\\n\",\"keccak256\":\"0xbaa8058a867ec6dd118e126fad13e2c8a245d00ca61dec81abf9cddf6705a25b\",\"license\":\"MIT\"},\"contracts/StrategyUsdPlusWbnb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/AaveV3.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Venus.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Dodo.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/PancakeV2.sol\\\";\\n\\nimport \\\"@overnight-contracts/common/contracts/libraries/WadRayMath.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/AaveBorrowLibrary.sol\\\";\\n\\nimport \\\"@overnight-contracts/core/contracts/interfaces/IExchange.sol\\\";\\n\\nimport \\\"./libraries/UsdPlusWbnbLibrary.sol\\\";\\nimport \\\"./core/HedgeStrategy.sol\\\";\\nimport \\\"./control/ControlUsdPlusWbnb.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract StrategyUsdPlusWbnb is HedgeStrategy, IERC721Receiver {\\n    using WadRayMath for uint256;\\n    using UsdPlusWbnbLibrary for StrategyUsdPlusWbnb;\\n\\n    uint256 public constant MAX_UINT_VALUE = type(uint256).max;\\n    uint256 public constant MAX_TIME_LOCK = 126268429; // value in seconds = 4 years\\n\\n    IERC20 public usdPlus;\\n    IERC20 public busd;\\n    IERC20 public wbnb;\\n    VenusInterface public vBusdToken;\\n    VenusInterface public vBnbToken;\\n    uint256 public busdDm;\\n    uint256 public wbnbDm;\\n    uint256 public bnbDm;\\n    IPriceFeed public oracleBusd;\\n    IPriceFeed public oracleWbnb;\\n\\n    IConeRouter01 public coneRouter;\\n    IConePair public conePair;\\n    IConeVoter public coneVoter;\\n    IGauge public coneGauge;\\n    IERC20 public coneToken;\\n    VeCone public veCone;\\n    uint public veConeId;\\n\\n    IExchange public exchange;\\n\\n    IDODOProxy public dodoProxy;\\n    address public dodoBusdWbnb;\\n\\n    uint256 public tokenAssetSlippagePercent;\\n\\n    uint256 public liquidationThreshold;\\n    uint256 public healthFactor;\\n    uint256 public realHealthFactor;\\n\\n    Maximillion public maximillion;\\n\\n    ControlUsdPlusWbnb public control;\\n\\n    address public collector;\\n    VeDist public veDist;\\n\\n    IERC20 public xvsToken;\\n    IPancakeRouter02 public pancakeRouter;\\n\\n    Unitroller public unitroller;\\n\\n    struct SetupParams {\\n        address usdPlus;\\n        address busd;\\n        address wbnb;\\n        address vBusdToken;\\n        address vBnbToken;\\n        address unitroller;\\n        address maximillion;\\n        address oracleBusd;\\n        address oracleWbnb;\\n        address coneRouter;\\n        address conePair;\\n        address coneVoter;\\n        address coneGauge;\\n        address coneToken;\\n        address veCone;\\n        uint veConeId;\\n        address exchange;\\n        address dodoProxy;\\n        address dodoBusdWbnb;\\n        address dodoApprove;\\n        uint256 tokenAssetSlippagePercent;\\n        uint256 liquidationThreshold;\\n        uint256 healthFactor;\\n        address control;\\n        address collector;\\n        address veDist;\\n        address xvsToken;\\n        address pancakeRouter;\\n    }\\n\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n    // --- setters\\n\\n    function setParams(SetupParams calldata params) external onlyAdmin {\\n        usdPlus = IERC20(params.usdPlus);\\n        busd = IERC20(params.busd);\\n        wbnb = IERC20(params.wbnb);\\n        xvsToken = IERC20(params.xvsToken);\\n        vBusdToken = VenusInterface(params.vBusdToken);\\n        vBnbToken = VenusInterface(params.vBnbToken);\\n        busdDm = 10 ** IERC20Metadata(params.busd).decimals();\\n        wbnbDm = 10 ** IERC20Metadata(params.wbnb).decimals();\\n        bnbDm = 10 ** 18;\\n        oracleBusd = IPriceFeed(params.oracleBusd);\\n        oracleWbnb = IPriceFeed(params.oracleWbnb);\\n\\n        setAsset(params.usdPlus);\\n\\n        coneRouter = IConeRouter01(params.coneRouter);\\n        conePair = IConePair(params.conePair);\\n        coneVoter = IConeVoter(params.coneVoter);\\n        coneGauge = IGauge(params.coneGauge);\\n        coneToken = IERC20(params.coneToken);\\n        veCone = VeCone(params.veCone);\\n        veConeId = params.veConeId;\\n\\n        exchange = IExchange(params.exchange);\\n\\n        dodoProxy = IDODOProxy(params.dodoProxy);\\n        dodoBusdWbnb = params.dodoBusdWbnb;\\n\\n        tokenAssetSlippagePercent = params.tokenAssetSlippagePercent;\\n\\n        collector = params.collector;\\n        veDist = VeDist(params.veDist);\\n\\n        pancakeRouter = IPancakeRouter02(params.pancakeRouter);\\n\\n        busd.approve(address(params.dodoApprove), type(uint256).max);\\n        wbnb.approve(address(params.dodoApprove), type(uint256).max);\\n\\n        usdPlus.approve(address(coneRouter), type(uint256).max);\\n        wbnb.approve(address(coneRouter), type(uint256).max);\\n        conePair.approve(address(coneRouter), type(uint256).max);\\n        conePair.approve(address(coneGauge), type(uint256).max);\\n\\n        usdPlus.approve(address(exchange), type(uint256).max);\\n        busd.approve(address(exchange), type(uint256).max);\\n\\n        unitroller = Unitroller(params.unitroller);\\n        address[] memory vTokens = new address[](2);\\n        vTokens[0] = address(vBusdToken);\\n        vTokens[1] = address(vBnbToken);\\n\\n        uint[] memory errors = unitroller.enterMarkets(vTokens);\\n\\n        maximillion = Maximillion(params.maximillion);\\n\\n        liquidationThreshold = params.liquidationThreshold * 10 ** 15;\\n        healthFactor = params.healthFactor * 10 ** 15;\\n        realHealthFactor = 0;\\n\\n\\n        if (address(control) != address(0)) {\\n            revokeRole(CONTROL_ROLE, address(control));\\n        }\\n\\n        control = ControlUsdPlusWbnb(params.control);\\n        grantRole(CONTROL_ROLE, address(control));\\n        control.setStrategy(payable(this));\\n    }\\n\\n    // --- logic\\n\\n    function _stake(uint256 _amount) internal override {\\n        control.calcDeltas(Method.STAKE, _amount);\\n    }\\n\\n    function _unstake(\\n        uint256 _amount\\n    ) internal override returns (uint256) {\\n        control.calcDeltas(Method.UNSTAKE, _amount);\\n        return _amount;\\n    }\\n\\n\\n    function netAssetValue() external view override returns (uint256){\\n        return control.netAssetValue();\\n    }\\n\\n    function balances() external view override returns (BalanceItem[] memory){\\n        return control.balances();\\n    }\\n\\n\\n    function _balance() internal override returns (uint256) {\\n        control.calcDeltas(Method.NOTHING, 0);\\n        return realHealthFactor;\\n    }\\n\\n    function setRealHealthFactor(uint256 _realHealthFactor) external onlyControl {\\n        realHealthFactor = _realHealthFactor;\\n    }\\n\\n    function currentHealthFactor() external view override returns (uint256){\\n        return realHealthFactor;\\n    }\\n\\n    function executeAction(Action memory action) external onlyControl {\\n        if (action.actionType == ActionType.ADD_LIQUIDITY) {\\n            console.log(\\\"execute action ADD_LIQUIDITY\\\");\\n            UsdPlusWbnbLibrary._addLiquidity(this, action.amount);\\n        } else if (action.actionType == ActionType.REMOVE_LIQUIDITY) {\\n            console.log(\\\"execute action REMOVE_LIQUIDITY\\\");\\n            UsdPlusWbnbLibrary._removeLiquidity(this, action.amount);\\n        } else if (action.actionType == ActionType.SWAP_USDPLUS_TO_ASSET) {\\n            console.log(\\\"execute action SWAP_USDPLUS_TO_ASSET\\\");\\n            UsdPlusWbnbLibrary._swapUspPlusToBusd(this, action.amount);\\n        } else if (action.actionType == ActionType.SWAP_ASSET_TO_USDPLUS) {\\n            console.log(\\\"execute action SWAP_ASSET_TO_USDPLUS\\\");\\n            UsdPlusWbnbLibrary._swapBusdToUsdPlus(this, action.amount);\\n        } else if (action.actionType == ActionType.SUPPLY_ASSET_TO_AAVE) {\\n            console.log(\\\"execute action SUPPLY_ASSET_TO_AAVE\\\");\\n            UsdPlusWbnbLibrary._supplyBusdToVenus(this, action.amount);\\n        } else if (action.actionType == ActionType.WITHDRAW_ASSET_FROM_AAVE) {\\n            console.log(\\\"execute action WITHDRAW_ASSET_FROM_AAVE\\\");\\n            UsdPlusWbnbLibrary._withdrawBusdFromVenus(this, action.amount);\\n        } else if (action.actionType == ActionType.BORROW_TOKEN_FROM_AAVE) {\\n            console.log(\\\"execute action BORROW_TOKEN_FROM_AAVE\\\");\\n            UsdPlusWbnbLibrary._borrowWbnbFromVenus(this, action.amount);\\n        } else if (action.actionType == ActionType.REPAY_TOKEN_TO_AAVE) {\\n            console.log(\\\"execute action REPAY_TOKEN_TO_AAVE\\\");\\n            UsdPlusWbnbLibrary._repayWbnbToVenus(this, action.amount);\\n        } else if (action.actionType == ActionType.SWAP_TOKEN_TO_ASSET) {\\n            console.log(\\\"execute action SWAP_TOKEN_TO_ASSET\\\");\\n            UsdPlusWbnbLibrary._swapTokenToAsset(this, action.amount, action.slippagePercent);\\n        } else if (action.actionType == ActionType.SWAP_ASSET_TO_TOKEN) {\\n            console.log(\\\"execute action SWAP_ASSET_TO_TOKEN\\\");\\n            UsdPlusWbnbLibrary._swapAssetToToken(this, action.amount, action.slippagePercent);\\n        }\\n    }\\n\\n\\n    function _claimRewards(address _to) internal override returns (uint256){\\n\\n        uint256 totalUsdPlus;\\n\\n        totalUsdPlus += _claimCone();\\n        totalUsdPlus += _claimVenus();\\n\\n        return totalUsdPlus;\\n    }\\n\\n    function _claimVenus() internal returns (uint256) {\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = address(vBusdToken);\\n        tokens[1] = address(vBnbToken);\\n        unitroller.claimVenus(address(this), tokens);\\n\\n        uint256 xvsBalance = xvsToken.balanceOf(address(this));\\n\\n        uint256 totalBusd;\\n\\n        if (xvsBalance > 0) {\\n            uint256 amountOutMin = PancakeSwapLibrary.getAmountsOut(\\n                pancakeRouter,\\n                address(xvsToken),\\n                address(busd),\\n                xvsBalance\\n            );\\n\\n            if (amountOutMin > 0) {\\n                uint256 stgBusd = PancakeSwapLibrary.swapExactTokensForTokens(\\n                    pancakeRouter,\\n                    address(xvsToken),\\n                    address(busd),\\n                    xvsBalance,\\n                    amountOutMin,\\n                    address(this)\\n                );\\n                totalBusd += stgBusd;\\n            }\\n        }\\n\\n        return totalBusd / 1e12 ; // convert from 1e18 to 1e6 (USD+)\\n    }\\n\\n    function _claimCone() internal returns (uint256){\\n        // claim rewards\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(coneToken);\\n        coneGauge.getReward(address(this), tokens);\\n\\n        // sell rewards\\n        uint256 totalUsdPlus;\\n\\n        uint256 coneBalance = coneToken.balanceOf(address(this));\\n\\n        if (coneBalance > 0) {\\n            uint256 amountOutMin = ConeLibrary.getAmountsOut(\\n                coneRouter,\\n                address(coneToken),\\n                address(wbnb),\\n                address(usdPlus),\\n                false,\\n                false,\\n                coneBalance\\n            );\\n\\n            if (amountOutMin > 0) {\\n                uint256 coneBusd = ConeLibrary.swap(\\n                    coneRouter,\\n                    address(coneToken),\\n                    address(wbnb),\\n                    address(usdPlus),\\n                    false,\\n                    false,\\n                    coneBalance,\\n                    amountOutMin * 99 / 100,\\n                    address(this)\\n                );\\n\\n                totalUsdPlus += coneBusd;\\n            }\\n        }\\n\\n\\n        return totalUsdPlus;\\n    }\\n\\n\\n\\n    function vote(address[] calldata _poolVote, int256[] calldata _weights) external onlyPortfolioAgent {\\n        veDist.claim(veConeId);\\n        coneToken.approve(address(veCone), coneToken.balanceOf(address(this)));\\n        veCone.increaseAmount(veConeId, coneToken.balanceOf(address(this)));\\n        veCone.increaseUnlockTime(veConeId, MAX_TIME_LOCK);\\n        coneVoter.vote(veConeId, _poolVote, _weights);\\n    }\\n\\n    function claimBribes() external onlyPortfolioAgent {\\n\\n        address bribe = coneGauge.bribe();\\n\\n        address[] memory bribes = new address[](1);\\n        bribes[0] = bribe;\\n\\n        address[][] memory tokens = new address[][](3);\\n        tokens[0] = new address[](3);\\n        tokens[0][0] = address(coneToken);\\n        tokens[0][1] = address(wbnb);\\n        tokens[0][2] = address(usdPlus);\\n\\n        coneVoter.claimBribes(bribes, tokens, veConeId);\\n\\n        uint256 wbnbAmount = wbnb.balanceOf(address(this));\\n        uint256 usdPlusAmount = usdPlus.balanceOf(address(this));\\n        uint256 coneAmount = coneToken.balanceOf(address(this));\\n\\n\\n        if (wbnbAmount > 0) {\\n            wbnb.transfer(collector, wbnbAmount);\\n        }\\n\\n        if (usdPlusAmount > 0) {\\n            usdPlus.transfer(collector, usdPlusAmount);\\n        }\\n\\n        if (coneAmount > 0) {\\n            coneToken.transfer(collector, coneAmount);\\n        }\\n\\n    }\\n\\n\\n\\n    /// @notice Used for ERC721 safeTransferFrom\\n    function onERC721Received(address, address, uint256, bytes memory)\\n    public\\n    virtual\\n    override\\n    returns (bytes4)\\n    {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    receive() external payable {\\n    }\\n}\\n\",\"keccak256\":\"0xdd1cff5b562d7f4f392093be6391300cef028a65a0806c25e9cfa8225c405313\",\"license\":\"MIT\"},\"contracts/control/ControlUsdPlusWbnb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/AaveBorrowLibrary.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Venus.sol\\\";\\n\\n\\nimport \\\"../StrategyUsdPlusWbnb.sol\\\";\\nimport \\\"../libraries/EtsCalculationLibrary.sol\\\";\\nimport \\\"../core/IHedgeStrategy.sol\\\";\\n\\ncontract ControlUsdPlusWbnb is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    StrategyUsdPlusWbnb public strategy;\\n\\n    IERC20 public usdPlus;\\n    IERC20 public busd;\\n    IERC20 public wbnb;\\n\\n    VenusInterface public vBusdToken;\\n    VenusInterface public vBnbToken;\\n\\n    uint256 public busdDm;\\n    uint256 public wbnbDm;\\n    uint256 public bnbDm;\\n\\n    IPriceFeed public oracleBusd;\\n    IPriceFeed public oracleWbnb;\\n\\n    IConePair public conePair;\\n    IGauge public coneGauge;\\n\\n    uint256 tokenAssetSlippagePercent;\\n\\n    uint256 public liquidationThreshold;\\n    uint256 public healthFactor;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(hasRole(STRATEGY_ROLE, msg.sender), \\\"Restricted to STRATEGY_ROLE\\\");\\n        _;\\n    }\\n\\n\\n    function setStrategy(address payable _strategy) external onlyStrategy {\\n        strategy = StrategyUsdPlusWbnb(_strategy);\\n\\n        usdPlus = strategy.usdPlus();\\n        busd = strategy.busd();\\n        wbnb = strategy.wbnb();\\n\\n        vBnbToken = strategy.vBnbToken();\\n        vBusdToken = strategy.vBusdToken();\\n\\n        busdDm = strategy.busdDm();\\n        wbnbDm = strategy.wbnbDm();\\n        bnbDm = strategy.bnbDm();\\n\\n        oracleBusd = strategy.oracleBusd();\\n        oracleWbnb = strategy.oracleWbnb();\\n\\n        conePair = strategy.conePair();\\n        coneGauge = strategy.coneGauge();\\n\\n        tokenAssetSlippagePercent = strategy.tokenAssetSlippagePercent();\\n        liquidationThreshold = strategy.liquidationThreshold();\\n        healthFactor = strategy.healthFactor();\\n    }\\n\\n    /**\\n      * @param amount  - USDC amount in e6\\n      */\\n\\n    function calcDeltas(Method method, uint256 amount) external onlyStrategy {\\n\\n        Liquidity memory liq = currentLiquidity();\\n        int256 K1 = toInt256(1e18 * healthFactor / liquidationThreshold);\\n        // price in e8 K2 should be in e18 so up by 1e10\\n        int256 K2 = toInt256(1e10 * _pricePool());\\n        int256 retAmount;\\n        if (method == Method.UNSTAKE) {\\n            int256 navUsd = EtsCalculationLibrary._netAssetValue(liq);\\n            int256 amountUsd = toInt256(busdToUsd(amount * 10 ** 12));\\n            require(navUsd >= amountUsd, \\\"Not enough NAV for UNSTAKE\\\");\\n            // for unstake make deficit as amount\\n            retAmount = - amountUsd;\\n        }\\n\\n        (Action[] memory actions, uint256 code) = EtsCalculationLibrary.liquidityToActions(CalcContext2(K1, K2, retAmount, liq, tokenAssetSlippagePercent));\\n\\n        runActions(actions);\\n\\n        liq = currentLiquidity();\\n        uint256 realHealthFactor = toUint256(liq.collateralAsset) * liquidationThreshold / toUint256(liq.borrowToken);\\n\\n        strategy.setRealHealthFactor(realHealthFactor);\\n    }\\n\\n    function currentAmounts() public view returns (Amounts memory){\\n\\n        (uint256 poolToken,  uint256 poolUsdPlus) = _getLiquidity();\\n\\n        uint256 aaveBorrowAmount = vBnbToken.borrowBalanceStored(address(strategy));\\n        uint256 aaveCollateralAmount = vBusdToken.balanceOf(address(strategy)) * vBusdToken.exchangeRateStored() / 1e18;\\n\\n        return Amounts(\\n            aaveCollateralAmount,\\n            aaveBorrowAmount,\\n            poolToken,\\n            poolUsdPlus,\\n            usdPlus.balanceOf(address(strategy)),\\n            busd.balanceOf(address(strategy)),\\n            wbnb.balanceOf(address(strategy))\\n        );\\n    }\\n\\n    function balances() external view returns (IHedgeStrategy.BalanceItem[] memory){\\n\\n        Liquidity memory liq = currentLiquidity();\\n        Amounts memory amounts = currentAmounts();\\n\\n        IHedgeStrategy.BalanceItem[] memory items = new IHedgeStrategy.BalanceItem[](7);\\n        items[0] = IHedgeStrategy.BalanceItem(address(wbnb), toUint256(liq.borrowToken), amounts.borrowToken, true);\\n        items[1] = IHedgeStrategy.BalanceItem(address(busd), toUint256(liq.collateralAsset), amounts.collateralAsset, false);\\n        items[2] = IHedgeStrategy.BalanceItem(address(wbnb), toUint256(liq.poolToken), amounts.poolToken, false);\\n        items[3] = IHedgeStrategy.BalanceItem(address(usdPlus), toUint256(liq.poolUsdPlus), amounts.poolUsdPlus, false);\\n        items[4] = IHedgeStrategy.BalanceItem(address(usdPlus), toUint256(liq.freeUsdPlus), amounts.freeUsdPlus, false);\\n        items[5] = IHedgeStrategy.BalanceItem(address(busd), toUint256(liq.freeAsset), amounts.freeAsset, false);\\n        items[6] = IHedgeStrategy.BalanceItem(address(wbnb), toUint256(liq.freeToken), amounts.freeToken, false);\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Get current liquidity in USD e6\\n     */\\n    function currentLiquidity() public view returns (Liquidity memory){\\n\\n        // in pool liquidity\\n        (uint256 poolToken,  uint256 poolUsdPlus) = _getLiquidity();\\n        uint256 poolTokenUsd = wbnbToUsd(poolToken);\\n        uint256 poolUsdPlusUsd = busdToUsd(poolUsdPlus * 10 ** 12);\\n\\n        // liquidity from AAVE E6+2\\n        uint256 aaveCollateralUsd = busdToUsd(vBusdToken.balanceOf(address(strategy)) * vBusdToken.exchangeRateStored() / 1e18);\\n        uint256 aaveBorrowUsd = wbnbToUsd(vBnbToken.borrowBalanceStored(address(strategy)));\\n\\n        // free tokens on contract\\n        uint256 usdPlusBalanceUsd = busdToUsd(usdPlus.balanceOf(address(strategy)) * 10 ** 12);\\n        uint256 busdBalanceUsd = busdToUsd(busd.balanceOf(address(strategy)));\\n        uint256 wbnbBalanceUsd = wbnbToUsd(wbnb.balanceOf(address(strategy)));\\n\\n\\n        console.log(\\\"----------------- currentLiquidity()\\\");\\n        console.log(\\\"poolToken        \\\", poolToken);\\n        console.log(\\\"poolTokenUsd     \\\", poolTokenUsd);\\n        console.log(\\\"poolUsdPlus       \\\", poolUsdPlus);\\n        console.log(\\\"poolUsdPlusUsd    \\\", poolUsdPlusUsd);\\n        console.log(\\\"aaveCollateralUsd \\\", aaveCollateralUsd);\\n        console.log(\\\"aaveBorrowUsd     \\\", aaveBorrowUsd);\\n        console.log(\\\"wbnbBalanceUsd     \\\", wbnbBalanceUsd);\\n        console.log(\\\"usdPlusBalanceUsd \\\", usdPlusBalanceUsd);\\n        console.log(\\\"busdBalanceUsd    \\\", busdBalanceUsd);\\n        console.log(\\\"-----------------\\\");\\n\\n        //TODO: rename vars\\n        return Liquidity(\\n            toInt256(aaveCollateralUsd),\\n            toInt256(aaveBorrowUsd),\\n            toInt256(poolTokenUsd),\\n            toInt256(poolUsdPlusUsd),\\n            toInt256(usdPlusBalanceUsd),\\n            toInt256(busdBalanceUsd),\\n            toInt256(wbnbBalanceUsd)\\n        );\\n    }\\n\\n\\n    /**\\n      * NAV = sum of all tokens liquidity minus borrows.\\n      * @return NAV in USDC\\n      */\\n    function netAssetValue() external view returns (uint256){\\n        Liquidity memory liq = currentLiquidity();\\n        int256 navUsd = EtsCalculationLibrary._netAssetValue(liq);\\n        return usdToBusd(toUint256(navUsd)) / (10 ** 12);\\n    }\\n\\n\\n\\n\\n    // Current price Usd+/wbnb in cone pool in USD/USD in e+2\\n\\n    function _pricePool() internal view returns (uint256){\\n        // on another pools tokens order may be another and calc price in pool should changed\\n        // token 0 - wbnb\\n        // token 1 - usdPlus\\n        (uint256 reserveWbnb, uint256 reserveUsdPlus,) = conePair.getReserves();\\n        uint256 reserveWbnbUsd = wbnbToUsd(reserveWbnb);\\n        uint256 reserveUsdPlusUsd = busdToUsd(reserveUsdPlus * 10 ** 12);\\n\\n        // console.log(\\\"----------------- priceInDystUsdpMaticPool()\\\");\\n        // console.log(\\\"reserveWbnb       \\\", reserveWbnb);\\n        // console.log(\\\"reserveWbnbUsd    \\\", reserveWbnbUsd);\\n        // console.log(\\\"reserveUsdPlus      \\\", reserveUsdPlus);\\n        // console.log(\\\"reserveUsdPlusUsd   \\\", reserveUsdPlusUsd);\\n        // console.log(\\\"-----------------\\\");\\n        // 10^8 because of 10^6 plus additional 2 digits to be comparable to USD price from oracles\\n        return reserveUsdPlusUsd * 10 ** 8 / reserveWbnbUsd;\\n\\n    }\\n    /**\\n     * Own liquidity in pool in their native digits. Used in strategy.\\n     */\\n    function _getLiquidity() internal view returns (uint256, uint256) {\\n        uint256 balanceLp = coneGauge.balanceOf(address(strategy));\\n        return _getLiquidityByLp(balanceLp);\\n    }\\n\\n    function _getLiquidityByLp(uint256 balanceLp) internal view returns (uint256, uint256) {\\n\\n        (uint256 reserve0Current, uint256 reserve1Current,) = conePair.getReserves();\\n\\n        uint256 amountLiq0 = reserve0Current * balanceLp / conePair.totalSupply();\\n        uint256 amountLiq1 = reserve1Current * balanceLp / conePair.totalSupply();\\n        return (amountLiq0, amountLiq1);\\n    }\\n\\n\\n    function liquidityToActions(CalcContext2 memory calcContext2) view internal returns (Action2[] memory, uint256){\\n        (Action[] memory actions, uint256 code) = EtsCalculationLibrary.liquidityToActions(calcContext2);\\n        Action2[] memory actions2 = new Action2[](actions.length);\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            actions2[i].amount = actions[i].amount;\\n            actions2[i].actionType = uint(actions[i].actionType);\\n        }\\n        return (actions2, code);\\n    }\\n\\n\\n    function runActions(Action[] memory actions) internal {\\n\\n        console.log(\\\"--------- execute actions\\\");\\n        for (uint j; j < actions.length; j++) {\\n            console.log(j, uint(actions[j].actionType), actions[j].amount);\\n            strategy.executeAction(actions[j]);\\n        }\\n        console.log(\\\"---------\\\");\\n\\n    }\\n\\n    /**\\n * Get USD equivalent in e6\\n * @param amount WMATIC tokens amount\\n     */\\n\\n    function wbnbToUsd(uint256 amount) public view returns (uint256){\\n        // X / 100 because converting return e6+2 as oracle price but need to remove additional +2\\n        return AaveBorrowLibrary.convertTokenAmountToUsd(\\n            amount,\\n            bnbDm,\\n            uint256(oracleWbnb.latestAnswer())\\n        ) / 100;\\n    }\\n\\n    /**\\n     * Get WMATIC equivalent from USD liquidity\\n     * @param liquidity USD liquidity in e6\\n     */\\n    function usdToWbnb(uint256 liquidity) public view returns (uint256){\\n        // liquidity * 100 => because need e6+2 for converting but liq in e6\\n        return AaveBorrowLibrary.convertUsdToTokenAmount(\\n            liquidity * 100,\\n            bnbDm,\\n            uint256(oracleWbnb.latestAnswer())\\n        );\\n    }\\n\\n    /**\\n     * Get USD equivalent in e6\\n     * @param amount USDC tokens amount\\n     */\\n    function busdToUsd(uint256 amount) public view returns (uint256){\\n        // X / 100 because converting return e6+2 as oracle price but need to remove additional +2\\n        return AaveBorrowLibrary.convertTokenAmountToUsd(\\n            amount,\\n            busdDm,\\n            uint256(oracleBusd.latestAnswer())\\n        ) / 100;\\n    }\\n\\n    /**\\n     * Get USDC equivalent from USD liquidity\\n     * @param liquidity USD liquidity in e6\\n     */\\n    function usdToBusd(uint256 liquidity) public view returns (uint256){\\n        // liquidity * 100 => because need e6+2 for converting but liq in e6\\n        return AaveBorrowLibrary.convertUsdToTokenAmount(\\n            liquidity * 100,\\n            busdDm,\\n            uint256(oracleBusd.latestAnswer())\\n        );\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x95eff9ac99df56c0b0a1dc243f937e02d50ebe40354af972628d5eafd98af8e4\",\"license\":\"MIT\"},\"contracts/core/HedgeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IHedgeStrategy.sol\\\";\\n\\n\\nabstract contract HedgeStrategy is IHedgeStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n    bytes32 public constant CONTROL_ROLE = keccak256(\\\"CONTROL_ROLE\\\");\\n\\n    IERC20 public asset;\\n    address public exchanger;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Restricted to EXCHANGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyControl() {\\n        require(hasRole(CONTROL_ROLE, msg.sender), \\\"Restricted to CONTROL\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setExchanger(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(EXCHANGER, exchanger);\\n        grantRole(EXCHANGER, _value);\\n\\n        exchanger = _value;\\n    }\\n\\n    function setAsset(address _value) internal {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n        asset = IERC20(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyExchanger {\\n        emit Stake(_amount);\\n        _stake(asset.balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        uint256 _amount,\\n        address _to\\n    ) external override onlyExchanger returns (uint256) {\\n        uint256   withdrawAmount = _unstake(_amount );\\n        require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n\\n        asset.transfer(_to, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyExchanger returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function balance() external onlyExchanger override {\\n        _balance();\\n    }\\n\\n\\n\\n    function _stake(\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        uint256 _amount\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _balance() internal virtual returns (uint256) {\\n\\n    }\\n\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x28c76ac4abf8079711d572e3a44585ea452c2b59f5e26bff81cb40aa5c41573c\",\"license\":\"MIT\"},\"contracts/core/IHedgeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHedgeStrategy {\\n\\n    event Reward(uint256 amount);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    struct BalanceItem {\\n        address token;\\n        uint256 amountUSD;\\n        uint256 amount;\\n        bool    borrowed;\\n    }\\n\\n    function stake(\\n        uint256 _amount // value for staking in asset\\n    ) external;\\n\\n    function unstake(\\n        uint256 _amount, // minimum expected value for unstaking in asset\\n        address _to      // PortfolioManager\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n    function balance() external ; // Balancing aave health factor\\n\\n    function currentHealthFactor() external view returns (uint256);      // Aave healthFactor\\n\\n    function balances() external view returns (BalanceItem[] memory ); // Balancing aave health factor\\n\\n}\\n\",\"keccak256\":\"0xd57de5f3d101a5834402d912c26dd4bf0bc72fa4542946b8a31a4919b9ef7aa8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/EtsCalculationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nenum ActionType {\\n    ADD_LIQUIDITY, // D2, D6 < 0\\n    REMOVE_LIQUIDITY, // D2, D6 > 0\\n\\n    SWAP_USDPLUS_TO_ASSET, // D1 < 0\\n    SWAP_ASSET_TO_USDPLUS, // D1 > 0\\n\\n    SUPPLY_ASSET_TO_AAVE, // D4 > 0\\n    WITHDRAW_ASSET_FROM_AAVE, // D4 < 0\\n\\n    BORROW_TOKEN_FROM_AAVE, // D5 > 0\\n    REPAY_TOKEN_TO_AAVE, // D5 < 0\\n\\n    SWAP_TOKEN_TO_ASSET, // D3 < 0\\n    SWAP_ASSET_TO_TOKEN  // D3 > 0\\n}\\n\\n\\nenum Method {\\n    NOTHING,\\n    STAKE,\\n    UNSTAKE\\n}\\n\\n// Amounts in decimals specific token, all positive\\nstruct Amounts {\\n    uint256 collateralAsset;\\n    uint256 borrowToken;\\n    uint256 poolToken;\\n    uint256 poolUsdPlus;\\n    uint256 freeUsdPlus;\\n    uint256 freeAsset;\\n    uint256 freeToken;\\n}\\n\\n// liquidity in USD e6, all positive\\nstruct Liquidity {\\n    int256 collateralAsset;\\n    int256 borrowToken;\\n    int256 poolToken;\\n    int256 poolUsdPlus;\\n    int256 freeUsdPlus;\\n    int256 freeAsset;\\n    int256 freeToken;\\n}\\n\\n// liquidity deltas in USD e6, may contain zeroes and below zero\\nstruct Deltas {\\n    int256 d1;\\n    int256 d2;\\n    int256 d3;\\n    int256 d4;\\n    int256 d5;\\n    int256 d6;\\n    uint256 code;\\n}\\n\\nstruct Action {\\n    ActionType actionType;\\n    uint256 amount;\\n    uint256 slippagePercent;\\n}\\n\\nstruct Action2 {\\n    uint256 actionType;\\n    uint256 amount;\\n    uint256 slippagePercent;\\n}\\n\\nstruct CalcContext {\\n    int256 K1; // in e18\\n    int256 K2; // in e18\\n    int256 amount; // amount in USD, below zero if UNSTAKE\\n    Liquidity liq; // in USD e6\\n    uint256 tokenAssetSlippagePercent;\\n    Deltas deltas; // in USD e6\\n}\\n\\nstruct CalcContext2 {\\n    int256 K1; // in e18\\n    int256 K2; // in e18\\n    int256 amount; // amount in USD, below zero if UNSTAKE\\n    Liquidity liq; // in USD e6\\n    uint256 tokenAssetSlippagePercent;\\n}\\n\\n\\nlibrary EtsCalculationLibrary{\\n\\n    uint256 public constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    /**\\n      * d1 = -d2 - Lam - LFu;\\n      */\\n    function calcD1(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d1 = - ctx.deltas.d2 - ctx.amount - ctx.liq.freeUsdPlus;\\n    }\\n\\n    /**\\n      * d2 = d6 * K2;\\n      */\\n    function calcD2(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d2 = ctx.deltas.d6 * ctx.K2 / 1e18;\\n    }\\n\\n    /**\\n      * d3 = -LFw - d5 - d6;\\n      */\\n    function calcD3(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d3 = - ctx.liq.freeToken - ctx.deltas.d5 - ctx.deltas.d6;\\n    }\\n\\n    /**\\n      * d4 = K1 * (LBw + d5) - LCu;\\n      */\\n    function calcD4(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d4 = (ctx.liq.borrowToken + ctx.deltas.d5) * ctx.K1 / 1e18 - ctx.liq.collateralAsset;\\n    }\\n\\n    /**\\n      * d5 = LPw - LBw - d6;\\n      */\\n    function calcD5(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d5 = ctx.liq.poolToken - ctx.liq.borrowToken - ctx.deltas.d6;\\n    }\\n\\n    /**\\n     * d6 = ((K1 - 1) * LPw + LBw - LCu - LFu - LFuc - LFw - Lam) / (K1 + K2);\\n     */\\n    function calcD6(CalcContext memory ctx) internal view {\\n\\n        logSign(\\\"K1:\\\", ctx.K1);\\n        logSign(\\\"K2:\\\", ctx.K2);\\n\\n\\n        int256 a = (ctx.K1 - 1e18) * ctx.liq.poolToken / 1e18;\\n        logSign(\\\"a:\\\", a);\\n        a = a + ctx.liq.borrowToken;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.collateralAsset;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.freeUsdPlus;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.freeAsset;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.freeToken;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.amount;\\n        logSign(\\\"a:\\\", a);\\n\\n        int256 b = ctx.K1 + ctx.K2;\\n        logSign(\\\"b:\\\", b);\\n        int256 d6 = 1e18 * a / b;\\n\\n        ctx.deltas.d6 = d6;\\n    }\\n\\n    function logSign(string memory msg, int256 value) internal view {\\n        if (value < 0) {\\n            console.log(msg, \\\"-\\\", toUint256(- value));\\n        } else {\\n            console.log(msg, toUint256(value));\\n        }\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256){\\n        if (value < 0) {\\n            return toUint256(- value);\\n        } else {\\n            return toUint256(value);\\n        }\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n\\n    /**\\n      * NAV = sum of all tokens liquidity minus borrows.\\n      * @return NAV in USD\\n      */\\n    function _netAssetValue(Liquidity memory liq) internal pure returns (int256){\\n\\n        // add liquidity in free tokens\\n        int256 navUsd = liq.freeUsdPlus + liq.freeAsset + liq.freeToken;\\n        // add liquidity in pool\\n        navUsd = navUsd + liq.poolToken + liq.poolUsdPlus;\\n        // add liquidity in aave collateral minus borrow\\n        navUsd = navUsd + liq.collateralAsset - liq.borrowToken;\\n\\n        return navUsd;\\n    }\\n\\n    function test() public view returns (uint256) {\\n        return 0;\\n    }\\n\\n\\n    function liquidityToActions(CalcContext2 memory ctx2) public view returns (Action[] memory, uint256) {\\n\\n        Deltas memory deltas = Deltas(0, 0, 0, 0, 0, 0, 0);\\n        CalcContext memory ctx = CalcContext(ctx2.K1, ctx2.K2, ctx2.amount, ctx2.liq, ctx2.tokenAssetSlippagePercent, deltas);\\n\\n        //if it is unstake then increase unstake amount to awoid slippages on swap\\n        if (ctx.amount < 0) {\\n            //if decrease on tokenAssetSlippagePercent then newAmount became oldAmount\\n            ctx.amount = ctx.amount * 10000 / (10000 - toInt256(ctx.tokenAssetSlippagePercent));\\n        }\\n\\n        // order specified, don't change\\n        calcD6(ctx);\\n        calcD2(ctx);\\n        calcD1(ctx);\\n        calcD5(ctx);\\n        calcD4(ctx);\\n        calcD3(ctx);\\n        ctx.deltas.code = (ctx.deltas.d1 >= 0 ? 1 : 0) + 2 * (ctx.deltas.d2 >= 0 ? 1 : 0) + 4 * (ctx.deltas.d3 >= 0 ? 1 : 0) + 8 * (ctx.deltas.d4 >= 0 ? 1 : 0) + 16 * (ctx.deltas.d5 >= 0 ? 1 : 0);\\n\\n\\n        console.log(\\\"-------- Deltas\\\");\\n        logSign(\\\"d1:\\\", ctx.deltas.d1);\\n        logSign(\\\"d2:\\\", ctx.deltas.d2);\\n        logSign(\\\"d3:\\\", ctx.deltas.d3);\\n        logSign(\\\"d4:\\\", ctx.deltas.d4);\\n        logSign(\\\"d5:\\\", ctx.deltas.d5);\\n        logSign(\\\"d6:\\\", ctx.deltas.d6);\\n        console.log(\\\"code:\\\", ctx.deltas.code);\\n        console.log(\\\"--------\\\");\\n\\n\\n        Action[] memory actions = new Action[](6);\\n        uint index;\\n\\n        deltas = ctx.deltas;\\n\\n\\n        if (deltas.d1 < 0 && deltas.d3 < 0 && deltas.d4 < 0\\n            || deltas.d1 > 0 && deltas.d3 > 0 && deltas.d4 > 0\\n        ) {\\n            revert(\\\"D1-D3-D4 have same sign\\\");\\n        }\\n\\n        if (deltas.d3 < 0 && deltas.d5 < 0 && deltas.d6 < 0\\n            || deltas.d3 > 0 && deltas.d5 > 0 && deltas.d6 > 0\\n        ) {\\n            revert(\\\"D3-D5-D6 have same sign\\\");\\n        }\\n\\n        if (deltas.d3 >= 0 && deltas.d4 < 0 && deltas.d5 < 0) {\\n            // first circle cases (4 cases)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.REPAY_TOKEN_TO_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.WITHDRAW_ASSET_FROM_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action((deltas.d1 < 0) ? ActionType.SWAP_USDPLUS_TO_ASSET : ActionType.SWAP_ASSET_TO_USDPLUS, abs(deltas.d1), 0);\\n            actions[index++] = Action(ActionType.SWAP_ASSET_TO_TOKEN, MAX_UINT_VALUE, ctx.tokenAssetSlippagePercent);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY, (ctx2.amount < 0) ? uint(-ctx2.amount) : MAX_UINT_VALUE, 0);\\n        } else if (deltas.d3 < 0 && deltas.d4 >= 0 && deltas.d5 >= 0) {\\n            // second circle cases (4 cases)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY, abs(deltas.d3), 0);\\n            actions[index++] = Action(ActionType.SWAP_TOKEN_TO_ASSET, MAX_UINT_VALUE, ctx.tokenAssetSlippagePercent);\\n            actions[index++] = Action((deltas.d1 < 0) ? ActionType.SWAP_USDPLUS_TO_ASSET : ActionType.SWAP_ASSET_TO_USDPLUS, abs(deltas.d1), 0);\\n            actions[index++] = Action(ActionType.SUPPLY_ASSET_TO_AAVE, MAX_UINT_VALUE, 0);\\n            actions[index++] = Action(ActionType.BORROW_TOKEN_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY, (ctx2.amount < 0) ? uint(-ctx2.amount) : MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 >= 0 && deltas.d2 >= 0 && deltas.d3 < 0) {\\n            // unstake without circle (3 cases: 00011,01011,10011)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY, abs(deltas.d6), 0);\\n            actions[index++] = Action((deltas.d5 < 0) ? ActionType.REPAY_TOKEN_TO_AAVE : ActionType.BORROW_TOKEN_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.SWAP_TOKEN_TO_ASSET, MAX_UINT_VALUE, ctx.tokenAssetSlippagePercent);\\n            actions[index++] = Action((deltas.d4 < 0) ? ActionType.WITHDRAW_ASSET_FROM_AAVE : ActionType.SUPPLY_ASSET_TO_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action(ActionType.SWAP_ASSET_TO_USDPLUS , MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 < 0 && deltas.d2 < 0 && deltas.d3 >= 0) {\\n            // stake without circle (3 cases: 01100,10100,11100)\\n            actions[index++] = Action(ActionType.SWAP_USDPLUS_TO_ASSET, abs(deltas.d1), 0);\\n            actions[index++] = Action((deltas.d4 < 0) ? ActionType.WITHDRAW_ASSET_FROM_AAVE : ActionType.SUPPLY_ASSET_TO_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action(ActionType.SWAP_ASSET_TO_TOKEN, MAX_UINT_VALUE, ctx.tokenAssetSlippagePercent);\\n            actions[index++] = Action((deltas.d5 < 0) ? ActionType.REPAY_TOKEN_TO_AAVE : ActionType.BORROW_TOKEN_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY, MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 < 0 && deltas.d2 >= 0 && deltas.d4 >= 0 && deltas.d5 < 0) {\\n            // balance without circle (2 cases: 01010,01110)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY, abs(deltas.d6), 0);\\n            actions[index++] = Action(ActionType.SWAP_USDPLUS_TO_ASSET, abs(deltas.d1), 0);\\n            actions[index++] = Action((deltas.d3 < 0) ? ActionType.SWAP_TOKEN_TO_ASSET : ActionType.SWAP_ASSET_TO_TOKEN, abs(deltas.d3), ctx.tokenAssetSlippagePercent);\\n            actions[index++] = Action(ActionType.SUPPLY_ASSET_TO_AAVE, MAX_UINT_VALUE, 0);\\n            actions[index++] = Action(ActionType.REPAY_TOKEN_TO_AAVE, MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 >= 0 && deltas.d2 < 0 && deltas.d4 < 0 && deltas.d5 >= 0) {\\n            // balance without circle (2 cases: 10001,10101)\\n            actions[index++] = Action(ActionType.WITHDRAW_ASSET_FROM_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action(ActionType.BORROW_TOKEN_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action((deltas.d3 < 0) ? ActionType.SWAP_TOKEN_TO_ASSET : ActionType.SWAP_ASSET_TO_TOKEN, abs(deltas.d3), ctx.tokenAssetSlippagePercent);\\n            actions[index++] = Action(ActionType.SWAP_ASSET_TO_USDPLUS, MAX_UINT_VALUE, 0);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY, (ctx2.amount < 0) ? uint(-ctx2.amount) : MAX_UINT_VALUE, 0);\\n        } else {\\n            revert(\\\"non-existent case\\\");\\n        }\\n\\n        // reassemble array\\n        Action[] memory tmp = new Action[](index);\\n        for (uint j; j < index; j++) {\\n            tmp[j] = actions[j];\\n        }\\n        actions = tmp;\\n\\n        console.log(\\\"--------- actions\\\");\\n        for (uint j; j < actions.length; j++) {\\n            console.log(j, uint(actions[j].actionType), actions[j].amount);\\n        }\\n        console.log(\\\"---------\\\");\\n        return (actions, ctx.deltas.code);\\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x80f6bc8aa17440e8e995426ed74245fad54ae0a42ca37dfad5b86f1970dcf552\",\"license\":\"MIT\"},\"contracts/libraries/UsdPlusWbnbLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StrategyUsdPlusWbnb.sol\\\";\\n\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/AaveBorrowLibrary.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Cone.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Venus.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Dodo.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary UsdPlusWbnbLibrary {\\n\\n\\n    /**\\n     * ActionType: ADD_LIQUIDITY\\n     * Add liquidity to cone pool:\\n     * [wbnbn, usdPlus] -> cone lpToken\\n     * + stake lpToken to Unknown\\n     */\\n    function _addLiquidity(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        if (self.wbnb().balanceOf(address(self)) == 0 || self.usdPlus().balanceOf(address(self)) == 0) {\\n            return;\\n        }\\n\\n        self.coneRouter().addLiquidity(\\n            address(self.wbnb()),\\n            address(self.usdPlus()),\\n            false,\\n            self.wbnb().balanceOf(address(self)),\\n            self.usdPlus().balanceOf(address(self)) - (delta == self.MAX_UINT_VALUE() ? 0 : delta),\\n            0,\\n            0,\\n            address(self),\\n            block.timestamp\\n        );\\n\\n        self.coneGauge().depositAll(self.veConeId());\\n\\n    }\\n\\n\\n    /**\\n     * ActionType: REMOVE_LIQUIDITY\\n     * Remove liquidity from cone pool:\\n     * cone lpToken -> [Wbnb, usdPlus]\\n     * @param delta - Wbnb amount in USD e6\\n     */\\n    function _removeLiquidity(StrategyUsdPlusWbnb self, uint256 delta) public returns (uint256 amountWbnb, uint256 amountUsdPlus) {\\n\\n        uint256 poolTokenDelta = self.control().usdToWbnb(delta);\\n\\n        uint256 balanceLp = self.coneGauge().balanceOf(address(self));\\n        (uint256 poolToken,) = _getLiquidityByLp(self, balanceLp);\\n        uint256 lpForUnstake = poolTokenDelta * balanceLp / poolToken + 1;\\n        self.coneGauge().withdraw(lpForUnstake);\\n\\n        (amountWbnb, amountUsdPlus) = self.coneRouter().removeLiquidity(\\n            address(self.wbnb()),\\n            address(self.usdPlus()),\\n            false,\\n            lpForUnstake,\\n            0,\\n            0,\\n            address(self),\\n            block.timestamp\\n        );\\n\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_USDPLUS_TO_ASSET\\n     * Swap on exchange\\n     * usdPlus -> busd\\n     * @param delta - UsdPlus in USD e6\\n     */\\n    function _swapUspPlusToBusd(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        uint256 redeemUsdPlusAmount = (delta == self.MAX_UINT_VALUE()) ? self.usdPlus().balanceOf(address(self)) : (self.control().usdToBusd(delta) / 10 ** 12);\\n        if (redeemUsdPlusAmount == 0) return;\\n        self.exchange().redeem(address(self.busd()), redeemUsdPlusAmount);\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_ASSET_TO_USDPLUS\\n     * Swap on exchange\\n     * busd -> usdPlus\\n     * @param delta - Busd in USD e6\\n     */\\n    function _swapBusdToUsdPlus(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        uint256 buyBusdAmount = (delta == self.MAX_UINT_VALUE()) ? self.busd().balanceOf(address(self)) : (self.control().usdToBusd(delta));\\n        if (buyBusdAmount == 0) return;\\n        self.exchange().buy(address(self.busd()), buyBusdAmount);\\n    }\\n\\n\\n    /**\\n     * ActionType: SUPPLY_ASSET_TO_AAVE\\n     * busd -> (supply aave)\\n     * @param delta - Busd in USD e6\\n     */\\n    function _supplyBusdToVenus(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        uint256 supplyBusdAmount = (delta == self.MAX_UINT_VALUE()) ? self.busd().balanceOf(address(self)) : self.control().usdToBusd(delta);\\n        if (supplyBusdAmount == 0) return;\\n        self.busd().approve(address(self.vBusdToken()), supplyBusdAmount);\\n        self.vBusdToken().mint(supplyBusdAmount);\\n    }\\n\\n\\n    /**\\n     * ActionType: WITHDRAW_ASSET_FROM_AAVE\\n     * (aave) -> busd\\n     * @param delta - Busd in USD e6\\n     */\\n    function _withdrawBusdFromVenus(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        uint256 withdrawBusdAmount = self.control().usdToBusd(delta);\\n        self.vBusdToken().redeemUnderlying(withdrawBusdAmount);\\n    }\\n\\n\\n    /**\\n     * ActionType: BORROW_TOKEN_FROM_AAVE\\n     * (borrow from aave) -> wbnb\\n     * @param delta - Wbnb in USD e6\\n     */\\n    function _borrowWbnbFromVenus(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        uint256 borrowTokenAmount = self.control().usdToWbnb(delta);\\n        self.vBnbToken().borrow(borrowTokenAmount);\\n        IWbnb(address(self.wbnb())).deposit{ value: address(this).balance }();\\n    }\\n\\n\\n    /**\\n     * ActionType: REPAY_TOKEN_TO_AAVE\\n     * wbnb -> (back to aave)\\n     * @param delta - Wbnb in USD e6\\n     */\\n    function _repayWbnbToVenus(StrategyUsdPlusWbnb self, uint256 delta) public {\\n        uint256 repayWbnbAmount = (delta == self.MAX_UINT_VALUE()) ? self.wbnb().balanceOf(address(self)) : self.control().usdToWbnb(delta);\\n        if (repayWbnbAmount == 0) return;\\n        IWbnb(address(self.wbnb())).withdraw(repayWbnbAmount);\\n        self.maximillion().repayBehalfExplicit{ value: address(this).balance }(address(this), address(self.vBnbToken()));\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_TOKEN_TO_ASSET\\n     * Swap on dodo\\n     * wbnb -> busd\\n     * @param delta - Wbnb in USD e6\\n     */\\n    function _swapTokenToAsset(StrategyUsdPlusWbnb self, uint256 delta, uint256 slippagePercent) public {\\n        uint256 swapWbnbAmount = (delta == self.MAX_UINT_VALUE()) ? self.wbnb().balanceOf(address(self)) : self.control().usdToWbnb(delta);\\n        if (swapWbnbAmount == 0) return;\\n\\n        uint256 amountOutMin = self.control().usdToBusd(self.control().wbnbToUsd(swapWbnbAmount / 10000 * (10000 - slippagePercent)));\\n\\n        ConeLibrary.swap(\\n            self.coneRouter(),\\n            address(self.wbnb()),\\n            address(self.busd()),\\n            false,\\n            swapWbnbAmount,\\n            amountOutMin,\\n            address(this)\\n        );\\n\\n        self.usdPlus().approve(address(self.coneRouter()), type(uint256).max);\\n        self.wbnb().approve(address(self.coneRouter()), type(uint256).max);\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_ASSET_TO_TOKEN\\n     * Swap on dodo\\n     * busd -> wbnb\\n     * @param delta - BUSD in USD e6\\n     * example tx: https://bscscan.com/tx/0xd029b94ab61421a1126d29236632c6ce6869d3e753ad857d6b9f55576752ca6a\\n     */\\n    function _swapAssetToToken(StrategyUsdPlusWbnb self, uint256 delta, uint256 slippagePercent) public {\\n        uint256 swapAssetAmount = (delta == self.MAX_UINT_VALUE()) ? self.busd().balanceOf(address(self)) : self.control().usdToBusd(delta);\\n        if (swapAssetAmount == 0) return;\\n\\n        uint256 amountOutMin = self.control().usdToWbnb(self.control().busdToUsd(swapAssetAmount / 10000 * (10000 - slippagePercent)));\\n\\n        ConeLibrary.swap(\\n            self.coneRouter(),\\n            address(self.busd()),\\n            address(self.wbnb()),\\n            false,\\n            swapAssetAmount,\\n            amountOutMin,\\n            address(this)\\n        );\\n\\n        self.usdPlus().approve(address(self.coneRouter()), type(uint256).max);\\n        self.wbnb().approve(address(self.coneRouter()), type(uint256).max);\\n    }\\n\\n\\n    /**\\n     * Own liquidity in pool in their native digits. Used in strategy.\\n     */\\n    function _getLiquidity(StrategyUsdPlusWbnb self) public view returns (uint256, uint256) {\\n        uint256 balanceLp = self.coneGauge().balanceOf(address(self));\\n        return _getLiquidityByLp(self, balanceLp);\\n    }\\n\\n    function _getLiquidityByLp(StrategyUsdPlusWbnb self, uint256 balanceLp) internal view returns (uint256, uint256) {\\n\\n         (uint256 reserve0Current, uint256 reserve1Current,) = self.conePair().getReserves();\\n\\n         uint256 amountLiq0 = reserve0Current * balanceLp / self.conePair().totalSupply();\\n         uint256 amountLiq1 = reserve1Current * balanceLp / self.conePair().totalSupply();\\n         return (amountLiq0, amountLiq1);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x58b4d681bb0a80f8ad6496e4297e45bc6671a7b14e3e1127910e226f6cdc134a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620032221760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6156806200018e60003960008181611083015281816110c301528181611163015281816111a3015261123201526156806000f3fe6080604052600436106103c75760003560e01c8063913e77ad116101f2578063cad7d46a1161010d578063dc19d643116100a0578063f72c0d8b1161006f578063f72c0d8b14610b53578063faa9f7dd14610b87578063fb200baf14610b9f578063fb24974a14610bc057600080fd5b8063dc19d64314610ae4578063dc2cddf914610afb578063ef33f76b14610b12578063ef5cfb8c14610b3357600080fd5b8063d547741f116100dc578063d547741f14610a61578063d7a1e6ab14610a81578063d8de658714610aa3578063da909b0914610ac457600080fd5b8063cad7d46a146109e8578063cb87c06214610a08578063cc545bec14610a1f578063d2f7265a14610a4057600080fd5b8063aea05b6111610185578063bb94d0f411610154578063bb94d0f414610963578063bd0f105314610984578063c13270f1146109a6578063c21ebd07146109c757600080fd5b8063aea05b61146108f6578063b1ac6c701461090d578063b69ef8a81461092d578063bad1d3da1461094257600080fd5b8063a217fddf116101c1578063a217fddf1461088b578063a3673b38146108a0578063a66b5713146108b5578063a694fc3a146108d657600080fd5b8063913e77ad1461080857806391d148541461082957806396e49c8e146108495780639bd59a751461086a57600080fd5b8063514e460a116102e257806369c24085116102755780638129fc1c116102445780638129fc1c1461079d57806381fcab63146107b25780638381e182146107c75780638d72647e146107e757600080fd5b806369c24085146107195780636f84a5ff1461073a578063719065fe1461075b5780637bb98a681461077b57600080fd5b80635a01f33d116102b15780635a01f33d146106975780635dbd733a146106ad578063639d1a4f146106e157806364f8b89a146106f857600080fd5b8063514e460a1461061f57806352d1902d1461064057806358b3ff3e146106555780635918be1a1461067657600080fd5b806336568abe1161035a5780634031234c116103295780634031234c146105b45780634244f889146105cb5780634d12fca4146105ec5780634f1ef2861461060c57600080fd5b806336568abe146105335780633659cfe61461055357806338d52e0f146105735780633ca5b2341461059357600080fd5b8063248a9ca311610396578063248a9ca3146104aa5780632a8b096f146104da5780632efce57b146104f15780632f2ff15d1461051357600080fd5b806301ffc9a7146103d35780630ceb9bfe14610408578063150b7a021461044157806322841f011461048557600080fd5b366103ce57005b600080fd5b3480156103df57600080fd5b506103f36103ee366004614c31565b610bd6565b60405190151581526020015b60405180910390f35b34801561041457600080fd5b5061013d54610429906001600160a01b031681565b6040516001600160a01b0390911681526020016103ff565b34801561044d57600080fd5b5061046c61045c36600461490f565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103ff565b34801561049157600080fd5b5061049c6101445481565b6040519081526020016103ff565b3480156104b657600080fd5b5061049c6104c5366004614bcf565b60009081526065602052604090206001015490565b3480156104e657600080fd5b5061049c6101455481565b3480156104fd57600080fd5b5061051161050c3660046149cb565b610c0d565b005b34801561051f57600080fd5b5061051161052e366004614c01565b610fd0565b34801561053f57600080fd5b5061051161054e366004614c01565b610ffa565b34801561055f57600080fd5b5061051161056e3660046148d5565b611078565b34801561057f57600080fd5b5060fb54610429906001600160a01b031681565b34801561059f57600080fd5b5061012f54610429906001600160a01b031681565b3480156105c057600080fd5b5061049c6101435481565b3480156105d757600080fd5b5061013754610429906001600160a01b031681565b3480156105f857600080fd5b5060fc54610429906001600160a01b031681565b61051161061a36600461497b565b611158565b34801561062b57600080fd5b5061012e54610429906001600160a01b031681565b34801561064c57600080fd5b5061049c611225565b34801561066157600080fd5b5061014654610429906001600160a01b031681565b34801561068257600080fd5b5061013b54610429906001600160a01b031681565b3480156106a357600080fd5b506101455461049c565b3480156106b957600080fd5b5061049c7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156106ed57600080fd5b5061049c6101345481565b34801561070457600080fd5b5061013c54610429906001600160a01b031681565b34801561072557600080fd5b5061014154610429906001600160a01b031681565b34801561074657600080fd5b5061013a54610429906001600160a01b031681565b34801561076757600080fd5b50610511610776366004614cc1565b6112d8565b34801561078757600080fd5b50610790611f69565b6040516103ff9190614f3f565b3480156107a957600080fd5b50610511611ff0565b3480156107be57600080fd5b506105116120b9565b3480156107d357600080fd5b5061049c6107e2366004614c01565b6126f6565b3480156107f357600080fd5b5061013054610429906001600160a01b031681565b34801561081457600080fd5b5061014854610429906001600160a01b031681565b34801561083557600080fd5b506103f3610844366004614c01565b612860565b34801561085557600080fd5b5061014054610429906001600160a01b031681565b34801561087657600080fd5b5061013954610429906001600160a01b031681565b34801561089757600080fd5b5061049c600081565b3480156108ac57600080fd5b5061049c61288b565b3480156108c157600080fd5b5061013654610429906001600160a01b031681565b3480156108e257600080fd5b506105116108f1366004614bcf565b612909565b34801561090257600080fd5b5061049c61013e5481565b34801561091957600080fd5b50610511610928366004614c5b565b6129f2565b34801561093957600080fd5b50610511612fdd565b34801561094e57600080fd5b5061014c54610429906001600160a01b031681565b34801561096f57600080fd5b5061013854610429906001600160a01b031681565b34801561099057600080fd5b5061049c60008051602061559e83398151915281565b3480156109b257600080fd5b5061014954610429906001600160a01b031681565b3480156109d357600080fd5b5061014b54610429906001600160a01b031681565b3480156109f457600080fd5b50610511610a03366004614bcf565b613019565b348015610a1457600080fd5b5061049c6101355481565b348015610a2b57600080fd5b5061013154610429906001600160a01b031681565b348015610a4c57600080fd5b5061013f54610429906001600160a01b031681565b348015610a6d57600080fd5b50610511610a7c366004614c01565b61307b565b348015610a8d57600080fd5b5061049c60008051602061551283398151915281565b348015610aaf57600080fd5b5061014754610429906001600160a01b031681565b348015610ad057600080fd5b50610511610adf3660046148d5565b6130a0565b348015610af057600080fd5b5061049c6101335481565b348015610b0757600080fd5b5061049c6101425481565b348015610b1e57600080fd5b5061013254610429906001600160a01b031681565b348015610b3f57600080fd5b5061049c610b4e3660046148d5565b61319e565b348015610b5f57600080fd5b5061049c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610b9357600080fd5b5061049c630786b40d81565b348015610bab57600080fd5b5061014a54610429906001600160a01b031681565b348015610bcc57600080fd5b5061049c60001981565b60006001600160e01b03198216637965db0b60e01b1480610c0757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c377fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733612860565b610c885760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e7400000060448201526064015b60405180910390fd5b6101495461013e5460405163379607f560e01b81526001600160a01b039092169163379607f591610cbf9160040190815260200190565b602060405180830381600087803b158015610cd957600080fd5b505af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190614be8565b5061013c5461013d546040516370a0823160e01b81523060048201526001600160a01b039283169263095ea7b392169083906370a082319060240160206040518083038186803b158015610d6457600080fd5b505afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c9190614be8565b6040518363ffffffff1660e01b8152600401610db9929190614e98565b602060405180830381600087803b158015610dd357600080fd5b505af1158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190614bb4565b5061013d5461013e5461013c546040516370a0823160e01b81523060048201526001600160a01b039384169363b2383e55939216906370a082319060240160206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190614be8565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610ed757600080fd5b505af1158015610eeb573d6000803e3d6000fd5b505061013d5461013e54604051639d507b8b60e01b81526004810191909152630786b40d60248201526001600160a01b039091169250639d507b8b9150604401600060405180830381600087803b158015610f4557600080fd5b505af1158015610f59573d6000803e3d6000fd5b505061013a5461013e546040516307f66d6b60e51b81526001600160a01b03909216935063fecdad609250610f98918890889088908890600401615119565b600060405180830381600087803b158015610fb257600080fd5b505af1158015610fc6573d6000803e3d6000fd5b5050505050505050565b600082815260656020526040902060010154610feb81613231565b610ff5838361323b565b505050565b6001600160a01b038116331461106a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c7f565b61107482826132c1565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110c15760405162461bcd60e51b8152600401610c7f90615033565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661110a6000805160206155e2833981519152546001600160a01b031690565b6001600160a01b0316146111305760405162461bcd60e51b8152600401610c7f9061507f565b61113981613328565b6040805160008082526020820190925261115591839190613352565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111a15760405162461bcd60e51b8152600401610c7f90615033565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111ea6000805160206155e2833981519152546001600160a01b031690565b6001600160a01b0316146112105760405162461bcd60e51b8152600401610c7f9061507f565b61121982613328565b61107482826001613352565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112c55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610c7f565b506000805160206155e283398151915290565b6112e3600033612860565b6113265760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610c7f565b61133360208201826148d5565b61012e80546001600160a01b0319166001600160a01b039290921691909117905561136460408201602083016148d5565b61012f80546001600160a01b0319166001600160a01b039290921691909117905561139560608201604083016148d5565b61013080546001600160a01b0319166001600160a01b03929092169190911790556113c8610360820161034083016148d5565b61014a80546001600160a01b0319166001600160a01b03929092169190911790556113f960808201606083016148d5565b61013180546001600160a01b0319166001600160a01b039290921691909117905561142a60a08201608083016148d5565b61013280546001600160a01b0319166001600160a01b039290921691909117905561145b60408201602083016148d5565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561149357600080fd5b505afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190614cfe565b6114d690600a61532c565b610133556114ea60608201604083016148d5565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a9190614cfe565b61156590600a61532c565b61013455670de0b6b3a764000061013555611587610100820160e083016148d5565b61013680546001600160a01b0319166001600160a01b03929092169190911790556115ba610120820161010083016148d5565b61013780546001600160a01b0319166001600160a01b03929092169190911790556115f06115eb60208301836148d5565b6134cc565b611602610140820161012083016148d5565b61013880546001600160a01b0319166001600160a01b0392909216919091179055611635610160820161014083016148d5565b61013980546001600160a01b0319166001600160a01b0392909216919091179055611668610180820161016083016148d5565b61013a80546001600160a01b0319166001600160a01b039290921691909117905561169b6101a0820161018083016148d5565b61013b80546001600160a01b0319166001600160a01b03929092169190911790556116ce6101c082016101a083016148d5565b61013c80546001600160a01b0319166001600160a01b03929092169190911790556117016101e082016101c083016148d5565b61013d80546001600160a01b0319166001600160a01b03929092169190911790556101e081013561013e5561173e610220820161020083016148d5565b61013f80546001600160a01b0319166001600160a01b0392909216919091179055611771610240820161022083016148d5565b61014080546001600160a01b0319166001600160a01b03929092169190911790556117a4610260820161024083016148d5565b61014180546001600160a01b0319166001600160a01b0392909216919091179055610280810135610142556117e1610320820161030083016148d5565b61014880546001600160a01b0319166001600160a01b0392909216919091179055611814610340820161032083016148d5565b61014980546001600160a01b0319166001600160a01b0392909216919091179055611847610380820161036083016148d5565b61014b80546001600160a01b0319166001600160a01b0392831617905561012f541663095ea7b3611880610280840161026085016148d5565b6000196040518363ffffffff1660e01b81526004016118a0929190614e98565b602060405180830381600087803b1580156118ba57600080fd5b505af11580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190614bb4565b50610130546001600160a01b031663095ea7b3611917610280840161026085016148d5565b6000196040518363ffffffff1660e01b8152600401611937929190614e98565b602060405180830381600087803b15801561195157600080fd5b505af1158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190614bb4565b5061012e546101385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119c49291169060001990600401614e98565b602060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a169190614bb4565b50610130546101385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611a519291169060001990600401614e98565b602060405180830381600087803b158015611a6b57600080fd5b505af1158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa39190614bb4565b50610139546101385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611ade9291169060001990600401614e98565b602060405180830381600087803b158015611af857600080fd5b505af1158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b309190614bb4565b506101395461013b5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611b6b9291169060001990600401614e98565b602060405180830381600087803b158015611b8557600080fd5b505af1158015611b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbd9190614bb4565b5061012e5461013f5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611bf89291169060001990600401614e98565b602060405180830381600087803b158015611c1257600080fd5b505af1158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a9190614bb4565b5061012f5461013f5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611c859291169060001990600401614e98565b602060405180830381600087803b158015611c9f57600080fd5b505af1158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd79190614bb4565b50611ce860c0820160a083016148d5565b61014c80546001600160a01b0319166001600160a01b039290921691909117905560408051600280825260608201835260009260208301908036833750506101315482519293506001600160a01b031691839150600090611d4b57611d4b615465565b6001600160a01b03928316602091820292909201015261013254825191169082906001908110611d7d57611d7d615465565b6001600160a01b03928316602091820292909201015261014c54604051631853304760e31b8152600092919091169063c299823890611dc0908590600401614eb1565b600060405180830381600087803b158015611dda57600080fd5b505af1158015611dee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e169190810190614b1c565b9050611e2860e0840160c085016148d5565b61014680546001600160a01b0319166001600160a01b0392909216919091179055611e5f6102a084013566038d7ea4c680006153d7565b61014355611e796102c084013566038d7ea4c680006153d7565b61014455600061014555610147546001600160a01b031615611ebb5761014754611ebb90600080516020615512833981519152906001600160a01b031661307b565b611ecd61030084016102e085016148d5565b61014780546001600160a01b0319166001600160a01b03929092169182179055611f069060008051602061551283398151915290610fd0565b610147546040516319d0806560e11b81523060048201526001600160a01b03909116906333a100ca90602401600060405180830381600087803b158015611f4c57600080fd5b505af1158015611f60573d6000803e3d6000fd5b50505050505050565b6101475460408051630f77314d60e31b815290516060926001600160a01b031691637bb98a68916004808301926000929190829003018186803b158015611faf57600080fd5b505afa158015611fc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611feb9190810190614a37565b905090565b600054610100900460ff16158080156120105750600054600160ff909116105b8061202a5750303b15801561202a575060005460ff166001145b6120465760405162461bcd60e51b8152600401610c7f906150cb565b6000805460ff191660011790558015612069576000805461ff0019166101001790555b61207161353f565b8015611155576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6120e37fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733612860565b61212f5760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e740000006044820152606401610c7f565b61013b5460408051630df4082360e21b815290516000926001600160a01b0316916337d0208c916004808301926020929190829003018186803b15801561217557600080fd5b505afa158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad91906148f2565b604080516001808252818301909252919250600091906020808301908036833701905050905081816000815181106121e7576121e7615465565b6001600160a01b03929092166020928302919091019091015260408051600380825260808201909252600091816020015b60608152602001906001900390816122185750506040805160038082526080820190925291925060208201606080368337019050508160008151811061226057612260615465565b602090810291909101015261013c5481516001600160a01b0390911690829060009061228e5761228e615465565b60200260200101516000815181106122a8576122a8615465565b6001600160a01b03928316602091820292909201015261013054825191169082906000906122d8576122d8615465565b60200260200101516001815181106122f2576122f2615465565b6001600160a01b03928316602091820292909201015261012e548251911690829060009061232257612322615465565b602002602001015160028151811061233c5761233c615465565b6001600160a01b03928316602091820292909201015261013a5461013e54604051637715ee7560e01b81529190921691637715ee7591612383918691869190600401614ec4565b600060405180830381600087803b15801561239d57600080fd5b505af11580156123b1573d6000803e3d6000fd5b5050610130546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156123fc57600080fd5b505afa158015612410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124349190614be8565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561247e57600080fd5b505afa158015612492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b69190614be8565b61013c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561250057600080fd5b505afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125389190614be8565b905082156125cc57610130546101485460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612578929116908790600401614e98565b602060405180830381600087803b15801561259257600080fd5b505af11580156125a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ca9190614bb4565b505b811561265e5761012e546101485460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261260a929116908690600401614e98565b602060405180830381600087803b15801561262457600080fd5b505af1158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c9190614bb4565b505b80156126ee5761013c546101485460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261269c929116908590600401614e98565b602060405180830381600087803b1580156126b657600080fd5b505af11580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f609190614bb4565b505050505050565b600061271060008051602061559e83398151915233612860565b61272c5760405162461bcd60e51b8152600401610c7f90614ffc565b6000612737846135fd565b90508381101561279b5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610c7f565b60fb5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906127cd9086908590600401614e98565b602060405180830381600087803b1580156127e757600080fd5b505af11580156127fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281f9190614bb4565b5060408051858152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610147546040805163146ce76760e31b815290516000926001600160a01b03169163a3673b38916004808301926020929190829003018186803b1580156128d157600080fd5b505afa1580156128e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190614be8565b61292160008051602061559e83398151915233612860565b61293d5760405162461bcd60e51b8152600401610c7f90614ffc565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a160fb546040516370a0823160e01b8152306004820152611155916001600160a01b0316906370a082319060240160206040518083038186803b1580156129b557600080fd5b505afa1580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190614be8565b61366a565b612a0a60008051602061551283398151915233612860565b612a4e5760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc810d3d3951493d3605a1b6044820152606401610c7f565b600081516009811115612a6357612a6361544f565b1415612b1657612aa76040518060400160405280601c81526020017f6578656375746520616374696f6e204144445f4c4951554944495459000000008152506136cc565b602081015160405163029bf6dd60e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163029bf6dd91612ae3913091600401614e98565b60006040518083038186803b158015612afb57600080fd5b505af4158015612b0f573d6000803e3d6000fd5b5050505050565b600181516009811115612b2b57612b2b61544f565b1415612bfa57612b6f6040518060400160405280601f81526020017f6578656375746520616374696f6e2052454d4f56455f4c4951554944495459008152506136cc565b602081015160405163231b9bc560e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163231b9bc591612bab913091600401614e98565b604080518083038186803b158015612bc257600080fd5b505af4158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190614cda565b600281516009811115612c0f57612c0f61544f565b1415612c7257612c36604051806060016040528060248152602001615532602491396136cc565b60208101516040516304286b2560e51b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163850d64a091612ae3913091600401614e98565b600381516009811115612c8757612c8761544f565b1415612cea57612cae6040518060600160405280602481526020016155be602491396136cc565b6020810151604051632e2ab5a360e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__91632e2ab5a391612ae3913091600401614e98565b600481516009811115612cff57612cff61544f565b1415612d6257612d26604051806060016040528060238152602001615556602391396136cc565b602081015160405163e03d306960e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163e03d306991612ae3913091600401614e98565b600581516009811115612d7757612d7761544f565b1415612dda57612d9e6040518060600160405280602781526020016154a7602791396136cc565b60208101516040516350ae425b60e11b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163a15c84b691612ae3913091600401614e98565b600681516009811115612def57612def61544f565b1415612e5257612e16604051806060016040528060258152602001615579602591396136cc565b60208101516040516355b45e9f60e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__916355b45e9f91612ae3913091600401614e98565b600781516009811115612e6757612e6761544f565b1415612ec957612e8e6040518060600160405280602281526020016154f0602291396136cc565b602081015160405162d051bf60e51b815273__$f537e46d1ff61134b3542e8a9ac925b215$__91631a0a37e091612ae3913091600401614e98565b600881516009811115612ede57612ede61544f565b1415612f5357612f056040518060600160405280602281526020016154ce602291396136cc565b60208101516040808301519051635549b45f60e01b81523060048201526024810192909252604482015273__$f537e46d1ff61134b3542e8a9ac925b215$__90635549b45f90606401612ae3565b600981516009811115612f6857612f6861544f565b141561115557612f8f604051806060016040528060228152602001615602602291396136cc565b60208101516040808301519051631ee6c5c960e11b81523060048201526024810192909252604482015273__$f537e46d1ff61134b3542e8a9ac925b215$__90633dcd8b9290606401612ae3565b612ff560008051602061559e83398151915233612860565b6130115760405162461bcd60e51b8152600401610c7f90614ffc565b61115561370f565b61303160008051602061551283398151915233612860565b6130755760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc810d3d3951493d3605a1b6044820152606401610c7f565b61014555565b60008281526065602052604090206001015461309681613231565b610ff583836132c1565b6130ab600033612860565b6130ee5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610c7f565b6001600160a01b03811661313f5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610c7f565b60fc546131649060008051602061559e833981519152906001600160a01b031661307b565b61317c60008051602061559e83398151915282610fd0565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60006131b860008051602061559e83398151915233612860565b6131d45760405162461bcd60e51b8152600401610c7f90614ffc565b60006131df8361377e565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161321291815260200190565b60405180910390a190505b919050565b6001600160a01b03163b151590565b61115581336137ae565b6132458282612860565b6110745760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561327d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6132cb8282612860565b156110745760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361107481613231565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561338557610ff583613812565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133be57600080fd5b505afa9250505080156133ee575060408051601f3d908101601f191682019092526133eb91810190614be8565b60015b6134515760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610c7f565b6000805160206155e283398151915281146134c05760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610c7f565b50610ff58383836138ae565b6001600160a01b03811661351d5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610c7f565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff161580801561355f5750600054600160ff909116105b806135795750303b158015613579575060005460ff166001145b6135955760405162461bcd60e51b8152600401610c7f906150cb565b6000805460ff1916600117905580156135b8576000805461ff0019166101001790555b6135c06138d9565b6135c86138d9565b6135d360003361323b565b6120717f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361323b565b610147546040516312093a2360e11b81526000916001600160a01b031690632412744690613632906002908690600401614fae565b600060405180830381600087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b5093949350505050565b610147546040516312093a2360e11b81526001600160a01b039091169063241274469061369e906001908590600401614fae565b600060405180830381600087803b1580156136b857600080fd5b505af1158015612b0f573d6000803e3d6000fd5b611155816040516024016136e09190614fc9565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613946565b610147546040516312093a2360e11b81526000916001600160a01b0316906324127446906137439084908190600401614fae565b600060405180830381600087803b15801561375d57600080fd5b505af1158015613771573d6000803e3d6000fd5b5050505061014554905090565b600080613789613967565b61379390826152af565b905061379d613b49565b6137a790826152af565b9392505050565b6137b88282612860565b611074576137d0816001600160a01b03166014613d43565b6137db836020613d43565b6040516020016137ec929190614df7565b60408051601f198184030181529082905262461bcd60e51b8252610c7f91600401614fc9565b6001600160a01b0381163b61387f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c7f565b6000805160206155e283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6138b783613edf565b6000825111806138c45750805b15610ff5576138d38383613f1f565b50505050565b600054610100900460ff166139445760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7f565b565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60408051600180825281830190925260009182919060208083019080368337505061013c5482519293506001600160a01b0316918391506000906139ad576139ad615465565b6001600160a01b03928316602091820292909201015261013b546040516331279d3d60e01b81529116906331279d3d906139ed9030908590600401614e6c565b600060405180830381600087803b158015613a0757600080fd5b505af1158015613a1b573d6000803e3d6000fd5b505061013c546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b158015613a6857600080fd5b505afa158015613a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa09190614be8565b90508015613b42576101385461013c546101305461012e54600093613adc936001600160a01b0391821693908216929082169116858088614013565b90508015613b40576101385461013c546101305461012e54600093613b30936001600160a01b03918216939082169290821691168580896064613b208b60636153d7565b613b2a91906152c7565b3061423e565b9050613b3c81856152af565b9350505b505b5092915050565b6040805160028082526060820183526000928392919060208301908036833750506101315482519293506001600160a01b031691839150600090613b8f57613b8f615465565b6001600160a01b03928316602091820292909201015261013254825191169082906001908110613bc157613bc1615465565b6001600160a01b03928316602091820292909201015261014c5460405163436f98f760e11b81529116906386df31ee90613c019030908590600401614e6c565b600060405180830381600087803b158015613c1b57600080fd5b505af1158015613c2f573d6000803e3d6000fd5b505061014a546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015613c7a57600080fd5b505afa158015613c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb29190614be8565b905060008115613d2c5761014b5461014a5461012f54600092613ce6926001600160a01b03918216929082169116866144f4565b90508015613d2a5761014b5461014a5461012f54600092613d1a926001600160a01b0391821692908216911687863061461d565b9050613d2681846152af565b9250505b505b613d3b64e8d4a51000826152c7565b935050505090565b60606000613d528360026153d7565b613d5d9060026152af565b67ffffffffffffffff811115613d7557613d7561547b565b6040519080825280601f01601f191660200182016040528015613d9f576020820181803683370190505b509050600360fc1b81600081518110613dba57613dba615465565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613de957613de9615465565b60200101906001600160f81b031916908160001a9053506000613e0d8460026153d7565b613e189060016152af565b90505b6001811115613e90576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613e4c57613e4c615465565b1a60f81b828281518110613e6257613e62615465565b60200101906001600160f81b031916908160001a90535060049490941c93613e8981615422565b9050613e1b565b5083156137a75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c7f565b613ee881613812565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613f875760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c7f565b600080846001600160a01b031684604051613fa29190614ddb565b600060405180830381855af49150503d8060008114613fdd576040519150601f19603f3d011682016040523d82523d6000602084013e613fe2565b606091505b509150915061400a8282604051806060016040528060278152602001615624602791396147d0565b95945050505050565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161402e579050509050878160008151811061407157614071615465565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106140a9576140a9615465565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505084816000815181106140e1576140e1615465565b60200260200101516040019015159081151581525050868160018151811061410b5761410b615465565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061414357614143615465565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160018151811061417b5761417b615465565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906141be90879086906004016151bd565b60006040518083038186803b1580156141d657600080fd5b505afa1580156141ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142129190810190614b1c565b90508060028151811061422757614227615465565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526000906001600160a01b038a169063095ea7b39061426f908d908890600401614e98565b602060405180830381600087803b15801561428957600080fd5b505af115801561429d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c19190614bb4565b5060408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816142da579050509050898160008151811061431d5761431d615465565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050888160008151811061435557614355615465565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050868160008151811061438d5761438d615465565b6020026020010151604001901515908115158152505088816001815181106143b7576143b7615465565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505087816001815181106143ef576143ef615465565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160018151811061442757614427615465565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038d169063f41766d890614470908990899087908a904290600401615212565b600060405180830381600087803b15801561448a57600080fd5b505af115801561449e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144c69190810190614b1c565b9050806002815181106144db576144db615465565b6020026020010151925050509998505050505050505050565b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061452d5761452d615465565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061456157614561615465565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009188169063d06ca61f906145a090879086906004016151a4565b60006040518083038186803b1580156145b857600080fd5b505afa1580156145cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145f49190810190614b1c565b90508060018151811061460957614609615465565b602002602001015192505050949350505050565b60405163095ea7b360e01b81526000906001600160a01b0387169063095ea7b39061464e908a908890600401614e98565b602060405180830381600087803b15801561466857600080fd5b505af115801561467c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a09190614bb4565b5060408051600280825260608201835260009260208301908036833701905050905086816000815181106146d6576146d6615465565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061470a5761470a615465565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918a16906338ed17399061474f908990899087908a9042906004016151d6565b600060405180830381600087803b15801561476957600080fd5b505af115801561477d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147a59190810190614b1c565b9050806001815181106147ba576147ba615465565b6020026020010151925050509695505050505050565b606083156147df5750816137a7565b8251156147ef5782518084602001fd5b8160405162461bcd60e51b8152600401610c7f9190614fc9565b60008083601f84011261481b57600080fd5b50813567ffffffffffffffff81111561483357600080fd5b6020830191508360208260051b850101111561484e57600080fd5b9250929050565b8051801515811461321d57600080fd5b600082601f83011261487657600080fd5b813567ffffffffffffffff8111156148905761489061547b565b6148a3601f8201601f191660200161525a565b8181528460208386010111156148b857600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156148e757600080fd5b81356137a781615491565b60006020828403121561490457600080fd5b81516137a781615491565b6000806000806080858703121561492557600080fd5b843561493081615491565b9350602085013561494081615491565b925060408501359150606085013567ffffffffffffffff81111561496357600080fd5b61496f87828801614865565b91505092959194509250565b6000806040838503121561498e57600080fd5b823561499981615491565b9150602083013567ffffffffffffffff8111156149b557600080fd5b6149c185828601614865565b9150509250929050565b600080600080604085870312156149e157600080fd5b843567ffffffffffffffff808211156149f957600080fd5b614a0588838901614809565b90965094506020870135915080821115614a1e57600080fd5b50614a2b87828801614809565b95989497509550505050565b60006020808385031215614a4a57600080fd5b825167ffffffffffffffff811115614a6157600080fd5b8301601f81018513614a7257600080fd5b8051614a85614a808261528b565b61525a565b80828252848201915084840188868560071b8701011115614aa557600080fd5b60009450845b84811015614b0e57608080838c031215614ac3578687fd5b614acb615231565b8351614ad681615491565b81528389015189820152604080850151908201526060614af7818601614855565b908201528552938701939190910190600101614aab565b509098975050505050505050565b60006020808385031215614b2f57600080fd5b825167ffffffffffffffff811115614b4657600080fd5b8301601f81018513614b5757600080fd5b8051614b65614a808261528b565b80828252848201915084840188868560051b8701011115614b8557600080fd5b600094505b83851015614ba8578051835260019490940193918501918501614b8a565b50979650505050505050565b600060208284031215614bc657600080fd5b6137a782614855565b600060208284031215614be157600080fd5b5035919050565b600060208284031215614bfa57600080fd5b5051919050565b60008060408385031215614c1457600080fd5b823591506020830135614c2681615491565b809150509250929050565b600060208284031215614c4357600080fd5b81356001600160e01b0319811681146137a757600080fd5b600060608284031215614c6d57600080fd5b6040516060810181811067ffffffffffffffff82111715614c9057614c9061547b565b6040528235600a8110614ca257600080fd5b8152602083810135908201526040928301359281019290925250919050565b60006103808284031215614cd457600080fd5b50919050565b60008060408385031215614ced57600080fd5b505080516020909101519092909150565b600060208284031215614d1057600080fd5b815160ff811681146137a757600080fd5b600081518084526020808501945080840160005b83811015614d5a5781516001600160a01b031687529582019590820190600101614d35565b509495945050505050565b600081518084526020808501945080840160005b83811015614d5a57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614d79565b60038110614dd757634e487b7160e01b600052602160045260246000fd5b9052565b60008251614ded8184602087016153f6565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e2f8160178501602088016153f6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e608160288401602088016153f6565b01602801949350505050565b6001600160a01b0383168152604060208201819052600090614e9090830184614d21565b949350505050565b6001600160a01b03929092168252602082015260400190565b6020815260006137a76020830184614d21565b606081526000614ed76060830186614d21565b6020838203818501528186518084528284019150828160051b85010183890160005b83811015614f2757601f19878403018552614f15838351614d21565b94860194925090850190600101614ef9565b50508095505050505050826040830152949350505050565b602080825282518282018190526000919060409081850190868401855b82811015614fa157815180516001600160a01b031685528681015187860152858101518686015260609081015115159085015260809093019290850190600101614f5c565b5091979650505050505050565b60408101614fbc8285614db9565b8260208301529392505050565b6020815260008251806020840152614fe88160408501602087016153f6565b601f01601f19169190910160400192915050565b60208082526017908201527f5265737472696374656420746f2045584348414e474552000000000000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b85815260606020808301829052908201859052600090869060808401835b8881101561516557833561514a81615491565b6001600160a01b031682529282019290820190600101615137565b508481036040860152858152810191508560005b8681101561519557813584529282019290820190600101615179565b50919998505050505050505050565b828152604060208201526000614e906040830184614d21565b828152604060208201526000614e906040830184614d65565b85815284602082015260a0604082015260006151f560a0830186614d21565b6001600160a01b0394909416606083015250608001529392505050565b85815284602082015260a0604082015260006151f560a0830186614d65565b6040516080810167ffffffffffffffff811182821017156152545761525461547b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156152835761528361547b565b604052919050565b600067ffffffffffffffff8211156152a5576152a561547b565b5060051b60200190565b600082198211156152c2576152c2615439565b500190565b6000826152e457634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561532457816000190482111561530a5761530a615439565b8085161561531757918102915b93841c93908002906152ee565b509250929050565b60006137a760ff84168360008261534557506001610c07565b8161535257506000610c07565b816001811461536857600281146153725761538e565b6001915050610c07565b60ff84111561538357615383615439565b50506001821b610c07565b5060208310610133831016604e8410600b84101617156153b1575081810a610c07565b6153bb83836152e9565b80600019048211156153cf576153cf615439565b029392505050565b60008160001904831182151516156153f1576153f1615439565b500290565b60005b838110156154115781810151838201526020016153f9565b838111156138d35750506000910152565b60008161543157615431615439565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461115557600080fdfe6578656375746520616374696f6e2057495448445241575f41535345545f46524f4d5f414156456578656375746520616374696f6e20535741505f544f4b454e5f544f5f41535345546578656375746520616374696f6e2052455041595f544f4b454e5f544f5f41415645126c7c8716c8f1c7c73a7370c820c7d73a9b4ed0ad633cfce1092f9ff47c85746578656375746520616374696f6e20535741505f555344504c55535f544f5f41535345546578656375746520616374696f6e20535550504c595f41535345545f544f5f414156456578656375746520616374696f6e20424f52524f575f544f4b454e5f46524f4d5f414156453eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d6578656375746520616374696f6e20535741505f41535345545f544f5f555344504c5553360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6578656375746520616374696f6e20535741505f41535345545f544f5f544f4b454e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200f4dbdaea5082533bf9b8e2a44013a7b9c6ebd5348bc803c6a7b9af97b66e4bc64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106103c75760003560e01c8063913e77ad116101f2578063cad7d46a1161010d578063dc19d643116100a0578063f72c0d8b1161006f578063f72c0d8b14610b53578063faa9f7dd14610b87578063fb200baf14610b9f578063fb24974a14610bc057600080fd5b8063dc19d64314610ae4578063dc2cddf914610afb578063ef33f76b14610b12578063ef5cfb8c14610b3357600080fd5b8063d547741f116100dc578063d547741f14610a61578063d7a1e6ab14610a81578063d8de658714610aa3578063da909b0914610ac457600080fd5b8063cad7d46a146109e8578063cb87c06214610a08578063cc545bec14610a1f578063d2f7265a14610a4057600080fd5b8063aea05b6111610185578063bb94d0f411610154578063bb94d0f414610963578063bd0f105314610984578063c13270f1146109a6578063c21ebd07146109c757600080fd5b8063aea05b61146108f6578063b1ac6c701461090d578063b69ef8a81461092d578063bad1d3da1461094257600080fd5b8063a217fddf116101c1578063a217fddf1461088b578063a3673b38146108a0578063a66b5713146108b5578063a694fc3a146108d657600080fd5b8063913e77ad1461080857806391d148541461082957806396e49c8e146108495780639bd59a751461086a57600080fd5b8063514e460a116102e257806369c24085116102755780638129fc1c116102445780638129fc1c1461079d57806381fcab63146107b25780638381e182146107c75780638d72647e146107e757600080fd5b806369c24085146107195780636f84a5ff1461073a578063719065fe1461075b5780637bb98a681461077b57600080fd5b80635a01f33d116102b15780635a01f33d146106975780635dbd733a146106ad578063639d1a4f146106e157806364f8b89a146106f857600080fd5b8063514e460a1461061f57806352d1902d1461064057806358b3ff3e146106555780635918be1a1461067657600080fd5b806336568abe1161035a5780634031234c116103295780634031234c146105b45780634244f889146105cb5780634d12fca4146105ec5780634f1ef2861461060c57600080fd5b806336568abe146105335780633659cfe61461055357806338d52e0f146105735780633ca5b2341461059357600080fd5b8063248a9ca311610396578063248a9ca3146104aa5780632a8b096f146104da5780632efce57b146104f15780632f2ff15d1461051357600080fd5b806301ffc9a7146103d35780630ceb9bfe14610408578063150b7a021461044157806322841f011461048557600080fd5b366103ce57005b600080fd5b3480156103df57600080fd5b506103f36103ee366004614c31565b610bd6565b60405190151581526020015b60405180910390f35b34801561041457600080fd5b5061013d54610429906001600160a01b031681565b6040516001600160a01b0390911681526020016103ff565b34801561044d57600080fd5b5061046c61045c36600461490f565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103ff565b34801561049157600080fd5b5061049c6101445481565b6040519081526020016103ff565b3480156104b657600080fd5b5061049c6104c5366004614bcf565b60009081526065602052604090206001015490565b3480156104e657600080fd5b5061049c6101455481565b3480156104fd57600080fd5b5061051161050c3660046149cb565b610c0d565b005b34801561051f57600080fd5b5061051161052e366004614c01565b610fd0565b34801561053f57600080fd5b5061051161054e366004614c01565b610ffa565b34801561055f57600080fd5b5061051161056e3660046148d5565b611078565b34801561057f57600080fd5b5060fb54610429906001600160a01b031681565b34801561059f57600080fd5b5061012f54610429906001600160a01b031681565b3480156105c057600080fd5b5061049c6101435481565b3480156105d757600080fd5b5061013754610429906001600160a01b031681565b3480156105f857600080fd5b5060fc54610429906001600160a01b031681565b61051161061a36600461497b565b611158565b34801561062b57600080fd5b5061012e54610429906001600160a01b031681565b34801561064c57600080fd5b5061049c611225565b34801561066157600080fd5b5061014654610429906001600160a01b031681565b34801561068257600080fd5b5061013b54610429906001600160a01b031681565b3480156106a357600080fd5b506101455461049c565b3480156106b957600080fd5b5061049c7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b3480156106ed57600080fd5b5061049c6101345481565b34801561070457600080fd5b5061013c54610429906001600160a01b031681565b34801561072557600080fd5b5061014154610429906001600160a01b031681565b34801561074657600080fd5b5061013a54610429906001600160a01b031681565b34801561076757600080fd5b50610511610776366004614cc1565b6112d8565b34801561078757600080fd5b50610790611f69565b6040516103ff9190614f3f565b3480156107a957600080fd5b50610511611ff0565b3480156107be57600080fd5b506105116120b9565b3480156107d357600080fd5b5061049c6107e2366004614c01565b6126f6565b3480156107f357600080fd5b5061013054610429906001600160a01b031681565b34801561081457600080fd5b5061014854610429906001600160a01b031681565b34801561083557600080fd5b506103f3610844366004614c01565b612860565b34801561085557600080fd5b5061014054610429906001600160a01b031681565b34801561087657600080fd5b5061013954610429906001600160a01b031681565b34801561089757600080fd5b5061049c600081565b3480156108ac57600080fd5b5061049c61288b565b3480156108c157600080fd5b5061013654610429906001600160a01b031681565b3480156108e257600080fd5b506105116108f1366004614bcf565b612909565b34801561090257600080fd5b5061049c61013e5481565b34801561091957600080fd5b50610511610928366004614c5b565b6129f2565b34801561093957600080fd5b50610511612fdd565b34801561094e57600080fd5b5061014c54610429906001600160a01b031681565b34801561096f57600080fd5b5061013854610429906001600160a01b031681565b34801561099057600080fd5b5061049c60008051602061559e83398151915281565b3480156109b257600080fd5b5061014954610429906001600160a01b031681565b3480156109d357600080fd5b5061014b54610429906001600160a01b031681565b3480156109f457600080fd5b50610511610a03366004614bcf565b613019565b348015610a1457600080fd5b5061049c6101355481565b348015610a2b57600080fd5b5061013154610429906001600160a01b031681565b348015610a4c57600080fd5b5061013f54610429906001600160a01b031681565b348015610a6d57600080fd5b50610511610a7c366004614c01565b61307b565b348015610a8d57600080fd5b5061049c60008051602061551283398151915281565b348015610aaf57600080fd5b5061014754610429906001600160a01b031681565b348015610ad057600080fd5b50610511610adf3660046148d5565b6130a0565b348015610af057600080fd5b5061049c6101335481565b348015610b0757600080fd5b5061049c6101425481565b348015610b1e57600080fd5b5061013254610429906001600160a01b031681565b348015610b3f57600080fd5b5061049c610b4e3660046148d5565b61319e565b348015610b5f57600080fd5b5061049c7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610b9357600080fd5b5061049c630786b40d81565b348015610bab57600080fd5b5061014a54610429906001600160a01b031681565b348015610bcc57600080fd5b5061049c60001981565b60006001600160e01b03198216637965db0b60e01b1480610c0757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c377fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733612860565b610c885760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e7400000060448201526064015b60405180910390fd5b6101495461013e5460405163379607f560e01b81526001600160a01b039092169163379607f591610cbf9160040190815260200190565b602060405180830381600087803b158015610cd957600080fd5b505af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190614be8565b5061013c5461013d546040516370a0823160e01b81523060048201526001600160a01b039283169263095ea7b392169083906370a082319060240160206040518083038186803b158015610d6457600080fd5b505afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c9190614be8565b6040518363ffffffff1660e01b8152600401610db9929190614e98565b602060405180830381600087803b158015610dd357600080fd5b505af1158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190614bb4565b5061013d5461013e5461013c546040516370a0823160e01b81523060048201526001600160a01b039384169363b2383e55939216906370a082319060240160206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190614be8565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610ed757600080fd5b505af1158015610eeb573d6000803e3d6000fd5b505061013d5461013e54604051639d507b8b60e01b81526004810191909152630786b40d60248201526001600160a01b039091169250639d507b8b9150604401600060405180830381600087803b158015610f4557600080fd5b505af1158015610f59573d6000803e3d6000fd5b505061013a5461013e546040516307f66d6b60e51b81526001600160a01b03909216935063fecdad609250610f98918890889088908890600401615119565b600060405180830381600087803b158015610fb257600080fd5b505af1158015610fc6573d6000803e3d6000fd5b5050505050505050565b600082815260656020526040902060010154610feb81613231565b610ff5838361323b565b505050565b6001600160a01b038116331461106a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c7f565b61107482826132c1565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110c15760405162461bcd60e51b8152600401610c7f90615033565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661110a6000805160206155e2833981519152546001600160a01b031690565b6001600160a01b0316146111305760405162461bcd60e51b8152600401610c7f9061507f565b61113981613328565b6040805160008082526020820190925261115591839190613352565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111a15760405162461bcd60e51b8152600401610c7f90615033565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111ea6000805160206155e2833981519152546001600160a01b031690565b6001600160a01b0316146112105760405162461bcd60e51b8152600401610c7f9061507f565b61121982613328565b61107482826001613352565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112c55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610c7f565b506000805160206155e283398151915290565b6112e3600033612860565b6113265760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610c7f565b61133360208201826148d5565b61012e80546001600160a01b0319166001600160a01b039290921691909117905561136460408201602083016148d5565b61012f80546001600160a01b0319166001600160a01b039290921691909117905561139560608201604083016148d5565b61013080546001600160a01b0319166001600160a01b03929092169190911790556113c8610360820161034083016148d5565b61014a80546001600160a01b0319166001600160a01b03929092169190911790556113f960808201606083016148d5565b61013180546001600160a01b0319166001600160a01b039290921691909117905561142a60a08201608083016148d5565b61013280546001600160a01b0319166001600160a01b039290921691909117905561145b60408201602083016148d5565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561149357600080fd5b505afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190614cfe565b6114d690600a61532c565b610133556114ea60608201604083016148d5565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a9190614cfe565b61156590600a61532c565b61013455670de0b6b3a764000061013555611587610100820160e083016148d5565b61013680546001600160a01b0319166001600160a01b03929092169190911790556115ba610120820161010083016148d5565b61013780546001600160a01b0319166001600160a01b03929092169190911790556115f06115eb60208301836148d5565b6134cc565b611602610140820161012083016148d5565b61013880546001600160a01b0319166001600160a01b0392909216919091179055611635610160820161014083016148d5565b61013980546001600160a01b0319166001600160a01b0392909216919091179055611668610180820161016083016148d5565b61013a80546001600160a01b0319166001600160a01b039290921691909117905561169b6101a0820161018083016148d5565b61013b80546001600160a01b0319166001600160a01b03929092169190911790556116ce6101c082016101a083016148d5565b61013c80546001600160a01b0319166001600160a01b03929092169190911790556117016101e082016101c083016148d5565b61013d80546001600160a01b0319166001600160a01b03929092169190911790556101e081013561013e5561173e610220820161020083016148d5565b61013f80546001600160a01b0319166001600160a01b0392909216919091179055611771610240820161022083016148d5565b61014080546001600160a01b0319166001600160a01b03929092169190911790556117a4610260820161024083016148d5565b61014180546001600160a01b0319166001600160a01b0392909216919091179055610280810135610142556117e1610320820161030083016148d5565b61014880546001600160a01b0319166001600160a01b0392909216919091179055611814610340820161032083016148d5565b61014980546001600160a01b0319166001600160a01b0392909216919091179055611847610380820161036083016148d5565b61014b80546001600160a01b0319166001600160a01b0392831617905561012f541663095ea7b3611880610280840161026085016148d5565b6000196040518363ffffffff1660e01b81526004016118a0929190614e98565b602060405180830381600087803b1580156118ba57600080fd5b505af11580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190614bb4565b50610130546001600160a01b031663095ea7b3611917610280840161026085016148d5565b6000196040518363ffffffff1660e01b8152600401611937929190614e98565b602060405180830381600087803b15801561195157600080fd5b505af1158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190614bb4565b5061012e546101385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926119c49291169060001990600401614e98565b602060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a169190614bb4565b50610130546101385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611a519291169060001990600401614e98565b602060405180830381600087803b158015611a6b57600080fd5b505af1158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa39190614bb4565b50610139546101385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611ade9291169060001990600401614e98565b602060405180830381600087803b158015611af857600080fd5b505af1158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b309190614bb4565b506101395461013b5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611b6b9291169060001990600401614e98565b602060405180830381600087803b158015611b8557600080fd5b505af1158015611b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbd9190614bb4565b5061012e5461013f5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611bf89291169060001990600401614e98565b602060405180830381600087803b158015611c1257600080fd5b505af1158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a9190614bb4565b5061012f5461013f5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611c859291169060001990600401614e98565b602060405180830381600087803b158015611c9f57600080fd5b505af1158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd79190614bb4565b50611ce860c0820160a083016148d5565b61014c80546001600160a01b0319166001600160a01b039290921691909117905560408051600280825260608201835260009260208301908036833750506101315482519293506001600160a01b031691839150600090611d4b57611d4b615465565b6001600160a01b03928316602091820292909201015261013254825191169082906001908110611d7d57611d7d615465565b6001600160a01b03928316602091820292909201015261014c54604051631853304760e31b8152600092919091169063c299823890611dc0908590600401614eb1565b600060405180830381600087803b158015611dda57600080fd5b505af1158015611dee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e169190810190614b1c565b9050611e2860e0840160c085016148d5565b61014680546001600160a01b0319166001600160a01b0392909216919091179055611e5f6102a084013566038d7ea4c680006153d7565b61014355611e796102c084013566038d7ea4c680006153d7565b61014455600061014555610147546001600160a01b031615611ebb5761014754611ebb90600080516020615512833981519152906001600160a01b031661307b565b611ecd61030084016102e085016148d5565b61014780546001600160a01b0319166001600160a01b03929092169182179055611f069060008051602061551283398151915290610fd0565b610147546040516319d0806560e11b81523060048201526001600160a01b03909116906333a100ca90602401600060405180830381600087803b158015611f4c57600080fd5b505af1158015611f60573d6000803e3d6000fd5b50505050505050565b6101475460408051630f77314d60e31b815290516060926001600160a01b031691637bb98a68916004808301926000929190829003018186803b158015611faf57600080fd5b505afa158015611fc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611feb9190810190614a37565b905090565b600054610100900460ff16158080156120105750600054600160ff909116105b8061202a5750303b15801561202a575060005460ff166001145b6120465760405162461bcd60e51b8152600401610c7f906150cb565b6000805460ff191660011790558015612069576000805461ff0019166101001790555b61207161353f565b8015611155576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6120e37fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733612860565b61212f5760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e740000006044820152606401610c7f565b61013b5460408051630df4082360e21b815290516000926001600160a01b0316916337d0208c916004808301926020929190829003018186803b15801561217557600080fd5b505afa158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad91906148f2565b604080516001808252818301909252919250600091906020808301908036833701905050905081816000815181106121e7576121e7615465565b6001600160a01b03929092166020928302919091019091015260408051600380825260808201909252600091816020015b60608152602001906001900390816122185750506040805160038082526080820190925291925060208201606080368337019050508160008151811061226057612260615465565b602090810291909101015261013c5481516001600160a01b0390911690829060009061228e5761228e615465565b60200260200101516000815181106122a8576122a8615465565b6001600160a01b03928316602091820292909201015261013054825191169082906000906122d8576122d8615465565b60200260200101516001815181106122f2576122f2615465565b6001600160a01b03928316602091820292909201015261012e548251911690829060009061232257612322615465565b602002602001015160028151811061233c5761233c615465565b6001600160a01b03928316602091820292909201015261013a5461013e54604051637715ee7560e01b81529190921691637715ee7591612383918691869190600401614ec4565b600060405180830381600087803b15801561239d57600080fd5b505af11580156123b1573d6000803e3d6000fd5b5050610130546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156123fc57600080fd5b505afa158015612410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124349190614be8565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561247e57600080fd5b505afa158015612492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b69190614be8565b61013c546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561250057600080fd5b505afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125389190614be8565b905082156125cc57610130546101485460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612578929116908790600401614e98565b602060405180830381600087803b15801561259257600080fd5b505af11580156125a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ca9190614bb4565b505b811561265e5761012e546101485460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261260a929116908690600401614e98565b602060405180830381600087803b15801561262457600080fd5b505af1158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c9190614bb4565b505b80156126ee5761013c546101485460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261269c929116908590600401614e98565b602060405180830381600087803b1580156126b657600080fd5b505af11580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f609190614bb4565b505050505050565b600061271060008051602061559e83398151915233612860565b61272c5760405162461bcd60e51b8152600401610c7f90614ffc565b6000612737846135fd565b90508381101561279b5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610c7f565b60fb5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906127cd9086908590600401614e98565b602060405180830381600087803b1580156127e757600080fd5b505af11580156127fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281f9190614bb4565b5060408051858152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610147546040805163146ce76760e31b815290516000926001600160a01b03169163a3673b38916004808301926020929190829003018186803b1580156128d157600080fd5b505afa1580156128e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190614be8565b61292160008051602061559e83398151915233612860565b61293d5760405162461bcd60e51b8152600401610c7f90614ffc565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a160fb546040516370a0823160e01b8152306004820152611155916001600160a01b0316906370a082319060240160206040518083038186803b1580156129b557600080fd5b505afa1580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190614be8565b61366a565b612a0a60008051602061551283398151915233612860565b612a4e5760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc810d3d3951493d3605a1b6044820152606401610c7f565b600081516009811115612a6357612a6361544f565b1415612b1657612aa76040518060400160405280601c81526020017f6578656375746520616374696f6e204144445f4c4951554944495459000000008152506136cc565b602081015160405163029bf6dd60e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163029bf6dd91612ae3913091600401614e98565b60006040518083038186803b158015612afb57600080fd5b505af4158015612b0f573d6000803e3d6000fd5b5050505050565b600181516009811115612b2b57612b2b61544f565b1415612bfa57612b6f6040518060400160405280601f81526020017f6578656375746520616374696f6e2052454d4f56455f4c4951554944495459008152506136cc565b602081015160405163231b9bc560e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163231b9bc591612bab913091600401614e98565b604080518083038186803b158015612bc257600080fd5b505af4158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190614cda565b600281516009811115612c0f57612c0f61544f565b1415612c7257612c36604051806060016040528060248152602001615532602491396136cc565b60208101516040516304286b2560e51b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163850d64a091612ae3913091600401614e98565b600381516009811115612c8757612c8761544f565b1415612cea57612cae6040518060600160405280602481526020016155be602491396136cc565b6020810151604051632e2ab5a360e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__91632e2ab5a391612ae3913091600401614e98565b600481516009811115612cff57612cff61544f565b1415612d6257612d26604051806060016040528060238152602001615556602391396136cc565b602081015160405163e03d306960e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163e03d306991612ae3913091600401614e98565b600581516009811115612d7757612d7761544f565b1415612dda57612d9e6040518060600160405280602781526020016154a7602791396136cc565b60208101516040516350ae425b60e11b815273__$f537e46d1ff61134b3542e8a9ac925b215$__9163a15c84b691612ae3913091600401614e98565b600681516009811115612def57612def61544f565b1415612e5257612e16604051806060016040528060258152602001615579602591396136cc565b60208101516040516355b45e9f60e01b815273__$f537e46d1ff61134b3542e8a9ac925b215$__916355b45e9f91612ae3913091600401614e98565b600781516009811115612e6757612e6761544f565b1415612ec957612e8e6040518060600160405280602281526020016154f0602291396136cc565b602081015160405162d051bf60e51b815273__$f537e46d1ff61134b3542e8a9ac925b215$__91631a0a37e091612ae3913091600401614e98565b600881516009811115612ede57612ede61544f565b1415612f5357612f056040518060600160405280602281526020016154ce602291396136cc565b60208101516040808301519051635549b45f60e01b81523060048201526024810192909252604482015273__$f537e46d1ff61134b3542e8a9ac925b215$__90635549b45f90606401612ae3565b600981516009811115612f6857612f6861544f565b141561115557612f8f604051806060016040528060228152602001615602602291396136cc565b60208101516040808301519051631ee6c5c960e11b81523060048201526024810192909252604482015273__$f537e46d1ff61134b3542e8a9ac925b215$__90633dcd8b9290606401612ae3565b612ff560008051602061559e83398151915233612860565b6130115760405162461bcd60e51b8152600401610c7f90614ffc565b61115561370f565b61303160008051602061551283398151915233612860565b6130755760405162461bcd60e51b815260206004820152601560248201527414995cdd1c9a58dd1959081d1bc810d3d3951493d3605a1b6044820152606401610c7f565b61014555565b60008281526065602052604090206001015461309681613231565b610ff583836132c1565b6130ab600033612860565b6130ee5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610c7f565b6001600160a01b03811661313f5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610c7f565b60fc546131649060008051602061559e833981519152906001600160a01b031661307b565b61317c60008051602061559e83398151915282610fd0565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60006131b860008051602061559e83398151915233612860565b6131d45760405162461bcd60e51b8152600401610c7f90614ffc565b60006131df8361377e565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161321291815260200190565b60405180910390a190505b919050565b6001600160a01b03163b151590565b61115581336137ae565b6132458282612860565b6110745760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561327d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6132cb8282612860565b156110745760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361107481613231565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561338557610ff583613812565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133be57600080fd5b505afa9250505080156133ee575060408051601f3d908101601f191682019092526133eb91810190614be8565b60015b6134515760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610c7f565b6000805160206155e283398151915281146134c05760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610c7f565b50610ff58383836138ae565b6001600160a01b03811661351d5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610c7f565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff161580801561355f5750600054600160ff909116105b806135795750303b158015613579575060005460ff166001145b6135955760405162461bcd60e51b8152600401610c7f906150cb565b6000805460ff1916600117905580156135b8576000805461ff0019166101001790555b6135c06138d9565b6135c86138d9565b6135d360003361323b565b6120717f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361323b565b610147546040516312093a2360e11b81526000916001600160a01b031690632412744690613632906002908690600401614fae565b600060405180830381600087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b5093949350505050565b610147546040516312093a2360e11b81526001600160a01b039091169063241274469061369e906001908590600401614fae565b600060405180830381600087803b1580156136b857600080fd5b505af1158015612b0f573d6000803e3d6000fd5b611155816040516024016136e09190614fc9565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613946565b610147546040516312093a2360e11b81526000916001600160a01b0316906324127446906137439084908190600401614fae565b600060405180830381600087803b15801561375d57600080fd5b505af1158015613771573d6000803e3d6000fd5b5050505061014554905090565b600080613789613967565b61379390826152af565b905061379d613b49565b6137a790826152af565b9392505050565b6137b88282612860565b611074576137d0816001600160a01b03166014613d43565b6137db836020613d43565b6040516020016137ec929190614df7565b60408051601f198184030181529082905262461bcd60e51b8252610c7f91600401614fc9565b6001600160a01b0381163b61387f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c7f565b6000805160206155e283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6138b783613edf565b6000825111806138c45750805b15610ff5576138d38383613f1f565b50505050565b600054610100900460ff166139445760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c7f565b565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60408051600180825281830190925260009182919060208083019080368337505061013c5482519293506001600160a01b0316918391506000906139ad576139ad615465565b6001600160a01b03928316602091820292909201015261013b546040516331279d3d60e01b81529116906331279d3d906139ed9030908590600401614e6c565b600060405180830381600087803b158015613a0757600080fd5b505af1158015613a1b573d6000803e3d6000fd5b505061013c546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b158015613a6857600080fd5b505afa158015613a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa09190614be8565b90508015613b42576101385461013c546101305461012e54600093613adc936001600160a01b0391821693908216929082169116858088614013565b90508015613b40576101385461013c546101305461012e54600093613b30936001600160a01b03918216939082169290821691168580896064613b208b60636153d7565b613b2a91906152c7565b3061423e565b9050613b3c81856152af565b9350505b505b5092915050565b6040805160028082526060820183526000928392919060208301908036833750506101315482519293506001600160a01b031691839150600090613b8f57613b8f615465565b6001600160a01b03928316602091820292909201015261013254825191169082906001908110613bc157613bc1615465565b6001600160a01b03928316602091820292909201015261014c5460405163436f98f760e11b81529116906386df31ee90613c019030908590600401614e6c565b600060405180830381600087803b158015613c1b57600080fd5b505af1158015613c2f573d6000803e3d6000fd5b505061014a546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015613c7a57600080fd5b505afa158015613c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb29190614be8565b905060008115613d2c5761014b5461014a5461012f54600092613ce6926001600160a01b03918216929082169116866144f4565b90508015613d2a5761014b5461014a5461012f54600092613d1a926001600160a01b0391821692908216911687863061461d565b9050613d2681846152af565b9250505b505b613d3b64e8d4a51000826152c7565b935050505090565b60606000613d528360026153d7565b613d5d9060026152af565b67ffffffffffffffff811115613d7557613d7561547b565b6040519080825280601f01601f191660200182016040528015613d9f576020820181803683370190505b509050600360fc1b81600081518110613dba57613dba615465565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613de957613de9615465565b60200101906001600160f81b031916908160001a9053506000613e0d8460026153d7565b613e189060016152af565b90505b6001811115613e90576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613e4c57613e4c615465565b1a60f81b828281518110613e6257613e62615465565b60200101906001600160f81b031916908160001a90535060049490941c93613e8981615422565b9050613e1b565b5083156137a75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c7f565b613ee881613812565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613f875760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c7f565b600080846001600160a01b031684604051613fa29190614ddb565b600060405180830381855af49150503d8060008114613fdd576040519150601f19603f3d011682016040523d82523d6000602084013e613fe2565b606091505b509150915061400a8282604051806060016040528060278152602001615624602791396147d0565b95945050505050565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161402e579050509050878160008151811061407157614071615465565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106140a9576140a9615465565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505084816000815181106140e1576140e1615465565b60200260200101516040019015159081151581525050868160018151811061410b5761410b615465565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061414357614143615465565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160018151811061417b5761417b615465565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906141be90879086906004016151bd565b60006040518083038186803b1580156141d657600080fd5b505afa1580156141ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142129190810190614b1c565b90508060028151811061422757614227615465565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526000906001600160a01b038a169063095ea7b39061426f908d908890600401614e98565b602060405180830381600087803b15801561428957600080fd5b505af115801561429d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c19190614bb4565b5060408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816142da579050509050898160008151811061431d5761431d615465565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050888160008151811061435557614355615465565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050868160008151811061438d5761438d615465565b6020026020010151604001901515908115158152505088816001815181106143b7576143b7615465565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505087816001815181106143ef576143ef615465565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160018151811061442757614427615465565b602090810291909101015190151560409182015251631e82ecdb60e31b81526000906001600160a01b038d169063f41766d890614470908990899087908a904290600401615212565b600060405180830381600087803b15801561448a57600080fd5b505af115801561449e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144c69190810190614b1c565b9050806002815181106144db576144db615465565b6020026020010151925050509998505050505050505050565b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061452d5761452d615465565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061456157614561615465565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b815260009188169063d06ca61f906145a090879086906004016151a4565b60006040518083038186803b1580156145b857600080fd5b505afa1580156145cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145f49190810190614b1c565b90508060018151811061460957614609615465565b602002602001015192505050949350505050565b60405163095ea7b360e01b81526000906001600160a01b0387169063095ea7b39061464e908a908890600401614e98565b602060405180830381600087803b15801561466857600080fd5b505af115801561467c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a09190614bb4565b5060408051600280825260608201835260009260208301908036833701905050905086816000815181106146d6576146d6615465565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061470a5761470a615465565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918a16906338ed17399061474f908990899087908a9042906004016151d6565b600060405180830381600087803b15801561476957600080fd5b505af115801561477d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147a59190810190614b1c565b9050806001815181106147ba576147ba615465565b6020026020010151925050509695505050505050565b606083156147df5750816137a7565b8251156147ef5782518084602001fd5b8160405162461bcd60e51b8152600401610c7f9190614fc9565b60008083601f84011261481b57600080fd5b50813567ffffffffffffffff81111561483357600080fd5b6020830191508360208260051b850101111561484e57600080fd5b9250929050565b8051801515811461321d57600080fd5b600082601f83011261487657600080fd5b813567ffffffffffffffff8111156148905761489061547b565b6148a3601f8201601f191660200161525a565b8181528460208386010111156148b857600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156148e757600080fd5b81356137a781615491565b60006020828403121561490457600080fd5b81516137a781615491565b6000806000806080858703121561492557600080fd5b843561493081615491565b9350602085013561494081615491565b925060408501359150606085013567ffffffffffffffff81111561496357600080fd5b61496f87828801614865565b91505092959194509250565b6000806040838503121561498e57600080fd5b823561499981615491565b9150602083013567ffffffffffffffff8111156149b557600080fd5b6149c185828601614865565b9150509250929050565b600080600080604085870312156149e157600080fd5b843567ffffffffffffffff808211156149f957600080fd5b614a0588838901614809565b90965094506020870135915080821115614a1e57600080fd5b50614a2b87828801614809565b95989497509550505050565b60006020808385031215614a4a57600080fd5b825167ffffffffffffffff811115614a6157600080fd5b8301601f81018513614a7257600080fd5b8051614a85614a808261528b565b61525a565b80828252848201915084840188868560071b8701011115614aa557600080fd5b60009450845b84811015614b0e57608080838c031215614ac3578687fd5b614acb615231565b8351614ad681615491565b81528389015189820152604080850151908201526060614af7818601614855565b908201528552938701939190910190600101614aab565b509098975050505050505050565b60006020808385031215614b2f57600080fd5b825167ffffffffffffffff811115614b4657600080fd5b8301601f81018513614b5757600080fd5b8051614b65614a808261528b565b80828252848201915084840188868560051b8701011115614b8557600080fd5b600094505b83851015614ba8578051835260019490940193918501918501614b8a565b50979650505050505050565b600060208284031215614bc657600080fd5b6137a782614855565b600060208284031215614be157600080fd5b5035919050565b600060208284031215614bfa57600080fd5b5051919050565b60008060408385031215614c1457600080fd5b823591506020830135614c2681615491565b809150509250929050565b600060208284031215614c4357600080fd5b81356001600160e01b0319811681146137a757600080fd5b600060608284031215614c6d57600080fd5b6040516060810181811067ffffffffffffffff82111715614c9057614c9061547b565b6040528235600a8110614ca257600080fd5b8152602083810135908201526040928301359281019290925250919050565b60006103808284031215614cd457600080fd5b50919050565b60008060408385031215614ced57600080fd5b505080516020909101519092909150565b600060208284031215614d1057600080fd5b815160ff811681146137a757600080fd5b600081518084526020808501945080840160005b83811015614d5a5781516001600160a01b031687529582019590820190600101614d35565b509495945050505050565b600081518084526020808501945080840160005b83811015614d5a57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614d79565b60038110614dd757634e487b7160e01b600052602160045260246000fd5b9052565b60008251614ded8184602087016153f6565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e2f8160178501602088016153f6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e608160288401602088016153f6565b01602801949350505050565b6001600160a01b0383168152604060208201819052600090614e9090830184614d21565b949350505050565b6001600160a01b03929092168252602082015260400190565b6020815260006137a76020830184614d21565b606081526000614ed76060830186614d21565b6020838203818501528186518084528284019150828160051b85010183890160005b83811015614f2757601f19878403018552614f15838351614d21565b94860194925090850190600101614ef9565b50508095505050505050826040830152949350505050565b602080825282518282018190526000919060409081850190868401855b82811015614fa157815180516001600160a01b031685528681015187860152858101518686015260609081015115159085015260809093019290850190600101614f5c565b5091979650505050505050565b60408101614fbc8285614db9565b8260208301529392505050565b6020815260008251806020840152614fe88160408501602087016153f6565b601f01601f19169190910160400192915050565b60208082526017908201527f5265737472696374656420746f2045584348414e474552000000000000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b85815260606020808301829052908201859052600090869060808401835b8881101561516557833561514a81615491565b6001600160a01b031682529282019290820190600101615137565b508481036040860152858152810191508560005b8681101561519557813584529282019290820190600101615179565b50919998505050505050505050565b828152604060208201526000614e906040830184614d21565b828152604060208201526000614e906040830184614d65565b85815284602082015260a0604082015260006151f560a0830186614d21565b6001600160a01b0394909416606083015250608001529392505050565b85815284602082015260a0604082015260006151f560a0830186614d65565b6040516080810167ffffffffffffffff811182821017156152545761525461547b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156152835761528361547b565b604052919050565b600067ffffffffffffffff8211156152a5576152a561547b565b5060051b60200190565b600082198211156152c2576152c2615439565b500190565b6000826152e457634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561532457816000190482111561530a5761530a615439565b8085161561531757918102915b93841c93908002906152ee565b509250929050565b60006137a760ff84168360008261534557506001610c07565b8161535257506000610c07565b816001811461536857600281146153725761538e565b6001915050610c07565b60ff84111561538357615383615439565b50506001821b610c07565b5060208310610133831016604e8410600b84101617156153b1575081810a610c07565b6153bb83836152e9565b80600019048211156153cf576153cf615439565b029392505050565b60008160001904831182151516156153f1576153f1615439565b500290565b60005b838110156154115781810151838201526020016153f9565b838111156138d35750506000910152565b60008161543157615431615439565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461115557600080fdfe6578656375746520616374696f6e2057495448445241575f41535345545f46524f4d5f414156456578656375746520616374696f6e20535741505f544f4b454e5f544f5f41535345546578656375746520616374696f6e2052455041595f544f4b454e5f544f5f41415645126c7c8716c8f1c7c73a7370c820c7d73a9b4ed0ad633cfce1092f9ff47c85746578656375746520616374696f6e20535741505f555344504c55535f544f5f41535345546578656375746520616374696f6e20535550504c595f41535345545f544f5f414156456578656375746520616374696f6e20424f52524f575f544f4b454e5f46524f4d5f414156453eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d6578656375746520616374696f6e20535741505f41535345545f544f5f555344504c5553360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6578656375746520616374696f6e20535741505f41535345545f544f5f544f4b454e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200f4dbdaea5082533bf9b8e2a44013a7b9c6ebd5348bc803c6a7b9af97b66e4bc64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Used for ERC721 safeTransferFrom"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20892,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "asset",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 20894,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "exchanger",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 21174,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15249,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "usdPlus",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 15252,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "busd",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 15255,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "wbnb",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 15258,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "vBusdToken",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(VenusInterface)13801"
      },
      {
        "astId": 15261,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "vBnbToken",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(VenusInterface)13801"
      },
      {
        "astId": 15263,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "busdDm",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 15265,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "wbnbDm",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 15267,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "bnbDm",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 15270,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "oracleBusd",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IPriceFeed)5091"
      },
      {
        "astId": 15273,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "oracleWbnb",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IPriceFeed)5091"
      },
      {
        "astId": 15276,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "coneRouter",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IConeRouter01)5564"
      },
      {
        "astId": 15279,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "conePair",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IConePair)5808"
      },
      {
        "astId": 15282,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "coneVoter",
        "offset": 0,
        "slot": "314",
        "type": "t_contract(IConeVoter)6262"
      },
      {
        "astId": 15285,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "coneGauge",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IGauge)5707"
      },
      {
        "astId": 15288,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "coneToken",
        "offset": 0,
        "slot": "316",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 15291,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "veCone",
        "offset": 0,
        "slot": "317",
        "type": "t_contract(VeCone)6185"
      },
      {
        "astId": 15293,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "veConeId",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      },
      {
        "astId": 15296,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "exchange",
        "offset": 0,
        "slot": "319",
        "type": "t_contract(IExchange)13852"
      },
      {
        "astId": 15299,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "dodoProxy",
        "offset": 0,
        "slot": "320",
        "type": "t_contract(IDODOProxy)6331"
      },
      {
        "astId": 15301,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "dodoBusdWbnb",
        "offset": 0,
        "slot": "321",
        "type": "t_address"
      },
      {
        "astId": 15303,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "tokenAssetSlippagePercent",
        "offset": 0,
        "slot": "322",
        "type": "t_uint256"
      },
      {
        "astId": 15305,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "liquidationThreshold",
        "offset": 0,
        "slot": "323",
        "type": "t_uint256"
      },
      {
        "astId": 15307,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "healthFactor",
        "offset": 0,
        "slot": "324",
        "type": "t_uint256"
      },
      {
        "astId": 15309,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "realHealthFactor",
        "offset": 0,
        "slot": "325",
        "type": "t_uint256"
      },
      {
        "astId": 15312,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "maximillion",
        "offset": 0,
        "slot": "326",
        "type": "t_contract(Maximillion)13486"
      },
      {
        "astId": 15315,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "control",
        "offset": 0,
        "slot": "327",
        "type": "t_contract(ControlUsdPlusWbnb)20854"
      },
      {
        "astId": 15317,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "collector",
        "offset": 0,
        "slot": "328",
        "type": "t_address"
      },
      {
        "astId": 15320,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "veDist",
        "offset": 0,
        "slot": "329",
        "type": "t_contract(VeDist)6209"
      },
      {
        "astId": 15323,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "xvsToken",
        "offset": 0,
        "slot": "330",
        "type": "t_contract(IERC20)2379"
      },
      {
        "astId": 15326,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "pancakeRouter",
        "offset": 0,
        "slot": "331",
        "type": "t_contract(IPancakeRouter02)10504"
      },
      {
        "astId": 15329,
        "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
        "label": "unitroller",
        "offset": 0,
        "slot": "332",
        "type": "t_contract(Unitroller)13478"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ControlUsdPlusWbnb)20854": {
        "encoding": "inplace",
        "label": "contract ControlUsdPlusWbnb",
        "numberOfBytes": "20"
      },
      "t_contract(IConePair)5808": {
        "encoding": "inplace",
        "label": "contract IConePair",
        "numberOfBytes": "20"
      },
      "t_contract(IConeRouter01)5564": {
        "encoding": "inplace",
        "label": "contract IConeRouter01",
        "numberOfBytes": "20"
      },
      "t_contract(IConeVoter)6262": {
        "encoding": "inplace",
        "label": "contract IConeVoter",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOProxy)6331": {
        "encoding": "inplace",
        "label": "contract IDODOProxy",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2379": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)13852": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(IGauge)5707": {
        "encoding": "inplace",
        "label": "contract IGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)10504": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)5091": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(Maximillion)13486": {
        "encoding": "inplace",
        "label": "contract Maximillion",
        "numberOfBytes": "20"
      },
      "t_contract(Unitroller)13478": {
        "encoding": "inplace",
        "label": "contract Unitroller",
        "numberOfBytes": "20"
      },
      "t_contract(VeCone)6185": {
        "encoding": "inplace",
        "label": "contract VeCone",
        "numberOfBytes": "20"
      },
      "t_contract(VeDist)6209": {
        "encoding": "inplace",
        "label": "contract VeDist",
        "numberOfBytes": "20"
      },
      "t_contract(VenusInterface)13801": {
        "encoding": "inplace",
        "label": "contract VenusInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyUsdPlusWbnb.sol:StrategyUsdPlusWbnb",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}