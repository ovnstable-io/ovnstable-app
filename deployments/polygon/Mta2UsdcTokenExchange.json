{
  "address": "0x997281Bdf6f7d354168a523eb15Ac2b8A5877417",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmaticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mtaToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId2",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balancerPoolId1",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId2",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mtaToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e18bd0ea34b2f8c74eedb8bb84af38bc7b83589e23ccbc2eb8c2edfc9059968",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x997281Bdf6f7d354168a523eb15Ac2b8A5877417",
    "transactionIndex": 42,
    "gasUsed": "1049256",
    "logsBloom": "0x
    "blockHash": "0xbeab4a6072408e2255a281d85e43df54b9a59f57cb7ba8068fde89b6c483355e",
    "transactionHash": "0x0e18bd0ea34b2f8c74eedb8bb84af38bc7b83589e23ccbc2eb8c2edfc9059968",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 24143147,
        "transactionHash": "0x0e18bd0ea34b2f8c74eedb8bb84af38bc7b83589e23ccbc2eb8c2edfc9059968",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a4bf7d101bf2c000000000000000000000000000000000000000000000000591edb25beae624b5000000000000000000000000000000000000000000009c07852ab41413c6bc750000000000000000000000000000000000000000000000059148f2dedaca31f5000000000000000000000000000000000000000000009c0785cf739123e2af35",
        "logIndex": 256,
        "blockHash": "0xbeab4a6072408e2255a281d85e43df54b9a59f57cb7ba8068fde89b6c483355e"
      }
    ],
    "blockNumber": 24143147,
    "cumulativeGasUsed": "10288327",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0xf501dd45a1198c2e1b5aef5314a68b9006d842e0",
    "0x614b5038611729ed49e0ded154d8a5d3af9d1d9e00010000000000000000001d",
    "0x0297e37f1873d2dab4487aa67cd56b58e2f27875000100000000000000000002"
  ],
  "solcInputHash": "fe95cbbb2d97e4d95ece85093db98e18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mtaToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId2\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balancerPoolId1\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mtaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token_exchanges/Mta2UsdcTokenExchange.sol\":\"Mta2UsdcTokenExchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"contracts/connectors/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x517b448a237409bed922c0193f8df5b2ca2f11f4717b2bf85591ad676a6d4fac\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"},\"contracts/token_exchanges/Mta2UsdcTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IAsset.sol\\\";\\n\\ncontract Mta2UsdcTokenExchange is ITokenExchange {\\n\\n    IVault public balancerVault;\\n    IERC20 public usdcToken;\\n    IERC20 public wmaticToken;\\n    IERC20 public mtaToken;\\n    bytes32 public balancerPoolId1;\\n    bytes32 public balancerPoolId2;\\n\\n    constructor(\\n        address _balancerVault,\\n        address _usdcToken,\\n        address _wmaticToken,\\n        address _mtaToken,\\n        bytes32 _balancerPoolId1,\\n        bytes32 _balancerPoolId2\\n    ) {\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_wmaticToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_mtaToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerPoolId1 != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n        require(_balancerPoolId2 != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n\\n        balancerVault = IVault(_balancerVault);\\n        usdcToken = IERC20(_usdcToken);\\n        wmaticToken = IERC20(_wmaticToken);\\n        mtaToken = IERC20(_mtaToken);\\n        balancerPoolId1 = _balancerPoolId1;\\n        balancerPoolId2 = _balancerPoolId2;\\n    }\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external override {\\n        require(\\n            (from == usdcToken && to == mtaToken) || (from == mtaToken && to == usdcToken),\\n            \\\"Mta2UsdcTokenExchange: Some token not compatible\\\"\\n        );\\n\\n        if (amount == 0) {\\n            from.transfer(spender, from.balanceOf(address(this)));\\n            return;\\n        }\\n\\n        if (from == usdcToken && to == mtaToken) {\\n            revert(\\\"Mta2UsdcTokenExchange: Allowed only exchange MTA to USDC\\\");\\n        } else {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(mtaToken)).decimals());\\n            amount = amount / denominator;\\n\\n            require(\\n                mtaToken.balanceOf(address(this)) >= amount,\\n                \\\"Mta2UsdcTokenExchange: Not enough mtaToken\\\"\\n            );\\n\\n            // check after denormilization\\n            if (amount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            mtaToken.approve(address(balancerVault), amount);\\n\\n            IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\n            IVault.BatchSwapStep memory batchSwap1;\\n            batchSwap1.poolId = balancerPoolId1;\\n            batchSwap1.assetInIndex = 0;\\n            batchSwap1.assetOutIndex = 1;\\n            batchSwap1.amount = amount;\\n            swaps[0] = batchSwap1;\\n            IVault.BatchSwapStep memory batchSwap2;\\n            batchSwap2.poolId = balancerPoolId2;\\n            batchSwap2.assetInIndex = 1;\\n            batchSwap2.assetOutIndex = 2;\\n            batchSwap2.amount = 0;\\n            swaps[1] = batchSwap2;\\n\\n            IAsset[] memory assets = new IAsset[](3);\\n            assets[0] = IAsset(address(mtaToken));\\n            assets[1] = IAsset(address(wmaticToken));\\n            assets[2] = IAsset(address(usdcToken));\\n\\n            IVault.FundManagement memory fundManagement;\\n            fundManagement.sender = address(this);\\n            fundManagement.fromInternalBalance = false;\\n            fundManagement.recipient = payable(receiver);\\n            fundManagement.toInternalBalance = false;\\n\\n            int256[] memory limits = new int256[](3);\\n            limits[0] = (10 ** 27);\\n            limits[1] = (10 ** 27);\\n            limits[2] = (10 ** 27);\\n\\n            balancerVault.batchSwap(IVault.SwapKind.GIVEN_IN, swaps, assets, fundManagement, limits, block.timestamp + 600);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bf92c990b9b0f4267439a0149f42cf95c6838f34f5b90256d8737998fb0d596\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012693803806200126983398101604081905262000034916200026c565b6001600160a01b0386166200007f5760405162461bcd60e51b815260206004820152601860248201526000805160206200124983398151915260448201526064015b60405180910390fd5b6001600160a01b038516620000c65760405162461bcd60e51b8152602060048201526018602482015260008051602062001249833981519152604482015260640162000076565b6001600160a01b0384166200010d5760405162461bcd60e51b8152602060048201526018602482015260008051602062001249833981519152604482015260640162000076565b6001600160a01b038316620001545760405162461bcd60e51b8152602060048201526018602482015260008051602062001249833981519152604482015260640162000076565b81620001a35760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640162000076565b80620001f25760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640162000076565b600080546001600160a01b039788166001600160a01b0319918216179091556001805496881696821696909617909555600280549487169486169490941790935560038054929095169190931617909255600455600555620002db565b80516001600160a01b03811681146200026757600080fd5b919050565b60008060008060008060c087890312156200028657600080fd5b62000291876200024f565b9550620002a1602088016200024f565b9450620002b1604088016200024f565b9350620002c1606088016200024f565b92506080870151915060a087015190509295509295509295565b610f5e80620002eb6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806362ac75381161005b57806362ac7538146100dc5780639de3c827146100f1578063abf4be0114610104578063fddf5af81461011757600080fd5b806311eac85514610082578063158274a5146100b25780632bb20a35146100c5575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600054610095906001600160a01b031681565b6100ce60055481565b6040519081526020016100a9565b6100ef6100ea366004610a12565b610120565b005b600354610095906001600160a01b031681565b600254610095906001600160a01b031681565b6100ce60045481565b6001546001600160a01b03858116911614801561014a57506003546001600160a01b038381169116145b8061017a57506003546001600160a01b03858116911614801561017a57506001546001600160a01b038381169116145b6101e45760405162461bcd60e51b815260206004820152603060248201527f4d74613255736463546f6b656e45786368616e67653a20536f6d6520746f6b6560448201526f6e206e6f7420636f6d70617469626c6560801b60648201526084015b60405180910390fd5b806102ee576040516370a0823160e01b81523060048201526001600160a01b0385169063a9059cbb90879083906370a082319060240160206040518083038186803b15801561023257600080fd5b505afa158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a9190610b64565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156102b057600080fd5b505af11580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610b3b565b50610a0b565b6001546001600160a01b03858116911614801561031857506003546001600160a01b038381169116145b1561038b5760405162461bcd60e51b815260206004820152603860248201527f4d74613255736463546f6b656e45786368616e67653a20416c6c6f776564206f60448201527f6e6c792065786368616e6765204d544120746f2055534443000000000000000060648201526084016101db565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156103d057600080fd5b505afa1580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104089190610b7d565b610413906012610eab565b61041e90600a610dfe565b905061042a8183610d99565b6003546040516370a0823160e01b815230600482015291935083916001600160a01b03909116906370a082319060240160206040518083038186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190610b64565b101561050b5760405162461bcd60e51b815260206004820152602a60248201527f4d74613255736463546f6b656e45786368616e67653a204e6f7420656e6f7567604482015269341036ba30aa37b5b2b760b11b60648201526084016101db565b81610616576040516370a0823160e01b81523060048201526001600160a01b0386169063a9059cbb90889083906370a082319060240160206040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190610b64565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f9190610b3b565b5050610a0b565b60035460005460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561066657600080fd5b505af115801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190610b3b565b5060408051600280825260608201909252600091816020015b6106ec6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816106b75790505090506107366040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b6004548152600060208201819052600160408301526060820185905282518291849161076457610764610ee4565b60200260200101819052506107a46040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b6005548152600160208201819052600260408301526000606083015283518291859181106107d4576107d4610ee4565b602090810291909101015260408051600380825260808201909252600091816020016020820280368337505060035482519293506001600160a01b03169183915060009061082457610824610ee4565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061085557610855610ee4565b6001600160a01b03928316602091820292909201015260015482519116908290600290811061088657610886610ee4565b6001600160a01b039283166020918202929092018101919091526040805160808082018352600093820184905260608201849052308252938c168183015281516003808252948101909252928160200160208202803683370190505090506b033b2e3c9fd0803ce80000008160008151811061090457610904610ee4565b6020026020010181815250506b033b2e3c9fd0803ce80000008160018151811061093057610930610ee4565b6020026020010181815250506b033b2e3c9fd0803ce80000008160028151811061095c5761095c610ee4565b6020908102919091010152600080546001600160a01b03169063945bcec9908886868661098b42610258610d81565b6040518763ffffffff1660e01b81526004016109ac96959493929190610c14565b600060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a029190810190610a76565b50505050505050505b5050505050565b600080600080600060a08688031215610a2a57600080fd5b8535610a3581610f10565b94506020860135610a4581610f10565b93506040860135610a5581610f10565b92506060860135610a6581610f10565b949793965091946080013592915050565b60006020808385031215610a8957600080fd5b825167ffffffffffffffff80821115610aa157600080fd5b818501915085601f830112610ab557600080fd5b815181811115610ac757610ac7610efa565b8060051b604051601f19603f83011681018181108582111715610aec57610aec610efa565b604052828152858101935084860182860187018a1015610b0b57600080fd5b600095505b83861015610b2e578051855260019590950194938601938601610b10565b5098975050505050505050565b600060208284031215610b4d57600080fd5b81518015158114610b5d57600080fd5b9392505050565b600060208284031215610b7657600080fd5b5051919050565b600060208284031215610b8f57600080fd5b815160ff81168114610b5d57600080fd5b600081518084526020808501945080840160005b83811015610bd95781516001600160a01b031687529582019590820190600101610bb4565b509495945050505050565b600081518084526020808501945080840160005b83811015610bd957815187529582019590820190600101610bf8565b600061012080830160028a10610c3a57634e487b7160e01b600052602160045260246000fd5b89845260208085019290925288519081905261014080850192600583901b8601909101918a82016000805b83811015610d035788860361013f190187528251805187528581015186880152604080820151908801526060808201519088015260809081015160a091880182905280519188018290529083905b80821015610cd15782820188015189830160c0015290870190610cb3565b80821115610ce2578460c0828b0101525b98870198601f01601f19169790970160c00196505091840191600101610c65565b50505050508381036040850152610d1a8189610ba0565b915050610d5a606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e0840152610d6c8186610be4565b91505082610100830152979650505050505050565b60008219821115610d9457610d94610ece565b500190565b600082610db657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115610df6578160001904821115610ddc57610ddc610ece565b80851615610de957918102915b93841c9390800290610dc0565b509250929050565b6000610b5d60ff841683600082610e1757506001610ea5565b81610e2457506000610ea5565b8160018114610e3a5760028114610e4457610e60565b6001915050610ea5565b60ff841115610e5557610e55610ece565b50506001821b610ea5565b5060208310610133831016604e8410600b8410161715610e83575081810a610ea5565b610e8d8383610dbb565b8060001904821115610ea157610ea1610ece565b0290505b92915050565b600060ff821660ff841680821015610ec557610ec5610ece565b90039392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f2557600080fd5b5056fea264697066735822122064af06fb7de4db7038d59998470fedb0db8e5a141a43465c1bb5b462157b7b0e64736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806362ac75381161005b57806362ac7538146100dc5780639de3c827146100f1578063abf4be0114610104578063fddf5af81461011757600080fd5b806311eac85514610082578063158274a5146100b25780632bb20a35146100c5575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600054610095906001600160a01b031681565b6100ce60055481565b6040519081526020016100a9565b6100ef6100ea366004610a12565b610120565b005b600354610095906001600160a01b031681565b600254610095906001600160a01b031681565b6100ce60045481565b6001546001600160a01b03858116911614801561014a57506003546001600160a01b038381169116145b8061017a57506003546001600160a01b03858116911614801561017a57506001546001600160a01b038381169116145b6101e45760405162461bcd60e51b815260206004820152603060248201527f4d74613255736463546f6b656e45786368616e67653a20536f6d6520746f6b6560448201526f6e206e6f7420636f6d70617469626c6560801b60648201526084015b60405180910390fd5b806102ee576040516370a0823160e01b81523060048201526001600160a01b0385169063a9059cbb90879083906370a082319060240160206040518083038186803b15801561023257600080fd5b505afa158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a9190610b64565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156102b057600080fd5b505af11580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610b3b565b50610a0b565b6001546001600160a01b03858116911614801561031857506003546001600160a01b038381169116145b1561038b5760405162461bcd60e51b815260206004820152603860248201527f4d74613255736463546f6b656e45786368616e67653a20416c6c6f776564206f60448201527f6e6c792065786368616e6765204d544120746f2055534443000000000000000060648201526084016101db565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156103d057600080fd5b505afa1580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104089190610b7d565b610413906012610eab565b61041e90600a610dfe565b905061042a8183610d99565b6003546040516370a0823160e01b815230600482015291935083916001600160a01b03909116906370a082319060240160206040518083038186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190610b64565b101561050b5760405162461bcd60e51b815260206004820152602a60248201527f4d74613255736463546f6b656e45786368616e67653a204e6f7420656e6f7567604482015269341036ba30aa37b5b2b760b11b60648201526084016101db565b81610616576040516370a0823160e01b81523060048201526001600160a01b0386169063a9059cbb90889083906370a082319060240160206040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190610b64565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f9190610b3b565b5050610a0b565b60035460005460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561066657600080fd5b505af115801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190610b3b565b5060408051600280825260608201909252600091816020015b6106ec6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816106b75790505090506107366040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b6004548152600060208201819052600160408301526060820185905282518291849161076457610764610ee4565b60200260200101819052506107a46040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b6005548152600160208201819052600260408301526000606083015283518291859181106107d4576107d4610ee4565b602090810291909101015260408051600380825260808201909252600091816020016020820280368337505060035482519293506001600160a01b03169183915060009061082457610824610ee4565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061085557610855610ee4565b6001600160a01b03928316602091820292909201015260015482519116908290600290811061088657610886610ee4565b6001600160a01b039283166020918202929092018101919091526040805160808082018352600093820184905260608201849052308252938c168183015281516003808252948101909252928160200160208202803683370190505090506b033b2e3c9fd0803ce80000008160008151811061090457610904610ee4565b6020026020010181815250506b033b2e3c9fd0803ce80000008160018151811061093057610930610ee4565b6020026020010181815250506b033b2e3c9fd0803ce80000008160028151811061095c5761095c610ee4565b6020908102919091010152600080546001600160a01b03169063945bcec9908886868661098b42610258610d81565b6040518763ffffffff1660e01b81526004016109ac96959493929190610c14565b600060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a029190810190610a76565b50505050505050505b5050505050565b600080600080600060a08688031215610a2a57600080fd5b8535610a3581610f10565b94506020860135610a4581610f10565b93506040860135610a5581610f10565b92506060860135610a6581610f10565b949793965091946080013592915050565b60006020808385031215610a8957600080fd5b825167ffffffffffffffff80821115610aa157600080fd5b818501915085601f830112610ab557600080fd5b815181811115610ac757610ac7610efa565b8060051b604051601f19603f83011681018181108582111715610aec57610aec610efa565b604052828152858101935084860182860187018a1015610b0b57600080fd5b600095505b83861015610b2e578051855260019590950194938601938601610b10565b5098975050505050505050565b600060208284031215610b4d57600080fd5b81518015158114610b5d57600080fd5b9392505050565b600060208284031215610b7657600080fd5b5051919050565b600060208284031215610b8f57600080fd5b815160ff81168114610b5d57600080fd5b600081518084526020808501945080840160005b83811015610bd95781516001600160a01b031687529582019590820190600101610bb4565b509495945050505050565b600081518084526020808501945080840160005b83811015610bd957815187529582019590820190600101610bf8565b600061012080830160028a10610c3a57634e487b7160e01b600052602160045260246000fd5b89845260208085019290925288519081905261014080850192600583901b8601909101918a82016000805b83811015610d035788860361013f190187528251805187528581015186880152604080820151908801526060808201519088015260809081015160a091880182905280519188018290529083905b80821015610cd15782820188015189830160c0015290870190610cb3565b80821115610ce2578460c0828b0101525b98870198601f01601f19169790970160c00196505091840191600101610c65565b50505050508381036040850152610d1a8189610ba0565b915050610d5a606084018780516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b82810360e0840152610d6c8186610be4565b91505082610100830152979650505050505050565b60008219821115610d9457610d94610ece565b500190565b600082610db657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115610df6578160001904821115610ddc57610ddc610ece565b80851615610de957918102915b93841c9390800290610dc0565b509250929050565b6000610b5d60ff841683600082610e1757506001610ea5565b81610e2457506000610ea5565b8160018114610e3a5760028114610e4457610e60565b6001915050610ea5565b60ff841115610e5557610e55610ece565b50506001821b610ea5565b5060208310610133831016604e8410600b8410161715610e83575081810a610ea5565b610e8d8383610dbb565b8060001904821115610ea157610ea1610ece565b0290505b92915050565b600060ff821660ff841680821015610ec557610ec5610ece565b90039392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f2557600080fd5b5056fea264697066735822122064af06fb7de4db7038d59998470fedb0db8e5a141a43465c1bb5b462157b7b0e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27129,
        "contract": "contracts/token_exchanges/Mta2UsdcTokenExchange.sol:Mta2UsdcTokenExchange",
        "label": "balancerVault",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVault)21840"
      },
      {
        "astId": 27132,
        "contract": "contracts/token_exchanges/Mta2UsdcTokenExchange.sol:Mta2UsdcTokenExchange",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 27135,
        "contract": "contracts/token_exchanges/Mta2UsdcTokenExchange.sol:Mta2UsdcTokenExchange",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 27138,
        "contract": "contracts/token_exchanges/Mta2UsdcTokenExchange.sol:Mta2UsdcTokenExchange",
        "label": "mtaToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 27140,
        "contract": "contracts/token_exchanges/Mta2UsdcTokenExchange.sol:Mta2UsdcTokenExchange",
        "label": "balancerPoolId1",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 27142,
        "contract": "contracts/token_exchanges/Mta2UsdcTokenExchange.sol:Mta2UsdcTokenExchange",
        "label": "balancerPoolId2",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)9027": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)21840": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}