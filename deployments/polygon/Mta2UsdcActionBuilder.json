{
  "address": "0x96713895c0c2E2ab5F9D8142C3718898118Cd6aD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenExchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mtaToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "diffToTarget",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "targetIsZero",
              "type": "bool"
            }
          ],
          "internalType": "struct IMark2Market.BalanceAssetPrices[]",
          "name": "assetPrices",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "buildAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActionCode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mtaToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenExchange",
      "outputs": [
        {
          "internalType": "contract ITokenExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb2281ac5c4c7bcd743c4ffaf9f1610eddc58eeddb433c7278d55e464aa800ba",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x96713895c0c2E2ab5F9D8142C3718898118Cd6aD",
    "transactionIndex": 33,
    "gasUsed": "515901",
    "logsBloom": "0x
    "blockHash": "0x3e85a8588cfa513253f7a7df58ffb82be26c436f80c0ce08f939e77101aa4681",
    "transactionHash": "0xfb2281ac5c4c7bcd743c4ffaf9f1610eddc58eeddb433c7278d55e464aa800ba",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 24143150,
        "transactionHash": "0xfb2281ac5c4c7bcd743c4ffaf9f1610eddc58eeddb433c7278d55e464aa800ba",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004fd5bdd5b5123100000000000000000000000000000000000000000000000590e8c1dd6dcec4b5000000000000000000000000000000000000000000009c07a03df447738ee1ee0000000000000000000000000000000000000000000000059098ec1f9819b284000000000000000000000000000000000000000000009c07a08dca054943f41f",
        "logIndex": 157,
        "blockHash": "0x3e85a8588cfa513253f7a7df58ffb82be26c436f80c0ce08f939e77101aa4681"
      }
    ],
    "blockNumber": 24143150,
    "cumulativeGasUsed": "5884214",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x997281Bdf6f7d354168a523eb15Ac2b8A5877417",
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0xf501dd45a1198c2e1b5aef5314a68b9006d842e0"
  ],
  "solcInputHash": "fe95cbbb2d97e4d95ece85093db98e18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mtaToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"diffToTarget\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"}],\"internalType\":\"struct IMark2Market.BalanceAssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"buildAction\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActionCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mtaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/action_builders/Mta2UsdcActionBuilder.sol\":\"Mta2UsdcActionBuilder\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"contracts/action_builders/Mta2UsdcActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../interfaces/IActionBuilder.sol\\\";\\nimport \\\"../interfaces/IMark2Market.sol\\\";\\n\\ncontract Mta2UsdcActionBuilder is IActionBuilder {\\n    bytes32 constant ACTION_CODE = keccak256(\\\"Mta2Usdc\\\");\\n\\n    ITokenExchange public tokenExchange;\\n    IERC20 public usdcToken;\\n    IERC20 public mtaToken;\\n\\n    constructor(\\n        address _tokenExchange,\\n        address _usdcToken,\\n        address _mtaToken\\n    ) {\\n        require(_tokenExchange != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_mtaToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        tokenExchange = ITokenExchange(_tokenExchange);\\n        usdcToken = IERC20(_usdcToken);\\n        mtaToken = IERC20(_mtaToken);\\n    }\\n\\n    function getActionCode() external pure override returns (bytes32) {\\n        return ACTION_CODE;\\n    }\\n\\n    function buildAction(\\n        IMark2Market.BalanceAssetPrices[] memory assetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view override returns (ExchangeAction memory) {\\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\\n        IMark2Market.BalanceAssetPrices memory mtaPrices;\\n        IMark2Market.BalanceAssetPrices memory usdcPrices;\\n        for (uint8 i = 0; i < assetPrices.length; i++) {\\n            if (assetPrices[i].asset == address(mtaToken)) {\\n                mtaPrices = assetPrices[i];\\n            } else if (assetPrices[i].asset == address(usdcToken)) {\\n                usdcPrices = assetPrices[i];\\n            }\\n        }\\n\\n        // because we know that mta is leaf in tree and we can use this value\\n        int256 diff = mtaPrices.diffToTarget;\\n\\n        uint256 amount;\\n        IERC20 from;\\n        IERC20 to;\\n        bool targetIsZero;\\n        if (mtaPrices.targetIsZero || diff < 0) {\\n            amount = uint256(- diff);\\n            from = mtaToken;\\n            to = usdcToken;\\n            targetIsZero = mtaPrices.targetIsZero;\\n        } else {\\n            amount = uint256(diff);\\n            from = usdcToken;\\n            to = mtaToken;\\n            targetIsZero = usdcPrices.targetIsZero;\\n        }\\n\\n        ExchangeAction memory action = ExchangeAction(\\n            tokenExchange,\\n            ACTION_CODE,\\n            from,\\n            to,\\n            amount,\\n            targetIsZero,\\n            false\\n        );\\n\\n        return action;\\n    }\\n}\\n\",\"keccak256\":\"0x7e8da98a0805c5d5cf8dd02ddb3206377ad54bce7c4a0d65dc8a3692e9f0fb21\",\"license\":\"MIT\"},\"contracts/interfaces/IActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMark2Market.sol\\\";\\nimport \\\"./ITokenExchange.sol\\\";\\n\\ninterface IActionBuilder {\\n    struct ExchangeAction {\\n        ITokenExchange tokenExchange;\\n        bytes32 code;\\n        IERC20 from;\\n        IERC20 to;\\n        uint256 amount; // amount at usdc with 6 digit fractions\\n        bool exchangeAll; // mean that we should trade all tokens to zero ownership\\n        bool executed;\\n    }\\n\\n    function getActionCode() external pure returns (bytes32);\\n\\n    function buildAction(\\n        IMark2Market.BalanceAssetPrices[] memory assetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view returns (ExchangeAction memory);\\n}\\n\",\"keccak256\":\"0x86dc01c83d7f8c96b8c1d62ebb80e684a76c8e92a100cb8b5b469b166caea8ca\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    struct BalanceAssetPrices {\\n        address asset;\\n        int256 diffToTarget; // diff token to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function totalUsdcPrice() external view returns (uint256);\\n\\n    function assetPricesForBalance() external view returns (BalanceAssetPrices[] memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount) external view returns (BalanceAssetPrices[] memory);\\n}\\n\",\"keccak256\":\"0x7dd7e3ea067b01d8283c7da9372de4b14e65993860c6285d8a79ff0e31214895\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108d43803806108d483398101604081905261002f9161015e565b6001600160a01b0383166100785760405162461bcd60e51b815260206004820152601860248201526000805160206108b483398151915260448201526064015b60405180910390fd5b6001600160a01b0382166100bc5760405162461bcd60e51b815260206004820152601860248201526000805160206108b4833981519152604482015260640161006f565b6001600160a01b0381166101005760405162461bcd60e51b815260206004820152601860248201526000805160206108b4833981519152604482015260640161006f565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556101a1565b80516001600160a01b038116811461015957600080fd5b919050565b60008060006060848603121561017357600080fd5b61017c84610142565b925061018a60208501610142565b915061019860408501610142565b90509250925092565b610704806101b06000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311eac8551461005c57806318ad30881461008c578063636f6159146100ba5780637045352f146100cd5780639de3c82714610145575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6040517f37413358dd8110ca86ace5c1b61669a1e8f25c9ea4d096561c57f81182ec8ede8152602001610083565b60005461006f906001600160a01b031681565b6100e06100db366004610498565b610158565b604051610083919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a08281015115159082015260c09182015115159181019190915260e00190565b60025461006f906001600160a01b031681565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284518082018652838152808301849052808601849052855191820186528382529181018390529384018290529192905b85518160ff1610156102a65760025486516001600160a01b0390911690879060ff84169081106101f4576101f461068a565b6020026020010151600001516001600160a01b0316141561023357858160ff16815181106102245761022461068a565b60200260200101519250610294565b60015486516001600160a01b0390911690879060ff84169081106102595761025961068a565b6020026020010151600001516001600160a01b0316141561029457858160ff16815181106102895761028961068a565b602002602001015191505b8061029e81610637565b9150506101c2565b506000826020015190506000806000808660400151806102c65750600085125b156102f9576102d485610657565b60025460015460408a01519296506001600160a01b039182169550169250905061031a565b505060015460025460408601518594506001600160a01b0392831693509116905b6040805160e081018252600080546001600160a01b0390811683527f37413358dd8110ca86ace5c1b61669a1e8f25c9ea4d096561c57f81182ec8ede602084015295861692820192909252929093166060830152608082019390935291151560a083015260c08201529695505050505050565b600082601f83011261039e57600080fd5b813560206103b36103ae83610613565b6105e2565b8281528181019085830160e0808602880185018910156103d257600080fd5b6000805b878110156104695782848c0312156103ec578182fd5b6103f4610596565b84356103ff816106b6565b81528488013588820152604061041681870161048d565b90820152606061042786820161048d565b908201526080858101359082015260a0610442818701610478565b9082015260c0610453868201610478565b90820152865294860194928201926001016103d6565b50929998505050505050505050565b8035801515811461048857600080fd5b919050565b8035610488816106b6565b60008060408084860312156104ac57600080fd5b833567ffffffffffffffff808211156104c457600080fd5b818601915086601f8301126104d857600080fd5b813560206104e86103ae83610613565b828152818101908583016060808602880185018d101561050757600080fd5b600097505b858810156105655780828e03121561052357600080fd5b61052b6105bf565b8235610536816106b6565b8152828601358682015261054b8a8401610478565b818b0152845260019790970196928401929081019061050c565b5090985050508701359350508083111561057e57600080fd5b505061058c8582860161038d565b9150509250929050565b60405160e0810167ffffffffffffffff811182821017156105b9576105b96106a0565b60405290565b6040516060810167ffffffffffffffff811182821017156105b9576105b96106a0565b604051601f8201601f1916810167ffffffffffffffff8111828210171561060b5761060b6106a0565b604052919050565b600067ffffffffffffffff82111561062d5761062d6106a0565b5060051b60200190565b600060ff821660ff81141561064e5761064e610674565b60010192915050565b6000600160ff1b82141561066d5761066d610674565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106cb57600080fd5b5056fea264697066735822122026309568029f1e42a648953dd0ae1ae275e907e5fc25eaf850086aa2ecf5480864736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806311eac8551461005c57806318ad30881461008c578063636f6159146100ba5780637045352f146100cd5780639de3c82714610145575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6040517f37413358dd8110ca86ace5c1b61669a1e8f25c9ea4d096561c57f81182ec8ede8152602001610083565b60005461006f906001600160a01b031681565b6100e06100db366004610498565b610158565b604051610083919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a08281015115159082015260c09182015115159181019190915260e00190565b60025461006f906001600160a01b031681565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284518082018652838152808301849052808601849052855191820186528382529181018390529384018290529192905b85518160ff1610156102a65760025486516001600160a01b0390911690879060ff84169081106101f4576101f461068a565b6020026020010151600001516001600160a01b0316141561023357858160ff16815181106102245761022461068a565b60200260200101519250610294565b60015486516001600160a01b0390911690879060ff84169081106102595761025961068a565b6020026020010151600001516001600160a01b0316141561029457858160ff16815181106102895761028961068a565b602002602001015191505b8061029e81610637565b9150506101c2565b506000826020015190506000806000808660400151806102c65750600085125b156102f9576102d485610657565b60025460015460408a01519296506001600160a01b039182169550169250905061031a565b505060015460025460408601518594506001600160a01b0392831693509116905b6040805160e081018252600080546001600160a01b0390811683527f37413358dd8110ca86ace5c1b61669a1e8f25c9ea4d096561c57f81182ec8ede602084015295861692820192909252929093166060830152608082019390935291151560a083015260c08201529695505050505050565b600082601f83011261039e57600080fd5b813560206103b36103ae83610613565b6105e2565b8281528181019085830160e0808602880185018910156103d257600080fd5b6000805b878110156104695782848c0312156103ec578182fd5b6103f4610596565b84356103ff816106b6565b81528488013588820152604061041681870161048d565b90820152606061042786820161048d565b908201526080858101359082015260a0610442818701610478565b9082015260c0610453868201610478565b90820152865294860194928201926001016103d6565b50929998505050505050505050565b8035801515811461048857600080fd5b919050565b8035610488816106b6565b60008060408084860312156104ac57600080fd5b833567ffffffffffffffff808211156104c457600080fd5b818601915086601f8301126104d857600080fd5b813560206104e86103ae83610613565b828152818101908583016060808602880185018d101561050757600080fd5b600097505b858810156105655780828e03121561052357600080fd5b61052b6105bf565b8235610536816106b6565b8152828601358682015261054b8a8401610478565b818b0152845260019790970196928401929081019061050c565b5090985050508701359350508083111561057e57600080fd5b505061058c8582860161038d565b9150509250929050565b60405160e0810167ffffffffffffffff811182821017156105b9576105b96106a0565b60405290565b6040516060810167ffffffffffffffff811182821017156105b9576105b96106a0565b604051601f8201601f1916810167ffffffffffffffff8111828210171561060b5761060b6106a0565b604052919050565b600067ffffffffffffffff82111561062d5761062d6106a0565b5060051b60200190565b600060ff821660ff81141561064e5761064e610674565b60010192915050565b6000600160ff1b82141561066d5761066d610674565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106cb57600080fd5b5056fea264697066735822122026309568029f1e42a648953dd0ae1ae275e907e5fc25eaf850086aa2ecf5480864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18279,
        "contract": "contracts/action_builders/Mta2UsdcActionBuilder.sol:Mta2UsdcActionBuilder",
        "label": "tokenExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITokenExchange)23930"
      },
      {
        "astId": 18282,
        "contract": "contracts/action_builders/Mta2UsdcActionBuilder.sol:Mta2UsdcActionBuilder",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 18285,
        "contract": "contracts/action_builders/Mta2UsdcActionBuilder.sol:Mta2UsdcActionBuilder",
        "label": "mtaToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)9027"
      }
    ],
    "types": {
      "t_contract(IERC20)9027": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenExchange)23930": {
        "encoding": "inplace",
        "label": "contract ITokenExchange",
        "numberOfBytes": "20"
      }
    }
  }
}