{
  "address": "0xc90754A12424Db8d532B54725B787fd70400DD6A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV1UsdcUsdtPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV2DodoUsdtPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoMine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoV1Helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoApprove",
          "type": "address"
        }
      ],
      "name": "StrategyDodoUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dodoToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcLPToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdtLPToken",
          "type": "address"
        }
      ],
      "name": "StrategyDodoUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoMine",
      "outputs": [
        {
          "internalType": "contract IDODOMine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV1UsdcUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV2DodoUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dodoV1UsdcUsdtPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoV2DodoUsdtPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoMine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoV1Helper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoApprove",
          "type": "address"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dodoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcLPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtLPToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "solcInputHash": "8609113bf47d514ad03a6c69ef66e471",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV1UsdcUsdtPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV2DodoUsdtPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoMine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoV1Helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoApprove\",\"type\":\"address\"}],\"name\":\"StrategyDodoUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dodoToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcLPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtLPToken\",\"type\":\"address\"}],\"name\":\"StrategyDodoUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoMine\",\"outputs\":[{\"internalType\":\"contract IDODOMine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV1UsdcUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV2DodoUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoV1UsdcUsdtPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoV2DodoUsdtPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoMine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoV1Helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoApprove\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtLPToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StrategyDodoUsdc.sol\":\"StrategyDodoUsdc\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x611d1f2720036646366a613a7b6bb85d1527ed3b4fb5ba2db8cfc34f80a37be6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"contracts/connectors/DodoExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"../connectors/dodo/IDODOV1Helper.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOProxy.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOV2.sol\\\";\\r\\n\\r\\n/*\\r\\n    There are six swap functions in DODOProxy. Which are executed for different sources or versions\\r\\n\\r\\n    - dodoSwapV1: Used for DODOV1 pools\\r\\n    - dodoSwapV2ETHToToken: Used for DODOV2 pools and specify ETH as fromToken\\r\\n    - dodoSwapV2TokenToETH: Used for DODOV2 pools and specify ETH as toToken\\r\\n    - dodoSwapV2TokenToToken:  Used for DODOV2 pools and both fromToken and toToken are ERC20\\r\\n    - externalSwap: Used for executing third-party protocols' aggregation algorithm\\r\\n    - mixSwap: Used for executing DODO\\u2019s custom aggregation algorithm\\r\\n\\r\\n    Note: Best Trading path is calculated by off-chain program. DODOProxy's swap functions is only used for executing.\\r\\n*/\\r\\nabstract contract DodoExchange {\\r\\n\\r\\n    IDODOV1Helper private dodoV1Helper;\\r\\n    IDODOProxy private dodoProxy;\\r\\n    address private dodoApprove;\\r\\n\\r\\n    function setDodoParams(\\r\\n        address _dodoV1Helper,\\r\\n        address _dodoProxy,\\r\\n        address _dodoApprove\\r\\n    ) internal {\\r\\n        dodoV1Helper = IDODOV1Helper(_dodoV1Helper);\\r\\n        dodoProxy = IDODOProxy(_dodoProxy);\\r\\n        dodoApprove = _dodoApprove;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        The code example assumes user wanting to use the specify DODOV1 pool for swapping\\r\\n\\r\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\r\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\r\\n        combination to represent the multi-hop directions to save gas consumption\\r\\n        For example:\\r\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\r\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\r\\n    */\\r\\n    function _useDodoSwapV1(\\r\\n        address dodoV1Pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 slippage,\\r\\n        uint256 directions\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 minReturnAmount;\\r\\n        if (directions == 0) {\\r\\n            uint256 receivedQuoteAmount = dodoV1Helper.querySellBaseToken(dodoV1Pool, fromTokenAmount);\\r\\n            minReturnAmount = receivedQuoteAmount * (100 - slippage) / 100;\\r\\n        } else {\\r\\n            uint256 receivedBaseAmount = dodoV1Helper.querySellQuoteToken(dodoV1Pool, fromTokenAmount);\\r\\n            minReturnAmount = receivedBaseAmount * (100 - slippage) / 100;\\r\\n        }\\r\\n\\r\\n        address[] memory dodoPairs = new address[](1); //one-hop\\r\\n        dodoPairs[0] = dodoV1Pool;\\r\\n\\r\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\r\\n\\r\\n        return dodoProxy.dodoSwapV1(\\r\\n            fromToken,\\r\\n            toToken,\\r\\n            fromTokenAmount,\\r\\n            minReturnAmount,\\r\\n            dodoPairs,\\r\\n            directions,\\r\\n            false,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        The code example assumes user wanting to use the specify DODOV2 pool for swapping\\r\\n\\r\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\r\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\r\\n        combination to represent the multi-hop directions to save gas consumption\\r\\n        For example:\\r\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\r\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\r\\n    */\\r\\n    function _useDodoSwapV2(\\r\\n        address dodoV2Pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 slippage,\\r\\n        uint256 directions\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 minReturnAmount;\\r\\n        if (directions == 0) {\\r\\n            (uint256 receiveQuoteAmount,) = IDODOV2(dodoV2Pool).querySellBase(address(this), fromTokenAmount);\\r\\n            minReturnAmount = receiveQuoteAmount * (100 - slippage) / 100;\\r\\n        } else {\\r\\n            (uint256 receiveBaseAmount,) = IDODOV2(dodoV2Pool).querySellQuote(address(this), fromTokenAmount);\\r\\n            minReturnAmount = receiveBaseAmount * (100 - slippage) / 100;\\r\\n        }\\r\\n\\r\\n        address[] memory dodoPairs = new address[](1); //one-hop\\r\\n        dodoPairs[0] = dodoV2Pool;\\r\\n\\r\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\r\\n\\r\\n        return dodoProxy.dodoSwapV2TokenToToken(\\r\\n            fromToken,\\r\\n            toToken,\\r\\n            fromTokenAmount,\\r\\n            minReturnAmount,\\r\\n            dodoPairs,\\r\\n            directions,\\r\\n            false,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xa3c430606c6c4f94a41213db7130b38a3c90f575e261fc2ecc87a6535da66b3b\",\"license\":\"MIT\"},\"contracts/connectors/dodo/IDODOMine.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOMine {\\r\\n\\r\\n    // ============ Helper ============\\r\\n\\r\\n    function getUserLpBalance(address _lpToken, address _user) external view returns (uint256);\\r\\n\\r\\n    // ============ View Rewards ============\\r\\n\\r\\n    function getPendingReward(address _lpToken, address _user) external view returns (uint256);\\r\\n\\r\\n    function getAllPendingReward(address _user) external view returns (uint256);\\r\\n\\r\\n    function getRealizedReward(address _user) external view returns (uint256);\\r\\n\\r\\n    function getDlpMiningSpeed(address _lpToken) external view returns (uint256);\\r\\n\\r\\n    // ============ Deposit & Withdraw & Claim ============\\r\\n    // Deposit & withdraw will also trigger claim\\r\\n\\r\\n    function deposit(address _lpToken, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(address _lpToken, uint256 _amount) external;\\r\\n\\r\\n    function withdrawAll(address _lpToken) external;\\r\\n\\r\\n    function claim(address _lpToken) external;\\r\\n\\r\\n    function claimAll() external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd8681f4ad612d70c7247850ac1242c05bb784574968524fc0770ba89f2969e88\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOProxy.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOProxy {\\r\\n    function dodoSwapV1(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory dodoPairs,\\r\\n        uint256 directions,\\r\\n        bool,\\r\\n        uint256 deadLine\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function dodoSwapV2TokenToToken(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory dodoPairs,\\r\\n        uint256 directions,\\r\\n        bool isIncentive,\\r\\n        uint256 deadLine\\r\\n    ) external returns (uint256 returnAmount);\\r\\n}\",\"keccak256\":\"0x88c04403ba8bad71f5e43eb1a6a87cad472032e8be99c87a23e046a20edebf67\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOV1.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOV1 {\\r\\n    function init(\\r\\n        address owner,\\r\\n        address supervisor,\\r\\n        address maintainer,\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        address oracle,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 mtFeeRate,\\r\\n        uint256 k,\\r\\n        uint256 gasPriceLimit\\r\\n    ) external;\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function sellBaseToken(\\r\\n        uint256 amount,\\r\\n        uint256 minReceiveQuote,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function buyBaseToken(\\r\\n        uint256 amount,\\r\\n        uint256 maxPayQuote,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\\r\\n\\r\\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\\r\\n\\r\\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\\r\\n\\r\\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawBase(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAllBase() external returns (uint256);\\r\\n\\r\\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawQuote(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAllQuote() external returns (uint256);\\r\\n\\r\\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _BASE_TOKEN_() external returns (address);\\r\\n\\r\\n    function _QUOTE_TOKEN_() external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xcf283880e3ecc59505ed5c40bb98201c36556fdcf3b68de3242962e934602a70\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOV1Helper.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOV1Helper {\\r\\n    function querySellQuoteToken(\\r\\n        address dodoV1Pool,\\r\\n        uint256 quoteAmount\\r\\n    ) external view returns (uint256 receivedBaseAmount);\\r\\n\\r\\n    function querySellBaseToken(\\r\\n        address dodoV1Pool,\\r\\n        uint256 baseAmount\\r\\n    ) external view returns (uint256 receivedQuoteAmount);\\r\\n}\\r\\n\",\"keccak256\":\"0x28cbc6b3fe5906ac4acd40d97c9cf40ce88c1bd53aefcb3f77ad43b49c2c5fab\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOV2.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOV2 {\\r\\n    function querySellBase(\\r\\n        address trader,\\r\\n        uint256 payBaseAmount\\r\\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\\r\\n\\r\\n    function querySellQuote(\\r\\n        address trader,\\r\\n        uint256 payQuoteAmount\\r\\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\\r\\n}\\r\\n\",\"keccak256\":\"0x4b226372ad0b7cf47314f3b9052adec36738eacf294facd12974c09526f34e0f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    event Reward(uint256 amount);\\r\\n    event PortfolioManagerUpdated(address value);\\r\\n\\r\\n    event Stake(uint256 amount);\\r\\n    event Unstake(uint256 amount, uint256 amountReceived);\\r\\n\\r\\n    function stake(\\r\\n        address _asset, // USDC\\r\\n        uint256 _amount // value for staking in USDC\\r\\n    ) external;\\r\\n\\r\\n    function unstake(\\r\\n        address _asset, // USDC\\r\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\r\\n        address _beneficiary, // PortfolioManager\\r\\n        bool targetIsZero // allow unstake full value\\r\\n    ) external returns (uint256); // Real unstake value\\r\\n\\r\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\r\\n\\r\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\r\\n\\r\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x773d20a32a5e2b5d43d2c8bc778af0b91dfe9e72d0dbedf23e6415819e82d38f\",\"license\":\"GPL-3.0\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IStrategy.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\r\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\r\\n\\r\\n    address public portfolioManager;\\r\\n\\r\\n\\r\\n    function __Strategy_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(UPGRADER_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyPortfolioManager() {\\r\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setPortfolioManager(address _value) public onlyAdmin {\\r\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\r\\n        grantRole(PORTFOLIO_MANAGER, _value);\\r\\n\\r\\n        portfolioManager = _value;\\r\\n        emit PortfolioManagerUpdated(_value);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n\\r\\n    function stake(\\r\\n        address _asset, // USDC\\r\\n        uint256 _amount // value for staking in USDC\\r\\n    ) external override onlyPortfolioManager {\\r\\n        emit Stake(_amount);\\r\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary,\\r\\n        bool _targetIsZero\\r\\n    ) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 withdrawAmount;\\r\\n        if (_targetIsZero) {\\r\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\r\\n        } else {\\r\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\r\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\r\\n        }\\r\\n\\r\\n        uint256 balanceUSDC = IERC20(_asset).balanceOf(address(this));\\r\\n        IERC20(_asset).transfer(_beneficiary, balanceUSDC);\\r\\n        emit Unstake(_amount, balanceUSDC);\\r\\n\\r\\n        return balanceUSDC;\\r\\n    }\\r\\n\\r\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\r\\n        uint256 totalUsdc = _claimRewards(_to);\\r\\n        emit Reward(totalUsdc);\\r\\n        return totalUsdc;\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256){\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal virtual returns (uint256){\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\r\\n        revert(\\\"Not implemented\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x82e60557d1f3ef46d7ee86216c603b5a1fea2a7687c536053a6c1fcf4e6ad4b7\",\"license\":\"MIT\"},\"contracts/strategies/StrategyDodoUsdc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Strategy.sol\\\";\\r\\nimport \\\"../connectors/DodoExchange.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOV1.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOMine.sol\\\";\\r\\n\\r\\ncontract StrategyDodoUsdc is Strategy, DodoExchange {\\r\\n\\r\\n    IERC20 public usdcToken;\\r\\n    IERC20 public usdtToken;\\r\\n    IERC20 public dodoToken;\\r\\n    IERC20 public usdcLPToken;\\r\\n    IERC20 public usdtLPToken;\\r\\n\\r\\n    IDODOV1 public dodoV1UsdcUsdtPool;\\r\\n    IDODOV2 public dodoV2DodoUsdtPool;\\r\\n    IDODOMine public dodoMine;\\r\\n\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event StrategyDodoUpdatedTokens(address usdcToken, address usdtToken, address dodoToken, address usdcLPToken,\\r\\n        address usdtLPToken);\\r\\n\\r\\n    event StrategyDodoUpdatedParams(address dodoV1UsdcUsdtPool, address dodoV2DodoUsdtPool, address dodoMine,\\r\\n        address dodoV1Helper, address dodoProxy, address dodoApprove);\\r\\n\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __Strategy_init();\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- Setters\\r\\n\\r\\n    function setTokens(\\r\\n        address _usdcToken,\\r\\n        address _usdtToken,\\r\\n        address _dodoToken,\\r\\n        address _usdcLPToken,\\r\\n        address _usdtLPToken\\r\\n    ) external onlyAdmin {\\r\\n\\r\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_usdtToken != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_dodoToken != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_usdcLPToken != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_usdtLPToken != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        usdcToken = IERC20(_usdcToken);\\r\\n        usdtToken = IERC20(_usdtToken);\\r\\n        dodoToken = IERC20(_dodoToken);\\r\\n        usdcLPToken = IERC20(_usdcLPToken);\\r\\n        usdtLPToken = IERC20(_usdtLPToken);\\r\\n\\r\\n        emit StrategyDodoUpdatedTokens(_usdcToken, _usdtToken, _dodoToken, _usdcLPToken, _usdtLPToken);\\r\\n    }\\r\\n\\r\\n    function setParams(\\r\\n        address _dodoV1UsdcUsdtPool,\\r\\n        address _dodoV2DodoUsdtPool,\\r\\n        address _dodoMine,\\r\\n        address _dodoV1Helper,\\r\\n        address _dodoProxy,\\r\\n        address _dodoApprove\\r\\n    ) external onlyAdmin {\\r\\n\\r\\n        require(_dodoV1UsdcUsdtPool != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_dodoV2DodoUsdtPool != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_dodoMine != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_dodoV1Helper != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_dodoProxy != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_dodoApprove != address(0), \\\"Zero address not allowed\\\");\\r\\n\\r\\n        dodoV1UsdcUsdtPool = IDODOV1(_dodoV1UsdcUsdtPool);\\r\\n        dodoV2DodoUsdtPool = IDODOV2(_dodoV2DodoUsdtPool);\\r\\n        dodoMine = IDODOMine(_dodoMine);\\r\\n\\r\\n        setDodoParams(_dodoV1Helper, _dodoProxy, _dodoApprove);\\r\\n\\r\\n        emit StrategyDodoUpdatedParams(_dodoV1UsdcUsdtPool, _dodoV2DodoUsdtPool, _dodoMine, _dodoV1Helper, _dodoProxy, _dodoApprove);\\r\\n    }\\r\\n\\r\\n\\r\\n    // --- logic\\r\\n\\r\\n    function _stake(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n\\r\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\r\\n\\r\\n        // add liquidity to pool\\r\\n        usdcToken.approve(address(dodoV1UsdcUsdtPool), _amount);\\r\\n        dodoV1UsdcUsdtPool.depositBaseTo(address(this), _amount);\\r\\n\\r\\n        // stake all lp tokens, because we unstake 0.1% tokens and don't stake them in _unstake() method\\r\\n        uint256 usdcLPTokenBalance = usdcLPToken.balanceOf(address(this));\\r\\n        usdcLPToken.approve(address(dodoMine), usdcLPTokenBalance);\\r\\n        dodoMine.deposit(address(usdcLPToken), usdcLPTokenBalance);\\r\\n    }\\r\\n\\r\\n    function _unstake(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\r\\n\\r\\n        // get lp tokens\\r\\n        uint256 baseLpTotalSupply = usdcLPToken.totalSupply();\\r\\n        (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\r\\n        uint256 baseLpBalance = _amount * baseLpTotalSupply / baseTarget;\\r\\n        // need for smooth withdraw in withdrawBase() method, but we will have some unstaken tokens\\r\\n        baseLpBalance = baseLpBalance * 1001 / 1000;\\r\\n\\r\\n        // unstake lp tokens\\r\\n        dodoMine.withdraw(address(usdcLPToken), baseLpBalance);\\r\\n\\r\\n        // remove liquidity from pool\\r\\n        uint256 redeemedTokens = dodoV1UsdcUsdtPool.withdrawBase(_amount);\\r\\n\\r\\n        return redeemedTokens;\\r\\n    }\\r\\n\\r\\n    function _unstakeFull(\\r\\n        address _asset,\\r\\n        address _beneficiary\\r\\n    ) internal override returns (uint256) {\\r\\n\\r\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\r\\n\\r\\n        // unstake lp tokens\\r\\n        dodoMine.withdrawAll(address(usdcLPToken));\\r\\n\\r\\n        // remove liquidity from pool\\r\\n        uint256 redeemedTokens = dodoV1UsdcUsdtPool.withdrawAllBase();\\r\\n\\r\\n        return redeemedTokens;\\r\\n    }\\r\\n\\r\\n    function netAssetValue() external override view returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function liquidationValue() external override view returns (uint256) {\\r\\n        return _totalValue();\\r\\n    }\\r\\n\\r\\n    function _totalValue() internal view returns (uint256) {\\r\\n        uint256 baseLpBalance = dodoMine.getUserLpBalance(address(usdcLPToken), address(this));\\r\\n        if (baseLpBalance == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 baseLpTotalSupply = usdcLPToken.totalSupply();\\r\\n        (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\r\\n        uint256 amount = baseLpBalance * baseTarget / baseLpTotalSupply;\\r\\n\\r\\n        return usdcToken.balanceOf(address(this)) + amount;\\r\\n    }\\r\\n\\r\\n    function _claimRewards(address _to) internal override returns (uint256) {\\r\\n\\r\\n        // claim rewards\\r\\n        dodoMine.claimAll();\\r\\n\\r\\n        uint256 dodoBalance = dodoToken.balanceOf(address(this));\\r\\n        if (dodoBalance == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // swap v2 dodo -> usdt\\r\\n        uint256 usdtTokenAmount = _useDodoSwapV2(address(dodoV2DodoUsdtPool), address(dodoToken), address(usdtToken), dodoBalance, 1, 0);\\r\\n\\r\\n        // swap v1 usdt -> usdc\\r\\n        uint256 usdcTokenAmount = _useDodoSwapV1(address(dodoV1UsdcUsdtPool), address(usdtToken), address(usdcToken), usdtTokenAmount, 1, 1);\\r\\n\\r\\n        usdcToken.transfer(_to, usdcToken.balanceOf(address(this)));\\r\\n\\r\\n        return usdcTokenAmount;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x11e2f7b307ed5c0c048b44dffab0d13114c03742fd6315ef194a5775ab1b8d1b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff168062000033575060005460ff16155b6200009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000be576000805461ffff19166101011790555b8015620000d1576000805461ff00191690555b5060805160601c61309c620001066000396000818161082201528181610862015281816108eb015261092b015261309c6000f3fe6080604052600436106101c25760003560e01c806375123ff9116100f7578063a440b21a11610095578063d547741f11610064578063d547741f146104f0578063ef5cfb8c14610510578063f6f6b88114610530578063f72c0d8b1461055057600080fd5b8063a440b21a1461046e578063a7a61d051461048e578063a98ad46c146104af578063adc9772e146104d057600080fd5b80638400150a116100d15780638400150a1461041857806391d1485414610439578063a217fddf14610459578063a3673b38146102d757600080fd5b806375123ff9146103c05780637d5f5802146103e15780638129fc1c1461040357600080fd5b80632f2ff15d116101645780634f1ef2861161013e5780634f1ef2861461034c5780635ebb8dee1461035f5780635f5d905c1461037f578063620b75df146103a057600080fd5b80632f2ff15d146102ec57806336568abe1461030c5780633659cfe61461032c57600080fd5b806311eac855116101a057806311eac85514610257578063154e4f5814610278578063248a9ca3146102995780632576e65a146102d757600080fd5b806301ffc9a7146101c757806307ab0a7e146101fc5780630fc55bfd14610235575b600080fd5b3480156101d357600080fd5b506101e76101e2366004612b90565b610584565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506101365461021d906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561024157600080fd5b5061025561025036600461291a565b6105bb565b005b34801561026357600080fd5b506101305461021d906001600160a01b031681565b34801561028457600080fd5b506101355461021d906001600160a01b031681565b3480156102a557600080fd5b506102c96102b4366004612b4b565b60009081526065602052604090206001015490565b6040519081526020016101f3565b3480156102e357600080fd5b506102c961075f565b3480156102f857600080fd5b50610255610307366004612b64565b61076e565b34801561031857600080fd5b50610255610327366004612b64565b610799565b34801561033857600080fd5b506102556103473660046128ff565b610817565b61025561035a3660046129f3565b6108e0565b34801561036b57600080fd5b5061025561037a36600461297f565b610996565b34801561038b57600080fd5b506101345461021d906001600160a01b031681565b3480156103ac57600080fd5b5060fb5461021d906001600160a01b031681565b3480156103cc57600080fd5b506101325461021d906001600160a01b031681565b3480156103ed57600080fd5b506102c960008051602061302083398151915281565b34801561040f57600080fd5b50610255610b6e565b34801561042457600080fd5b506101375461021d906001600160a01b031681565b34801561044557600080fd5b506101e7610454366004612b64565b610be1565b34801561046557600080fd5b506102c9600081565b34801561047a57600080fd5b506102556104893660046128ff565b610c0c565b34801561049a57600080fd5b506101335461021d906001600160a01b031681565b3480156104bb57600080fd5b506101315461021d906001600160a01b031681565b3480156104dc57600080fd5b506102556104eb366004612ab5565b610cea565b3480156104fc57600080fd5b5061025561050b366004612b64565b610dd3565b34801561051c57600080fd5b506102c961052b3660046128ff565b610df9565b34801561053c57600080fd5b506102c961054b366004612adf565b610e7d565b34801561055c57600080fd5b506102c97f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806105b557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105c6600033610be1565b6105eb5760405162461bcd60e51b81526004016105e290612e7c565b60405180910390fd5b6001600160a01b0385166106115760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b0384166106375760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b03831661065d5760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b0382166106835760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b0381166106a95760405162461bcd60e51b81526004016105e290612ee1565b61013080546001600160a01b038781166001600160a01b03199283168117909355610131805488831690841681179091556101328054888416908516811790915561013380548885169086168117909155610134805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f1eb2ec66971c47166b02af35b989cec29a89ac6ca053121f2445e524658066dc9060a00160405180910390a15050505050565b600061076961107c565b905090565b60008281526065602052604090206001015461078a81336112cc565b6107948383611330565b505050565b6001600160a01b03811633146108095760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105e2565b61081382826113b6565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108605760405162461bcd60e51b81526004016105e290612d96565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089261141d565b6001600160a01b0316146108b85760405162461bcd60e51b81526004016105e290612de2565b6108c18161144b565b604080516000808252602082019092526108dd91839190611476565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109295760405162461bcd60e51b81526004016105e290612d96565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661095b61141d565b6001600160a01b0316146109815760405162461bcd60e51b81526004016105e290612de2565b61098a8261144b565b61081382826001611476565b6109a1600033610be1565b6109bd5760405162461bcd60e51b81526004016105e290612e7c565b6001600160a01b0386166109e35760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038516610a095760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038416610a2f5760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038316610a555760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038216610a7b5760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038116610aa15760405162461bcd60e51b81526004016105e290612ee1565b61013580546001600160a01b038881166001600160a01b03199283168117909355610136805489831690841681179091556101378054898416908516811790915561012d8054898516908616811790915561012e8054898616908716811790915561012f8054958916959096168517909555604080519687526020870193909352858301919091526060850152608084019290925260a0830152517fbc987a95c487955e4fb493a3897aae49196bf1704fe15d64f858bc671ec8e77a9181900360c00190a1505050505050565b600054610100900460ff1680610b87575060005460ff16155b610ba35760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff16158015610bc5576000805461ffff19166101011790555b610bcd6115c1565b80156108dd576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c17600033610be1565b610c335760405162461bcd60e51b81526004016105e290612e7c565b6001600160a01b038116610c595760405162461bcd60e51b81526004016105e290612ee1565b60fb54610c7e90600080516020613020833981519152906001600160a01b0316610dd3565b610c966000805160206130208339815191528261076e565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b610d0260008051602061302083398151915233610be1565b610d1e5760405162461bcd60e51b81526004016105e290612d5f565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b81523060048201526108139083906001600160a01b038216906370a082319060240160206040518083038186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190612bba565b61165d565b600082815260656020526040902060010154610def81336112cc565b61079483836113b6565b6000610e1360008051602061302083398151915233610be1565b610e2f5760405162461bcd60e51b81526004016105e290612d5f565b6000610e3a83611915565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea13481604051610e6d91815260200190565b60405180910390a190505b919050565b6000610e9760008051602061302083398151915233610be1565b610eb35760405162461bcd60e51b81526004016105e290612d5f565b60008215610ecc57610ec58685611b5d565b9050610f3b565b610ed7868686611c84565b905084811015610f3b5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016105e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190612bba565b60405163a9059cbb60e01b81529091506001600160a01b0388169063a9059cbb90610fe69088908590600401612d13565b602060405180830381600087803b15801561100057600080fd5b505af1158015611014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110389190612b2e565b5060408051878152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19695505050505050565b61013754610133546040516319a78f5560e01b81526001600160a01b039182166004820152306024820152600092839216906319a78f559060440160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190612bba565b90508061111657600091505090565b61013354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561115c57600080fd5b505afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190612bba565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e9190612bd3565b50905060008261122e8386612f52565b6112389190612f30565b610130546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561128157600080fd5b505afa158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b99190612bba565b6112c39190612f18565b94505050505090565b6112d68282610be1565b610813576112ee816001600160a01b03166014611eee565b6112f9836020611eee565b60405160200161130a929190612c13565b60408051601f198184030181529082905262461bcd60e51b82526105e291600401612d2c565b61133a8282610be1565b6108135760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113723390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6113c08282610be1565b156108135760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361081381336112cc565b600061148061141d565b905061148b8461208a565b6000835111806114985750815b156114a9576114a7848461212f565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166115ba57805460ff191660011781556040516001600160a01b038316602482015261152890869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261212f565b50805460ff1916815561153961141d565b6001600160a01b0316826001600160a01b0316146115b15760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016105e2565b6115ba8561221a565b5050505050565b600054610100900460ff16806115da575060005460ff16155b6115f65760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff16158015611618576000805461ffff19166101011790555b61162061225a565b6116286122c9565b611633600033611330565b610bcd7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611330565b610130546001600160a01b0383811691161461168b5760405162461bcd60e51b81526004016105e290612eaa565b610130546101355460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926116c3929116908590600401612d13565b602060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117159190612b2e565b506101355460405163aa06ce9b60e01b81526001600160a01b039091169063aa06ce9b906117499030908590600401612d13565b602060405180830381600087803b15801561176357600080fd5b505af1158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190612bba565b50610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117e157600080fd5b505afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190612bba565b610133546101375460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926118539216908590600401612d13565b602060405180830381600087803b15801561186d57600080fd5b505af1158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a59190612b2e565b5061013754610133546040516311f9fbc960e21b81526001600160a01b03928316926347e7ef24926118de929116908590600401612d13565b600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b50505050505050565b610137546040805163d1058e5960e01b815290516000926001600160a01b03169163d1058e59916004808301928692919082900301818387803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190612bba565b905080611a025750600092915050565b610136546101325461013154600092611a2f926001600160a01b0391821692908216911685600186612327565b610135546101315461013054929350600092611a5e926001600160a01b039081169281169116856001806125f4565b610130546040516370a0823160e01b81523060048201529192506001600160a01b03169063a9059cbb90879083906370a082319060240160206040518083038186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae59190612bba565b6040518363ffffffff1660e01b8152600401611b02929190612d13565b602060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190612b2e565b50949350505050565b610130546000906001600160a01b03848116911614611b8e5760405162461bcd60e51b81526004016105e290612eaa565b6101375461013354604051630fa09e6360e41b81526001600160a01b03918216600482015291169063fa09e63090602401600060405180830381600087803b158015611bd957600080fd5b505af1158015611bed573d6000803e3d6000fd5b50505050600061013560009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611c4457600080fd5b505af1158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c9190612bba565b949350505050565b610130546000906001600160a01b03858116911614611cb55760405162461bcd60e51b81526004016105e290612eaa565b61013354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611cfb57600080fd5b505afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d339190612bba565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b158015611d8557600080fd5b505afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190612bd3565b509050600081611dcd8488612f52565b611dd79190612f30565b90506103e8611de8826103e9612f52565b611df29190612f30565b610137546101335460405163f3fef3a360e01b81529293506001600160a01b039182169263f3fef3a392611e2c9216908590600401612d13565b600060405180830381600087803b158015611e4657600080fd5b505af1158015611e5a573d6000803e3d6000fd5b50506101355460405163f98bea1560e01b8152600481018a9052600093506001600160a01b03909116915063f98bea1590602401602060405180830381600087803b158015611ea857600080fd5b505af1158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee09190612bba565b9450505050505b9392505050565b60606000611efd836002612f52565b611f08906002612f18565b67ffffffffffffffff811115611f2057611f20612ffb565b6040519080825280601f01601f191660200182016040528015611f4a576020820181803683370190505b509050600360fc1b81600081518110611f6557611f65612fe5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f9457611f94612fe5565b60200101906001600160f81b031916908160001a9053506000611fb8846002612f52565b611fc3906001612f18565b90505b600181111561203b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ff757611ff7612fe5565b1a60f81b82828151811061200d5761200d612fe5565b60200101906001600160f81b031916908160001a90535060049490941c9361203481612fb8565b9050611fc6565b508315611ee75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105e2565b803b6120ee5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105e2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61218e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105e2565b600080846001600160a01b0316846040516121a99190612bf7565b600060405180830381855af49150503d80600081146121e4576040519150601f19603f3d011682016040523d82523d6000602084013e6121e9565b606091505b5091509150612211828260405180606001604052806027815260200161304060279139612845565b95945050505050565b6122238161208a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612273575060005460ff16155b61228f5760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff161580156122b1576000805461ffff19166101011790555b6122b961287e565b6122c161287e565b610bcd61287e565b600054610100900460ff16806122e2575060005460ff16155b6122fe5760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff161580156122b9576000805461ffff19166101011790556122c161287e565b600080826123da57604051633cd0243b60e11b81526000906001600160a01b038a16906379a04876906123609030908a90600401612d13565b604080518083038186803b15801561237757600080fd5b505afa15801561238b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123af9190612bd3565b50905060646123be8682612f71565b6123c89083612f52565b6123d29190612f30565b915050612481565b6040516366410a2160e01b81526000906001600160a01b038a16906366410a219061240b9030908a90600401612d13565b604080518083038186803b15801561242257600080fd5b505afa158015612436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245a9190612bd3565b50905060646124698682612f71565b6124739083612f52565b61247d9190612f30565b9150505b6040805160018082528183019092526000916020808301908036833701905050905088816000815181106124b7576124b7612fe5565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926124f9929116908a90600401612d13565b602060405180830381600087803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190612b2e565b5061012e546001600160a01b031663f87dc1b789898986868a600061257242610258612f18565b6040518963ffffffff1660e01b8152600401612595989796959493929190612c88565b602060405180830381600087803b1580156125af57600080fd5b505af11580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190612bba565b9998505050505050505050565b600080826126aa5761012d54604051631de9507f60e31b81526000916001600160a01b03169063ef4a83f890612630908c908a90600401612d13565b60206040518083038186803b15801561264857600080fd5b505afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190612bba565b9050606461268e8682612f71565b6126989083612f52565b6126a29190612f30565b915050612754565b61012d5460405163ca19ebd960e01b81526000916001600160a01b03169063ca19ebd9906126de908c908a90600401612d13565b60206040518083038186803b1580156126f657600080fd5b505afa15801561270a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272e9190612bba565b9050606461273c8682612f71565b6127469083612f52565b6127509190612f30565b9150505b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061278a5761278a612fe5565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926127cc929116908a90600401612d13565b602060405180830381600087803b1580156127e657600080fd5b505af11580156127fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281e9190612b2e565b5061012e546001600160a01b0316630dd4ebd989898986868a600061257242610258612f18565b60608315612854575081611ee7565b8251156128645782518084602001fd5b8160405162461bcd60e51b81526004016105e29190612d2c565b600054610100900460ff1680612897575060005460ff16155b6128b35760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff16158015610bcd576000805461ffff191661010117905580156108dd576000805461ff001916905550565b80356001600160a01b0381168114610e7857600080fd5b60006020828403121561291157600080fd5b611ee7826128e8565b600080600080600060a0868803121561293257600080fd5b61293b866128e8565b9450612949602087016128e8565b9350612957604087016128e8565b9250612965606087016128e8565b9150612973608087016128e8565b90509295509295909350565b60008060008060008060c0878903121561299857600080fd5b6129a1876128e8565b95506129af602088016128e8565b94506129bd604088016128e8565b93506129cb606088016128e8565b92506129d9608088016128e8565b91506129e760a088016128e8565b90509295509295509295565b60008060408385031215612a0657600080fd5b612a0f836128e8565b9150602083013567ffffffffffffffff80821115612a2c57600080fd5b818501915085601f830112612a4057600080fd5b813581811115612a5257612a52612ffb565b604051601f8201601f19908116603f01168101908382118183101715612a7a57612a7a612ffb565b81604052828152886020848701011115612a9357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612ac857600080fd5b612ad1836128e8565b946020939093013593505050565b60008060008060808587031215612af557600080fd5b612afe856128e8565b935060208501359250612b13604086016128e8565b91506060850135612b2381613011565b939692955090935050565b600060208284031215612b4057600080fd5b8151611ee781613011565b600060208284031215612b5d57600080fd5b5035919050565b60008060408385031215612b7757600080fd5b82359150612b87602084016128e8565b90509250929050565b600060208284031215612ba257600080fd5b81356001600160e01b031981168114611ee757600080fd5b600060208284031215612bcc57600080fd5b5051919050565b60008060408385031215612be657600080fd5b505080516020909101519092909150565b60008251612c09818460208701612f88565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c4b816017850160208801612f88565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c7c816028840160208801612f88565b01602801949350505050565b6001600160a01b038981168252888116602080840191909152604083018990526060830188905261010060808401819052875190840181905260009261012085019289810192855b81811015612cee578451841686529482019493820193600101612cd0565b505050505060a08301959095525091151560c083015260e09091015295945050505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612d4b816040850160208701612f88565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60008219821115612f2b57612f2b612fcf565b500190565b600082612f4d57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612f6c57612f6c612fcf565b500290565b600082821015612f8357612f83612fcf565b500390565b60005b83811015612fa3578181015183820152602001612f8b565b83811115612fb2576000848401525b50505050565b600081612fc757612fc7612fcf565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146108dd57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220640eda0c134a8cf8cb84d89a2faf4884b60e42417fcfef038f5c6cf4dacddae064736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806375123ff9116100f7578063a440b21a11610095578063d547741f11610064578063d547741f146104f0578063ef5cfb8c14610510578063f6f6b88114610530578063f72c0d8b1461055057600080fd5b8063a440b21a1461046e578063a7a61d051461048e578063a98ad46c146104af578063adc9772e146104d057600080fd5b80638400150a116100d15780638400150a1461041857806391d1485414610439578063a217fddf14610459578063a3673b38146102d757600080fd5b806375123ff9146103c05780637d5f5802146103e15780638129fc1c1461040357600080fd5b80632f2ff15d116101645780634f1ef2861161013e5780634f1ef2861461034c5780635ebb8dee1461035f5780635f5d905c1461037f578063620b75df146103a057600080fd5b80632f2ff15d146102ec57806336568abe1461030c5780633659cfe61461032c57600080fd5b806311eac855116101a057806311eac85514610257578063154e4f5814610278578063248a9ca3146102995780632576e65a146102d757600080fd5b806301ffc9a7146101c757806307ab0a7e146101fc5780630fc55bfd14610235575b600080fd5b3480156101d357600080fd5b506101e76101e2366004612b90565b610584565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506101365461021d906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561024157600080fd5b5061025561025036600461291a565b6105bb565b005b34801561026357600080fd5b506101305461021d906001600160a01b031681565b34801561028457600080fd5b506101355461021d906001600160a01b031681565b3480156102a557600080fd5b506102c96102b4366004612b4b565b60009081526065602052604090206001015490565b6040519081526020016101f3565b3480156102e357600080fd5b506102c961075f565b3480156102f857600080fd5b50610255610307366004612b64565b61076e565b34801561031857600080fd5b50610255610327366004612b64565b610799565b34801561033857600080fd5b506102556103473660046128ff565b610817565b61025561035a3660046129f3565b6108e0565b34801561036b57600080fd5b5061025561037a36600461297f565b610996565b34801561038b57600080fd5b506101345461021d906001600160a01b031681565b3480156103ac57600080fd5b5060fb5461021d906001600160a01b031681565b3480156103cc57600080fd5b506101325461021d906001600160a01b031681565b3480156103ed57600080fd5b506102c960008051602061302083398151915281565b34801561040f57600080fd5b50610255610b6e565b34801561042457600080fd5b506101375461021d906001600160a01b031681565b34801561044557600080fd5b506101e7610454366004612b64565b610be1565b34801561046557600080fd5b506102c9600081565b34801561047a57600080fd5b506102556104893660046128ff565b610c0c565b34801561049a57600080fd5b506101335461021d906001600160a01b031681565b3480156104bb57600080fd5b506101315461021d906001600160a01b031681565b3480156104dc57600080fd5b506102556104eb366004612ab5565b610cea565b3480156104fc57600080fd5b5061025561050b366004612b64565b610dd3565b34801561051c57600080fd5b506102c961052b3660046128ff565b610df9565b34801561053c57600080fd5b506102c961054b366004612adf565b610e7d565b34801561055c57600080fd5b506102c97f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b14806105b557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105c6600033610be1565b6105eb5760405162461bcd60e51b81526004016105e290612e7c565b60405180910390fd5b6001600160a01b0385166106115760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b0384166106375760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b03831661065d5760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b0382166106835760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b0381166106a95760405162461bcd60e51b81526004016105e290612ee1565b61013080546001600160a01b038781166001600160a01b03199283168117909355610131805488831690841681179091556101328054888416908516811790915561013380548885169086168117909155610134805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f1eb2ec66971c47166b02af35b989cec29a89ac6ca053121f2445e524658066dc9060a00160405180910390a15050505050565b600061076961107c565b905090565b60008281526065602052604090206001015461078a81336112cc565b6107948383611330565b505050565b6001600160a01b03811633146108095760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105e2565b61081382826113b6565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108605760405162461bcd60e51b81526004016105e290612d96565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089261141d565b6001600160a01b0316146108b85760405162461bcd60e51b81526004016105e290612de2565b6108c18161144b565b604080516000808252602082019092526108dd91839190611476565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109295760405162461bcd60e51b81526004016105e290612d96565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661095b61141d565b6001600160a01b0316146109815760405162461bcd60e51b81526004016105e290612de2565b61098a8261144b565b61081382826001611476565b6109a1600033610be1565b6109bd5760405162461bcd60e51b81526004016105e290612e7c565b6001600160a01b0386166109e35760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038516610a095760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038416610a2f5760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038316610a555760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038216610a7b5760405162461bcd60e51b81526004016105e290612ee1565b6001600160a01b038116610aa15760405162461bcd60e51b81526004016105e290612ee1565b61013580546001600160a01b038881166001600160a01b03199283168117909355610136805489831690841681179091556101378054898416908516811790915561012d8054898516908616811790915561012e8054898616908716811790915561012f8054958916959096168517909555604080519687526020870193909352858301919091526060850152608084019290925260a0830152517fbc987a95c487955e4fb493a3897aae49196bf1704fe15d64f858bc671ec8e77a9181900360c00190a1505050505050565b600054610100900460ff1680610b87575060005460ff16155b610ba35760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff16158015610bc5576000805461ffff19166101011790555b610bcd6115c1565b80156108dd576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c17600033610be1565b610c335760405162461bcd60e51b81526004016105e290612e7c565b6001600160a01b038116610c595760405162461bcd60e51b81526004016105e290612ee1565b60fb54610c7e90600080516020613020833981519152906001600160a01b0316610dd3565b610c966000805160206130208339815191528261076e565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b610d0260008051602061302083398151915233610be1565b610d1e5760405162461bcd60e51b81526004016105e290612d5f565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b81523060048201526108139083906001600160a01b038216906370a082319060240160206040518083038186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190612bba565b61165d565b600082815260656020526040902060010154610def81336112cc565b61079483836113b6565b6000610e1360008051602061302083398151915233610be1565b610e2f5760405162461bcd60e51b81526004016105e290612d5f565b6000610e3a83611915565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea13481604051610e6d91815260200190565b60405180910390a190505b919050565b6000610e9760008051602061302083398151915233610be1565b610eb35760405162461bcd60e51b81526004016105e290612d5f565b60008215610ecc57610ec58685611b5d565b9050610f3b565b610ed7868686611c84565b905084811015610f3b5760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016105e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190612bba565b60405163a9059cbb60e01b81529091506001600160a01b0388169063a9059cbb90610fe69088908590600401612d13565b602060405180830381600087803b15801561100057600080fd5b505af1158015611014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110389190612b2e565b5060408051878152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19695505050505050565b61013754610133546040516319a78f5560e01b81526001600160a01b039182166004820152306024820152600092839216906319a78f559060440160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190612bba565b90508061111657600091505090565b61013354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561115c57600080fd5b505afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190612bba565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e9190612bd3565b50905060008261122e8386612f52565b6112389190612f30565b610130546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561128157600080fd5b505afa158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b99190612bba565b6112c39190612f18565b94505050505090565b6112d68282610be1565b610813576112ee816001600160a01b03166014611eee565b6112f9836020611eee565b60405160200161130a929190612c13565b60408051601f198184030181529082905262461bcd60e51b82526105e291600401612d2c565b61133a8282610be1565b6108135760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113723390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6113c08282610be1565b156108135760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361081381336112cc565b600061148061141d565b905061148b8461208a565b6000835111806114985750815b156114a9576114a7848461212f565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166115ba57805460ff191660011781556040516001600160a01b038316602482015261152890869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261212f565b50805460ff1916815561153961141d565b6001600160a01b0316826001600160a01b0316146115b15760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016105e2565b6115ba8561221a565b5050505050565b600054610100900460ff16806115da575060005460ff16155b6115f65760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff16158015611618576000805461ffff19166101011790555b61162061225a565b6116286122c9565b611633600033611330565b610bcd7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333611330565b610130546001600160a01b0383811691161461168b5760405162461bcd60e51b81526004016105e290612eaa565b610130546101355460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926116c3929116908590600401612d13565b602060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117159190612b2e565b506101355460405163aa06ce9b60e01b81526001600160a01b039091169063aa06ce9b906117499030908590600401612d13565b602060405180830381600087803b15801561176357600080fd5b505af1158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190612bba565b50610133546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117e157600080fd5b505afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190612bba565b610133546101375460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926118539216908590600401612d13565b602060405180830381600087803b15801561186d57600080fd5b505af1158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a59190612b2e565b5061013754610133546040516311f9fbc960e21b81526001600160a01b03928316926347e7ef24926118de929116908590600401612d13565b600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b50505050505050565b610137546040805163d1058e5960e01b815290516000926001600160a01b03169163d1058e59916004808301928692919082900301818387803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b5050610132546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190612bba565b905080611a025750600092915050565b610136546101325461013154600092611a2f926001600160a01b0391821692908216911685600186612327565b610135546101315461013054929350600092611a5e926001600160a01b039081169281169116856001806125f4565b610130546040516370a0823160e01b81523060048201529192506001600160a01b03169063a9059cbb90879083906370a082319060240160206040518083038186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae59190612bba565b6040518363ffffffff1660e01b8152600401611b02929190612d13565b602060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190612b2e565b50949350505050565b610130546000906001600160a01b03848116911614611b8e5760405162461bcd60e51b81526004016105e290612eaa565b6101375461013354604051630fa09e6360e41b81526001600160a01b03918216600482015291169063fa09e63090602401600060405180830381600087803b158015611bd957600080fd5b505af1158015611bed573d6000803e3d6000fd5b50505050600061013560009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611c4457600080fd5b505af1158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c9190612bba565b949350505050565b610130546000906001600160a01b03858116911614611cb55760405162461bcd60e51b81526004016105e290612eaa565b61013354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611cfb57600080fd5b505afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d339190612bba565b9050600061013560009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b158015611d8557600080fd5b505afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190612bd3565b509050600081611dcd8488612f52565b611dd79190612f30565b90506103e8611de8826103e9612f52565b611df29190612f30565b610137546101335460405163f3fef3a360e01b81529293506001600160a01b039182169263f3fef3a392611e2c9216908590600401612d13565b600060405180830381600087803b158015611e4657600080fd5b505af1158015611e5a573d6000803e3d6000fd5b50506101355460405163f98bea1560e01b8152600481018a9052600093506001600160a01b03909116915063f98bea1590602401602060405180830381600087803b158015611ea857600080fd5b505af1158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee09190612bba565b9450505050505b9392505050565b60606000611efd836002612f52565b611f08906002612f18565b67ffffffffffffffff811115611f2057611f20612ffb565b6040519080825280601f01601f191660200182016040528015611f4a576020820181803683370190505b509050600360fc1b81600081518110611f6557611f65612fe5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f9457611f94612fe5565b60200101906001600160f81b031916908160001a9053506000611fb8846002612f52565b611fc3906001612f18565b90505b600181111561203b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ff757611ff7612fe5565b1a60f81b82828151811061200d5761200d612fe5565b60200101906001600160f81b031916908160001a90535060049490941c9361203481612fb8565b9050611fc6565b508315611ee75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105e2565b803b6120ee5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105e2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61218e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105e2565b600080846001600160a01b0316846040516121a99190612bf7565b600060405180830381855af49150503d80600081146121e4576040519150601f19603f3d011682016040523d82523d6000602084013e6121e9565b606091505b5091509150612211828260405180606001604052806027815260200161304060279139612845565b95945050505050565b6122238161208a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612273575060005460ff16155b61228f5760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff161580156122b1576000805461ffff19166101011790555b6122b961287e565b6122c161287e565b610bcd61287e565b600054610100900460ff16806122e2575060005460ff16155b6122fe5760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff161580156122b9576000805461ffff19166101011790556122c161287e565b600080826123da57604051633cd0243b60e11b81526000906001600160a01b038a16906379a04876906123609030908a90600401612d13565b604080518083038186803b15801561237757600080fd5b505afa15801561238b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123af9190612bd3565b50905060646123be8682612f71565b6123c89083612f52565b6123d29190612f30565b915050612481565b6040516366410a2160e01b81526000906001600160a01b038a16906366410a219061240b9030908a90600401612d13565b604080518083038186803b15801561242257600080fd5b505afa158015612436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245a9190612bd3565b50905060646124698682612f71565b6124739083612f52565b61247d9190612f30565b9150505b6040805160018082528183019092526000916020808301908036833701905050905088816000815181106124b7576124b7612fe5565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926124f9929116908a90600401612d13565b602060405180830381600087803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190612b2e565b5061012e546001600160a01b031663f87dc1b789898986868a600061257242610258612f18565b6040518963ffffffff1660e01b8152600401612595989796959493929190612c88565b602060405180830381600087803b1580156125af57600080fd5b505af11580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190612bba565b9998505050505050505050565b600080826126aa5761012d54604051631de9507f60e31b81526000916001600160a01b03169063ef4a83f890612630908c908a90600401612d13565b60206040518083038186803b15801561264857600080fd5b505afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190612bba565b9050606461268e8682612f71565b6126989083612f52565b6126a29190612f30565b915050612754565b61012d5460405163ca19ebd960e01b81526000916001600160a01b03169063ca19ebd9906126de908c908a90600401612d13565b60206040518083038186803b1580156126f657600080fd5b505afa15801561270a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272e9190612bba565b9050606461273c8682612f71565b6127469083612f52565b6127509190612f30565b9150505b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061278a5761278a612fe5565b6001600160a01b03928316602091820292909201015261012f5460405163095ea7b360e01b81528a83169263095ea7b3926127cc929116908a90600401612d13565b602060405180830381600087803b1580156127e657600080fd5b505af11580156127fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281e9190612b2e565b5061012e546001600160a01b0316630dd4ebd989898986868a600061257242610258612f18565b60608315612854575081611ee7565b8251156128645782518084602001fd5b8160405162461bcd60e51b81526004016105e29190612d2c565b600054610100900460ff1680612897575060005460ff16155b6128b35760405162461bcd60e51b81526004016105e290612e2e565b600054610100900460ff16158015610bcd576000805461ffff191661010117905580156108dd576000805461ff001916905550565b80356001600160a01b0381168114610e7857600080fd5b60006020828403121561291157600080fd5b611ee7826128e8565b600080600080600060a0868803121561293257600080fd5b61293b866128e8565b9450612949602087016128e8565b9350612957604087016128e8565b9250612965606087016128e8565b9150612973608087016128e8565b90509295509295909350565b60008060008060008060c0878903121561299857600080fd5b6129a1876128e8565b95506129af602088016128e8565b94506129bd604088016128e8565b93506129cb606088016128e8565b92506129d9608088016128e8565b91506129e760a088016128e8565b90509295509295509295565b60008060408385031215612a0657600080fd5b612a0f836128e8565b9150602083013567ffffffffffffffff80821115612a2c57600080fd5b818501915085601f830112612a4057600080fd5b813581811115612a5257612a52612ffb565b604051601f8201601f19908116603f01168101908382118183101715612a7a57612a7a612ffb565b81604052828152886020848701011115612a9357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612ac857600080fd5b612ad1836128e8565b946020939093013593505050565b60008060008060808587031215612af557600080fd5b612afe856128e8565b935060208501359250612b13604086016128e8565b91506060850135612b2381613011565b939692955090935050565b600060208284031215612b4057600080fd5b8151611ee781613011565b600060208284031215612b5d57600080fd5b5035919050565b60008060408385031215612b7757600080fd5b82359150612b87602084016128e8565b90509250929050565b600060208284031215612ba257600080fd5b81356001600160e01b031981168114611ee757600080fd5b600060208284031215612bcc57600080fd5b5051919050565b60008060408385031215612be657600080fd5b505080516020909101519092909150565b60008251612c09818460208701612f88565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c4b816017850160208801612f88565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c7c816028840160208801612f88565b01602801949350505050565b6001600160a01b038981168252888116602080840191909152604083018990526060830188905261010060808401819052875190840181905260009261012085019289810192855b81811015612cee578451841686529482019493820193600101612cd0565b505050505060a08301959095525091151560c083015260e09091015295945050505050565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612d4b816040850160208701612f88565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60008219821115612f2b57612f2b612fcf565b500190565b600082612f4d57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612f6c57612f6c612fcf565b500290565b600082821015612f8357612f83612fcf565b500390565b60005b83811015612fa3578181015183820152602001612f8b565b83811115612fb2576000848401525b50505050565b600081612fc757612fc7612fcf565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146108dd57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220640eda0c134a8cf8cb84d89a2faf4884b60e42417fcfef038f5c6cf4dacddae064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 823,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 826,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2943,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3865,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 973,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23821,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 24099,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17066,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV1Helper",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IDODOV1Helper)19957"
      },
      {
        "astId": 17069,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoProxy",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IDODOProxy)19797"
      },
      {
        "astId": 17071,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoApprove",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 26919,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdcToken",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 26922,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdtToken",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 26925,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoToken",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 26928,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdcLPToken",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 26931,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "usdtLPToken",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 26934,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV1UsdcUsdtPool",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IDODOV1)19936"
      },
      {
        "astId": 26937,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoV2DodoUsdtPool",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IDODOV2)19982"
      },
      {
        "astId": 26940,
        "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
        "label": "dodoMine",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IDODOMine)19750"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDODOMine)19750": {
        "encoding": "inplace",
        "label": "contract IDODOMine",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOProxy)19797": {
        "encoding": "inplace",
        "label": "contract IDODOProxy",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1)19936": {
        "encoding": "inplace",
        "label": "contract IDODOV1",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1Helper)19957": {
        "encoding": "inplace",
        "label": "contract IDODOV1Helper",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV2)19982": {
        "encoding": "inplace",
        "label": "contract IDODOV2",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)8922": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/strategies/StrategyDodoUsdc.sol:StrategyDodoUsdc",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}