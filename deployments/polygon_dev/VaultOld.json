{
  "address": "0x5C8758966D0877851dcf0ddAA924F50892cb0c3D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "aaveReward",
          "type": "address"
        }
      ],
      "name": "AaveRewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "portfolioManager",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardManager",
          "type": "address"
        }
      ],
      "name": "RewardManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveReward",
      "outputs": [
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimRewardAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aaveReward",
          "type": "address"
        }
      ],
      "name": "setAaveReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolioManager",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardManager",
          "type": "address"
        }
      ],
      "name": "setRewardManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e7f4e9456c33d96a038fedcdde80877e0bc3b44e1b761069c352fdf2a34f1b3",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x5C8758966D0877851dcf0ddAA924F50892cb0c3D",
    "transactionIndex": 29,
    "gasUsed": "1116302",
    "logsBloom": "0x
    "blockHash": "0x54c6028f175ecbb56557179b61a7d968bc7ecc863cd74a6d9f7b86072ef27fa9",
    "transactionHash": "0x6e7f4e9456c33d96a038fedcdde80877e0bc3b44e1b761069c352fdf2a34f1b3",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 22940354,
        "transactionHash": "0x6e7f4e9456c33d96a038fedcdde80877e0bc3b44e1b761069c352fdf2a34f1b3",
        "address": "0x5C8758966D0877851dcf0ddAA924F50892cb0c3D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x54c6028f175ecbb56557179b61a7d968bc7ecc863cd74a6d9f7b86072ef27fa9"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 22940354,
        "transactionHash": "0x6e7f4e9456c33d96a038fedcdde80877e0bc3b44e1b761069c352fdf2a34f1b3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001159cf3ec0b480000000000000000000000000000000000000000000000000092422815c9c836e8000000000000000000000000000000000000000000000c3acbf76eabc928b458000000000000000000000000000000000000000000000000912c8b21ddbceee8000000000000000000000000000000000000000000000c3acd0d0b9fb533fc58",
        "logIndex": 143,
        "blockHash": "0x54c6028f175ecbb56557179b61a7d968bc7ecc863cd74a6d9f7b86072ef27fa9"
      }
    ],
    "blockNumber": 22940354,
    "cumulativeGasUsed": "5805916",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a52a09ed2b2706cd99c66d36846223b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aaveReward\",\"type\":\"address\"}],\"name\":\"AaveRewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portfolioManager\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardManager\",\"type\":\"address\"}],\"name\":\"RewardManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveReward\",\"outputs\":[{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveReward\",\"type\":\"address\"}],\"name\":\"setAaveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolioManager\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"setRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"proxy to IERC20().allowance();\"},\"approve(address,address,uint256)\":{\"details\":\"proxy to IERC20().approve();\"},\"balanceOf(address,address)\":{\"details\":\"proxy to IERC20().balanceOf();\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(address)\":{\"details\":\"proxy to IERC20().totalSupply();\"},\"transfer(address,address,uint256)\":{\"details\":\"proxy to IERC20().transfer();\"},\"transferFrom(address,address,address,uint256)\":{\"details\":\"proxy to IERC20().transferFrom();\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Vault address is used as owner for all tokens for Overnights. So you able to use Vault address to check any tokens balances. Vault doesn't know about what it has and how mauch. Vault can contain any tokens but only IERC20 could be transfered in real work. NOTE: currently work with ETH/MATIC or other payments not realised. NOTE: not used SafeERC20 and it may be changed in future\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f33b553368181a44ff0c77942ed831152bfa731bc4d1c12a363ef6918366b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IAaveIncentivesController.sol\\\";\\n\\n/**\\n * Vault address is used as owner for all tokens for Overnights.\\n * So you able to use Vault address to check any tokens balances.\\n * Vault doesn't know about what it has and how mauch.\\n * Vault can contain any tokens but only IERC20 could be transfered\\n * in real work.\\n * NOTE: currently work with ETH/MATIC or other payments not realised.\\n * NOTE: not used SafeERC20 and it may be changed in future\\n */\\ncontract Vault is AccessControl {\\n    // ---  fields\\n\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant REWARD_MANAGER = keccak256(\\\"REWARD_MANAGER\\\");\\n\\n    // Only Vault can claiming aave rewards\\n    IAaveIncentivesController public aaveReward;\\n\\n    // ---  events\\n\\n    event PortfolioManagerUpdated(address portfolioManager);\\n    event RewardManagerUpdated(address rewardManager);\\n    event AaveRewardRemoved(address aaveReward);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Caller is not the PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(hasRole(REWARD_MANAGER, msg.sender), \\\"Caller is not the REWARD_MANAGER\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ---  setters\\n\\n    function setPortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(PORTFOLIO_MANAGER, _portfolioManager);\\n        emit PortfolioManagerUpdated(_portfolioManager);\\n    }\\n\\n    function setRewardManager(address _rewardManager) public onlyAdmin {\\n        require(_rewardManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(REWARD_MANAGER, _rewardManager);\\n        emit RewardManagerUpdated(_rewardManager);\\n    }\\n\\n\\n    function setAaveReward(address _aaveReward) public onlyAdmin {\\n        require(_aaveReward != address(0), \\\"Zero address not allowed\\\");\\n        aaveReward = IAaveIncentivesController(_aaveReward);\\n        emit AaveRewardRemoved(_aaveReward);\\n    }\\n\\n    // ---  logic\\n\\n    function claimRewardAave(address[] calldata assets, uint256 amount) public onlyRewardManager {\\n        aaveReward.claimRewards(assets, amount, address(this));\\n    }\\n\\n\\n    /**\\n     * @dev proxy to IERC20().totalSupply();\\n     */\\n    function totalSupply(IERC20 token) external view returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().balanceOf();\\n     */\\n    function balanceOf(IERC20 token, address account) external view returns (uint256) {\\n        return token.balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().allowance();\\n     */\\n    function allowance(\\n        IERC20 token,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256) {\\n        return token.allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().approve();\\n     */\\n    function approve(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.approve(spender, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transfer();\\n     */\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transferFrom();\\n     */\\n    function transferFrom(\\n        IERC20 token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x75e9130134a82045cdb5b010c743047744b19db3a62faba1b4dcb94a2520dfba\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n    * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf9877dc6ded4a81eb08f0db651e28b0789a03b38d1fe3afeb4e768894c66d77\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001c600033610021565b6100cd565b61002b828261002f565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661002b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100893390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112bc806100dc6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806391d14854116100ad578063d547741f11610071578063d547741f146102a6578063e1f21c67146102b9578063e4dc2aa4146102cc578063f7888aec146102df578063fd378bba146102f257600080fd5b806391d1485414610252578063927da10514610265578063a217fddf14610278578063a440b21a14610280578063beabacc81461029357600080fd5b80632f2ff15d116100f45780632f2ff15d146101dd57806336568abe146101f05780633b7e889a146102035780635932fdba146102165780637d5f58021461023d57600080fd5b806301ffc9a714610131578063153ee5541461015957806315dacbea1461016e57806316073abe14610181578063248a9ca3146101ac575b600080fd5b61014461013f366004610e8e565b610305565b60405190151581526020015b60405180910390f35b61016c610167366004610d8b565b61033c565b005b61014461017c366004610f31565b6103fc565b600154610194906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b6101cf6101ba366004610e45565b60009081526020819052604090206001015490565b604051908152602001610150565b61016c6101eb366004610e5e565b6104c5565b61016c6101fe366004610e5e565b6104f0565b61016c610211366004610d8b565b61056e565b6101cf7f6393fa734211156fcc8c7dda6b0650f5c731d4c838c1db43445a149aa2f5b6fe81565b6101cf60008051602061126783398151915281565b610144610260366004610e5e565b610609565b6101cf610273366004610ee6565b610632565b6101cf600081565b61016c61028e366004610d8b565b6106bf565b6101446102a1366004610f82565b61075d565b61016c6102b4366004610e5e565b610816565b6101446102c7366004610f82565b61083c565b6101cf6102da366004610d8b565b6108a7565b6101cf6102ed366004610eb8565b61091a565b61016c610300366004610da8565b61099e565b60006001600160e01b03198216637965db0b60e01b148061033657506301ffc9a760e01b6001600160e01b03198316145b92915050565b610347600033610609565b61036c5760405162461bcd60e51b8152600401610363906110ea565b60405180910390fd5b6001600160a01b0381166103925760405162461bcd60e51b815260040161036390611118565b6103bc7f6393fa734211156fcc8c7dda6b0650f5c731d4c838c1db43445a149aa2f5b6fe826104c5565b6040516001600160a01b03821681527f3d94d9e8342a65edb95eef4f65059294d45e5192603632d8dddb2344e7078053906020015b60405180910390a150565b600061041660008051602061126783398151915233610609565b6104325760405162461bcd60e51b81526004016103639061114f565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd90606401602060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc9190610e23565b95945050505050565b6000828152602081905260409020600101546104e18133610aa2565b6104eb8383610b06565b505050565b6001600160a01b03811633146105605760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610363565b61056a8282610b8a565b5050565b610579600033610609565b6105955760405162461bcd60e51b8152600401610363906110ea565b6001600160a01b0381166105bb5760405162461bcd60e51b815260040161036390611118565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f902a6c0d33c59c6631773aeb31fa83efdf4da57a9fbbd52da0adb60038db6799906020016103f1565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b604051636eb1769f60e11b81526001600160a01b03838116600483015282811660248301526000919085169063dd62ed3e9060440160206040518083038186803b15801561067f57600080fd5b505afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190610fc3565b949350505050565b6106ca600033610609565b6106e65760405162461bcd60e51b8152600401610363906110ea565b6001600160a01b03811661070c5760405162461bcd60e51b815260040161036390611118565b610724600080516020611267833981519152826104c5565b6040516001600160a01b03821681527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016103f1565b600061077760008051602061126783398151915233610609565b6107935760405162461bcd60e51b81526004016103639061114f565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb906044015b602060405180830381600087803b1580156107de57600080fd5b505af11580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190610e23565b6000828152602081905260409020600101546108328133610aa2565b6104eb8383610b8a565b600061085660008051602061126783398151915233610609565b6108725760405162461bcd60e51b81526004016103639061114f565b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016107c4565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103369190610fc3565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190610fc3565b9392505050565b6109c87f6393fa734211156fcc8c7dda6b0650f5c731d4c838c1db43445a149aa2f5b6fe33610609565b610a145760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420746865205245574152445f4d414e414745526044820152606401610363565b600154604051633111e7b360e01b81526001600160a01b0390911690633111e7b390610a4a908690869086903090600401611051565b602060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190610fc3565b50505050565b610aac8282610609565b61056a57610ac4816001600160a01b03166014610bef565b610acf836020610bef565b604051602001610ae0929190610fdc565b60408051601f198184030181529082905262461bcd60e51b8252610363916004016110b7565b610b108282610609565b61056a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b463390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610b948282610609565b1561056a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610bfe8360026111aa565b610c09906002611192565b67ffffffffffffffff811115610c2157610c21611238565b6040519080825280601f01601f191660200182016040528015610c4b576020820181803683370190505b509050600360fc1b81600081518110610c6657610c66611222565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610c9557610c95611222565b60200101906001600160f81b031916908160001a9053506000610cb98460026111aa565b610cc4906001611192565b90505b6001811115610d3c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610cf857610cf8611222565b1a60f81b828281518110610d0e57610d0e611222565b60200101906001600160f81b031916908160001a90535060049490941c93610d35816111f5565b9050610cc7565b5083156109975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610363565b600060208284031215610d9d57600080fd5b81356109978161124e565b600080600060408486031215610dbd57600080fd5b833567ffffffffffffffff80821115610dd557600080fd5b818601915086601f830112610de957600080fd5b813581811115610df857600080fd5b8760208260051b8501011115610e0d57600080fd5b6020928301989097509590910135949350505050565b600060208284031215610e3557600080fd5b8151801515811461099757600080fd5b600060208284031215610e5757600080fd5b5035919050565b60008060408385031215610e7157600080fd5b823591506020830135610e838161124e565b809150509250929050565b600060208284031215610ea057600080fd5b81356001600160e01b03198116811461099757600080fd5b60008060408385031215610ecb57600080fd5b8235610ed68161124e565b91506020830135610e838161124e565b600080600060608486031215610efb57600080fd5b8335610f068161124e565b92506020840135610f168161124e565b91506040840135610f268161124e565b809150509250925092565b60008060008060808587031215610f4757600080fd5b8435610f528161124e565b93506020850135610f628161124e565b92506040850135610f728161124e565b9396929550929360600135925050565b600080600060608486031215610f9757600080fd5b8335610fa28161124e565b92506020840135610fb28161124e565b929592945050506040919091013590565b600060208284031215610fd557600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516110148160178501602088016111c9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516110458160288401602088016111c9565b01602801949350505050565b6060808252810184905260008560808301825b878110156110945782356110778161124e565b6001600160a01b0316825260209283019290910190600101611064565b50602084019590955250506001600160a01b039190911660409091015292915050565b60208152600082518060208401526110d68160408501602087016111c9565b601f01601f19169190910160400192915050565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60208082526023908201527f43616c6c6572206973206e6f742074686520504f5254464f4c494f5f4d414e4160408201526223a2a960e91b606082015260800190565b600082198211156111a5576111a561120c565b500190565b60008160001904831182151516156111c4576111c461120c565b500290565b60005b838110156111e45781810151838201526020016111cc565b83811115610a9c5750506000910152565b6000816112045761120461120c565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461126357600080fd5b5056fe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051a2646970667358221220c5e15eae1d7290e74eab138c1c346deab983f51a5dfabc2a77d5361ad55d268564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806391d14854116100ad578063d547741f11610071578063d547741f146102a6578063e1f21c67146102b9578063e4dc2aa4146102cc578063f7888aec146102df578063fd378bba146102f257600080fd5b806391d1485414610252578063927da10514610265578063a217fddf14610278578063a440b21a14610280578063beabacc81461029357600080fd5b80632f2ff15d116100f45780632f2ff15d146101dd57806336568abe146101f05780633b7e889a146102035780635932fdba146102165780637d5f58021461023d57600080fd5b806301ffc9a714610131578063153ee5541461015957806315dacbea1461016e57806316073abe14610181578063248a9ca3146101ac575b600080fd5b61014461013f366004610e8e565b610305565b60405190151581526020015b60405180910390f35b61016c610167366004610d8b565b61033c565b005b61014461017c366004610f31565b6103fc565b600154610194906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b6101cf6101ba366004610e45565b60009081526020819052604090206001015490565b604051908152602001610150565b61016c6101eb366004610e5e565b6104c5565b61016c6101fe366004610e5e565b6104f0565b61016c610211366004610d8b565b61056e565b6101cf7f6393fa734211156fcc8c7dda6b0650f5c731d4c838c1db43445a149aa2f5b6fe81565b6101cf60008051602061126783398151915281565b610144610260366004610e5e565b610609565b6101cf610273366004610ee6565b610632565b6101cf600081565b61016c61028e366004610d8b565b6106bf565b6101446102a1366004610f82565b61075d565b61016c6102b4366004610e5e565b610816565b6101446102c7366004610f82565b61083c565b6101cf6102da366004610d8b565b6108a7565b6101cf6102ed366004610eb8565b61091a565b61016c610300366004610da8565b61099e565b60006001600160e01b03198216637965db0b60e01b148061033657506301ffc9a760e01b6001600160e01b03198316145b92915050565b610347600033610609565b61036c5760405162461bcd60e51b8152600401610363906110ea565b60405180910390fd5b6001600160a01b0381166103925760405162461bcd60e51b815260040161036390611118565b6103bc7f6393fa734211156fcc8c7dda6b0650f5c731d4c838c1db43445a149aa2f5b6fe826104c5565b6040516001600160a01b03821681527f3d94d9e8342a65edb95eef4f65059294d45e5192603632d8dddb2344e7078053906020015b60405180910390a150565b600061041660008051602061126783398151915233610609565b6104325760405162461bcd60e51b81526004016103639061114f565b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd90606401602060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc9190610e23565b95945050505050565b6000828152602081905260409020600101546104e18133610aa2565b6104eb8383610b06565b505050565b6001600160a01b03811633146105605760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610363565b61056a8282610b8a565b5050565b610579600033610609565b6105955760405162461bcd60e51b8152600401610363906110ea565b6001600160a01b0381166105bb5760405162461bcd60e51b815260040161036390611118565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f902a6c0d33c59c6631773aeb31fa83efdf4da57a9fbbd52da0adb60038db6799906020016103f1565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b604051636eb1769f60e11b81526001600160a01b03838116600483015282811660248301526000919085169063dd62ed3e9060440160206040518083038186803b15801561067f57600080fd5b505afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190610fc3565b949350505050565b6106ca600033610609565b6106e65760405162461bcd60e51b8152600401610363906110ea565b6001600160a01b03811661070c5760405162461bcd60e51b815260040161036390611118565b610724600080516020611267833981519152826104c5565b6040516001600160a01b03821681527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb7906020016103f1565b600061077760008051602061126783398151915233610609565b6107935760405162461bcd60e51b81526004016103639061114f565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb906044015b602060405180830381600087803b1580156107de57600080fd5b505af11580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190610e23565b6000828152602081905260409020600101546108328133610aa2565b6104eb8383610b8a565b600061085660008051602061126783398151915233610609565b6108725760405162461bcd60e51b81526004016103639061114f565b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016107c4565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103369190610fc3565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190610fc3565b9392505050565b6109c87f6393fa734211156fcc8c7dda6b0650f5c731d4c838c1db43445a149aa2f5b6fe33610609565b610a145760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f7420746865205245574152445f4d414e414745526044820152606401610363565b600154604051633111e7b360e01b81526001600160a01b0390911690633111e7b390610a4a908690869086903090600401611051565b602060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190610fc3565b50505050565b610aac8282610609565b61056a57610ac4816001600160a01b03166014610bef565b610acf836020610bef565b604051602001610ae0929190610fdc565b60408051601f198184030181529082905262461bcd60e51b8252610363916004016110b7565b610b108282610609565b61056a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b463390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610b948282610609565b1561056a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610bfe8360026111aa565b610c09906002611192565b67ffffffffffffffff811115610c2157610c21611238565b6040519080825280601f01601f191660200182016040528015610c4b576020820181803683370190505b509050600360fc1b81600081518110610c6657610c66611222565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610c9557610c95611222565b60200101906001600160f81b031916908160001a9053506000610cb98460026111aa565b610cc4906001611192565b90505b6001811115610d3c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610cf857610cf8611222565b1a60f81b828281518110610d0e57610d0e611222565b60200101906001600160f81b031916908160001a90535060049490941c93610d35816111f5565b9050610cc7565b5083156109975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610363565b600060208284031215610d9d57600080fd5b81356109978161124e565b600080600060408486031215610dbd57600080fd5b833567ffffffffffffffff80821115610dd557600080fd5b818601915086601f830112610de957600080fd5b813581811115610df857600080fd5b8760208260051b8501011115610e0d57600080fd5b6020928301989097509590910135949350505050565b600060208284031215610e3557600080fd5b8151801515811461099757600080fd5b600060208284031215610e5757600080fd5b5035919050565b60008060408385031215610e7157600080fd5b823591506020830135610e838161124e565b809150509250929050565b600060208284031215610ea057600080fd5b81356001600160e01b03198116811461099757600080fd5b60008060408385031215610ecb57600080fd5b8235610ed68161124e565b91506020830135610e838161124e565b600080600060608486031215610efb57600080fd5b8335610f068161124e565b92506020840135610f168161124e565b91506040840135610f268161124e565b809150509250925092565b60008060008060808587031215610f4757600080fd5b8435610f528161124e565b93506020850135610f628161124e565b92506040850135610f728161124e565b9396929550929360600135925050565b600080600060608486031215610f9757600080fd5b8335610fa28161124e565b92506020840135610fb28161124e565b929592945050506040919091013590565b600060208284031215610fd557600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516110148160178501602088016111c9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516110458160288401602088016111c9565b01602801949350505050565b6060808252810184905260008560808301825b878110156110945782356110778161124e565b6001600160a01b0316825260209283019290910190600101611064565b50602084019590955250506001600160a01b039190911660409091015292915050565b60208152600082518060208401526110d68160408501602087016111c9565b601f01601f19169190910160400192915050565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60208082526023908201527f43616c6c6572206973206e6f742074686520504f5254464f4c494f5f4d414e4160408201526223a2a960e91b606082015260800190565b600082198211156111a5576111a561120c565b500190565b60008160001904831182151516156111c4576111c461120c565b500290565b60005b838110156111e45781810151838201526020016111cc565b83811115610a9c5750506000910152565b6000816112045761120461120c565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461126357600080fd5b5056fe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051a2646970667358221220c5e15eae1d7290e74eab138c1c346deab983f51a5dfabc2a77d5361ad55d268564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address,address)": {
        "details": "proxy to IERC20().allowance();"
      },
      "approve(address,address,uint256)": {
        "details": "proxy to IERC20().approve();"
      },
      "balanceOf(address,address)": {
        "details": "proxy to IERC20().balanceOf();"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(address)": {
        "details": "proxy to IERC20().totalSupply();"
      },
      "transfer(address,address,uint256)": {
        "details": "proxy to IERC20().transfer();"
      },
      "transferFrom(address,address,address,uint256)": {
        "details": "proxy to IERC20().transferFrom();"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Vault address is used as owner for all tokens for Overnights. So you able to use Vault address to check any tokens balances. Vault doesn't know about what it has and how mauch. Vault can contain any tokens but only IERC20 could be transfered in real work. NOTE: currently work with ETH/MATIC or other payments not realised. NOTE: not used SafeERC20 and it may be changed in future",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 11215,
        "contract": "contracts/Vault.sol:Vault",
        "label": "aaveReward",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAaveIncentivesController)13936"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAaveIncentivesController)13936": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Vault.sol:Vault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Vault.sol:Vault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}