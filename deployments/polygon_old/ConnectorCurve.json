{
  "address": "0xB7DDd4EB8aF1A9C73C6DDdD3f0eEb5efe43bECd3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "UpdatedPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract iCurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiar",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiar",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e0174ef253b1a93a7afc8384690e93708caafac7e9e3a4238f7f9a49f6f7787",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xB7DDd4EB8aF1A9C73C6DDdD3f0eEb5efe43bECd3",
    "transactionIndex": 76,
    "gasUsed": "1111235",
    "logsBloom": "0x
    "blockHash": "0xf3f53c0f8bef184a61946dbe4436ea515da5a91824274500a40b188a91146866",
    "transactionHash": "0x1e0174ef253b1a93a7afc8384690e93708caafac7e9e3a4238f7f9a49f6f7787",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 22233711,
        "transactionHash": "0x1e0174ef253b1a93a7afc8384690e93708caafac7e9e3a4238f7f9a49f6f7787",
        "address": "0xB7DDd4EB8aF1A9C73C6DDdD3f0eEb5efe43bECd3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 378,
        "blockHash": "0xf3f53c0f8bef184a61946dbe4436ea515da5a91824274500a40b188a91146866"
      },
      {
        "transactionIndex": 76,
        "blockNumber": 22233711,
        "transactionHash": "0x1e0174ef253b1a93a7afc8384690e93708caafac7e9e3a4238f7f9a49f6f7787",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000766fdecf1c0400000000000000000000000000000000000000000000000000d11ad6708312dae800000000000000000000000000000000000000000000aaec12afebc89521317a000000000000000000000000000000000000000000000000d0a46691b3f6d6e800000000000000000000000000000000000000000000aaec13265ba7643d357a",
        "logIndex": 379,
        "blockHash": "0xf3f53c0f8bef184a61946dbe4436ea515da5a91824274500a40b188a91146866"
      }
    ],
    "blockNumber": 22233711,
    "cumulativeGasUsed": "11591905",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5940fe62ab9ebf2b846c1724dc847104",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"UpdatedPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract iCurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiar\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiar\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/ConnectorCurve.sol\":\"ConnectorCurve\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/connectors/ConnectorCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IConnector.sol\\\";\\nimport \\\"./curve/interfaces/iCurvePool.sol\\\";\\n\\ncontract ConnectorCurve is IConnector, Ownable {\\n    iCurvePool public pool;\\n\\n    event UpdatedPool(address pool);\\n\\n    function setPool(address _pool) public onlyOwner {\\n        require(_pool != address(0), \\\"Zero address not allowed\\\");\\n        pool = iCurvePool(_pool);\\n        emit UpdatedPool(_pool);\\n    }\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) public override {\\n        uint256[3] memory amounts;\\n        for (uint256 i = 0; i < 3; i++) {\\n            address coin = pool.coins(i);\\n            if (coin == _asset) {\\n                IERC20(_asset).approve(address(pool), _amount);\\n                // \\u043d\\u043e\\u043c\\u0435\\u0440 \\u043f\\u043e\\u0437\\u0438\\u0446\\u0438\\u0438 \\u0432 \\u043c\\u0430\\u0441\\u0441\\u0438\\u0432\\u0435 (amounts) \\u043e\\u043f\\u0440\\u0435\\u0434\\u0435\\u043b\\u044f\\u0435\\u0442 \\u043a\\u0430\\u043a\\u043e\\u0439 \\u0430\\u043a\\u0442\\u0438\\u0432 (_asset) \\u0438 \\u0432 \\u043a\\u0430\\u043a\\u043e\\u043c \\u043a\\u043e\\u043b\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0435 (_amount)\\n                // \\u043d\\u0430 \\u0441\\u0442\\u043e\\u0440\\u043e\\u043d\\u0435 \\u043a\\u0435\\u0440\\u0432\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0437\\u0430\\u0441\\u0442\\u0435\\u0439\\u043a\\u0430\\u043d\\u043e\\n                amounts[uint256(i)] = _amount;\\n                uint256 lpTokAmount = pool.calc_token_amount(amounts, true);\\n                //TODO: \\u043f\\u0440\\u043e\\u0446\\u0435\\u043d\\u0442\\u0430\\u0436\\u0438 \\u043a\\u0443\\u0434\\u0430\\u0442\\u043e \\u0432\\u044b\\u043d\\u0435\\u0441\\u0442\\u0438, slippage\\n                uint256 retAmount = pool.add_liquidity(amounts, (lpTokAmount * 99) / 100, false);\\n                IERC20(pool.lp_token()).transfer(_beneficiar, retAmount);\\n\\n                return;\\n            } else {\\n                amounts[i] = 0;\\n            }\\n        }\\n        revert(\\\"can't find active for staking in pool\\\");\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) public override returns (uint256) {\\n        uint256[3] memory amounts;\\n        for (uint256 i = 0; i < 3; i++) {\\n            address coin = pool.coins(i);\\n\\n            if (coin == _asset) {\\n                amounts[i] = _amount;\\n\\n                IERC20 lpToken = IERC20(pool.lp_token());\\n                uint256 onConnectorLpTokenAmount = lpToken.balanceOf(address(this));\\n\\n                uint256 lpTokAmount = pool.calc_token_amount(amounts, false);\\n                // _one_coin \\u0434\\u043b\\u044f \\u0432\\u043e\\u0437\\u0432\\u0440\\u0430\\u0442\\u0430 \\u043a\\u043e\\u043d\\u043a\\u0440\\u0435\\u0442\\u043d\\u043e\\u0439 \\u043c\\u043e\\u043d\\u0435\\u0442\\u044b (_assest)\\n                uint256 withdrawAmount = pool.calc_withdraw_one_coin(lpTokAmount, int128(uint128(i)));\\n                if (withdrawAmount > onConnectorLpTokenAmount) {\\n                    revert(string(\\n                        abi.encodePacked(\\n                            \\\"Not enough lpToken own \\\",\\n                            \\\" _amount: \\\",\\n                            uint2str(_amount),\\n                            \\\" lpTok: \\\",\\n                            uint2str(lpTokAmount),\\n                            \\\" onConnectorLpTokenAmount: \\\",\\n                            uint2str(onConnectorLpTokenAmount),\\n                            \\\" withdrawAmount: \\\",\\n                            uint2str(withdrawAmount)\\n                        )\\n                    ));\\n                }\\n\\n                lpToken.approve(address(pool), lpTokAmount);\\n\\n                //TODO: use withdrawAmount?\\n                uint256 retAmount = pool.remove_liquidity_one_coin(lpTokAmount, int128(uint128(i)), 0);\\n\\n                IERC20(_asset).transfer(_beneficiar, retAmount);\\n                lpToken.transfer(\\n                    _beneficiar,\\n                    lpToken.balanceOf(address(this))\\n                );\\n                return retAmount;\\n            } else {\\n                amounts[i] = 0;\\n            }\\n        }\\n        revert(\\\"can't find active for withdraw from pool\\\");\\n    }\\n\\n    //TODO: remove\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x050542a5c0beca3d2857f70c6c9e3acb69b90839c4b7610eb1fd11bd0a5fc02f\",\"license\":\"MIT\"},\"contracts/connectors/curve/interfaces/iCurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Connector to curve->aave\\n/// @notice from https://github.com/curvefi/curve-contract-polygon/blob/master/contracts/pools/aave/StableSwapAave.vy\\n/// @dev check number of coins in pool and add functions  with necessary  uint256[N_COINS]\\n\\ninterface iCurvePool {\\n\\n// def add_liquidity(_amounts: uint256[N_COINS], _min_mint_amount: uint256, _use_underlying: bool = False) -> uint256:\\nfunction add_liquidity (uint[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256); //check uint[3] memory or calldata\\n\\n /** def remove_liquidity(\\n    _amount: uint256,\\n    _min_amounts: uint256[N_COINS],\\n    _use_underlying: bool = False,\\n) -> uint256[N_COINS]:\\n */\\nfunction remove_liquidity (uint256 _amounts, uint[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory ); //check uint[3] memory or calldata\\nfunction underlying_coins (uint i ) external view returns (address);\\nfunction lp_token () external view returns (address);\\nfunction calc_token_amount(uint[3] memory _amounts, bool _is_deposite) external view  returns (uint256);\\nfunction coins(uint256 i) external view returns (address);\\nfunction get_virtual_price() external view returns (uint256);\\n// StableSwap.get_dy(i: int128, j: int128, _dx: uint256) \\u2192 uint256: view\\nfunction get_dy(int128 i, int128 j, uint256 _dx ) external view returns (uint256);\\nfunction calc_withdraw_one_coin(uint256 _amount, int128 i) external view returns (uint256);\\n//remove_liquidity_one_coin(_token_amount: uint256, i: int128, _min_amount: uint256) \\u2192 uint256\\nfunction remove_liquidity_one_coin(uint256 _token_amount , int128 i, uint256 _min_amount) external returns  (uint256);\\n// StableSwap.remove_liquidity_imbalance(_amounts: uint256[N_COINS], _max_burn_amount: uint256) \\u2192 uint256\\nfunction remove_liquidity_imbalance(uint[3] memory _amounts, uint256 _maxAmount ) external returns (uint256);\\n}\",\"keccak256\":\"0xb41a49d589ce46784f454d9feb30a44b2cfd93519cb14676d7a83a34a957e623\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112b18061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100da5780638da5cb5b146100e2578063926e31d6146100f3578063f2fde38b1461011457600080fd5b806316f0115b14610082578063294091cd146100b25780634437152a146100c7575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c56100c0366004610f11565b610127565b005b6100c56100d5366004610ed7565b610537565b6100c561060b565b6000546001600160a01b0316610095565b610106610101366004610f11565b610641565b6040519081526020016100a9565b6100c5610122366004610ed7565b610cc6565b61012f610eb9565b60005b60038110156104db5760015460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b15801561018057600080fd5b505afa158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b89190610ef4565b9050856001600160a01b0316816001600160a01b031614156104af5760015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a9190610f53565b508483836003811061026e5761026e61123a565b602002015260018054604051633883e11960e01b81526000926001600160a01b0390921691633883e119916102a79188916004016110a8565b60206040518083038186803b1580156102bf57600080fd5b505afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f79190610f75565b6001549091506000906001600160a01b0316632b6e993a86606461031c86606361117d565b6103269190611169565b60006040518463ffffffff1660e01b8152600401610346939291906110c5565b602060405180830381600087803b15801561036057600080fd5b505af1158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610f75565b9050600160009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e857600080fd5b505afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190610ef4565b60405163a9059cbb60e01b81526001600160a01b03888116600483015260248201849052919091169063a9059cbb90604401602060405180830381600087803b15801561046c57600080fd5b505af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610f53565b505050505050505050565b60008383600381106104c3576104c361123a565b602002015250806104d3816111df565b915050610132565b5060405162461bcd60e51b815260206004820152602560248201527f63616e27742066696e642061637469766520666f72207374616b696e6720696e604482015264081c1bdbdb60da1b60648201526084015b60405180910390fd5b6000546001600160a01b031633146105615760405162461bcd60e51b815260040161052e9061111c565b6001600160a01b0381166105b75760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161052e565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fd50df7b632d9dd4177a35984990e76264db301d1fe81eaefb3713e915aab8fd89060200160405180910390a150565b6000546001600160a01b031633146106355760405162461bcd60e51b815260040161052e9061111c565b61063f6000610d61565b565b600061064b610eb9565b60005b6003811015610c655760015460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b15801561069c57600080fd5b505afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190610ef4565b9050866001600160a01b0316816001600160a01b03161415610c3957858383600381106107035761070361123a565b6020020181815250506000600160009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610ef4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108119190610f75565b600154604051633883e11960e01b81529192506000916001600160a01b0390911690633883e1199061084990899085906004016110a8565b60206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190610f75565b60015460405163cc2b27d760e01b815260048101839052600f88900b60248201529192506000916001600160a01b039091169063cc2b27d79060440160206040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190610f75565b90508281111561098c576109388a610db1565b61094183610db1565b61094a85610db1565b61095384610db1565b6040516020016109669493929190610fb7565b60408051601f198184030181529082905262461bcd60e51b825261052e916004016110e9565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529085169063095ea7b390604401602060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190610f53565b50600154604051630d2680e960e11b815260048101849052600f88900b6024820152600060448201819052916001600160a01b031690631a4d01d290606401602060405180830381600087803b158015610a6b57600080fd5b505af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190610f75565b60405163a9059cbb60e01b81526001600160a01b038c8116600483015260248201839052919250908d169063a9059cbb90604401602060405180830381600087803b158015610af157600080fd5b505af1158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190610f53565b506040516370a0823160e01b81523060048201526001600160a01b0386169063a9059cbb908c9083906370a082319060240160206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190610f75565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190610f53565b509750610cbf9650505050505050565b6000838360038110610c4d57610c4d61123a565b60200201525080610c5d816111df565b91505061064e565b5060405162461bcd60e51b815260206004820152602860248201527f63616e27742066696e642061637469766520666f7220776974686472617720666044820152671c9bdb481c1bdbdb60c21b606482015260840161052e565b9392505050565b6000546001600160a01b03163314610cf05760405162461bcd60e51b815260040161052e9061111c565b6001600160a01b038116610d555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052e565b610d5e81610d61565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610dd55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610dff5780610de9816111df565b9150610df89050600a83611169565b9150610dd9565b60008167ffffffffffffffff811115610e1a57610e1a611250565b6040519080825280601f01601f191660200182016040528015610e44576020820181803683370190505b509050815b8515610eb057610e5a60018261119c565b9050610e67600a876111fa565b610e72906030611151565b60f81b828281518110610e8757610e8761123a565b60200101906001600160f81b031916908160001a905350610ea9600a87611169565b9550610e49565b50949350505050565b60405180606001604052806003906020820280368337509192915050565b600060208284031215610ee957600080fd5b8135610cbf81611266565b600060208284031215610f0657600080fd5b8151610cbf81611266565b600080600060608486031215610f2657600080fd5b8335610f3181611266565b9250602084013591506040840135610f4881611266565b809150509250925092565b600060208284031215610f6557600080fd5b81518015158114610cbf57600080fd5b600060208284031215610f8757600080fd5b5051919050565b8060005b6003811015610fb1578151845260209384019390910190600101610f92565b50505050565b7f4e6f7420656e6f756768206c70546f6b656e206f776e200000000000000000008152690102fb0b6b7bab73a1d160b51b601782015260008551611002816021850160208a016111b3565b6701036382a37b59d160c51b602191840191820152855161102a816029840160208a016111b3565b7f206f6e436f6e6e6563746f724c70546f6b656e416d6f756e743a2000000000006029929091019182015284516110688160448401602089016111b3565b700103bb4ba34323930bba0b6b7bab73a1d1607d1b60449290910191820152835161109a8160558401602088016111b3565b016055019695505050505050565b608081016110b68285610f8e565b82151560608301529392505050565b60a081016110d38286610f8e565b8360608301528215156080830152949350505050565b60208152600082518060208401526111088160408501602087016111b3565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156111645761116461120e565b500190565b60008261117857611178611224565b500490565b60008160001904831182151516156111975761119761120e565b500290565b6000828210156111ae576111ae61120e565b500390565b60005b838110156111ce5781810151838201526020016111b6565b83811115610fb15750506000910152565b60006000198214156111f3576111f361120e565b5060010190565b60008261120957611209611224565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d5e57600080fdfea2646970667358221220bf422a44579fadef89e915a223753a1e7d186f0c59f902c9dd858bd5c052363564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100da5780638da5cb5b146100e2578063926e31d6146100f3578063f2fde38b1461011457600080fd5b806316f0115b14610082578063294091cd146100b25780634437152a146100c7575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c56100c0366004610f11565b610127565b005b6100c56100d5366004610ed7565b610537565b6100c561060b565b6000546001600160a01b0316610095565b610106610101366004610f11565b610641565b6040519081526020016100a9565b6100c5610122366004610ed7565b610cc6565b61012f610eb9565b60005b60038110156104db5760015460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b15801561018057600080fd5b505afa158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b89190610ef4565b9050856001600160a01b0316816001600160a01b031614156104af5760015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a9190610f53565b508483836003811061026e5761026e61123a565b602002015260018054604051633883e11960e01b81526000926001600160a01b0390921691633883e119916102a79188916004016110a8565b60206040518083038186803b1580156102bf57600080fd5b505afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f79190610f75565b6001549091506000906001600160a01b0316632b6e993a86606461031c86606361117d565b6103269190611169565b60006040518463ffffffff1660e01b8152600401610346939291906110c5565b602060405180830381600087803b15801561036057600080fd5b505af1158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610f75565b9050600160009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e857600080fd5b505afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190610ef4565b60405163a9059cbb60e01b81526001600160a01b03888116600483015260248201849052919091169063a9059cbb90604401602060405180830381600087803b15801561046c57600080fd5b505af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610f53565b505050505050505050565b60008383600381106104c3576104c361123a565b602002015250806104d3816111df565b915050610132565b5060405162461bcd60e51b815260206004820152602560248201527f63616e27742066696e642061637469766520666f72207374616b696e6720696e604482015264081c1bdbdb60da1b60648201526084015b60405180910390fd5b6000546001600160a01b031633146105615760405162461bcd60e51b815260040161052e9061111c565b6001600160a01b0381166105b75760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161052e565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fd50df7b632d9dd4177a35984990e76264db301d1fe81eaefb3713e915aab8fd89060200160405180910390a150565b6000546001600160a01b031633146106355760405162461bcd60e51b815260040161052e9061111c565b61063f6000610d61565b565b600061064b610eb9565b60005b6003811015610c655760015460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b15801561069c57600080fd5b505afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190610ef4565b9050866001600160a01b0316816001600160a01b03161415610c3957858383600381106107035761070361123a565b6020020181815250506000600160009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610ef4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108119190610f75565b600154604051633883e11960e01b81529192506000916001600160a01b0390911690633883e1199061084990899085906004016110a8565b60206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190610f75565b60015460405163cc2b27d760e01b815260048101839052600f88900b60248201529192506000916001600160a01b039091169063cc2b27d79060440160206040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190610f75565b90508281111561098c576109388a610db1565b61094183610db1565b61094a85610db1565b61095384610db1565b6040516020016109669493929190610fb7565b60408051601f198184030181529082905262461bcd60e51b825261052e916004016110e9565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529085169063095ea7b390604401602060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190610f53565b50600154604051630d2680e960e11b815260048101849052600f88900b6024820152600060448201819052916001600160a01b031690631a4d01d290606401602060405180830381600087803b158015610a6b57600080fd5b505af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190610f75565b60405163a9059cbb60e01b81526001600160a01b038c8116600483015260248201839052919250908d169063a9059cbb90604401602060405180830381600087803b158015610af157600080fd5b505af1158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190610f53565b506040516370a0823160e01b81523060048201526001600160a01b0386169063a9059cbb908c9083906370a082319060240160206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190610f75565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190610f53565b509750610cbf9650505050505050565b6000838360038110610c4d57610c4d61123a565b60200201525080610c5d816111df565b91505061064e565b5060405162461bcd60e51b815260206004820152602860248201527f63616e27742066696e642061637469766520666f7220776974686472617720666044820152671c9bdb481c1bdbdb60c21b606482015260840161052e565b9392505050565b6000546001600160a01b03163314610cf05760405162461bcd60e51b815260040161052e9061111c565b6001600160a01b038116610d555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052e565b610d5e81610d61565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610dd55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610dff5780610de9816111df565b9150610df89050600a83611169565b9150610dd9565b60008167ffffffffffffffff811115610e1a57610e1a611250565b6040519080825280601f01601f191660200182016040528015610e44576020820181803683370190505b509050815b8515610eb057610e5a60018261119c565b9050610e67600a876111fa565b610e72906030611151565b60f81b828281518110610e8757610e8761123a565b60200101906001600160f81b031916908160001a905350610ea9600a87611169565b9550610e49565b50949350505050565b60405180606001604052806003906020820280368337509192915050565b600060208284031215610ee957600080fd5b8135610cbf81611266565b600060208284031215610f0657600080fd5b8151610cbf81611266565b600080600060608486031215610f2657600080fd5b8335610f3181611266565b9250602084013591506040840135610f4881611266565b809150509250925092565b600060208284031215610f6557600080fd5b81518015158114610cbf57600080fd5b600060208284031215610f8757600080fd5b5051919050565b8060005b6003811015610fb1578151845260209384019390910190600101610f92565b50505050565b7f4e6f7420656e6f756768206c70546f6b656e206f776e200000000000000000008152690102fb0b6b7bab73a1d160b51b601782015260008551611002816021850160208a016111b3565b6701036382a37b59d160c51b602191840191820152855161102a816029840160208a016111b3565b7f206f6e436f6e6e6563746f724c70546f6b656e416d6f756e743a2000000000006029929091019182015284516110688160448401602089016111b3565b700103bb4ba34323930bba0b6b7bab73a1d1607d1b60449290910191820152835161109a8160558401602088016111b3565b016055019695505050505050565b608081016110b68285610f8e565b82151560608301529392505050565b60a081016110d38286610f8e565b8360608301528215156080830152949350505050565b60208152600082518060208401526111088160408501602087016111b3565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156111645761116461120e565b500190565b60008261117857611178611224565b500490565b60008160001904831182151516156111975761119761120e565b500290565b6000828210156111ae576111ae61120e565b500390565b60005b838110156111ce5781810151838201526020016111b6565b83811115610fb15750506000910152565b60006000198214156111f3576111f361120e565b5060010190565b60008261120957611209611224565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d5e57600080fdfea2646970667358221220bf422a44579fadef89e915a223753a1e7d186f0c59f902c9dd858bd5c052363564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/connectors/ConnectorCurve.sol:ConnectorCurve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7312,
        "contract": "contracts/connectors/ConnectorCurve.sol:ConnectorCurve",
        "label": "pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(iCurvePool)8731"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(iCurvePool)8731": {
        "encoding": "inplace",
        "label": "contract iCurvePool",
        "numberOfBytes": "20"
      }
    }
  }
}