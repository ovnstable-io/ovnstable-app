{
  "address": "0xC5845E9BA89A000808150E5882670Fe0D972C974",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mUsdToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_imUsdToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imUsdToken",
      "outputs": [
        {
          "internalType": "contract ISavingsContractV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mUsdToken",
      "outputs": [
        {
          "internalType": "contract IMasset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fc03ff786826858f6c5700b8f8a22b39e76513902e5c999270f633b28cb2e8b",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xC5845E9BA89A000808150E5882670Fe0D972C974",
    "transactionIndex": 7,
    "gasUsed": "484010",
    "logsBloom": "0x
    "blockHash": "0xdaae1706b41d22f3ed33d1ba3f1d28efc20f6b1be8fd15b75862754b58ca763c",
    "transactionHash": "0x6fc03ff786826858f6c5700b8f8a22b39e76513902e5c999270f633b28cb2e8b",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 24143216,
        "transactionHash": "0x6fc03ff786826858f6c5700b8f8a22b39e76513902e5c999270f633b28cb2e8b",
        "address": "0xC5845E9BA89A000808150E5882670Fe0D972C974",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xdaae1706b41d22f3ed33d1ba3f1d28efc20f6b1be8fd15b75862754b58ca763c"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 24143216,
        "transactionHash": "0x6fc03ff786826858f6c5700b8f8a22b39e76513902e5c999270f633b28cb2e8b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007a4f76b813fc240000000000000000000000000000000000000000000000058dd715112bb760b5000000000000000000000000000000000000000000008849cafd79d5a6f9d0080000000000000000000000000000000000000000000000058d5cc59a73a36491000000000000000000000000000000000000000000008849cb77c94c5f0dcc2c",
        "logIndex": 15,
        "blockHash": "0xdaae1706b41d22f3ed33d1ba3f1d28efc20f6b1be8fd15b75862754b58ca763c"
      }
    ],
    "blockNumber": 24143216,
    "cumulativeGasUsed": "1513335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0xE840B73E5287865EEc17d250bFb1536704B43B21",
    "0x5290Ad3d83476CA6A2b178Cd9727eE1EF72432af"
  ],
  "solcInputHash": "fe95cbbb2d97e4d95ece85093db98e18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mUsdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_imUsdToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imUsdToken\",\"outputs\":[{\"internalType\":\"contract ISavingsContractV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mUsdToken\",\"outputs\":[{\"internalType\":\"contract IMasset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"denominator()\":{\"notice\":\"Denominator for normalization. Default 10**18.\"},\"getUsdcBuyPrice()\":{\"notice\":\"Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18\"},\"getUsdcSellPrice()\":{\"notice\":\"Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price_getters/VimUsdPriceGetter.sol\":\"VimUsdPriceGetter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/connectors/mstable/MassetStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\n    struct BassetPersonal {\\n        // Address of the bAsset\\n        address addr;\\n        // Address of the bAsset\\n        address integrator;\\n        // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\\n        bool hasTxFee; // takes a byte in storage\\n        // Status of the bAsset\\n        BassetStatus status;\\n    }\\n\\n    struct BassetData {\\n        // 1 Basset * ratio / ratioScale == x Masset (relative value)\\n        // If ratio == 10e8 then 1 bAsset = 10 mAssets\\n        // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\\n        uint128 ratio;\\n        // Amount of the Basset that is held in Collateral\\n        uint128 vaultBalance;\\n    }\\n\\n// Status of the Basset - has it broken its peg?\\n    enum BassetStatus {\\n        Default,\\n        Normal,\\n        BrokenBelowPeg,\\n        BrokenAbovePeg,\\n        Blacklisted,\\n        Liquidating,\\n        Liquidated,\\n        Failed\\n    }\\n\\n    struct BasketState {\\n        bool undergoingRecol;\\n        bool failed;\\n    }\\n\\n    struct FeederConfig {\\n        uint256 supply;\\n        uint256 a;\\n        WeightLimits limits;\\n    }\\n\\n    struct InvariantConfig {\\n        uint256 supply;\\n        uint256 a;\\n        WeightLimits limits;\\n        uint256 recolFee;\\n    }\\n\\n    struct BasicConfig {\\n        uint256 a;\\n        WeightLimits limits;\\n    }\\n\\n    struct WeightLimits {\\n        uint128 min;\\n        uint128 max;\\n    }\\n\\n    struct AmpData {\\n        uint64 initialA;\\n        uint64 targetA;\\n        uint64 rampStartTime;\\n        uint64 rampEndTime;\\n    }\\n\\n    struct FeederData {\\n        uint256 swapFee;\\n        uint256 redemptionFee;\\n        uint256 govFee;\\n        uint256 pendingFees;\\n        uint256 cacheSize;\\n        BassetPersonal[] bAssetPersonal;\\n        BassetData[] bAssetData;\\n        AmpData ampData;\\n        WeightLimits weightLimits;\\n    }\\n\\n    struct MassetData {\\n        uint256 swapFee;\\n        uint256 redemptionFee;\\n        uint256 cacheSize;\\n        uint256 surplus;\\n        BassetPersonal[] bAssetPersonal;\\n        BassetData[] bAssetData;\\n        BasketState basket;\\n        AmpData ampData;\\n        WeightLimits weightLimits;\\n    }\\n\\n    struct AssetData {\\n        uint8 idx;\\n        uint256 amt;\\n        BassetPersonal personal;\\n    }\\n\\n    struct Asset {\\n        uint8 idx;\\n        address addr;\\n        bool exists;\\n    }\",\"keccak256\":\"0xaf14c39d80e781cf3e9973d2e670a5ae1a5e0756766c624063648e2a25da604b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/connectors/mstable/interfaces/IMasset.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"../MassetStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IMasset is IERC20 {\\n    // Mint\\n    function mint(\\n        address _input,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function mintMulti(\\n        address[] calldata _inputs,\\n        uint256[] calldata _inputQuantities,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function getMintOutput(address _input, uint256 _inputQuantity)\\n    external\\n    view\\n    virtual\\n    returns (uint256 mintOutput);\\n\\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\\n    external\\n    view\\n    virtual\\n    returns (uint256 mintOutput);\\n\\n    // Swaps\\n    function swap(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 swapOutput);\\n\\n    function getSwapOutput(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity\\n    ) external view virtual returns (uint256 swapOutput);\\n\\n    // Redemption\\n    function redeem(\\n        address _output,\\n        uint256 _mAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 outputQuantity);\\n\\n    function redeemMasset(\\n        uint256 _mAssetQuantity,\\n        uint256[] calldata _minOutputQuantities,\\n        address _recipient\\n    ) external virtual returns (uint256[] memory outputQuantities);\\n\\n    function redeemExactBassets(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities,\\n        uint256 _maxMassetQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mAssetRedeemed);\\n\\n    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\\n    external\\n    view\\n    virtual\\n    returns (uint256 bAssetOutput);\\n\\n    function getRedeemExactBassetsOutput(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities\\n    ) external view virtual returns (uint256 mAssetAmount);\\n\\n    // Views\\n    function getBasket() external view virtual returns (bool, bool);\\n\\n    function getBasset(address _token)\\n    external\\n    view\\n    virtual\\n    returns (BassetPersonal memory personal, BassetData memory data);\\n\\n    function getBassets()\\n    external\\n    view\\n    virtual\\n    returns (BassetPersonal[] memory personal, BassetData[] memory data);\\n\\n    function bAssetIndexes(address) external view virtual returns (uint8);\\n\\n    function getPrice() external view virtual returns (uint256 price, uint256 k);\\n\\n    // SavingsManager\\n    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\\n\\n    function collectPlatformInterest()\\n    external\\n    virtual\\n    returns (uint256 mintAmount, uint256 newSupply);\\n\\n    // Admin\\n    function setCacheSize(uint256 _cacheSize) external virtual;\\n\\n    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\\n\\n    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\\n\\n    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\\n}\",\"keccak256\":\"0x893e4850663f4cdb410be847aca948a6f653e22cf3f164d456afed33b75fba03\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/connectors/mstable/interfaces/ISavingsContract.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISavingsContractV1 is IERC20 {\\n    function depositInterest(uint256 _amount) external;\\n\\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued);\\n\\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function creditBalances(address) external view returns (uint256);\\n}\\n\\ninterface ISavingsContractV2 is IERC20 {\\n    // DEPRECATED but still backwards compatible\\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\\n\\n    function creditBalances(address) external view returns (uint256); // V1 & V2 (use balanceOf)\\n\\n    // --------------------------------------------\\n\\n    function depositInterest(uint256 _amount) external; // V1 & V2\\n\\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued); // V1 & V2\\n\\n    function depositSavings(uint256 _amount, address _beneficiary)\\n        external\\n        returns (uint256 creditsIssued); // V2\\n\\n    function redeemCredits(uint256 _amount) external returns (uint256 underlyingReturned); // V2\\n\\n    function redeemUnderlying(uint256 _amount) external returns (uint256 creditsBurned); // V2\\n\\n    function exchangeRate() external view returns (uint256); // V1 & V2\\n\\n    function balanceOfUnderlying(address _user) external view returns (uint256 underlying); // V2\\n\\n    function underlyingToCredits(uint256 _underlying) external view returns (uint256 credits); // V2\\n\\n    function creditsToUnderlying(uint256 _credits) external view returns (uint256 underlying); // V2\\n\\n    function underlying() external view returns (IERC20 underlyingMasset); // V2\\n}\",\"keccak256\":\"0x581efcf3e0d2becab3f4dc90e79e6acbf3c30701970c2d3dd9e4fde262e5fa09\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/price_getters/AbstractPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\ncontract AbstractPriceGetter is IPriceGetter {\\n    uint256 public constant DENOMINATOR = 10**18;\\n\\n    function getUsdcBuyPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function getUsdcSellPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function denominator() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x71a4dc4a01bae2264bd097e07ea93ca929ca304390677644861fb8205cc0a705\",\"license\":\"MIT\"},\"contracts/price_getters/VimUsdPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../price_getters/AbstractPriceGetter.sol\\\";\\nimport \\\"../connectors/mstable/interfaces/IMasset.sol\\\";\\nimport \\\"../connectors/mstable/interfaces/ISavingsContract.sol\\\";\\n\\ncontract VimUsdPriceGetter is AbstractPriceGetter, Ownable {\\n\\n    address public usdcToken;\\n    IMasset public mUsdToken;\\n    ISavingsContractV2 public imUsdToken;\\n\\n    constructor(\\n        address _usdcToken,\\n        address _mUsdToken,\\n        address _imUsdToken\\n    ) {\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_mUsdToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_imUsdToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = _usdcToken;\\n        mUsdToken = IMasset(_mUsdToken);\\n        imUsdToken = ISavingsContractV2(_imUsdToken);\\n    }\\n\\n    function getUsdcBuyPrice() external view override returns (uint256) {\\n        uint256 mintOutput = mUsdToken.getMintOutput(usdcToken, (10 ** 6));\\n        return (10 ** 36) / imUsdToken.underlyingToCredits(mintOutput);\\n    }\\n\\n    function getUsdcSellPrice() external view override returns (uint256) {\\n        uint256 underlying = imUsdToken.creditsToUnderlying(10 ** 18);\\n        return mUsdToken.getRedeemOutput(usdcToken, underlying) * (10 ** 12);\\n    }\\n}\\n\",\"keccak256\":\"0x638c61c4dc4303141bf24efd5425a989c27f766e30bcd3dfc7c6b4f2c819ad3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161082638038061082683398101604081905261002f916101b7565b6100383361014b565b6001600160a01b0383166100815760405162461bcd60e51b8152602060048201526018602482015260008051602061080683398151915260448201526064015b60405180910390fd5b6001600160a01b0382166100c55760405162461bcd60e51b815260206004820152601860248201526000805160206108068339815191526044820152606401610078565b6001600160a01b0381166101095760405162461bcd60e51b815260206004820152601860248201526000805160206108068339815191526044820152606401610078565b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556101fa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146101b257600080fd5b919050565b6000806000606084860312156101cc57600080fd5b6101d58461019b565b92506101e36020850161019b565b91506101f16040850161019b565b90509250925092565b6105fd806102096000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063918f867411610066578063918f86741461011757806396ce079514610126578063c0cbad4514610134578063ea24978414610147578063f2fde38b1461014f57600080fd5b806305bee8ac146100a357806311eac855146100d35780632b8455f1146100e6578063715018a6146100fc5780638da5cb5b14610106575b600080fd5b6002546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100b6906001600160a01b031681565b6100ee610162565b6040519081526020016100ca565b610104610287565b005b6000546001600160a01b03166100b6565b6100ee670de0b6b3a764000081565b670de0b6b3a76400006100ee565b6003546100b6906001600160a01b031681565b6100ee6102f2565b61010461015d36600461052f565b610414565b600354604051633bc0d82d60e11b8152670de0b6b3a7640000600482015260009182916001600160a01b0390911690637781b05a9060240160206040518083038186803b1580156101b257600080fd5b505afa1580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea919061055f565b600254600154604051633c554c3f60e11b81526001600160a01b0391821660048201526024810184905292935016906378aa987e9060440160206040518083038186803b15801561023a57600080fd5b505afa15801561024e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610272919061055f565b6102819064e8d4a5100061059a565b91505090565b6000546001600160a01b031633146102e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102f060006104df565b565b60025460015460405163119849cf60e01b81526001600160a01b039182166004820152620f424060248201526000928392169063119849cf9060440160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e919061055f565b60035460405163087c71b560e31b8152600481018390529192506001600160a01b0316906343e38da89060240160206040518083038186803b1580156103c357600080fd5b505afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb919061055f565b610281906ec097ce7bc90715b34b9f1000000000610578565b6000546001600160a01b0316331461046e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dd565b6001600160a01b0381166104d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102dd565b6104dc816104df565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561054157600080fd5b81356001600160a01b038116811461055857600080fd5b9392505050565b60006020828403121561057157600080fd5b5051919050565b60008261059557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156105c257634e487b7160e01b600052601160045260246000fd5b50029056fea264697066735822122097279a070522c0596df064aec56b86eb09e27c0047c54d33d3f97d90a8a086ed64736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063918f867411610066578063918f86741461011757806396ce079514610126578063c0cbad4514610134578063ea24978414610147578063f2fde38b1461014f57600080fd5b806305bee8ac146100a357806311eac855146100d35780632b8455f1146100e6578063715018a6146100fc5780638da5cb5b14610106575b600080fd5b6002546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100b6906001600160a01b031681565b6100ee610162565b6040519081526020016100ca565b610104610287565b005b6000546001600160a01b03166100b6565b6100ee670de0b6b3a764000081565b670de0b6b3a76400006100ee565b6003546100b6906001600160a01b031681565b6100ee6102f2565b61010461015d36600461052f565b610414565b600354604051633bc0d82d60e11b8152670de0b6b3a7640000600482015260009182916001600160a01b0390911690637781b05a9060240160206040518083038186803b1580156101b257600080fd5b505afa1580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea919061055f565b600254600154604051633c554c3f60e11b81526001600160a01b0391821660048201526024810184905292935016906378aa987e9060440160206040518083038186803b15801561023a57600080fd5b505afa15801561024e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610272919061055f565b6102819064e8d4a5100061059a565b91505090565b6000546001600160a01b031633146102e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102f060006104df565b565b60025460015460405163119849cf60e01b81526001600160a01b039182166004820152620f424060248201526000928392169063119849cf9060440160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e919061055f565b60035460405163087c71b560e31b8152600481018390529192506001600160a01b0316906343e38da89060240160206040518083038186803b1580156103c357600080fd5b505afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb919061055f565b610281906ec097ce7bc90715b34b9f1000000000610578565b6000546001600160a01b0316331461046e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dd565b6001600160a01b0381166104d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102dd565b6104dc816104df565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561054157600080fd5b81356001600160a01b038116811461055857600080fd5b9392505050565b60006020828403121561057157600080fd5b5051919050565b60008261059557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156105c257634e487b7160e01b600052601160045260246000fd5b50029056fea264697066735822122097279a070522c0596df064aec56b86eb09e27c0047c54d33d3f97d90a8a086ed64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "denominator()": {
        "notice": "Denominator for normalization. Default 10**18."
      },
      "getUsdcBuyPrice()": {
        "notice": "Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18"
      },
      "getUsdcSellPrice()": {
        "notice": "Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4749,
        "contract": "contracts/price_getters/VimUsdPriceGetter.sol:VimUsdPriceGetter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25130,
        "contract": "contracts/price_getters/VimUsdPriceGetter.sol:VimUsdPriceGetter",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 25133,
        "contract": "contracts/price_getters/VimUsdPriceGetter.sol:VimUsdPriceGetter",
        "label": "mUsdToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMasset)22665"
      },
      {
        "astId": 25136,
        "contract": "contracts/price_getters/VimUsdPriceGetter.sol:VimUsdPriceGetter",
        "label": "imUsdToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISavingsContractV2)22786"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMasset)22665": {
        "encoding": "inplace",
        "label": "contract IMasset",
        "numberOfBytes": "20"
      },
      "t_contract(ISavingsContractV2)22786": {
        "encoding": "inplace",
        "label": "contract ISavingsContractV2",
        "numberOfBytes": "20"
      }
    }
  }
}