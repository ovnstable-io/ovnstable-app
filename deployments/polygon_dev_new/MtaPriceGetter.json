{
  "address": "0xE090BccbfD5BbB5432Aee93D82EF55fcDE88e49e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmaticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mtaToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerPool1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerPool2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId2",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPool1",
      "outputs": [
        {
          "internalType": "contract IMinimalSwapInfoPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPool2",
      "outputs": [
        {
          "internalType": "contract IMinimalSwapInfoPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId1",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId2",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mtaToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6445ba7da0ab54b2ec3ded6f9b2db285c879cc4ee30d59cab792ae7c0f1018da",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xE090BccbfD5BbB5432Aee93D82EF55fcDE88e49e",
    "transactionIndex": 3,
    "gasUsed": "730922",
    "logsBloom": "0x
    "blockHash": "0xb3d0159996038e4911ee8ed0808c9b197e53417bd4a674d3b4c077a1799d652b",
    "transactionHash": "0x6445ba7da0ab54b2ec3ded6f9b2db285c879cc4ee30d59cab792ae7c0f1018da",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 24143219,
        "transactionHash": "0x6445ba7da0ab54b2ec3ded6f9b2db285c879cc4ee30d59cab792ae7c0f1018da",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b5d45921ae68200000000000000000000000000000000000000000000000058d3c52a8c91eb8b5000000000000000000000000000000000000000000008849e0967b8b7051f0630000000000000000000000000000000000000000000000058c867e4fa7705095000000000000000000000000000000000000000000008849e14c4fe492005883",
        "logIndex": 9,
        "blockHash": "0xb3d0159996038e4911ee8ed0808c9b197e53417bd4a674d3b4c077a1799d652b"
      }
    ],
    "blockNumber": 24143219,
    "cumulativeGasUsed": "1053443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0xf501dd45a1198c2e1b5aef5314a68b9006d842e0",
    "0x614b5038611729ed49e0dED154d8A5d3AF9D1D9E",
    "0x0297e37f1873D2DAb4487Aa67cD56B58E2F27875",
    "0x614b5038611729ed49e0ded154d8a5d3af9d1d9e00010000000000000000001d",
    "0x0297e37f1873d2dab4487aa67cd56b58e2f27875000100000000000000000002"
  ],
  "solcInputHash": "fe95cbbb2d97e4d95ece85093db98e18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mtaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerPool1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerPool2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId2\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPool1\",\"outputs\":[{\"internalType\":\"contract IMinimalSwapInfoPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPool2\",\"outputs\":[{\"internalType\":\"contract IMinimalSwapInfoPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId1\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mtaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"denominator()\":{\"notice\":\"Denominator for normalization. Default 10**18.\"},\"getUsdcBuyPrice()\":{\"notice\":\"Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18\"},\"getUsdcSellPrice()\":{\"notice\":\"Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price_getters/MtaPriceGetter.sol\":\"MtaPriceGetter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"contracts/connectors/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b2d22bff80c423dcd8b10442e1ee1782100321f6bd3c00649e38d8b1f40c91b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0614fa16712fbf61015568ad06ede003075147da1dd773d78bbf52e1925b7b59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xe1424191e0efbf544f52f2510ec3b1ae451f4af9345dae9b25a370a7c496c219\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x517b448a237409bed922c0193f8df5b2ca2f11f4717b2bf85591ad676a6d4fac\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/price_getters/AbstractPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\ncontract AbstractPriceGetter is IPriceGetter {\\n    uint256 public constant DENOMINATOR = 10**18;\\n\\n    function getUsdcBuyPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function getUsdcSellPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function denominator() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x71a4dc4a01bae2264bd097e07ea93ca929ca304390677644861fb8205cc0a705\",\"license\":\"MIT\"},\"contracts/price_getters/MtaPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../price_getters/AbstractPriceGetter.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\n\\ncontract MtaPriceGetter is AbstractPriceGetter {\\n\\n    IVault public balancerVault;\\n    IERC20 public usdcToken;\\n    IERC20 public wmaticToken;\\n    IERC20 public mtaToken;\\n    IMinimalSwapInfoPool public balancerPool1;\\n    IMinimalSwapInfoPool public balancerPool2;\\n    bytes32 public balancerPoolId1;\\n    bytes32 public balancerPoolId2;\\n\\n    constructor(\\n        address _balancerVault,\\n        address _usdcToken,\\n        address _wmaticToken,\\n        address _mtaToken,\\n        address _balancerPool1,\\n        address _balancerPool2,\\n        bytes32 _balancerPoolId1,\\n        bytes32 _balancerPoolId2\\n    ) {\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_wmaticToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_mtaToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerPool1 != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerPool2 != address(0), \\\"Zero address not allowed\\\");\\n        require(_balancerPoolId1 != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n        require(_balancerPoolId2 != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n\\n        balancerVault = IVault(_balancerVault);\\n        usdcToken = IERC20(_usdcToken);\\n        wmaticToken = IERC20(_wmaticToken);\\n        mtaToken = IERC20(_mtaToken);\\n        balancerPool1 = IMinimalSwapInfoPool(_balancerPool1);\\n        balancerPool2 = IMinimalSwapInfoPool(_balancerPool2);\\n        balancerPoolId1 = _balancerPoolId1;\\n        balancerPoolId2 = _balancerPoolId2;\\n    }\\n\\n    function getUsdcBuyPrice() external view override returns (uint256) {\\n        uint256 balanceMta = 10 ** 18;\\n        uint256 balanceWmatic = _onSwap(balancerPool1, balancerPoolId1, IVault.SwapKind.GIVEN_OUT, wmaticToken, mtaToken, balanceMta);\\n        uint256 balanceUsdc = _onSwap(balancerPool2, balancerPoolId2, IVault.SwapKind.GIVEN_OUT, usdcToken, wmaticToken, balanceWmatic);\\n\\n        return balanceUsdc * (10 ** 12);\\n    }\\n\\n    function getUsdcSellPrice() external view override returns (uint256) {\\n        uint256 balanceMta = 10 ** 18;\\n        uint256 balanceWmatic = _onSwap(balancerPool1, balancerPoolId1, IVault.SwapKind.GIVEN_IN, mtaToken, wmaticToken, balanceMta);\\n        uint256 balanceUsdc = _onSwap(balancerPool2, balancerPoolId2, IVault.SwapKind.GIVEN_IN, wmaticToken, usdcToken, balanceWmatic);\\n\\n        return balanceUsdc * (10 ** 12);\\n    }\\n\\n    function _onSwap(IMinimalSwapInfoPool balancerPool,\\n                    bytes32 balancerPoolId,\\n                    IVault.SwapKind kind,\\n                    IERC20 tokenIn,\\n                    IERC20 tokenOut,\\n                    uint256 balance\\n    ) internal view returns (uint256) {\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId);\\n\\n        uint256 balanceIn;\\n        uint256 balanceOut;\\n        for (uint8 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == tokenIn) {\\n                balanceIn = balances[i];\\n            } else if (tokens[i] == tokenOut) {\\n                balanceOut = balances[i];\\n            }\\n        }\\n\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\n        swapRequest.kind = kind;\\n        swapRequest.tokenIn = tokenIn;\\n        swapRequest.tokenOut = tokenOut;\\n        swapRequest.amount = balance;\\n\\n        return balancerPool.onSwap(swapRequest, balanceIn, balanceOut);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5e3d57318e82df453dec349a1a31df3ed8916a38ab2180ca20b8dc2538fc5165\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000c9a38038062000c9a83398101604081905262000034916200031b565b6001600160a01b0388166200007f5760405162461bcd60e51b8152602060048201526018602482015260008051602062000c7a83398151915260448201526064015b60405180910390fd5b6001600160a01b038716620000c65760405162461bcd60e51b8152602060048201526018602482015260008051602062000c7a833981519152604482015260640162000076565b6001600160a01b0386166200010d5760405162461bcd60e51b8152602060048201526018602482015260008051602062000c7a833981519152604482015260640162000076565b6001600160a01b038516620001545760405162461bcd60e51b8152602060048201526018602482015260008051602062000c7a833981519152604482015260640162000076565b6001600160a01b0384166200019b5760405162461bcd60e51b8152602060048201526018602482015260008051602062000c7a833981519152604482015260640162000076565b6001600160a01b038316620001e25760405162461bcd60e51b8152602060048201526018602482015260008051602062000c7a833981519152604482015260640162000076565b81620002315760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640162000076565b80620002805760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640162000076565b600080546001600160a01b03199081166001600160a01b039a8b1617909155600180548216988a169890981790975560028054881696891696909617909555600380548716948816949094179093556004805486169287169290921790915560058054909416941693909317909155600691909155600755620003b0565b80516001600160a01b03811681146200031657600080fd5b919050565b600080600080600080600080610100898b0312156200033957600080fd5b6200034489620002fe565b97506200035460208a01620002fe565b96506200036460408a01620002fe565b95506200037460608a01620002fe565b94506200038460808a01620002fe565b93506200039460a08a01620002fe565b60c08a015160e0909a0151989b979a5095989497939692505050565b6108ba80620003c06000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c8063918f867411610071578063918f86741461014057806396ce07951461014f5780639de3c8271461015d578063abf4be0114610170578063ea24978414610183578063fddf5af81461018b57600080fd5b8062a6a4d6146100b857806311eac855146100e8578063158274a5146100fb5780632b8455f11461010e5780632bb20a3514610124578063372889a51461012d575b600080fd5b6005546100cb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100cb906001600160a01b031681565b6000546100cb906001600160a01b031681565b610116610194565b6040519081526020016100df565b61011660075481565b6004546100cb906001600160a01b031681565b610116670de0b6b3a764000081565b670de0b6b3a7640000610116565b6003546100cb906001600160a01b031681565b6002546100cb906001600160a01b031681565b610116610214565b61011660065481565b600454600654600354600254600093670de0b6b3a76400009385936101cb936001600160a01b039384169386928116911687610277565b6005546007546002546001549394506000936101fb936001600160a01b0390811693928692908216911687610277565b905061020c8164e8d4a510006107ed565b935050505090565b600454600654600254600354600093670de0b6b3a764000093859361024c936001600160a01b03938416936001928116911687610277565b600554600754600180546002549495506000946101fb946001600160a01b0390811694939281169116875b60008054604051631f29a8cd60e31b8152600481018890528291829182916001600160a01b03169063f94d46689060240160006040518083038186803b1580156102c057600080fd5b505afa1580156102d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102fc9190810190610568565b92509250925060008060005b85518160ff1610156103d657896001600160a01b0316868260ff168151811061033357610333610858565b60200260200101516001600160a01b0316141561036e57848160ff168151811061035f5761035f610858565b602002602001015192506103c4565b886001600160a01b0316868260ff168151811061038d5761038d610858565b60200260200101516001600160a01b031614156103c457848160ff16815181106103b9576103b9610858565b602002602001015191505b806103ce8161080c565b915050610308565b50604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820192909252610100810191909152808b600181111561043557610435610842565b9081600181111561044857610448610842565b9052506001600160a01b03808b166020830152898116604080840191909152606083018a90525163274b044360e21b8152908e1690639d2c110c90610495908490879087906004016106d1565b60206040518083038186803b1580156104ad57600080fd5b505afa1580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610649565b9d9c50505050505050505050505050565b600082601f83011261050757600080fd5b8151602061051c610517836107c9565b610798565b80838252828201915082860187848660051b890101111561053c57600080fd5b60005b8581101561055b5781518452928401929084019060010161053f565b5090979650505050505050565b60008060006060848603121561057d57600080fd5b835167ffffffffffffffff8082111561059557600080fd5b818601915086601f8301126105a957600080fd5b815160206105b9610517836107c9565b8083825282820191508286018b848660051b89010111156105d957600080fd5b600096505b848710156106115780516001600160a01b03811681146105fd57600080fd5b8352600196909601959183019183016105de565b509189015191975090935050508082111561062b57600080fd5b50610638868287016104f6565b925050604084015190509250925092565b60006020828403121561065b57600080fd5b5051919050565b6000815180845260005b818110156106885760208185018101518683018201520161066c565b8181111561069a576000602083870101525b50601f01601f19169290920160200192915050565b600281106106cd57634e487b7160e01b600052602160045260246000fd5b9052565b606081526106e36060820185516106af565b600060208501516106ff60808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120610754818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050610785610180840182610662565b6020840195909552505060400152919050565b604051601f8201601f1916810167ffffffffffffffff811182821017156107c1576107c161086e565b604052919050565b600067ffffffffffffffff8211156107e3576107e361086e565b5060051b60200190565b60008160001904831182151516156108075761080761082c565b500290565b600060ff821660ff8114156108235761082361082c565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122063179034e58f2427aa51995548c753ac4971995a8ed3265d58fdf62fd9632f2964736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b35760003560e01c8063918f867411610071578063918f86741461014057806396ce07951461014f5780639de3c8271461015d578063abf4be0114610170578063ea24978414610183578063fddf5af81461018b57600080fd5b8062a6a4d6146100b857806311eac855146100e8578063158274a5146100fb5780632b8455f11461010e5780632bb20a3514610124578063372889a51461012d575b600080fd5b6005546100cb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100cb906001600160a01b031681565b6000546100cb906001600160a01b031681565b610116610194565b6040519081526020016100df565b61011660075481565b6004546100cb906001600160a01b031681565b610116670de0b6b3a764000081565b670de0b6b3a7640000610116565b6003546100cb906001600160a01b031681565b6002546100cb906001600160a01b031681565b610116610214565b61011660065481565b600454600654600354600254600093670de0b6b3a76400009385936101cb936001600160a01b039384169386928116911687610277565b6005546007546002546001549394506000936101fb936001600160a01b0390811693928692908216911687610277565b905061020c8164e8d4a510006107ed565b935050505090565b600454600654600254600354600093670de0b6b3a764000093859361024c936001600160a01b03938416936001928116911687610277565b600554600754600180546002549495506000946101fb946001600160a01b0390811694939281169116875b60008054604051631f29a8cd60e31b8152600481018890528291829182916001600160a01b03169063f94d46689060240160006040518083038186803b1580156102c057600080fd5b505afa1580156102d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102fc9190810190610568565b92509250925060008060005b85518160ff1610156103d657896001600160a01b0316868260ff168151811061033357610333610858565b60200260200101516001600160a01b0316141561036e57848160ff168151811061035f5761035f610858565b602002602001015192506103c4565b886001600160a01b0316868260ff168151811061038d5761038d610858565b60200260200101516001600160a01b031614156103c457848160ff16815181106103b9576103b9610858565b602002602001015191505b806103ce8161080c565b915050610308565b50604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820192909252610100810191909152808b600181111561043557610435610842565b9081600181111561044857610448610842565b9052506001600160a01b03808b166020830152898116604080840191909152606083018a90525163274b044360e21b8152908e1690639d2c110c90610495908490879087906004016106d1565b60206040518083038186803b1580156104ad57600080fd5b505afa1580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610649565b9d9c50505050505050505050505050565b600082601f83011261050757600080fd5b8151602061051c610517836107c9565b610798565b80838252828201915082860187848660051b890101111561053c57600080fd5b60005b8581101561055b5781518452928401929084019060010161053f565b5090979650505050505050565b60008060006060848603121561057d57600080fd5b835167ffffffffffffffff8082111561059557600080fd5b818601915086601f8301126105a957600080fd5b815160206105b9610517836107c9565b8083825282820191508286018b848660051b89010111156105d957600080fd5b600096505b848710156106115780516001600160a01b03811681146105fd57600080fd5b8352600196909601959183019183016105de565b509189015191975090935050508082111561062b57600080fd5b50610638868287016104f6565b925050604084015190509250925092565b60006020828403121561065b57600080fd5b5051919050565b6000815180845260005b818110156106885760208185018101518683018201520161066c565b8181111561069a576000602083870101525b50601f01601f19169290920160200192915050565b600281106106cd57634e487b7160e01b600052602160045260246000fd5b9052565b606081526106e36060820185516106af565b600060208501516106ff60808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120610754818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050610785610180840182610662565b6020840195909552505060400152919050565b604051601f8201601f1916810167ffffffffffffffff811182821017156107c1576107c161086e565b604052919050565b600067ffffffffffffffff8211156107e3576107e361086e565b5060051b60200190565b60008160001904831182151516156108075761080761082c565b500290565b600060ff821660ff8114156108235761082361082c565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122063179034e58f2427aa51995548c753ac4971995a8ed3265d58fdf62fd9632f2964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "denominator()": {
        "notice": "Denominator for normalization. Default 10**18."
      },
      "getUsdcBuyPrice()": {
        "notice": "Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18"
      },
      "getUsdcSellPrice()": {
        "notice": "Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24725,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "balancerVault",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVault)21840"
      },
      {
        "astId": 24728,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 24731,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 24734,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "mtaToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)9027"
      },
      {
        "astId": 24737,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "balancerPool1",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IMinimalSwapInfoPool)21693"
      },
      {
        "astId": 24740,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "balancerPool2",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMinimalSwapInfoPool)21693"
      },
      {
        "astId": 24742,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "balancerPoolId1",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 24744,
        "contract": "contracts/price_getters/MtaPriceGetter.sol:MtaPriceGetter",
        "label": "balancerPoolId2",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)9027": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMinimalSwapInfoPool)21693": {
        "encoding": "inplace",
        "label": "contract IMinimalSwapInfoPool",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)21840": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}